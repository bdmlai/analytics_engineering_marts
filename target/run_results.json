{"logs": [], "results": [{"node": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_daily_wwe_program_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_program_viewership_ratings)\"],\n\t    \"materialized\": 'incremental',\"tags\": 'Phase4B'\n  })\n}}\n\nselect a.broadcast_date_id, a.broadcast_date, d.cal_year_week_begin_date as broadcast_cal_week_begin_date, \nd.cal_year_week_end_date as broadcast_cal_week_end_date, d.cal_year_week_num as broadcast_cal_week_num, \nd.cal_mth_num as broadcast_cal_month_num, d.mth_abbr_nm as broadcast_cal_month_nm, \nsubstring(d.cal_year_qtr_desc, 5, 2) as broadcast_cal_quarter, d.cal_year as broadcast_cal_year,\ne.fin_year_week_begin_date as broadcast_fin_week_begin_date, e.fin_year_week_end_date as broadcast_fin_week_end_date,\ne.financial_year_week_number as broadcast_fin_week_num,e.financial_month_number as broadcast_fin_month_num, \ne.financial_month_name as broadcast_fin_month_nm, e.financial_quarter as broadcast_fin_quarter, e.financial_year as broadcast_fin_year,\na.src_broadcast_network_id, f.broadcast_network_name, a.src_playback_period_cd, a.src_demographic_group, a.src_program_id,a.src_series_name, a.src_daypart_cd,\ng.src_daypart_name, a.program_telecast_rpt_starttime, a.program_telecast_rpt_endtime, a.src_total_duration, a.avg_audience_proj_000, \na.avg_audience_pct, a.avg_audience_pct_nw_cvg_area, a.avg_viewing_hours_units as viewing_minutes_units,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(\n--RAW telecasts broken down are to be rolled up as one with start time as min(start time), end time as max(end time) and all the metrics except --VH are rolled up as time-duration based avg - ( metric 1 * duration 1 + metric 2* duration* 2 + metric 3 * duration 3) /(duration 1 + duration --2 + duration 3) here..\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id,src_series_name, dim_nl_daypart_id, src_daypart_cd,\nmin(program_telecast_rpt_starttime) as program_telecast_rpt_starttime, max(program_telecast_rpt_endtime) as program_telecast_rpt_endtime,\nsum(src_total_duration) as src_total_duration,\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(avg_viewing_hours_units) as avg_viewing_hours_units\nfrom {{source('fds_nl','fact_nl_program_viewership_ratings')}} b\njoin (select dim_nl_series_id,src_series_name from {{source('fds_nl','dim_nl_series')}} where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id = 296881 and src_program_attributes <> '(R)'\n{% if is_incremental() %}\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \n{% endif %}\ngroup by 1,2,3,4,5,6,7,8,9,10\nunion\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id ,src_series_name, dim_nl_daypart_id, src_daypart_cd, program_telecast_rpt_starttime, program_telecast_rpt_endtime,\nsrc_total_duration, avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, avg_viewing_hours_units\nfrom {{source('fds_nl','fact_nl_program_viewership_ratings')}} b\njoin (select dim_nl_series_id,src_series_name from {{source('fds_nl','dim_nl_series')}} where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id <> 296881 and src_program_attributes <> '(R)'\n{% if is_incremental() %}\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \n{% endif %}\n)a\nleft join {{source('cdm','dim_date')}} d on a.broadcast_date_id = d.dim_date_id\nleft join \n(select h.dim_date_id, trunc(financial_year_week_begin_date) as fin_year_week_begin_date, \ntrunc(financial_year_week_end_date) as fin_year_week_end_date, financial_year_week_number, financial_month_number, \nmth_abbr_nm as financial_month_name, financial_quarter, financial_year\nfrom {{source('udl_nl','nielsen_finance_yearly_calendar')}} h\njoin (select distinct cal_mth_num, mth_abbr_nm from {{source('cdm','dim_date')}}) i on h.financial_month_number = i.cal_mth_num\nwhere dim_date_id >= 20140101) e on a.broadcast_date_id = e.dim_date_id\nleft join {{source('fds_nl','dim_nl_broadcast_network')}} f on a.dim_nl_broadcast_network_id = f.dim_nl_broadcast_network_id\nleft join {{source('fds_nl','dim_nl_daypart')}} g on a.dim_nl_daypart_id = g.dim_nl_daypart_id", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_wwe_program_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/aggregate/rpt_nl_daily_wwe_program_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_wwe_program_ratings.sql", "name": "rpt_nl_daily_wwe_program_ratings", "resource_type": "model", "alias": "rpt_nl_daily_wwe_program_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_daily_wwe_program_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_program_viewership_ratings)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_program_viewership_ratings"], ["fds_nl", "dim_nl_series"], ["fds_nl", "fact_nl_program_viewership_ratings"], ["fds_nl", "dim_nl_series"], ["cdm", "dim_date"], ["udl_nl", "nielsen_finance_yearly_calendar"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings", "source.analytics_engineering_marts.fds_nl.dim_nl_series", "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings", "source.analytics_engineering_marts.fds_nl.dim_nl_series", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.udl_nl.nielsen_finance_yearly_calendar", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "## Implementation Detail\n*   Date        : 07/21/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_wwe_program_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from Program Viewership Daily fact table on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 02:00 A.M EST (Wed-Mon) & 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_program_viewership_ratings_daily_slot2_abac ; 12144 (Wed-Mon) & t_di_nielsen_fact_nl_program_viewership_ratings_abac ; 12121 (Tue)\n\n## Maintenance Log\n* Date : 07/21/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID Field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "Derived dates based on the viewing period; before 6 am morning hours is the preious date broadcast hour", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_week_begin_date": {"name": "broadcast_cal_week_begin_date", "description": "Calendar Year Week Begin Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_week_end_date": {"name": "broadcast_cal_week_end_date", "description": "Calendar Year Week End Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_week_num": {"name": "broadcast_cal_week_num", "description": "Calendar Year Week Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_month_num": {"name": "broadcast_cal_month_num", "description": "Calendar Year Month Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_month_nm": {"name": "broadcast_cal_month_nm", "description": "Broadcast Calendar Month Name based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_quarter": {"name": "broadcast_cal_quarter", "description": "Calendar year quarter number based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_year": {"name": "broadcast_cal_year", "description": "Calendar year based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_week_begin_date": {"name": "broadcast_fin_week_begin_date", "description": "Financial Year Week Begin Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_week_end_date": {"name": "broadcast_fin_week_end_date", "description": "Financial Year Week End Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_week_num": {"name": "broadcast_fin_week_num", "description": "Financial Year Week Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_month_num": {"name": "broadcast_fin_month_num", "description": "Financial Month Number based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_month_nm": {"name": "broadcast_fin_month_nm", "description": "Financial Month Name based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_quarter": {"name": "broadcast_fin_quarter", "description": "Financial year quarter number based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Financial Year based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program nam.", "meta": {}, "data_type": null, "tags": []}, "src_daypart_cd": {"name": "src_daypart_cd", "description": "A unique character identifier for an individual daypart", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_starttime": {"name": "program_telecast_rpt_starttime", "description": "The start time of the program telecast (HH:MM).", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_endtime": {"name": "program_telecast_rpt_endtime", "description": "The end time of the program telecast (HH:MM).", "meta": {}, "data_type": null, "tags": []}, "src_total_duration": {"name": "src_total_duration", "description": "The duration of the program/telecast airing (minutes).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "viewing_minutes_units": {"name": "viewing_minutes_units", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_wwe_program_ratings.sql", "compiled": true, "compiled_sql": "\n\nselect a.broadcast_date_id, a.broadcast_date, d.cal_year_week_begin_date as broadcast_cal_week_begin_date, \nd.cal_year_week_end_date as broadcast_cal_week_end_date, d.cal_year_week_num as broadcast_cal_week_num, \nd.cal_mth_num as broadcast_cal_month_num, d.mth_abbr_nm as broadcast_cal_month_nm, \nsubstring(d.cal_year_qtr_desc, 5, 2) as broadcast_cal_quarter, d.cal_year as broadcast_cal_year,\ne.fin_year_week_begin_date as broadcast_fin_week_begin_date, e.fin_year_week_end_date as broadcast_fin_week_end_date,\ne.financial_year_week_number as broadcast_fin_week_num,e.financial_month_number as broadcast_fin_month_num, \ne.financial_month_name as broadcast_fin_month_nm, e.financial_quarter as broadcast_fin_quarter, e.financial_year as broadcast_fin_year,\na.src_broadcast_network_id, f.broadcast_network_name, a.src_playback_period_cd, a.src_demographic_group, a.src_program_id,a.src_series_name, a.src_daypart_cd,\ng.src_daypart_name, a.program_telecast_rpt_starttime, a.program_telecast_rpt_endtime, a.src_total_duration, a.avg_audience_proj_000, \na.avg_audience_pct, a.avg_audience_pct_nw_cvg_area, a.avg_viewing_hours_units as viewing_minutes_units,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(\n--RAW telecasts broken down are to be rolled up as one with start time as min(start time), end time as max(end time) and all the metrics except --VH are rolled up as time-duration based avg - ( metric 1 * duration 1 + metric 2* duration* 2 + metric 3 * duration 3) /(duration 1 + duration --2 + duration 3) here..\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id,src_series_name, dim_nl_daypart_id, src_daypart_cd,\nmin(program_telecast_rpt_starttime) as program_telecast_rpt_starttime, max(program_telecast_rpt_endtime) as program_telecast_rpt_endtime,\nsum(src_total_duration) as src_total_duration,\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(avg_viewing_hours_units) as avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id = 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\ngroup by 1,2,3,4,5,6,7,8,9,10\nunion\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id ,src_series_name, dim_nl_daypart_id, src_daypart_cd, program_telecast_rpt_starttime, program_telecast_rpt_endtime,\nsrc_total_duration, avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id <> 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\n)a\nleft join \"entdwdb\".\"cdm\".\"dim_date\" d on a.broadcast_date_id = d.dim_date_id\nleft join \n(select h.dim_date_id, trunc(financial_year_week_begin_date) as fin_year_week_begin_date, \ntrunc(financial_year_week_end_date) as fin_year_week_end_date, financial_year_week_number, financial_month_number, \nmth_abbr_nm as financial_month_name, financial_quarter, financial_year\nfrom \"entdwdb\".\"udl_nl\".\"nielsen_finance_yearly_calendar\" h\njoin (select distinct cal_mth_num, mth_abbr_nm from \"entdwdb\".\"cdm\".\"dim_date\") i on h.financial_month_number = i.cal_mth_num\nwhere dim_date_id >= 20140101) e on a.broadcast_date_id = e.dim_date_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\" f on a.dim_nl_broadcast_network_id = f.dim_nl_broadcast_network_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" g on a.dim_nl_daypart_id = g.dim_nl_daypart_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect a.broadcast_date_id, a.broadcast_date, d.cal_year_week_begin_date as broadcast_cal_week_begin_date, \nd.cal_year_week_end_date as broadcast_cal_week_end_date, d.cal_year_week_num as broadcast_cal_week_num, \nd.cal_mth_num as broadcast_cal_month_num, d.mth_abbr_nm as broadcast_cal_month_nm, \nsubstring(d.cal_year_qtr_desc, 5, 2) as broadcast_cal_quarter, d.cal_year as broadcast_cal_year,\ne.fin_year_week_begin_date as broadcast_fin_week_begin_date, e.fin_year_week_end_date as broadcast_fin_week_end_date,\ne.financial_year_week_number as broadcast_fin_week_num,e.financial_month_number as broadcast_fin_month_num, \ne.financial_month_name as broadcast_fin_month_nm, e.financial_quarter as broadcast_fin_quarter, e.financial_year as broadcast_fin_year,\na.src_broadcast_network_id, f.broadcast_network_name, a.src_playback_period_cd, a.src_demographic_group, a.src_program_id,a.src_series_name, a.src_daypart_cd,\ng.src_daypart_name, a.program_telecast_rpt_starttime, a.program_telecast_rpt_endtime, a.src_total_duration, a.avg_audience_proj_000, \na.avg_audience_pct, a.avg_audience_pct_nw_cvg_area, a.avg_viewing_hours_units as viewing_minutes_units,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(\n--RAW telecasts broken down are to be rolled up as one with start time as min(start time), end time as max(end time) and all the metrics except --VH are rolled up as time-duration based avg - ( metric 1 * duration 1 + metric 2* duration* 2 + metric 3 * duration 3) /(duration 1 + duration --2 + duration 3) here..\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id,src_series_name, dim_nl_daypart_id, src_daypart_cd,\nmin(program_telecast_rpt_starttime) as program_telecast_rpt_starttime, max(program_telecast_rpt_endtime) as program_telecast_rpt_endtime,\nsum(src_total_duration) as src_total_duration,\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(avg_viewing_hours_units) as avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id = 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\ngroup by 1,2,3,4,5,6,7,8,9,10\nunion\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id ,src_series_name, dim_nl_daypart_id, src_daypart_cd, program_telecast_rpt_starttime, program_telecast_rpt_endtime,\nsrc_total_duration, avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id <> 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\n)a\nleft join \"entdwdb\".\"cdm\".\"dim_date\" d on a.broadcast_date_id = d.dim_date_id\nleft join \n(select h.dim_date_id, trunc(financial_year_week_begin_date) as fin_year_week_begin_date, \ntrunc(financial_year_week_end_date) as fin_year_week_end_date, financial_year_week_number, financial_month_number, \nmth_abbr_nm as financial_month_name, financial_quarter, financial_year\nfrom \"entdwdb\".\"udl_nl\".\"nielsen_finance_yearly_calendar\" h\njoin (select distinct cal_mth_num, mth_abbr_nm from \"entdwdb\".\"cdm\".\"dim_date\") i on h.financial_month_number = i.cal_mth_num\nwhere dim_date_id >= 20140101) e on a.broadcast_date_id = e.dim_date_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\" f on a.dim_nl_broadcast_network_id = f.dim_nl_broadcast_network_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" g on a.dim_nl_daypart_id = g.dim_nl_daypart_id"}, "error": null, "status": null, "execution_time": 0.05954623222351074, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:48:59.695586Z", "completed_at": "2020-09-21T17:48:59.754233Z"}, {"name": "execute", "started_at": "2020-09-21T17:48:59.754568Z", "completed_at": "2020-09-21T17:48:59.754582Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_kntr',\n\t\t\"pre-hook\": [\"truncate fds_kntr.aggr_kntr_weekly_competitive_program_ratings\"],\n\t\t\"materialized\": 'table','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\nselect c.*, 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,\n'bi_dbt_user_prd' as etl_insert_user_id, current_timestamp as etl_insert_rec_dttm, \nnull as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(select cal_year_week_begin_date as week_start_date, cal_year_week_end_date as week_end_date, \ncal_year_week_num as week_num, to_char(cal_year_week_begin_date, 'mon') as month,\n('q' || extract(quarter from cal_year_week_begin_date)) as quarter, \nextract(yr from cal_year_week_begin_date) as year,\nsrc_country, src_channel, src_property, demographic, \ncase\n\twhen lower(src_channel) like '%hd%' then 'Yes'\n\telse 'No' end as hd_flag,\nsum(length_avg_tm) as total_duration_mins, sum(length_avg_tm/60) as duration_hours,\n(sum(rat_num_avg_wg * length_avg_tm))/(nullif(sum(nvl2(rat_num_avg_wg, length_avg_tm, null)),0)) as rat_value,\nsum((rat_num_avg_wg * 1000 * length_avg_tm) / 60) as viewing_hours,\ncount(*) as telecasts_count,\nsum(rat_num_avg_wg) as weekly_cumulative_audience\nfrom {{source('fds_kntr','fact_kntr_annual_profile')}} a\njoin {{source('cdm','dim_date')}} b on a.broadcast_date_id = b.dim_date_id\ngroup by 1,2,3,4,5,6,7,8,9,10,11 ) c", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate", "aggr_kntr_weekly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/aggregate/aggr_kntr_weekly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/aggregate/aggr_kntr_weekly_competitive_program_ratings.sql", "name": "aggr_kntr_weekly_competitive_program_ratings", "resource_type": "model", "alias": "aggr_kntr_weekly_competitive_program_ratings", "config": {"enabled": true, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_kntr.aggr_kntr_weekly_competitive_program_ratings", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_kntr", "fact_kntr_annual_profile"], ["cdm", "dim_date"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_annual_profile", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   TableName   : aggr_kntr_weekly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Weekly Aggregate Table consist of rating details of competitive programs referencing from Annual Profile Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "Calendar Year Week Start Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "week_end_date": {"name": "week_end_date", "description": "Calendar Year Week End Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "week_num": {"name": "week_num", "description": "Calendar Year Week Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "month": {"name": "month", "description": "Abbreviated Month Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "quarter": {"name": "quarter", "description": "Abbreviated Quarter Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "total_duration_mins": {"name": "total_duration_mins", "description": "The total duration of the competitive program in minutes", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total duration of the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program", "meta": {}, "data_type": null, "tags": []}, "weekly_cumulative_audience": {"name": "weekly_cumulative_audience", "description": "The weekly cumulative Audience who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate/aggr_kntr_weekly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect c.*, 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,\n'bi_dbt_user_prd' as etl_insert_user_id, current_timestamp as etl_insert_rec_dttm, \nnull as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(select cal_year_week_begin_date as week_start_date, cal_year_week_end_date as week_end_date, \ncal_year_week_num as week_num, to_char(cal_year_week_begin_date, 'mon') as month,\n('q' || extract(quarter from cal_year_week_begin_date)) as quarter, \nextract(yr from cal_year_week_begin_date) as year,\nsrc_country, src_channel, src_property, demographic, \ncase\n\twhen lower(src_channel) like '%hd%' then 'Yes'\n\telse 'No' end as hd_flag,\nsum(length_avg_tm) as total_duration_mins, sum(length_avg_tm/60) as duration_hours,\n(sum(rat_num_avg_wg * length_avg_tm))/(nullif(sum(nvl2(rat_num_avg_wg, length_avg_tm, null)),0)) as rat_value,\nsum((rat_num_avg_wg * 1000 * length_avg_tm) / 60) as viewing_hours,\ncount(*) as telecasts_count,\nsum(rat_num_avg_wg) as weekly_cumulative_audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_annual_profile\" a\njoin \"entdwdb\".\"cdm\".\"dim_date\" b on a.broadcast_date_id = b.dim_date_id\ngroup by 1,2,3,4,5,6,7,8,9,10,11 ) c", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect c.*, 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,\n'bi_dbt_user_prd' as etl_insert_user_id, current_timestamp as etl_insert_rec_dttm, \nnull as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(select cal_year_week_begin_date as week_start_date, cal_year_week_end_date as week_end_date, \ncal_year_week_num as week_num, to_char(cal_year_week_begin_date, 'mon') as month,\n('q' || extract(quarter from cal_year_week_begin_date)) as quarter, \nextract(yr from cal_year_week_begin_date) as year,\nsrc_country, src_channel, src_property, demographic, \ncase\n\twhen lower(src_channel) like '%hd%' then 'Yes'\n\telse 'No' end as hd_flag,\nsum(length_avg_tm) as total_duration_mins, sum(length_avg_tm/60) as duration_hours,\n(sum(rat_num_avg_wg * length_avg_tm))/(nullif(sum(nvl2(rat_num_avg_wg, length_avg_tm, null)),0)) as rat_value,\nsum((rat_num_avg_wg * 1000 * length_avg_tm) / 60) as viewing_hours,\ncount(*) as telecasts_count,\nsum(rat_num_avg_wg) as weekly_cumulative_audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_annual_profile\" a\njoin \"entdwdb\".\"cdm\".\"dim_date\" b on a.broadcast_date_id = b.dim_date_id\ngroup by 1,2,3,4,5,6,7,8,9,10,11 ) c"}, "error": null, "status": null, "execution_time": 0.02222895622253418, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:48:59.755268Z", "completed_at": "2020-09-21T17:48:59.776779Z"}, {"name": "execute", "started_at": "2020-09-21T17:48:59.777105Z", "completed_at": "2020-09-21T17:48:59.777114Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--WWE Live Commercial Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n*************************************************************************************************************************************************\n*/\n\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_daily_wwe_live_commercial_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_commercial_viewership_ratings)\"],\n\t     \"materialized\": 'incremental','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    avg_viewing_hours_units,\n    natl_comm_clockmts_avg_audience_proj_000,\n    natl_comm_clockmts_avg_audience_proj_pct,\n    natl_comm_clockmts_cvg_area_avg_audience_proj_pct,\n    natl_comm_clockmts_duration,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    {{source('fds_nl','fact_nl_commercial_viewership_ratings')}} a\nLEFT JOIN\n    {{source('cdm','dim_date')}} b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n{% if is_incremental() %}\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00')  \n{% endif %}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/aggregate/rpt_nl_daily_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_wwe_live_commercial_ratings.sql", "name": "rpt_nl_daily_wwe_live_commercial_ratings", "resource_type": "model", "alias": "rpt_nl_daily_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_daily_wwe_live_commercial_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_commercial_viewership_ratings)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_commercial_viewership_ratings"], ["cdm", "dim_date"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_commercial_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n* Date        : 06/12/2020\n* Version     : 1.0\n* TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n* Schema\t  : fds_nl\n* Contributor : Rahul Chandran\n* Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n\n## Schedule Details\n* Frequency : Weekly ; 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_commercial_viewership_ratings_abac ; 12132 (Tue) \n\n## Maintenance Log\n* Date : 06/12/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "Derived dates based on the viewing period; before 6 am morning hours is the previous date broadcast hour", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_num": {"name": "broadcast_month_num", "description": "Broadcast Month Number", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_nm": {"name": "broadcast_month_nm", "description": "Broadcast Month abbr name", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_num": {"name": "broadcast_quarter_num", "description": "Broadcast Quarter number", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_nm": {"name": "broadcast_quarter_nm", "description": "broadcast Quarter Name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name.", "meta": {}, "data_type": null, "tags": []}, "avg_viewing_hours_units": {"name": "avg_viewing_hours_units", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_duration": {"name": "natl_comm_clockmts_duration", "description": "National Commerical Clock Minutes Duration (seconds) (The total number of seconds across qualified commercial minutes within a selected program.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "--WWE Live Commercial Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    avg_viewing_hours_units,\n    natl_comm_clockmts_avg_audience_proj_000,\n    natl_comm_clockmts_avg_audience_proj_pct,\n    natl_comm_clockmts_cvg_area_avg_audience_proj_pct,\n    natl_comm_clockmts_duration,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_commercial_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"), '1900-01-01 00:00:00')  \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--WWE Live Commercial Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    avg_viewing_hours_units,\n    natl_comm_clockmts_avg_audience_proj_000,\n    natl_comm_clockmts_avg_audience_proj_pct,\n    natl_comm_clockmts_cvg_area_avg_audience_proj_pct,\n    natl_comm_clockmts_duration,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_commercial_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"), '1900-01-01 00:00:00')  \n"}, "error": null, "status": null, "execution_time": 0.022560596466064453, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:48:59.833255Z", "completed_at": "2020-09-21T17:48:59.854829Z"}, {"name": "execute", "started_at": "2020-09-21T17:48:59.855294Z", "completed_at": "2020-09-21T17:48:59.855307Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--WWE Live QH Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n*************************************************************************************************************************************************\n*/\n\n\n{{\n  config({\n\t\t\"schema\": 'fds_nl',\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_daily_wwe_live_quarterhour_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_quaterhour_viewership_ratings)\"],\n\t     \"materialized\": 'incremental','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    interval_starttime,\n    interval_endtime,\n    interval_duration,\n    avg_viewing_hours_units,\n    avg_audience_proj_000,\n    avg_audience_pct,\n    avg_pct_nw_cvg_area,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    {{source('fds_nl','fact_nl_quaterhour_viewership_ratings')}} a\nLEFT JOIN\n    {{source('cdm','dim_date')}} b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n{% if is_incremental() %}\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \n{% endif %}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/aggregate/rpt_nl_daily_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_wwe_live_quarterhour_ratings.sql", "name": "rpt_nl_daily_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "rpt_nl_daily_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_daily_wwe_live_quarterhour_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_quaterhour_viewership_ratings)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_quaterhour_viewership_ratings"], ["cdm", "dim_date"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_quaterhour_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n*   Date        : 06/12/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Sudhakar Andugula\n*   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n\n## Schedule Details\n* Frequency : Daily ; 02:00 A.M EST (Wed-Mon) & 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_quarterhour_viewership_ratings_daily_slot2_abac ; 12145 (Wed-Mon) & t_di_nielsen_fact_nl_quarterhour_viewership_ratings_abac ; 12122 (Tue)\n\n## Maintenance Log\n* Date : 06/12/2020 ; Developer: Sudhakar Andugula ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID Field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "Derived dates based on the viewing period; before 6 am morning hours is the preious date broadcast hour", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_num": {"name": "broadcast_month_num", "description": "Broadcast Month Number", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_nm": {"name": "broadcast_month_nm", "description": "Broadcast Month Name", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_num": {"name": "broadcast_quarter_num", "description": "Broadcast Quarter Number", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_nm": {"name": "broadcast_quarter_nm", "description": "Broadcast Quarter Name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program nam.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be profided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be profided", "meta": {}, "data_type": null, "tags": []}, "interval_duration": {"name": "interval_duration", "description": "quarter period interval duration", "meta": {}, "data_type": null, "tags": []}, "avg_viewing_hours_units": {"name": "avg_viewing_hours_units", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--WWE Live QH Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    interval_starttime,\n    interval_endtime,\n    interval_duration,\n    avg_viewing_hours_units,\n    avg_audience_proj_000,\n    avg_audience_pct,\n    avg_pct_nw_cvg_area,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_quaterhour_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"), '1900-01-01 00:00:00') \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--WWE Live QH Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    interval_starttime,\n    interval_endtime,\n    interval_duration,\n    avg_viewing_hours_units,\n    avg_audience_proj_000,\n    avg_audience_pct,\n    avg_pct_nw_cvg_area,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_quaterhour_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"), '1900-01-01 00:00:00') \n"}, "error": null, "status": null, "execution_time": 0.03340315818786621, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:48:59.856184Z", "completed_at": "2020-09-21T17:48:59.888591Z"}, {"name": "execute", "started_at": "2020-09-21T17:48:59.888981Z", "completed_at": "2020-09-21T17:48:59.888994Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_cp',\n    \"pre-hook\": \"delete from fds_cp.aggr_cp_weekly_consumption_by_platform where monday_date >= date_trunc('week',current_date-14)\",\n    \"materialized\": \"incremental\"\n  })\n}}\n\nwith __dbt__CTE__youtube_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-Owned' as platform\nfrom {{source('fds_yt','rpt_yt_wwe_engagement_daily')}} a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__facebook_weekly as (\n\nselect \tsum(views_3_seconds) Views, \n\t\tsum(video_view_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Facebook' as platform\nfrom {{source('fds_fbk','fact_fb_consumption_parent_video')}} a\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__facebook_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__facebook_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__facebook_weekly  \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__twitter_weekly as (\n\nselect \tsum(video_views) Views, \n\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Twitter' as platform\nfrom {{source('fds_tw','fact_tw_consumption_post')}}\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__twitter_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views,\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__instagram_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t(select sum(video_views) Views, \n\t\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from  fds_igm.fact_ig_consumption_post  \n\t where monday_date >= current_date-28\n\t group by 3,4\n\t union all\n\t select sum(impressions) Views, \n\t\t\tsum(story_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from {{source('fds_igm','fact_ig_consumption_story')}}\n\t where monday_date >= current_date-28\n\t group by 3,4)\ngroup by 3,4\n), \n\n __dbt__CTE__instagram_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tminutes_watched, \n\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__snapchat_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t\t((\n\t\tselect \tsum(views) Views, \n\t\t\t\tsum(views)/6.0 as Minutes_watched,\n\t\t\t\tdate_trunc('week',story_start+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\tfrom {{source('fds_sc','fact_sc_consumption_story')}} a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom {{source('fds_sc','fact_sc_consumption_story')}}\n\t\t\twhere \tdate_trunc('week',story_start+4) >= current_date-28 \n\t\t\t\t\tand views>0\n\t\t\tgroup by 1) b\n\t\t\ton  trunc(a.story_start) = b.post_date\n\t\t\t\tand\ta.dim_date_id= b.max_dim_date\n\t\twhere monday_date >= current_date-28\n\t\tgroup by 3,4)\n\t\tunion all \n\t\t(select sum(topsnap_views) Views, \n\t\t\t\tsum(total_time_viewed_secs)/60.0 Minutes_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\t from {{source('fds_sc','fact_scd_consumption_frame')}} a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date,\n\t\t\t\t\t max(dim_date_id) max_dim_date \n\t\t\t from {{source('fds_sc','fact_scd_consumption_frame')}}\n\t\t\t where date_trunc('week',snap_time_posted+4) >= current_date-28 \n\t\t\t\t   and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t\t on trunc(a.snap_time_posted) = b.post_date \n\t\t\t\t and a.dim_date_id= b.max_dim_date\n\t\t where monday_date >= current_date-28\n\t\t group by 3,4))\ngroup by 3,4\n ), \n\n __dbt__CTE__snapchat_weekly_aggregate as (\n\nselect  a.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views) over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__snapchat_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__snapchat_weekly \n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__dotcom_weekly as (\n\nselect \tcount(*) Views, \n\t\tsum(play_time)/60  Minutes_watched,\n\t\tdate_trunc('week',start_time) as monday_date, \n\t\t'.COM/App' as platform\nfrom {{source('fds_nplus','vw_fact_daily_dotcom_viewership')}}\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__dotcom_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__dotcom_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join\n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__dotcom_weekly\n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__youtube_ugc_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-UGC' as platform\nfrom {{source('fds_yt','rpt_yt_ugc_engagement_daily')}} a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_ugc_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__wwe_network_weekly as (\n\nselect \tcount (distinct stream_id) as Views, \n\t\tsum(play_time) as Minutes_watched,\n\t\tdate_trunc('week',stream_start_dttm) as monday_date, \n\t\t'WWE Network' as platform\nfrom {{source('fds_nplus','fact_daily_content_viewership')}}\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__wwe_network_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__tiktok_weekly as\n\n(select sum(video_views) Views, \n\t\tsum(play_duration)/60 Minutes_watched,\n\t\tdate_trunc('week',source_as_on_date) as monday_date, \n\t\t'TikTok' as platform\n from {{source('udl_tkt','tiktok_weekly_country_consumption')}}\n where \tmonday_date >= current_date-28\n\t\tand as_on_date = (select max(as_on_date) from {{source('udl_tkt','tiktok_weekly_country_consumption')}})\n        and country='GLOBAL'\n group by 3,4),\n\n __dbt__CTE__tiktok_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n)\n\nselect \ta.*,\n\t\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_CP' AS etl_batch_id, as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate etl_insert_rec_dttm,\n\t\t'' etl_update_user_id,\n\t\tsysdate etl_update_rec_dttm \nfrom (\n\t\tselect * from __dbt__CTE__youtube_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__facebook_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__twitter_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__instagram_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__snapchat_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__dotcom_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n        union all\n        select * from __dbt__CTE__youtube_ugc_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__wwe_network_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__tiktok_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\n) a", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate", "aggr_cp_weekly_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cp/aggregate/aggr_cp_weekly_consumption_by_platform.sql", "original_file_path": "models/fds_cp/aggregate/aggr_cp_weekly_consumption_by_platform.sql", "name": "aggr_cp_weekly_consumption_by_platform", "resource_type": "model", "alias": "aggr_cp_weekly_consumption_by_platform", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cp.aggr_cp_weekly_consumption_by_platform where monday_date >= date_trunc('week',current_date-14)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": []}, "tags": [], "refs": [], "sources": [["fds_yt", "rpt_yt_wwe_engagement_daily"], ["fds_fbk", "fact_fb_consumption_parent_video"], ["fds_tw", "fact_tw_consumption_post"], ["fds_igm", "fact_ig_consumption_story"], ["fds_sc", "fact_sc_consumption_story"], ["fds_sc", "fact_sc_consumption_story"], ["fds_sc", "fact_scd_consumption_frame"], ["fds_sc", "fact_scd_consumption_frame"], ["fds_nplus", "vw_fact_daily_dotcom_viewership"], ["fds_yt", "rpt_yt_ugc_engagement_daily"], ["fds_nplus", "fact_daily_content_viewership"], ["udl_tkt", "tiktok_weekly_country_consumption"], ["udl_tkt", "tiktok_weekly_country_consumption"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_yt.rpt_yt_wwe_engagement_daily", "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_parent_video", "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post", "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame", "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame", "source.analytics_engineering_marts.fds_nplus.vw_fact_daily_dotcom_viewership", "source.analytics_engineering_marts.fds_yt.rpt_yt_ugc_engagement_daily", "source.analytics_engineering_marts.fds_nplus.fact_daily_content_viewership", "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption", "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption"]}, "description": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 2.0\n* ViewName    : aggr_cp_weekly_consumption_by_platform\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : aggr_cp_weekly_consumption_by_platform This aggregate table stores the crossplatform consumption metrics - total views and total minutes watched aggregated for each week for platforms- Youtube, facebook, Twitter, Instagram, Snapchat and dotcom/App.\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.\n* Date : 08/24/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: As a part weekly cross platform consumption enhancements to add Youtube-UGC, \tWWE Network and TikTok platform", "columns": {"platform": {"name": "platform", "description": "stores the name of cross platform", "meta": {}, "data_type": null, "tags": []}, "monday_date": {"name": "monday_date", "description": "represents the start of the week for measurement period Monday to Sunday", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "indicates the total views for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "minutes_watched": {"name": "minutes_watched", "description": "indicates the total minutes watched for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_views": {"name": "prev_views", "description": "indicates the total views for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_mins": {"name": "prev_mins", "description": "indicates the total minutes watched for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_views": {"name": "weekly_per_change_views", "description": "gives the week over week change in total views for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_mins": {"name": "weekly_per_change_mins", "description": "gives the week over week change in total minutes watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate/aggr_cp_weekly_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\n\nwith __dbt__CTE__youtube_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-Owned' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_wwe_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__facebook_weekly as (\n\nselect \tsum(views_3_seconds) Views, \n\t\tsum(video_view_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Facebook' as platform\nfrom \"entdwdb\".\"fds_fbk\".\"fact_fb_consumption_parent_video\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__facebook_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__facebook_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__facebook_weekly  \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__twitter_weekly as (\n\nselect \tsum(video_views) Views, \n\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Twitter' as platform\nfrom \"entdwdb\".\"fds_tw\".\"fact_tw_consumption_post\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__twitter_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views,\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__instagram_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t(select sum(video_views) Views, \n\t\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from  fds_igm.fact_ig_consumption_post  \n\t where monday_date >= current_date-28\n\t group by 3,4\n\t union all\n\t select sum(impressions) Views, \n\t\t\tsum(story_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from \"entdwdb\".\"fds_igm\".\"fact_ig_consumption_story\"\n\t where monday_date >= current_date-28\n\t group by 3,4)\ngroup by 3,4\n), \n\n __dbt__CTE__instagram_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tminutes_watched, \n\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__snapchat_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t\t((\n\t\tselect \tsum(views) Views, \n\t\t\t\tsum(views)/6.0 as Minutes_watched,\n\t\t\t\tdate_trunc('week',story_start+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\" a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\"\n\t\t\twhere \tdate_trunc('week',story_start+4) >= current_date-28 \n\t\t\t\t\tand views>0\n\t\t\tgroup by 1) b\n\t\t\ton  trunc(a.story_start) = b.post_date\n\t\t\t\tand\ta.dim_date_id= b.max_dim_date\n\t\twhere monday_date >= current_date-28\n\t\tgroup by 3,4)\n\t\tunion all \n\t\t(select sum(topsnap_views) Views, \n\t\t\t\tsum(total_time_viewed_secs)/60.0 Minutes_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\" a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date,\n\t\t\t\t\t max(dim_date_id) max_dim_date \n\t\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\"\n\t\t\t where date_trunc('week',snap_time_posted+4) >= current_date-28 \n\t\t\t\t   and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t\t on trunc(a.snap_time_posted) = b.post_date \n\t\t\t\t and a.dim_date_id= b.max_dim_date\n\t\t where monday_date >= current_date-28\n\t\t group by 3,4))\ngroup by 3,4\n ), \n\n __dbt__CTE__snapchat_weekly_aggregate as (\n\nselect  a.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views) over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__snapchat_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__snapchat_weekly \n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__dotcom_weekly as (\n\nselect \tcount(*) Views, \n\t\tsum(play_time)/60  Minutes_watched,\n\t\tdate_trunc('week',start_time) as monday_date, \n\t\t'.COM/App' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"vw_fact_daily_dotcom_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__dotcom_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__dotcom_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join\n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__dotcom_weekly\n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__youtube_ugc_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-UGC' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_ugc_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_ugc_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__wwe_network_weekly as (\n\nselect \tcount (distinct stream_id) as Views, \n\t\tsum(play_time) as Minutes_watched,\n\t\tdate_trunc('week',stream_start_dttm) as monday_date, \n\t\t'WWE Network' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_content_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__wwe_network_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__tiktok_weekly as\n\n(select sum(video_views) Views, \n\t\tsum(play_duration)/60 Minutes_watched,\n\t\tdate_trunc('week',source_as_on_date) as monday_date, \n\t\t'TikTok' as platform\n from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\"\n where \tmonday_date >= current_date-28\n\t\tand as_on_date = (select max(as_on_date) from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\")\n        and country='GLOBAL'\n group by 3,4),\n\n __dbt__CTE__tiktok_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n)\n\nselect \ta.*,\n\t\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_CP' AS etl_batch_id, as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate etl_insert_rec_dttm,\n\t\t'' etl_update_user_id,\n\t\tsysdate etl_update_rec_dttm \nfrom (\n\t\tselect * from __dbt__CTE__youtube_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__facebook_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__twitter_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__instagram_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__snapchat_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__dotcom_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n        union all\n        select * from __dbt__CTE__youtube_ugc_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__wwe_network_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__tiktok_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\n) a", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith __dbt__CTE__youtube_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-Owned' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_wwe_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__facebook_weekly as (\n\nselect \tsum(views_3_seconds) Views, \n\t\tsum(video_view_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Facebook' as platform\nfrom \"entdwdb\".\"fds_fbk\".\"fact_fb_consumption_parent_video\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__facebook_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__facebook_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__facebook_weekly  \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__twitter_weekly as (\n\nselect \tsum(video_views) Views, \n\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Twitter' as platform\nfrom \"entdwdb\".\"fds_tw\".\"fact_tw_consumption_post\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__twitter_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views,\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__instagram_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t(select sum(video_views) Views, \n\t\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from  fds_igm.fact_ig_consumption_post  \n\t where monday_date >= current_date-28\n\t group by 3,4\n\t union all\n\t select sum(impressions) Views, \n\t\t\tsum(story_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from \"entdwdb\".\"fds_igm\".\"fact_ig_consumption_story\"\n\t where monday_date >= current_date-28\n\t group by 3,4)\ngroup by 3,4\n), \n\n __dbt__CTE__instagram_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tminutes_watched, \n\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__snapchat_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t\t((\n\t\tselect \tsum(views) Views, \n\t\t\t\tsum(views)/6.0 as Minutes_watched,\n\t\t\t\tdate_trunc('week',story_start+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\" a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\"\n\t\t\twhere \tdate_trunc('week',story_start+4) >= current_date-28 \n\t\t\t\t\tand views>0\n\t\t\tgroup by 1) b\n\t\t\ton  trunc(a.story_start) = b.post_date\n\t\t\t\tand\ta.dim_date_id= b.max_dim_date\n\t\twhere monday_date >= current_date-28\n\t\tgroup by 3,4)\n\t\tunion all \n\t\t(select sum(topsnap_views) Views, \n\t\t\t\tsum(total_time_viewed_secs)/60.0 Minutes_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\" a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date,\n\t\t\t\t\t max(dim_date_id) max_dim_date \n\t\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\"\n\t\t\t where date_trunc('week',snap_time_posted+4) >= current_date-28 \n\t\t\t\t   and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t\t on trunc(a.snap_time_posted) = b.post_date \n\t\t\t\t and a.dim_date_id= b.max_dim_date\n\t\t where monday_date >= current_date-28\n\t\t group by 3,4))\ngroup by 3,4\n ), \n\n __dbt__CTE__snapchat_weekly_aggregate as (\n\nselect  a.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views) over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__snapchat_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__snapchat_weekly \n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__dotcom_weekly as (\n\nselect \tcount(*) Views, \n\t\tsum(play_time)/60  Minutes_watched,\n\t\tdate_trunc('week',start_time) as monday_date, \n\t\t'.COM/App' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"vw_fact_daily_dotcom_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__dotcom_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__dotcom_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join\n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__dotcom_weekly\n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__youtube_ugc_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-UGC' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_ugc_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_ugc_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__wwe_network_weekly as (\n\nselect \tcount (distinct stream_id) as Views, \n\t\tsum(play_time) as Minutes_watched,\n\t\tdate_trunc('week',stream_start_dttm) as monday_date, \n\t\t'WWE Network' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_content_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__wwe_network_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__tiktok_weekly as\n\n(select sum(video_views) Views, \n\t\tsum(play_duration)/60 Minutes_watched,\n\t\tdate_trunc('week',source_as_on_date) as monday_date, \n\t\t'TikTok' as platform\n from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\"\n where \tmonday_date >= current_date-28\n\t\tand as_on_date = (select max(as_on_date) from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\")\n        and country='GLOBAL'\n group by 3,4),\n\n __dbt__CTE__tiktok_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n)\n\nselect \ta.*,\n\t\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_CP' AS etl_batch_id, as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate etl_insert_rec_dttm,\n\t\t'' etl_update_user_id,\n\t\tsysdate etl_update_rec_dttm \nfrom (\n\t\tselect * from __dbt__CTE__youtube_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__facebook_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__twitter_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__instagram_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__snapchat_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__dotcom_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n        union all\n        select * from __dbt__CTE__youtube_ugc_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__wwe_network_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__tiktok_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\n) a"}, "error": null, "status": null, "execution_time": 0.036400794982910156, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:48:59.900552Z", "completed_at": "2020-09-21T17:48:59.936198Z"}, {"name": "execute", "started_at": "2020-09-21T17:48:59.936541Z", "completed_at": "2020-09-21T17:48:59.936552Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_cpg',\n\t\t\"pre-hook\": [\"delete from fds_cpg.aggr_cpg_daily_kit_sales\"],\n\t\t\"materialized\": 'incremental','tags': \"Phase 5B\"\n  })\n}}\nwith #fact_aggregated_kit_sales_temp1 as \n(select * from (\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n             SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,--kit item\n            -- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\n LEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                                {{source('fds_cpg','dim_cpg_item')}} B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         {{source('fds_cpg','fact_cpg_sales_header')}}\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n                                     OR  ltrim(RTRIM(src_prepay_code))='F')\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n     c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n   -- src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n   B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity)                      AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n -- i.src_item_id as kit_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\nLEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n                AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                            {{source('fds_cpg','dim_cpg_item')}} B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 {{source('fds_cpg','fact_cpg_sales_header')}}\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\n\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\nLEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\nISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                            {{source('fds_cpg','dim_cpg_item')}} B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                {{source('fds_cpg','fact_cpg_sales_header')}}\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            {{source('fds_cpg','fact_cpg_sales_header')}}\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT    dim_src_kit_item_id,\n   a.dim_item_id,\n   \n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n   a.dim_item_id,\n  \n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 2*************************************\n#fact_aggregated_kit_sales_temp2 as \n(select * from(\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n           fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n-- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\nLEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND ---ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number, \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n   B.dim_item_id AS dim_item_id ,--component\n        A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\nLEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n\t\t\t\tA.dim_src_kit_item_id\n                  --  B.dim_item_id\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                WHERE\n                   -- A.src_kit_id=B.src_item_id\nA.dim_src_kit_item_id=B.dim_item_id\t\t\t\t   )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id--,i.src_item_id\n,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_item_id,\n    dim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                       dim_src_kit_item_id,\n    \n    a.dim_item_id,\n    \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             dim_src_kit_item_id,\n    \n    k.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id , --kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\nLEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                            {{source('fds_cpg','dim_cpg_item')}} B\n                        WHERE\n                              A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             {{source('fds_cpg','fact_cpg_sales_header')}}\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                      fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                 fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                      fact_cpg_sales_detail.src_unit_cost,\n                      fact_cpg_sales_detail.src_selling_price,\n                      fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            {{source('fds_cpg','fact_cpg_sales_header')}}\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n  --  src_kit_id,\n  --  src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \ndim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 3*************************************\n#fact_aggregated_kit_sales_temp3 as \n(select * from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\n LEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                WHERE\n                  A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                     dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n   \n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n     B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n  --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\nLEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                            {{source('fds_cpg','dim_cpg_item')}} B\n                        WHERE\n                       A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n          fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\nLEFT JOIN\n            {{source('fds_cpg','dim_cpg_order_method')}}\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\n*/\n                WHERE\n                    --dim_order_method_id=5\n                ISNULL(src_channel_id,'0')='R'\nAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\n                            {{source('fds_cpg','dim_cpg_item')}} B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             {{source('fds_cpg','fact_cpg_sales_header')}}\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            fds_cpg.fact_cpg_sales_header\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\nINNER JOIN\n                    {{source('fds_cpg','dim_cpg_item')}} B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            {{source('fds_cpg','dim_cpg_item')}} c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n#fact_aggregate_kit_sales as \n(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\nnet_selling_margin$ net_selling_margin_$\nfrom\n(\n\tselect * from #fact_aggregated_kit_sales_temp1\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp2\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp3\n))\n--select * from fact_aggregate_kit_sales\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_src_kit_item_id as dim_kit_item_id,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\n0 as other_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n0 as kit_units_sold,\n(src_unit_cost/conversion_rate_to_local) as unit_cost_local,\n(src_current_retail_price/conversion_rate_to_local) as current_retail_price_local,\n(demand_cogs_$/conversion_rate_to_local) as demand_cogs_local,\n(shipped_cogs_$/conversion_rate_to_local) as shipped_cogs_local,\n(returned_cogs_$/conversion_rate_to_local) as returned_cogs_local,\n(net_cogs_$/conversion_rate_to_local) as net_cogs_local,\n(demand_retail_$/conversion_rate_to_local) as demand_retail_local,\n(shipped_retail_$/conversion_rate_to_local) as shipped_retail_local,\n(net_retail_$/conversion_rate_to_local) as net_retail_local,\n(demand_sales_$/conversion_rate_to_local) as demand_sales_local,\n(shipped_sales_$/conversion_rate_to_local) as shipped_sales_local,\n(returns_$/conversion_rate_to_local) as returns_local,\n(net_sales_$/conversion_rate_to_local) as net_sales_local,\n(demand_selling_margin_$/conversion_rate_to_local) as demand_selling_margin_local,\n(shipped_selling_margin_$/conversion_rate_to_local) as shipped_selling_margin_local,\n(net_selling_margin_$/conversion_rate_to_local) as net_selling_margin_local,\n0 as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\nselect src.*, \ncoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\nfrom #fact_aggregate_kit_sales src\nleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\non cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate", "aggr_cpg_daily_kit_sales"], "unique_id": "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cpg/aggregate/aggr_cpg_daily_kit_sales.sql", "original_file_path": "models/fds_cpg/aggregate/aggr_cpg_daily_kit_sales.sql", "name": "aggr_cpg_daily_kit_sales", "resource_type": "model", "alias": "aggr_cpg_daily_kit_sales", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cpg.aggr_cpg_daily_kit_sales", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"]}, "tags": ["Phase 5B"], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_kit_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Kit Sales Table consist of Sales details of WWE Kit products on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 08:00 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_cpg_fact_cpg_sales_detail_radial_abac ; 30230,            t_di_cpg_fact_cpg_sales_detail_cb_abac ; 30231, t_di_cpg_fact_cpg_sales_detail_amazon_abac ; 30232,      t_di_cpg_fact_cpg_sales_header_radial_abac ; 30234, t_di_cpg_fact_cpg_sales_header_cb_abac ; 30235 &     t_di_cpg_fact_cpg_sales_header_amazon_abac ; 30236\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "Order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "Type of Order", "meta": {}, "data_type": null, "tags": []}, "dim_kit_item_id": {"name": "dim_kit_item_id", "description": "dim_kit_item_id referencing from dim_cpg_kit_item table", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id of dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "Cost per Unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "Current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "kit_units_sold": {"name": "kit_units_sold", "description": "Number of Kit Units Sold", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Returned COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id of dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate/aggr_cpg_daily_kit_sales.sql", "compiled": true, "compiled_sql": "\nwith #fact_aggregated_kit_sales_temp1 as \n(select * from (\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n             SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,--kit item\n            -- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n                                     OR  ltrim(RTRIM(src_prepay_code))='F')\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n     c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n   -- src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n   B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity)                      AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n -- i.src_item_id as kit_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n                AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\n\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\nISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT    dim_src_kit_item_id,\n   a.dim_item_id,\n   \n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n   a.dim_item_id,\n  \n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 2*************************************\n#fact_aggregated_kit_sales_temp2 as \n(select * from(\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n           fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n-- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND ---ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number, \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n   B.dim_item_id AS dim_item_id ,--component\n        A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n\t\t\t\tA.dim_src_kit_item_id\n                  --  B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                   -- A.src_kit_id=B.src_item_id\nA.dim_src_kit_item_id=B.dim_item_id\t\t\t\t   )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id--,i.src_item_id\n,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_item_id,\n    dim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                       dim_src_kit_item_id,\n    \n    a.dim_item_id,\n    \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             dim_src_kit_item_id,\n    \n    k.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id , --kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                              A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                      fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                 fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                      fact_cpg_sales_detail.src_unit_cost,\n                      fact_cpg_sales_detail.src_selling_price,\n                      fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n  --  src_kit_id,\n  --  src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \ndim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 3*************************************\n#fact_aggregated_kit_sales_temp3 as \n(select * from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                  A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                     dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n   \n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n     B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n  --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                       A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n          fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\n*/\n                WHERE\n                    --dim_order_method_id=5\n                ISNULL(src_channel_id,'0')='R'\nAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            fds_cpg.fact_cpg_sales_header\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n#fact_aggregate_kit_sales as \n(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\nnet_selling_margin$ net_selling_margin_$\nfrom\n(\n\tselect * from #fact_aggregated_kit_sales_temp1\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp2\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp3\n))\n--select * from fact_aggregate_kit_sales\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_src_kit_item_id as dim_kit_item_id,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\n0 as other_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n0 as kit_units_sold,\n(src_unit_cost/conversion_rate_to_local) as unit_cost_local,\n(src_current_retail_price/conversion_rate_to_local) as current_retail_price_local,\n(demand_cogs_$/conversion_rate_to_local) as demand_cogs_local,\n(shipped_cogs_$/conversion_rate_to_local) as shipped_cogs_local,\n(returned_cogs_$/conversion_rate_to_local) as returned_cogs_local,\n(net_cogs_$/conversion_rate_to_local) as net_cogs_local,\n(demand_retail_$/conversion_rate_to_local) as demand_retail_local,\n(shipped_retail_$/conversion_rate_to_local) as shipped_retail_local,\n(net_retail_$/conversion_rate_to_local) as net_retail_local,\n(demand_sales_$/conversion_rate_to_local) as demand_sales_local,\n(shipped_sales_$/conversion_rate_to_local) as shipped_sales_local,\n(returns_$/conversion_rate_to_local) as returns_local,\n(net_sales_$/conversion_rate_to_local) as net_sales_local,\n(demand_selling_margin_$/conversion_rate_to_local) as demand_selling_margin_local,\n(shipped_selling_margin_$/conversion_rate_to_local) as shipped_selling_margin_local,\n(net_selling_margin_$/conversion_rate_to_local) as net_selling_margin_local,\n0 as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\nselect src.*, \ncoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\nfrom #fact_aggregate_kit_sales src\nleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\non cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith #fact_aggregated_kit_sales_temp1 as \n(select * from (\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n             SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,--kit item\n            -- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n                                     OR  ltrim(RTRIM(src_prepay_code))='F')\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n     c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n   -- src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n   B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity)                      AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n -- i.src_item_id as kit_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n                AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\n\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\nISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT    dim_src_kit_item_id,\n   a.dim_item_id,\n   \n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n   a.dim_item_id,\n  \n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 2*************************************\n#fact_aggregated_kit_sales_temp2 as \n(select * from(\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n           fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n-- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND ---ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number, \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n   B.dim_item_id AS dim_item_id ,--component\n        A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n\t\t\t\tA.dim_src_kit_item_id\n                  --  B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                   -- A.src_kit_id=B.src_item_id\nA.dim_src_kit_item_id=B.dim_item_id\t\t\t\t   )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id--,i.src_item_id\n,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_item_id,\n    dim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                       dim_src_kit_item_id,\n    \n    a.dim_item_id,\n    \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             dim_src_kit_item_id,\n    \n    k.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id , --kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                              A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                      fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                 fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                      fact_cpg_sales_detail.src_unit_cost,\n                      fact_cpg_sales_detail.src_selling_price,\n                      fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n  --  src_kit_id,\n  --  src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \ndim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 3*************************************\n#fact_aggregated_kit_sales_temp3 as \n(select * from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                  A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                     dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n   \n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n     B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n  --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                       A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n          fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\n*/\n                WHERE\n                    --dim_order_method_id=5\n                ISNULL(src_channel_id,'0')='R'\nAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            fds_cpg.fact_cpg_sales_header\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n#fact_aggregate_kit_sales as \n(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\nnet_selling_margin$ net_selling_margin_$\nfrom\n(\n\tselect * from #fact_aggregated_kit_sales_temp1\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp2\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp3\n))\n--select * from fact_aggregate_kit_sales\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_src_kit_item_id as dim_kit_item_id,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\n0 as other_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n0 as kit_units_sold,\n(src_unit_cost/conversion_rate_to_local) as unit_cost_local,\n(src_current_retail_price/conversion_rate_to_local) as current_retail_price_local,\n(demand_cogs_$/conversion_rate_to_local) as demand_cogs_local,\n(shipped_cogs_$/conversion_rate_to_local) as shipped_cogs_local,\n(returned_cogs_$/conversion_rate_to_local) as returned_cogs_local,\n(net_cogs_$/conversion_rate_to_local) as net_cogs_local,\n(demand_retail_$/conversion_rate_to_local) as demand_retail_local,\n(shipped_retail_$/conversion_rate_to_local) as shipped_retail_local,\n(net_retail_$/conversion_rate_to_local) as net_retail_local,\n(demand_sales_$/conversion_rate_to_local) as demand_sales_local,\n(shipped_sales_$/conversion_rate_to_local) as shipped_sales_local,\n(returns_$/conversion_rate_to_local) as returns_local,\n(net_sales_$/conversion_rate_to_local) as net_sales_local,\n(demand_selling_margin_$/conversion_rate_to_local) as demand_selling_margin_local,\n(shipped_selling_margin_$/conversion_rate_to_local) as shipped_selling_margin_local,\n(net_selling_margin_$/conversion_rate_to_local) as net_selling_margin_local,\n0 as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\nselect src.*, \ncoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\nfrom #fact_aggregate_kit_sales src\nleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\non cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)"}, "error": null, "status": null, "execution_time": 0.17334890365600586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:48:59.937187Z", "completed_at": "2020-09-21T17:49:00.109792Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.110126Z", "completed_at": "2020-09-21T17:49:00.110137Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_cpg',\n\t\t\"pre-hook\": [\"delete from fds_cpg.aggr_cpg_daily_sales\"],\n\t\t\"materialized\": 'incremental','tags': \"Phase 5B\"\n  })\n}}\n\nwith #fact_aggregate_sales_temp1 as\n(select * from(\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n      ,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n        --  ,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        , sum(\"Return$\") as \"Return$\"  \n        , sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n         ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,dim_order_method_id  \n                                       ,src_order_type         \n               ,Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,SUM(src_units_shipped) as src_units_shipped  \n                                       ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                           ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n         ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n               ,order_date_id as Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n       ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n                          ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)\n   left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>19000101 or ship_date_id>19000101) and   \n                  dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n            FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)\n left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>19000101 or ship_date_id>19000101) and   \n dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n      src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in \n\t\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)\n left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)\n left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t\t,dim_order_method_id  \n                                     ,src_order_type       \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (   \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove  \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM   \n               {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)\n\t\t\t   left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n                                  src_order_number not in   \n          (  \n          SELECT  distinct ltrim(rtrim(src_order_number)) As src_order_number  \n           FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)\n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)\n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n              UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type        \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,ship_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)\n left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R'   \n                                    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                                    and src_order_status='IN'   \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,sum(src_kit_units_ordered ) as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                       ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n{{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock) \n left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n   FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,\n            src_order_type,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_kit_selling_price,  \n            src_current_retail_price,  \n            src_kit_units_ordered,  \n            order_date_id   \n   ) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Gratis_Orders]\n#fact_aggregate_sales_temp2 as\n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n       --  ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n       -- ,null as venue_key\n       -- ,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock)\nleft join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n   \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n                        dim_item_id not in\n\t\t\t\t\t\t\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)  \n      left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n       dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n           ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock) left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n   where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and  \n            dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)  \nleft join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)    \n                                  left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                   src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')     \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)\nleft join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n    where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n{{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)  left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN'     \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Free_Orders]\n#fact_aggregate_sales_temp3 as \n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n         --,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Regular Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock)  \n                        left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where    \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)  \n      left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n      dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock) left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where      \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)  \n                                                            left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\nwhere src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n               {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)    \n                                   left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                  src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)    \n                                   left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n{{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)  left join\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN' \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id )),\n--[SP_Aggregate_Header]\n#fact_aggregate_sales_temp4 as \n(select *  from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n     ,dim_item_id \n     ,sum(Other_Amount) as Other_Amount \n     ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n      -- ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n            from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \n    left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere\n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n       --,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \n      -- ,current_date as create_timestamp\n      --  ,'ETL' as created_by\n      --  ,null as update_timestamp\n      --  ,null as updated_by\n      --  ,null as venue_key\n      --  ,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\t\n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'   \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  ,src_order_type    ,Date_Key,  dim_item_id  )),\n\n #fact_aggregate_sales as\n(select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\n,net_selling_margin$ net_selling_margin_$\n from\n(\n select * from #fact_aggregate_sales_temp1 \n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp2\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp3\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp4\n))\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\nother_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n(src_unit_cost/nullif(conversion_rate_to_local,0)) as unit_cost_local,\n(src_current_retail_price/nullif(conversion_rate_to_local,0)) as current_retail_price_local,\n(demand_cogs_$/nullif(conversion_rate_to_local,0)) as demand_cogs_local,\n(shipped_cogs_$/nullif(conversion_rate_to_local,0)) as shipped_cogs_local,\n(returned_cogs_$/nullif(conversion_rate_to_local,0)) as returned_cogs_local,\n(net_cogs_$/nullif(conversion_rate_to_local,0)) as net_cogs_local,\n(demand_retail_$/nullif(conversion_rate_to_local,0)) as demand_retail_local,\n(shipped_retail_$/nullif(conversion_rate_to_local,0)) as shipped_retail_local,\n(net_retail_$/nullif(conversion_rate_to_local,0)) as net_retail_local,\n(demand_sales_$/nullif(conversion_rate_to_local,0)) as demand_sales_local,\n(shipped_sales_$/nullif(conversion_rate_to_local,0)) as shipped_sales_local,\n(returns_$/nullif(conversion_rate_to_local,0)) as returns_local,\n(net_sales_$/nullif(conversion_rate_to_local,0)) as net_sales_local,\n(demand_selling_margin_$/nullif(conversion_rate_to_local,0)) as demand_selling_margin_local,\n(shipped_selling_margin_$/nullif(conversion_rate_to_local,0)) as shipped_selling_margin_local,\n(net_selling_margin_$/nullif(conversion_rate_to_local,0)) as net_selling_margin_local,\n(other_amount/nullif(conversion_rate_to_local,0)) as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\n\tselect src.*,\n\tcoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\n\tfrom #fact_aggregate_sales src\n\t--left outer join public.dim_Date dt on  dt.datekey=src.date_key\n\tleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\n\ton cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate", "aggr_cpg_daily_sales"], "unique_id": "model.analytics_engineering_marts.aggr_cpg_daily_sales", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cpg/aggregate/aggr_cpg_daily_sales.sql", "original_file_path": "models/fds_cpg/aggregate/aggr_cpg_daily_sales.sql", "name": "aggr_cpg_daily_sales", "resource_type": "model", "alias": "aggr_cpg_daily_sales", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cpg.aggr_cpg_daily_sales", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"]}, "tags": ["Phase 5B"], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Sales Table consist of Sales details of WWE products on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 08:00 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_cpg_fact_cpg_sales_detail_radial_abac ; 30230,            t_di_cpg_fact_cpg_sales_detail_cb_abac ; 30231, t_di_cpg_fact_cpg_sales_detail_amazon_abac ; 30232, t_di_cpg_fact_cpg_sales_detail_kit_component_radial_abac ; 30233, t_di_cpg_fact_cpg_sales_header_radial_abac ; 30234, t_di_cpg_fact_cpg_sales_header_cb_abac ; 30235 & t_di_cpg_fact_cpg_sales_header_amazon_abac ; 30236\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "type of order", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id from dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "cost per unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Return COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency Code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id from dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate/aggr_cpg_daily_sales.sql", "compiled": true, "compiled_sql": "\n\nwith #fact_aggregate_sales_temp1 as\n(select * from(\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n      ,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n        --  ,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        , sum(\"Return$\") as \"Return$\"  \n        , sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n         ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,dim_order_method_id  \n                                       ,src_order_type         \n               ,Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,SUM(src_units_shipped) as src_units_shipped  \n                                       ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                           ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n         ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n               ,order_date_id as Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n       ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n                          ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>19000101 or ship_date_id>19000101) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>19000101 or ship_date_id>19000101) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n      src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in \n\t\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t\t,dim_order_method_id  \n                                     ,src_order_type       \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (   \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove  \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM   \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n\t\t\t   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n                                  src_order_number not in   \n          (  \n          SELECT  distinct ltrim(rtrim(src_order_number)) As src_order_number  \n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n              UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type        \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,ship_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R'   \n                                    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                                    and src_order_status='IN'   \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,sum(src_kit_units_ordered ) as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                       ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock) \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,\n            src_order_type,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_kit_selling_price,  \n            src_current_retail_price,  \n            src_kit_units_ordered,  \n            order_date_id   \n   ) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Gratis_Orders]\n#fact_aggregate_sales_temp2 as\n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n       --  ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n       -- ,null as venue_key\n       -- ,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n   \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n                        dim_item_id not in\n\t\t\t\t\t\t\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n           ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n   where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and  \n            dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                   src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')     \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n    where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN'     \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Free_Orders]\n#fact_aggregate_sales_temp3 as \n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n         --,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Regular Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)  \n                        left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where    \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n      dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where      \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \n                                                            left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\nwhere src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                  src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN' \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id )),\n--[SP_Aggregate_Header]\n#fact_aggregate_sales_temp4 as \n(select *  from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n     ,dim_item_id \n     ,sum(Other_Amount) as Other_Amount \n     ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n      -- ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n            from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere\n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n       --,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \n      -- ,current_date as create_timestamp\n      --  ,'ETL' as created_by\n      --  ,null as update_timestamp\n      --  ,null as updated_by\n      --  ,null as venue_key\n      --  ,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\t\n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'   \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  ,src_order_type    ,Date_Key,  dim_item_id  )),\n\n #fact_aggregate_sales as\n(select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\n,net_selling_margin$ net_selling_margin_$\n from\n(\n select * from #fact_aggregate_sales_temp1 \n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp2\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp3\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp4\n))\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\nother_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n(src_unit_cost/nullif(conversion_rate_to_local,0)) as unit_cost_local,\n(src_current_retail_price/nullif(conversion_rate_to_local,0)) as current_retail_price_local,\n(demand_cogs_$/nullif(conversion_rate_to_local,0)) as demand_cogs_local,\n(shipped_cogs_$/nullif(conversion_rate_to_local,0)) as shipped_cogs_local,\n(returned_cogs_$/nullif(conversion_rate_to_local,0)) as returned_cogs_local,\n(net_cogs_$/nullif(conversion_rate_to_local,0)) as net_cogs_local,\n(demand_retail_$/nullif(conversion_rate_to_local,0)) as demand_retail_local,\n(shipped_retail_$/nullif(conversion_rate_to_local,0)) as shipped_retail_local,\n(net_retail_$/nullif(conversion_rate_to_local,0)) as net_retail_local,\n(demand_sales_$/nullif(conversion_rate_to_local,0)) as demand_sales_local,\n(shipped_sales_$/nullif(conversion_rate_to_local,0)) as shipped_sales_local,\n(returns_$/nullif(conversion_rate_to_local,0)) as returns_local,\n(net_sales_$/nullif(conversion_rate_to_local,0)) as net_sales_local,\n(demand_selling_margin_$/nullif(conversion_rate_to_local,0)) as demand_selling_margin_local,\n(shipped_selling_margin_$/nullif(conversion_rate_to_local,0)) as shipped_selling_margin_local,\n(net_selling_margin_$/nullif(conversion_rate_to_local,0)) as net_selling_margin_local,\n(other_amount/nullif(conversion_rate_to_local,0)) as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\n\tselect src.*,\n\tcoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\n\tfrom #fact_aggregate_sales src\n\t--left outer join public.dim_Date dt on  dt.datekey=src.date_key\n\tleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\n\ton cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith #fact_aggregate_sales_temp1 as\n(select * from(\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n      ,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n        --  ,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        , sum(\"Return$\") as \"Return$\"  \n        , sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n         ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,dim_order_method_id  \n                                       ,src_order_type         \n               ,Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,SUM(src_units_shipped) as src_units_shipped  \n                                       ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                           ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n         ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n               ,order_date_id as Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n       ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n                          ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>19000101 or ship_date_id>19000101) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>19000101 or ship_date_id>19000101) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n      src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in \n\t\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t\t,dim_order_method_id  \n                                     ,src_order_type       \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (   \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove  \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM   \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n\t\t\t   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n                                  src_order_number not in   \n          (  \n          SELECT  distinct ltrim(rtrim(src_order_number)) As src_order_number  \n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n              UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type        \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,ship_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R'   \n                                    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                                    and src_order_status='IN'   \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,sum(src_kit_units_ordered ) as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                       ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock) \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,\n            src_order_type,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_kit_selling_price,  \n            src_current_retail_price,  \n            src_kit_units_ordered,  \n            order_date_id   \n   ) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Gratis_Orders]\n#fact_aggregate_sales_temp2 as\n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n       --  ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n       -- ,null as venue_key\n       -- ,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n   \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n                        dim_item_id not in\n\t\t\t\t\t\t\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n           ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n   where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and  \n            dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                   src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')     \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n    where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN'     \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Free_Orders]\n#fact_aggregate_sales_temp3 as \n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n         --,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Regular Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)  \n                        left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where    \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n      dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where      \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \n                                                            left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\nwhere src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                  src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN' \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id )),\n--[SP_Aggregate_Header]\n#fact_aggregate_sales_temp4 as \n(select *  from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n     ,dim_item_id \n     ,sum(Other_Amount) as Other_Amount \n     ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n      -- ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n            from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere\n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n       --,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \n      -- ,current_date as create_timestamp\n      --  ,'ETL' as created_by\n      --  ,null as update_timestamp\n      --  ,null as updated_by\n      --  ,null as venue_key\n      --  ,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\t\n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'   \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  ,src_order_type    ,Date_Key,  dim_item_id  )),\n\n #fact_aggregate_sales as\n(select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\n,net_selling_margin$ net_selling_margin_$\n from\n(\n select * from #fact_aggregate_sales_temp1 \n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp2\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp3\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp4\n))\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\nother_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n(src_unit_cost/nullif(conversion_rate_to_local,0)) as unit_cost_local,\n(src_current_retail_price/nullif(conversion_rate_to_local,0)) as current_retail_price_local,\n(demand_cogs_$/nullif(conversion_rate_to_local,0)) as demand_cogs_local,\n(shipped_cogs_$/nullif(conversion_rate_to_local,0)) as shipped_cogs_local,\n(returned_cogs_$/nullif(conversion_rate_to_local,0)) as returned_cogs_local,\n(net_cogs_$/nullif(conversion_rate_to_local,0)) as net_cogs_local,\n(demand_retail_$/nullif(conversion_rate_to_local,0)) as demand_retail_local,\n(shipped_retail_$/nullif(conversion_rate_to_local,0)) as shipped_retail_local,\n(net_retail_$/nullif(conversion_rate_to_local,0)) as net_retail_local,\n(demand_sales_$/nullif(conversion_rate_to_local,0)) as demand_sales_local,\n(shipped_sales_$/nullif(conversion_rate_to_local,0)) as shipped_sales_local,\n(returns_$/nullif(conversion_rate_to_local,0)) as returns_local,\n(net_sales_$/nullif(conversion_rate_to_local,0)) as net_sales_local,\n(demand_selling_margin_$/nullif(conversion_rate_to_local,0)) as demand_selling_margin_local,\n(shipped_selling_margin_$/nullif(conversion_rate_to_local,0)) as shipped_selling_margin_local,\n(net_selling_margin_$/nullif(conversion_rate_to_local,0)) as net_selling_margin_local,\n(other_amount/nullif(conversion_rate_to_local,0)) as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\n\tselect src.*,\n\tcoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\n\tfrom #fact_aggregate_sales src\n\t--left outer join public.dim_Date dt on  dt.datekey=src.date_key\n\tleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\n\ton cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)"}, "error": null, "status": null, "execution_time": 0.25136613845825195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.110821Z", "completed_at": "2020-09-21T17:49:00.361401Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.361736Z", "completed_at": "2020-09-21T17:49:00.361746Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_nplus',\t\n\t\"materialized\": 'incremental',\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect a.bill_date,a.paid_winbacks, a.new_paid, a.free_trial_subs, a.losses,\npaid_churn_rate, total_churn_rate, eom_total_subs, adp,\npaid_winbacks_ly, new_paid_ly, free_trial_subs_ly, losses_ly, paid_churn_rate_ly, total_churn_rate_ly, eom_total_subs_ly, adp_ly,\npaid_winbacks_f, new_paid_f, free_trial_subs_f, losses_f, eom_total_subs_f, adp_f,\nmnthly_total_hours_watched, mnthly_avg_hours_per_sub,lst_mnth_subs_viewing_cohort_rate,\nmnthly_total_hours_watched_ly, mnthly_avg_hours_per_sub_ly, lst_mnth_subs_viewing_cohort_rate_ly \nfrom \n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Current Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid,sum(trial_adds) as free_trial_subs,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses \nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}})  \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2) a\n\nleft join\n\n--OTT Total Churn Rate, Paid Churn Rate\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\nleft join (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\nwhere as_on_date=date_trunc('month',dateadd(month,-1,current_date)) and payment_method<>'roku_iap') b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} where forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-2,current_date))) =year\nand extract(month from current_date)-2=month ) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2 \n) b\non a.bill_date = b.bill_date\n\nleft join\n\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then nvl(trial_active_end,0) else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs,\nsum(avg_daily_paid_subs) as adp\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\nleft join (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\nwhere as_on_date=date_trunc('month',current_date) and payment_method<>'roku_iap') b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n)c\non a.bill_date = c.bill_date\n\nleft join\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Previous Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_ly,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_ly,sum(trial_adds) as free_trial_subs_ly,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_ly \nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} \nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}})\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) d\non a.bill_date = d.bill_date\n\nleft join\n(\n--OTT Total Churn Rate, Paid Churn Rate\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate_ly,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate_ly\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\nleft join \n(select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\nwhere as_on_date=date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from fds_nplus.aggr_kpi_hist\nwhere as_on_date= date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and as_on_Date<='2019-12-14')) b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} where forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-2=month) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) e\non a.bill_date = e.bill_date\n\nleft join\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then trial_active_end else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs_ly,\nsum(avg_daily_paid_subs) as adp_ly\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\nleft join (select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\nwhere as_on_date=date_trunc('month',dateadd(year,-1,current_date)) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_kpi_hist')}}\nwhere as_on_date= date_trunc('month',dateadd(year,-1,current_date)) and as_on_Date<='2019-12-14')) b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) f\non a.bill_date = f.bill_date\n\nleft join\n\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Forecast Current Year\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT FYE (OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses)\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_f,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_f,sum(trial_adds) as free_trial_subs_f,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_f\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) g\non a.bill_date = g.bill_date\n\nleft join\n(\n--All Providers FYE EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(nvl(trial_active_end,0)) as eom_total_subs_f,\nsum(avg_daily_paid_subs) as adp_f\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}  \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) h\non a.bill_date = h.bill_date\n\nleft join\n(\n--Viewership Actual\nselect  mnth_start_dt as bill_date, \nmnthly_total_hours_watched,mnthly_avg_hours_per_sub\nfrom {{source('fds_nplus','aggr_monthly_program_type_viewership')}}\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from {{source('fds_nplus','aggr_monthly_program_type_viewership')}})\nand subs_tier='95'\nand initial_signup_year = '2099'\n) i\non a.bill_date = i.bill_date\n\nleft join\n(\nselect  mnth_start_dt as bill_date,lst_mnth_subs_viewing_cohort_rate\nfrom {{source('fds_nplus','aggr_monthly_subs_cohort_viewership')}}\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from {{source('fds_nplus','aggr_monthly_subs_cohort_viewership')}})\nand subs_tier='95'\nand subs_year = '2099'\n) j\non a.bill_date = j.bill_date\n\nleft join\n(\n--Viewership Last Year\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date, \nmnthly_total_hours_watched as mnthly_total_hours_watched_ly,\nmnthly_avg_hours_per_sub as mnthly_avg_hours_per_sub_ly\nfrom {{source('fds_nplus','aggr_monthly_program_type_viewership')}}\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand initial_signup_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) k\non a.bill_date = k.bill_date\n\nleft join\n(\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date,\nlst_mnth_subs_viewing_cohort_rate as lst_mnth_subs_viewing_cohort_rate_ly\nfrom fds_nplus.aggr_monthly_subs_cohort_viewership\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand subs_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) l\non a.bill_date = l.bill_date\n)", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "aggr_monthly_network_kpis_vkm"], "unique_id": "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/aggregate/aggr_monthly_network_kpis_vkm.sql", "original_file_path": "models/fds_nplus/aggregate/aggr_monthly_network_kpis_vkm.sql", "name": "aggr_monthly_network_kpis_vkm", "resource_type": "model", "alias": "aggr_monthly_network_kpis_vkm", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_kpi_hist"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_monthly_program_type_viewership"], ["fds_nplus", "aggr_monthly_program_type_viewership"], ["fds_nplus", "aggr_monthly_subs_cohort_viewership"], ["fds_nplus", "aggr_monthly_subs_cohort_viewership"], ["fds_nplus", "aggr_monthly_program_type_viewership"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership"]}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_monthly_network_kpis_vkm\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : monthly VKM network kpis\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT : Sudhakar Change: Initial Version", "columns": {"bill_date": {"name": "bill_date", "description": "report date", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks": {"name": "paid_winbacks", "description": "All paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "new_paid": {"name": "new_paid", "description": "All paid subscriptions who have paid for the first time", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs": {"name": "free_trial_subs", "description": "Total trial adds for the month", "meta": {}, "data_type": null, "tags": []}, "losses": {"name": "losses", "description": "Total Paid and trial Losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate": {"name": "paid_churn_rate", "description": "paid churn rate", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate": {"name": "total_churn_rate", "description": "total churn rate", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs": {"name": "eom_total_subs", "description": "end of month total subscriptions", "meta": {}, "data_type": null, "tags": []}, "adp": {"name": "adp", "description": "average daily paid subscriptions", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_ly": {"name": "paid_winbacks_ly", "description": "All paid winback subscriptions for the month in last year", "meta": {}, "data_type": null, "tags": []}, "new_paid_ly": {"name": "new_paid_ly", "description": "All paid subscriptions who have paid for the first time last year", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_ly": {"name": "free_trial_subs_ly", "description": "Total trial adds for the month in last year", "meta": {}, "data_type": null, "tags": []}, "losses_ly": {"name": "losses_ly", "description": "Total Paid and trial Losses for the month last year", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate_ly": {"name": "paid_churn_rate_ly", "description": "paid churn rate last year", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate_ly": {"name": "total_churn_rate_ly", "description": "total churn rate last year", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_ly": {"name": "eom_total_subs_ly", "description": "end of month total subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "adp_ly": {"name": "adp_ly", "description": "average daily paid subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_f": {"name": "paid_winbacks_f", "description": "All paid winback subscriptions for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "new_paid_f": {"name": "new_paid_f", "description": "All paid subscriptions who have paid for the first time forecasted", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_f": {"name": "free_trial_subs_f", "description": "Total trial adds for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "losses_f": {"name": "losses_f", "description": "Total Paid and trial Losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_f": {"name": "eom_total_subs_f", "description": "end of month total subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "adp_f": {"name": "adp_f", "description": "average daily paid subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched": {"name": "mnthly_total_hours_watched", "description": "Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub": {"name": "mnthly_avg_hours_per_sub", "description": "average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate": {"name": "lst_mnth_subs_viewing_cohort_rate", "description": "viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched_ly": {"name": "mnthly_total_hours_watched_ly", "description": "last year Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub_ly": {"name": "mnthly_avg_hours_per_sub_ly", "description": "last year average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate_ly": {"name": "lst_mnth_subs_viewing_cohort_rate_ly", "description": "last year viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/aggregate/aggr_monthly_network_kpis_vkm.sql", "compiled": true, "compiled_sql": "\nselect a.bill_date,a.paid_winbacks, a.new_paid, a.free_trial_subs, a.losses,\npaid_churn_rate, total_churn_rate, eom_total_subs, adp,\npaid_winbacks_ly, new_paid_ly, free_trial_subs_ly, losses_ly, paid_churn_rate_ly, total_churn_rate_ly, eom_total_subs_ly, adp_ly,\npaid_winbacks_f, new_paid_f, free_trial_subs_f, losses_f, eom_total_subs_f, adp_f,\nmnthly_total_hours_watched, mnthly_avg_hours_per_sub,lst_mnth_subs_viewing_cohort_rate,\nmnthly_total_hours_watched_ly, mnthly_avg_hours_per_sub_ly, lst_mnth_subs_viewing_cohort_rate_ly \nfrom \n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Current Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid,sum(trial_adds) as free_trial_subs,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")  \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2) a\n\nleft join\n\n--OTT Total Churn Rate, Paid Churn Rate\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(month,-1,current_date)) and payment_method<>'roku_iap') b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-2,current_date))) =year\nand extract(month from current_date)-2=month ) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2 \n) b\non a.bill_date = b.bill_date\n\nleft join\n\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then nvl(trial_active_end,0) else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs,\nsum(avg_daily_paid_subs) as adp\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',current_date) and payment_method<>'roku_iap') b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n)c\non a.bill_date = c.bill_date\n\nleft join\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Previous Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_ly,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_ly,sum(trial_adds) as free_trial_subs_ly,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_ly \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) d\non a.bill_date = d.bill_date\n\nleft join\n(\n--OTT Total Churn Rate, Paid Churn Rate\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate_ly,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join \n(select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from fds_nplus.aggr_kpi_hist\nwhere as_on_date= date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and as_on_Date<='2019-12-14')) b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-2=month) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) e\non a.bill_date = e.bill_date\n\nleft join\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then trial_active_end else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs_ly,\nsum(avg_daily_paid_subs) as adp_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,current_date)) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"\nwhere as_on_date= date_trunc('month',dateadd(year,-1,current_date)) and as_on_Date<='2019-12-14')) b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) f\non a.bill_date = f.bill_date\n\nleft join\n\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Forecast Current Year\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT FYE (OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses)\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_f,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_f,sum(trial_adds) as free_trial_subs_f,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) g\non a.bill_date = g.bill_date\n\nleft join\n(\n--All Providers FYE EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(nvl(trial_active_end,0)) as eom_total_subs_f,\nsum(avg_daily_paid_subs) as adp_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) h\non a.bill_date = h.bill_date\n\nleft join\n(\n--Viewership Actual\nselect  mnth_start_dt as bill_date, \nmnthly_total_hours_watched,mnthly_avg_hours_per_sub\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\")\nand subs_tier='95'\nand initial_signup_year = '2099'\n) i\non a.bill_date = i.bill_date\n\nleft join\n(\nselect  mnth_start_dt as bill_date,lst_mnth_subs_viewing_cohort_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\")\nand subs_tier='95'\nand subs_year = '2099'\n) j\non a.bill_date = j.bill_date\n\nleft join\n(\n--Viewership Last Year\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date, \nmnthly_total_hours_watched as mnthly_total_hours_watched_ly,\nmnthly_avg_hours_per_sub as mnthly_avg_hours_per_sub_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand initial_signup_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) k\non a.bill_date = k.bill_date\n\nleft join\n(\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date,\nlst_mnth_subs_viewing_cohort_rate as lst_mnth_subs_viewing_cohort_rate_ly\nfrom fds_nplus.aggr_monthly_subs_cohort_viewership\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand subs_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) l\non a.bill_date = l.bill_date\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect a.bill_date,a.paid_winbacks, a.new_paid, a.free_trial_subs, a.losses,\npaid_churn_rate, total_churn_rate, eom_total_subs, adp,\npaid_winbacks_ly, new_paid_ly, free_trial_subs_ly, losses_ly, paid_churn_rate_ly, total_churn_rate_ly, eom_total_subs_ly, adp_ly,\npaid_winbacks_f, new_paid_f, free_trial_subs_f, losses_f, eom_total_subs_f, adp_f,\nmnthly_total_hours_watched, mnthly_avg_hours_per_sub,lst_mnth_subs_viewing_cohort_rate,\nmnthly_total_hours_watched_ly, mnthly_avg_hours_per_sub_ly, lst_mnth_subs_viewing_cohort_rate_ly \nfrom \n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Current Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid,sum(trial_adds) as free_trial_subs,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")  \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2) a\n\nleft join\n\n--OTT Total Churn Rate, Paid Churn Rate\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(month,-1,current_date)) and payment_method<>'roku_iap') b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-2,current_date))) =year\nand extract(month from current_date)-2=month ) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2 \n) b\non a.bill_date = b.bill_date\n\nleft join\n\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then nvl(trial_active_end,0) else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs,\nsum(avg_daily_paid_subs) as adp\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',current_date) and payment_method<>'roku_iap') b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n)c\non a.bill_date = c.bill_date\n\nleft join\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Previous Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_ly,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_ly,sum(trial_adds) as free_trial_subs_ly,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_ly \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) d\non a.bill_date = d.bill_date\n\nleft join\n(\n--OTT Total Churn Rate, Paid Churn Rate\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate_ly,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join \n(select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from fds_nplus.aggr_kpi_hist\nwhere as_on_date= date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and as_on_Date<='2019-12-14')) b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-2=month) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) e\non a.bill_date = e.bill_date\n\nleft join\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then trial_active_end else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs_ly,\nsum(avg_daily_paid_subs) as adp_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,current_date)) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"\nwhere as_on_date= date_trunc('month',dateadd(year,-1,current_date)) and as_on_Date<='2019-12-14')) b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) f\non a.bill_date = f.bill_date\n\nleft join\n\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Forecast Current Year\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT FYE (OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses)\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_f,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_f,sum(trial_adds) as free_trial_subs_f,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) g\non a.bill_date = g.bill_date\n\nleft join\n(\n--All Providers FYE EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(nvl(trial_active_end,0)) as eom_total_subs_f,\nsum(avg_daily_paid_subs) as adp_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) h\non a.bill_date = h.bill_date\n\nleft join\n(\n--Viewership Actual\nselect  mnth_start_dt as bill_date, \nmnthly_total_hours_watched,mnthly_avg_hours_per_sub\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\")\nand subs_tier='95'\nand initial_signup_year = '2099'\n) i\non a.bill_date = i.bill_date\n\nleft join\n(\nselect  mnth_start_dt as bill_date,lst_mnth_subs_viewing_cohort_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\")\nand subs_tier='95'\nand subs_year = '2099'\n) j\non a.bill_date = j.bill_date\n\nleft join\n(\n--Viewership Last Year\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date, \nmnthly_total_hours_watched as mnthly_total_hours_watched_ly,\nmnthly_avg_hours_per_sub as mnthly_avg_hours_per_sub_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand initial_signup_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) k\non a.bill_date = k.bill_date\n\nleft join\n(\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date,\nlst_mnth_subs_viewing_cohort_rate as lst_mnth_subs_viewing_cohort_rate_ly\nfrom fds_nplus.aggr_monthly_subs_cohort_viewership\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand subs_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) l\non a.bill_date = l.bill_date\n)"}, "error": null, "status": null, "execution_time": 0.05775570869445801, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.362416Z", "completed_at": "2020-09-21T17:49:00.419428Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.419754Z", "completed_at": "2020-09-21T17:49:00.419766Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_cp',\n    \"pre-hook\": \"delete from fds_cp.rpt_cp_monthly_global_consumption_by_platform where platform='TikTok' and month = date_trunc('month',current_date-25)\",\n    \"materialized\": \"incremental\"\n  })\n}}\nwith #temp_table as \n(select x.platform,\n\t\tx.type, \n\t\t'' as type2, \n\t\tnvl(y.region_nm,'Global') as Region, \n\t\tnvl(y.country_nm,'Global') as Country,\n\t\tx.month, \n\t\tx.views, \n\t\tx.hours_watched, \n\t\t0 as ytd_views, \n\t\t0 as ytd_hours_watched, \n\t\t0 as prev_year_views, \n\t\t0 as prev_year_hours\n from\n\t\t(select distinct \n\t\t\t\t'TikTok' as platform, \n\t\t\t\tb.month, '' as type, \n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.views\n\t\t\t\telse b.views\n\t\t\t\tend as views,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.hours_watched\n\t\t\t\telse b.hours_watched\n\t\t\t\tend as hours_watched,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.Country\n\t\t\t\telse b.Country\n\t\t\t\tend as Country\n\t\tfrom\n\t\t\t\t((select date_trunc('month', (source_as_on_date-1)) as month, \n\t\t\t\t\t\t country as Country,\n\t\t\t\t\t\t sum(video_views) views, \n\t\t\t\t\t\t sum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_monthly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_monthly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date-1),country) a\n\t\t\t\t right outer join\n\t\t\t\t(select date_trunc('month',source_as_on_date) as month, \n\t\t\t\t\t\tcountry as Country,\n\t\t\t\t\t\tsum(video_views) views, \n\t\t\t\t\t\tsum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_weekly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date-25) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_weekly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date),country) b\n\t\t\t\t on 1=1)\n\t\t) x\nleft join\ncdm.dim_region_country y\n\t\ton lower(x.country)=lower(y.iso_alpha2_ctry_cd)\n\t\tand src_sys_cd='iso'\n\t\tand ent_map_nm='GM Region'\n),\n\n#all_data as\n((select platform,\n\t\t type, \n\t\t type2, \n\t\t region, \n\t\t country,\n\t\t month, \n\t\t views, \n\t\t hours_watched, \n\t\t ytd_views, \n\t\t ytd_hours_watched, \n\t\t prev_year_views, \n\t\t prev_year_hours \n from fds_cp.rpt_cp_monthly_global_consumption_by_platform\n where month between date_trunc('month',add_months(current_date,-14)) and date_trunc('month',current_date-50) and platform ='TikTok')\nunion\n(select * from #temp_table))\n\n(select a.platform, \n\t\ta.type, \n\t\t'' as type2,  \n\t\ta.Region, \n\t\ta.Country, \n\t\ta.month, \n\t\ta.views, \n\t\ta.hours_watched, \n\t\tb.prev_month_views, \n\t\tb.prev_month_hours, \n\t\td.ytd_views, \n\t\td.ytd_hours_watched, \n\t\tc.prev_year_views, \n\t\tc.prev_year_hours,\n\t\t100001 \t\t as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate \t as etl_insert_rec_dttm,\n\t\t'' \t\t\t as etl_update_user_id,\n\t\tsysdate \t as\tetl_update_rec_dttm\nfrom \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews, \n\t\t\t\thours_watched\n\t\tfrom #temp_table ) as a\nleft join \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews as prev_month_views, \n\t\t\t\thours_watched as prev_month_hours\n\t\tfrom #all_data ) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.month=add_months (b.month,1)\n\t\t\tand a.type=b.type\n\t\t\tand a.Country=b.Country\n\t\t\tand a.Region=b.Region\nleft join\n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tytd_views as prev_year_views, \n\t\t\t\tytd_hours_watched as prev_year_hours\n\t\tfrom #all_data) as c\n\t\t\ton a.platform=c.platform\n\t\t\tand add_months(a.month,-12)=c.month\n\t\t\tand a.type=c.type\n\t\t\tand a.Country=c.Country\n\t\t\tand a.Region=c.Region\nleft join\n\t\t(select platform, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tsum(views) ytd_views, \n\t\t\t\tsum(hours_watched) ytd_hours_watched\n\t\tfrom #all_data\n\t\twhere month between date_trunc('year',current_date-25) and date_trunc('month',current_date-25)\n\t\tgroup by 1,2,3,4) d\n\t\t\ton a.Country=d.Country\n\t\t\tand a.Region=d.Region\n\t\t\tand a.type=d.type\n\t\t\tand a.platform=d.platform\nwhere a.month = date_trunc('month',current_date-25))", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate", "rpt_cp_monthly_global_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cp/aggregate/rpt_cp_monthly_global_consumption_by_platform.sql", "original_file_path": "models/fds_cp/aggregate/rpt_cp_monthly_global_consumption_by_platform.sql", "name": "rpt_cp_monthly_global_consumption_by_platform", "resource_type": "model", "alias": "rpt_cp_monthly_global_consumption_by_platform", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cp.rpt_cp_monthly_global_consumption_by_platform where platform='TikTok' and month = date_trunc('month',current_date-25)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "## Implementation Detail\n*   Date        : 07/14/2020\n*   Version     : 1.0\n*   ViewName    : rpt_cp_monthly_global_consumption_by_platform\n*   Schema\t: fds_cp\n*   Contributor : Sandeep Battula\n*   Description : Monthly Cross Platform Global Content Consumption aggregate table consists of consumption metrics Views and Hours watched with country and \tregion details for all cross platforms. This script inserts last month data for platforms- Youtube, Facebook, WWE.Com and WWE App, Instagram, Snapchat and Twitter from respective source tables on monthly basis (5th of every month). Inaddition to the latest month, metrics are also calculated and inserted for previous month, year-to-date and previous year-to-date. \n\n## Maintenance Log\n* Date : 07/14/2020 ; Developer: Sandeep Battula ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"platform": {"name": "platform", "description": "name of cross platform", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "platform type where applicable", "meta": {}, "data_type": null, "tags": []}, "type2": {"name": "type2", "description": "network premium type for International TV - Pay or FTA", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "geographical region based on country", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "country", "meta": {}, "data_type": null, "tags": []}, "month": {"name": "month", "description": "view month", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "total views for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "hours_watched": {"name": "hours_watched", "description": "total hours watched for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "total views for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_hours": {"name": "prev_month_hours", "description": "total hours watched for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_views": {"name": "ytd_views", "description": "total year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_hours_watched": {"name": "ytd_hours_watched", "description": "total year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "total previous year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_hours": {"name": "prev_year_hours", "description": "total previous year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate/rpt_cp_monthly_global_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\nwith #temp_table as \n(select x.platform,\n\t\tx.type, \n\t\t'' as type2, \n\t\tnvl(y.region_nm,'Global') as Region, \n\t\tnvl(y.country_nm,'Global') as Country,\n\t\tx.month, \n\t\tx.views, \n\t\tx.hours_watched, \n\t\t0 as ytd_views, \n\t\t0 as ytd_hours_watched, \n\t\t0 as prev_year_views, \n\t\t0 as prev_year_hours\n from\n\t\t(select distinct \n\t\t\t\t'TikTok' as platform, \n\t\t\t\tb.month, '' as type, \n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.views\n\t\t\t\telse b.views\n\t\t\t\tend as views,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.hours_watched\n\t\t\t\telse b.hours_watched\n\t\t\t\tend as hours_watched,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.Country\n\t\t\t\telse b.Country\n\t\t\t\tend as Country\n\t\tfrom\n\t\t\t\t((select date_trunc('month', (source_as_on_date-1)) as month, \n\t\t\t\t\t\t country as Country,\n\t\t\t\t\t\t sum(video_views) views, \n\t\t\t\t\t\t sum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_monthly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_monthly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date-1),country) a\n\t\t\t\t right outer join\n\t\t\t\t(select date_trunc('month',source_as_on_date) as month, \n\t\t\t\t\t\tcountry as Country,\n\t\t\t\t\t\tsum(video_views) views, \n\t\t\t\t\t\tsum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_weekly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date-25) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_weekly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date),country) b\n\t\t\t\t on 1=1)\n\t\t) x\nleft join\ncdm.dim_region_country y\n\t\ton lower(x.country)=lower(y.iso_alpha2_ctry_cd)\n\t\tand src_sys_cd='iso'\n\t\tand ent_map_nm='GM Region'\n),\n\n#all_data as\n((select platform,\n\t\t type, \n\t\t type2, \n\t\t region, \n\t\t country,\n\t\t month, \n\t\t views, \n\t\t hours_watched, \n\t\t ytd_views, \n\t\t ytd_hours_watched, \n\t\t prev_year_views, \n\t\t prev_year_hours \n from fds_cp.rpt_cp_monthly_global_consumption_by_platform\n where month between date_trunc('month',add_months(current_date,-14)) and date_trunc('month',current_date-50) and platform ='TikTok')\nunion\n(select * from #temp_table))\n\n(select a.platform, \n\t\ta.type, \n\t\t'' as type2,  \n\t\ta.Region, \n\t\ta.Country, \n\t\ta.month, \n\t\ta.views, \n\t\ta.hours_watched, \n\t\tb.prev_month_views, \n\t\tb.prev_month_hours, \n\t\td.ytd_views, \n\t\td.ytd_hours_watched, \n\t\tc.prev_year_views, \n\t\tc.prev_year_hours,\n\t\t100001 \t\t as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate \t as etl_insert_rec_dttm,\n\t\t'' \t\t\t as etl_update_user_id,\n\t\tsysdate \t as\tetl_update_rec_dttm\nfrom \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews, \n\t\t\t\thours_watched\n\t\tfrom #temp_table ) as a\nleft join \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews as prev_month_views, \n\t\t\t\thours_watched as prev_month_hours\n\t\tfrom #all_data ) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.month=add_months (b.month,1)\n\t\t\tand a.type=b.type\n\t\t\tand a.Country=b.Country\n\t\t\tand a.Region=b.Region\nleft join\n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tytd_views as prev_year_views, \n\t\t\t\tytd_hours_watched as prev_year_hours\n\t\tfrom #all_data) as c\n\t\t\ton a.platform=c.platform\n\t\t\tand add_months(a.month,-12)=c.month\n\t\t\tand a.type=c.type\n\t\t\tand a.Country=c.Country\n\t\t\tand a.Region=c.Region\nleft join\n\t\t(select platform, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tsum(views) ytd_views, \n\t\t\t\tsum(hours_watched) ytd_hours_watched\n\t\tfrom #all_data\n\t\twhere month between date_trunc('year',current_date-25) and date_trunc('month',current_date-25)\n\t\tgroup by 1,2,3,4) d\n\t\t\ton a.Country=d.Country\n\t\t\tand a.Region=d.Region\n\t\t\tand a.type=d.type\n\t\t\tand a.platform=d.platform\nwhere a.month = date_trunc('month',current_date-25))", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith #temp_table as \n(select x.platform,\n\t\tx.type, \n\t\t'' as type2, \n\t\tnvl(y.region_nm,'Global') as Region, \n\t\tnvl(y.country_nm,'Global') as Country,\n\t\tx.month, \n\t\tx.views, \n\t\tx.hours_watched, \n\t\t0 as ytd_views, \n\t\t0 as ytd_hours_watched, \n\t\t0 as prev_year_views, \n\t\t0 as prev_year_hours\n from\n\t\t(select distinct \n\t\t\t\t'TikTok' as platform, \n\t\t\t\tb.month, '' as type, \n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.views\n\t\t\t\telse b.views\n\t\t\t\tend as views,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.hours_watched\n\t\t\t\telse b.hours_watched\n\t\t\t\tend as hours_watched,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.Country\n\t\t\t\telse b.Country\n\t\t\t\tend as Country\n\t\tfrom\n\t\t\t\t((select date_trunc('month', (source_as_on_date-1)) as month, \n\t\t\t\t\t\t country as Country,\n\t\t\t\t\t\t sum(video_views) views, \n\t\t\t\t\t\t sum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_monthly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_monthly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date-1),country) a\n\t\t\t\t right outer join\n\t\t\t\t(select date_trunc('month',source_as_on_date) as month, \n\t\t\t\t\t\tcountry as Country,\n\t\t\t\t\t\tsum(video_views) views, \n\t\t\t\t\t\tsum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_weekly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date-25) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_weekly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date),country) b\n\t\t\t\t on 1=1)\n\t\t) x\nleft join\ncdm.dim_region_country y\n\t\ton lower(x.country)=lower(y.iso_alpha2_ctry_cd)\n\t\tand src_sys_cd='iso'\n\t\tand ent_map_nm='GM Region'\n),\n\n#all_data as\n((select platform,\n\t\t type, \n\t\t type2, \n\t\t region, \n\t\t country,\n\t\t month, \n\t\t views, \n\t\t hours_watched, \n\t\t ytd_views, \n\t\t ytd_hours_watched, \n\t\t prev_year_views, \n\t\t prev_year_hours \n from fds_cp.rpt_cp_monthly_global_consumption_by_platform\n where month between date_trunc('month',add_months(current_date,-14)) and date_trunc('month',current_date-50) and platform ='TikTok')\nunion\n(select * from #temp_table))\n\n(select a.platform, \n\t\ta.type, \n\t\t'' as type2,  \n\t\ta.Region, \n\t\ta.Country, \n\t\ta.month, \n\t\ta.views, \n\t\ta.hours_watched, \n\t\tb.prev_month_views, \n\t\tb.prev_month_hours, \n\t\td.ytd_views, \n\t\td.ytd_hours_watched, \n\t\tc.prev_year_views, \n\t\tc.prev_year_hours,\n\t\t100001 \t\t as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate \t as etl_insert_rec_dttm,\n\t\t'' \t\t\t as etl_update_user_id,\n\t\tsysdate \t as\tetl_update_rec_dttm\nfrom \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews, \n\t\t\t\thours_watched\n\t\tfrom #temp_table ) as a\nleft join \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews as prev_month_views, \n\t\t\t\thours_watched as prev_month_hours\n\t\tfrom #all_data ) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.month=add_months (b.month,1)\n\t\t\tand a.type=b.type\n\t\t\tand a.Country=b.Country\n\t\t\tand a.Region=b.Region\nleft join\n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tytd_views as prev_year_views, \n\t\t\t\tytd_hours_watched as prev_year_hours\n\t\tfrom #all_data) as c\n\t\t\ton a.platform=c.platform\n\t\t\tand add_months(a.month,-12)=c.month\n\t\t\tand a.type=c.type\n\t\t\tand a.Country=c.Country\n\t\t\tand a.Region=c.Region\nleft join\n\t\t(select platform, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tsum(views) ytd_views, \n\t\t\t\tsum(hours_watched) ytd_hours_watched\n\t\tfrom #all_data\n\t\twhere month between date_trunc('year',current_date-25) and date_trunc('month',current_date-25)\n\t\tgroup by 1,2,3,4) d\n\t\t\ton a.Country=d.Country\n\t\t\tand a.Region=d.Region\n\t\t\tand a.type=d.type\n\t\t\tand a.platform=d.platform\nwhere a.month = date_trunc('month',current_date-25))"}, "error": null, "status": null, "execution_time": 0.015615701675415039, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.431874Z", "completed_at": "2020-09-21T17:49:00.446553Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.447042Z", "completed_at": "2020-09-21T17:49:00.447052Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_nplus',\t\n\t\"materialized\": 'incremental',\n\t\"pre-hook\": [\n\t\"--create dates for rollup\ndrop table if exists #dim_dates;\ncreate table #dim_dates as\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and cal_year_mon_week_end_date < date_trunc('week',getdate());\n\n--create network weekly dataset\ndrop table if exists #dp_wkly_nw;\ncreate table #dp_wkly_nw as\nselect b.*, a.hours_watched as hours_watched_wk, a.hours_watched_tier2 as hours_watched_tier2_wk, a.active_network_subscribers as active_network_subscribers_wk, \na.hours_per_tot_subscriber as hours_per_tot_subscriber_wk, a.active_viewers as views_wk, 0 as ad_impressions_wk, \nc.network_subscriber_adds as network_subscriber_adds_wk,\nc.new_adds_direct_t3 as new_adds_direct_t3_wk,\nc.reg_prospects_t2_to_t3 as reg_prospects_t2_to_t3_wk,\nc.winback_adds_t2_to_t3 as winback_adds_t2_to_t3_wk,\nc.lp_adds as lp_adds_wk,\nc.new_free_version_regns as new_free_version_regns_wk,\nc.network_losses as network_losses_wk,\n'Network' as platform,\n'Network' as type\nfrom \n#dim_dates b\nleft join \n(       \n        select a.monday_date, a.hours_watched, b.active_network_subscribers,a.hours_watched/b.active_network_subscribers as hours_per_tot_subscriber, \n        a.hours_watched_tier2,a.active_viewers\n        from\n        (select date_trunc('week',stream_start_dttm) as monday_date, round(sum(play_time )/60) as hours_watched, \n        coalesce(round(sum(case when subs_tier = '2' then play_time end )/60),0) as hours_watched_tier2,\n        count(distinct(case when subs_tier = '2' then src_fan_id else null end)) as active_viewers  \n        from fds_nplus.fact_daily_content_viewership \n        where trunc(stream_start_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n        group by 1) a\n        join\n        (select a.as_on_date,b.cal_year_mon_week_begin_date as monday_date,sum(a.total_active_cnt) as active_network_subscribers\n        from fds_nplus.AGGR_TOTAL_SUBSCRIPTION a\n        join #dim_dates b\n        on a.as_on_date = b.cal_year_mon_week_end_date+1\n        where a.as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n        group by 1,2) b\n        on a.monday_date=b.monday_date\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date\nleft join\n(select date_trunc('week',as_on_date-1) as monday_date,\nsum(daily_new_adds_cnt) as network_subscriber_adds,\nsum(first_total_adds_new_to_t3 ) as new_adds_direct_t3,\nsum(first_total_adds_upgrades) as reg_prospects_t2_to_t3,\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') and order_type = 'winback' then daily_new_adds_cnt else  0 end) as winback_adds_t2_to_t3,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt  else 0 end) as lp_adds,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) as new_free_version_regns,\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else 0 end) as network_losses\nfrom fds_nplus.aggr_daily_subscription \nwhere as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n) c\non trunc(c.monday_date) = b.cal_year_mon_week_begin_date\n;\n\n--create facebook weekly dataset\ndrop table if exists #dp_wkly_fb;\ncreate table #dp_wkly_fb as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Facebook' as platform,\n'Facebook' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n        sum(views_3_seconds) views, \n        sum(video_view_time_minutes)/60 hours_watched\t\t \nfrom fds_fbk.fact_fb_consumption_parent_video \nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create dotocm weekly dataset\ndrop table if exists #dp_wkly_dc;\ncreate table #dp_wkly_dc as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Dotcom' as platform,\n'Dotcom' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',start_time) as monday_date,\n                count(*) views, \n                sum(play_time)/3600 hours_watched\t\t \n                from fds_nplus.vw_fact_daily_dotcom_viewership \nwhere trunc(start_time) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create twitter weekly dataset\ndrop table if exists #dp_wkly_tw;\ncreate table #dp_wkly_tw as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Twitter' as platform,\n'Twitter' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                sum(video_views) views, \n                sum(post_view_time_secs)/3600 hours_watched\t\t \n                from fds_tw.fact_tw_consumption_post \nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create instagram weekly dataset\ndrop table if exists #dp_wkly_ig;\ncreate table #dp_wkly_ig as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Instagram' as platform,\n'Instagram' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \t        monday_date,\n                sum(views) views, \n\t\tsum(hours_watched) hours_watched\nfrom\n\t(select\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                        sum(video_views) views, \n                        sum(post_view_time_secs)/3600 hours_watched\t\t \n                        from fds_igm.fact_ig_consumption_post \n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n         group by 1\n\t union all\n         select date_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                        sum(impressions) views, \n                        sum(story_view_time_secs)/3600 hours_watched\t\t \n                        from fds_igm.fact_ig_consumption_story \n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n         group by 1)\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n--create snapchat weekly dataset\ndrop table if exists #dp_wkly_sc;\ncreate table #dp_wkly_sc as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Snapchat' as platform,\n'Snapchat' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \t        monday_date,\n                sum(views) views, \n\t\tsum(hours_watched) hours_watched \nfrom\n\t\t((\n\t\tselect \tsum(views) views, \n\t\t\t(sum(views)/6.0)/60 as hours_watched,\n\t\t\tdate_trunc('week',story_start) as monday_date\n\t\tfrom fds_sc.fact_sc_consumption_story a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom fds_sc.fact_sc_consumption_story\n\t\t\twhere \ttrunc(story_start) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and views>0\n\t\t\tgroup by 1) b\n\t\t        on trunc(a.story_start) = b.post_date and a.dim_date_id= b.max_dim_date\n\t\tgroup by 3)\n\t\tunion all \n\t\t(select sum(topsnap_views) views, \n\t\t\t\tsum(total_time_viewed_secs)/3600 hours_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted) as monday_date \n\t\t from fds_sc.fact_scd_consumption_frame a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date, max(dim_date_id) max_dim_date \n\t\t\t from fds_sc.fact_scd_consumption_frame\n\t\t\t where trunc(snap_time_posted) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t on trunc(a.snap_time_posted) = b.post_date and a.dim_date_id= b.max_dim_date\n\t\t group by 3))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n--create youtube weekly dataset\ndrop table if exists #dp_wkly_yt;\ncreate table #dp_wkly_yt as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, a.ad_impressions as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Youtube' as platform,\na.type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',view_date) as monday_date,type,\n                sum(views) views, \n                sum(hours_watched) as hours_watched,\n                sum(ad_impressions) as ad_impressions\t \n                from fds_yt.agg_yt_monetization_summary\nwhere view_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and view_date <= getdate()\ngroup by 1,2\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\ndrop table if exists #dp_wkly;\ncreate table #dp_wkly as \nselect platform, type,cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk::decimal(15,1), hours_watched_tier2_wk::decimal(15,1), views_wk::decimal(15,1),\nactive_network_subscribers_wk::decimal(15,1), hours_per_tot_subscriber_wk::decimal(15,1), ad_impressions_wk::decimal(15,1),\nnetwork_subscriber_adds_wk::decimal(15,1),\nnew_adds_direct_t3_wk::decimal(15,1),\nreg_prospects_t2_to_t3_wk::decimal(15,1),\nwinback_adds_t2_to_t3_wk::decimal(15,1),\nlp_adds_wk::decimal(15,1),\nnew_free_version_regns_wk::decimal(15,1),\nnetwork_losses_wk::decimal(15,1)\nfrom (\nselect * from #dp_wkly_nw union all\nselect * from #dp_wkly_fb union all\nselect * from #dp_wkly_dc union all\nselect * from #dp_wkly_tw union all\nselect * from #dp_wkly_ig union all\nselect * from #dp_wkly_sc union all\nselect * from #dp_wkly_yt);\n\n\ndrop table if exists #dp_wkly1;\ncreate table #dp_wkly1 as\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\ncoalesce(b.active_network_subscribers_wk,0) as prev_active_network_subscribers_wk, coalesce(b.hours_watched_wk,0) as prev_hours_watched_wk,\ncoalesce(b.hours_watched_tier2_wk,0) as prev_hours_watched_tier2_wk,\ncoalesce(b.hours_per_tot_subscriber_wk,0) as prev_hours_per_tot_subscriber_wk,coalesce(b.views_wk,0) as prev_views_wk,\ncoalesce(b.ad_impressions_wk,0) as prev_ad_impressions_wk,\ncoalesce(b.network_subscriber_adds_wk,0) as prev_network_subscriber_adds_wk,\ncoalesce(b.new_adds_direct_t3_wk,0) as prev_new_adds_direct_t3_wk,\ncoalesce(b.reg_prospects_t2_to_t3_wk,0) as prev_reg_prospects_t2_to_t3_wk,\ncoalesce(b.winback_adds_t2_to_t3_wk,0) as prev_winback_adds_t2_to_t3_wk,\ncoalesce(b.lp_adds_wk,0) as prev_lp_adds_wk,\ncoalesce(b.new_free_version_regns_wk,0) as prev_new_free_version_regns_wk,\ncoalesce(b.network_losses_wk,0) as prev_network_losses_wk\nfrom \n#dp_wkly a\nleft join \n#dp_wkly b\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type;\n\n--create monthly dataset\ndrop table if exists #dp_mthly;\ncreate table #dp_mthly as\nselect a.platform,a.type, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\nsum(b.active_network_subscribers_wk) active_network_subscribers_mtd, sum(b.hours_watched_wk) hours_watched_mtd, sum(b.hours_watched_tier2_wk) hours_watched_tier2_mtd,\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_mtd, sum(b.views_wk) views_mtd, sum(b.ad_impressions_wk) ad_impressions_mtd,\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_mtd,\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_mtd,\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_mtd,\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_mtd,\nsum(b.lp_adds_wk) as lp_adds_mtd,\nsum(b.new_free_version_regns_wk) as new_free_version_regns_mtd,\nsum(b.network_losses_wk) as network_losses_mtd,\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_mtd, sum(b.prev_hours_watched_wk) prev_hours_watched_mtd, \nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_mtd,\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_mtd, \nsum(b.prev_views_wk) prev_views_mtd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_mtd,\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_mtd,\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_mtd,\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_mtd,\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_mtd,\nsum(b.prev_lp_adds_wk) as prev_lp_adds_mtd,\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_mtd,\nsum(b.prev_network_losses_wk) as prev_network_losses_mtd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\n\n--create yearly dataset\ndrop table if exists #dp_yrly;\ncreate table #dp_yrly as\nselect a.platform,a.type,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\nsum(b.active_network_subscribers_wk) active_network_subscribers_ytd, sum(b.hours_watched_wk) hours_watched_ytd, \nsum(b.hours_watched_tier2_wk) hours_watched_tier2_ytd,\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_ytd, sum(b.views_wk) views_ytd, sum(b.ad_impressions_wk) ad_impressions_ytd,\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_ytd,\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_ytd,\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_ytd,\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_ytd,\nsum(b.lp_adds_wk) as lp_adds_ytd,\nsum(b.new_free_version_regns_wk) as new_free_version_regns_ytd,\nsum(b.network_losses_wk) as network_losses_ytd,\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_ytd, sum(b.prev_hours_watched_wk) prev_hours_watched_ytd, \nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_ytd,\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_ytd, sum(b.prev_views_wk) prev_views_ytd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_ytd,\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_ytd,\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_ytd,\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_ytd,\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_ytd,\nsum(b.prev_lp_adds_wk) as prev_lp_adds_ytd,\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_ytd,\nsum(b.prev_network_losses_wk) as prev_network_losses_ytd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\n\n--pivot weekly dataset\ndrop table if exists #dp_wkly_pivot;\ncreate table #dp_wkly_pivot as\nselect * from\n(\nselect 'Weekly' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_wk as prev_year_value\nfrom #dp_wkly1  where platform = 'Youtube'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\n);\n\n--pivot monthly dataset\ndrop table if exists #dp_mthly_pivot;\ncreate table #dp_mthly_pivot as\nselect * from\n(\nselect 'MTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_mtd as prev_year_value\nfrom #dp_mthly  where platform = 'Youtube'\nunion all\nselect 'MTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\n);\n\n--pivot yearly dataset\ndrop table if exists #dp_yrly_pivot;\ncreate table #dp_yrly_pivot as\nselect * from\n(\nselect 'YTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Youtube'\nunion all\nselect 'YTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\n);\n\ndrop table if exists #consolidation;\ncreate table #consolidation as\nselect \na.granularity, a.platform, a.type, a.metric, a.cal_year as year,\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\nfrom \n(select * from #dp_wkly_pivot union all\n select * from #dp_mthly_pivot union all\n select * from #dp_yrly_pivot) a;\n\ndrop table if exists #final;\ncreate table #final as\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nfrom #consolidation a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week;\n\n--select * from #final where platform = 'Network' and metric = 'Active Network Subscribers' order by year, week\n\"]\n\t})}}\n\n--create dates for rollup\nselect *\nfrom #final", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate", "rpt_cp_weekly_consolidated_kpi"], "unique_id": "model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cp/aggregate/rpt_cp_weekly_consolidated_kpi.sql", "original_file_path": "models/fds_cp/aggregate/rpt_cp_weekly_consolidated_kpi.sql", "name": "rpt_cp_weekly_consolidated_kpi", "resource_type": "model", "alias": "rpt_cp_weekly_consolidated_kpi", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "--create dates for rollup\ndrop table if exists #dim_dates;\ncreate table #dim_dates as\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and cal_year_mon_week_end_date < date_trunc('week',getdate());\n\n--create network weekly dataset\ndrop table if exists #dp_wkly_nw;\ncreate table #dp_wkly_nw as\nselect b.*, a.hours_watched as hours_watched_wk, a.hours_watched_tier2 as hours_watched_tier2_wk, a.active_network_subscribers as active_network_subscribers_wk, \na.hours_per_tot_subscriber as hours_per_tot_subscriber_wk, a.active_viewers as views_wk, 0 as ad_impressions_wk, \nc.network_subscriber_adds as network_subscriber_adds_wk,\nc.new_adds_direct_t3 as new_adds_direct_t3_wk,\nc.reg_prospects_t2_to_t3 as reg_prospects_t2_to_t3_wk,\nc.winback_adds_t2_to_t3 as winback_adds_t2_to_t3_wk,\nc.lp_adds as lp_adds_wk,\nc.new_free_version_regns as new_free_version_regns_wk,\nc.network_losses as network_losses_wk,\n'Network' as platform,\n'Network' as type\nfrom \n#dim_dates b\nleft join \n(       \n        select a.monday_date, a.hours_watched, b.active_network_subscribers,a.hours_watched/b.active_network_subscribers as hours_per_tot_subscriber, \n        a.hours_watched_tier2,a.active_viewers\n        from\n        (select date_trunc('week',stream_start_dttm) as monday_date, round(sum(play_time )/60) as hours_watched, \n        coalesce(round(sum(case when subs_tier = '2' then play_time end )/60),0) as hours_watched_tier2,\n        count(distinct(case when subs_tier = '2' then src_fan_id else null end)) as active_viewers  \n        from fds_nplus.fact_daily_content_viewership \n        where trunc(stream_start_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n        group by 1) a\n        join\n        (select a.as_on_date,b.cal_year_mon_week_begin_date as monday_date,sum(a.total_active_cnt) as active_network_subscribers\n        from fds_nplus.AGGR_TOTAL_SUBSCRIPTION a\n        join #dim_dates b\n        on a.as_on_date = b.cal_year_mon_week_end_date+1\n        where a.as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n        group by 1,2) b\n        on a.monday_date=b.monday_date\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date\nleft join\n(select date_trunc('week',as_on_date-1) as monday_date,\nsum(daily_new_adds_cnt) as network_subscriber_adds,\nsum(first_total_adds_new_to_t3 ) as new_adds_direct_t3,\nsum(first_total_adds_upgrades) as reg_prospects_t2_to_t3,\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') and order_type = 'winback' then daily_new_adds_cnt else  0 end) as winback_adds_t2_to_t3,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt  else 0 end) as lp_adds,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) as new_free_version_regns,\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else 0 end) as network_losses\nfrom fds_nplus.aggr_daily_subscription \nwhere as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n) c\non trunc(c.monday_date) = b.cal_year_mon_week_begin_date\n;\n\n--create facebook weekly dataset\ndrop table if exists #dp_wkly_fb;\ncreate table #dp_wkly_fb as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Facebook' as platform,\n'Facebook' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n        sum(views_3_seconds) views, \n        sum(video_view_time_minutes)/60 hours_watched\t\t \nfrom fds_fbk.fact_fb_consumption_parent_video \nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create dotocm weekly dataset\ndrop table if exists #dp_wkly_dc;\ncreate table #dp_wkly_dc as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Dotcom' as platform,\n'Dotcom' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',start_time) as monday_date,\n                count(*) views, \n                sum(play_time)/3600 hours_watched\t\t \n                from fds_nplus.vw_fact_daily_dotcom_viewership \nwhere trunc(start_time) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create twitter weekly dataset\ndrop table if exists #dp_wkly_tw;\ncreate table #dp_wkly_tw as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Twitter' as platform,\n'Twitter' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                sum(video_views) views, \n                sum(post_view_time_secs)/3600 hours_watched\t\t \n                from fds_tw.fact_tw_consumption_post \nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create instagram weekly dataset\ndrop table if exists #dp_wkly_ig;\ncreate table #dp_wkly_ig as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Instagram' as platform,\n'Instagram' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \t        monday_date,\n                sum(views) views, \n\t\tsum(hours_watched) hours_watched\nfrom\n\t(select\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                        sum(video_views) views, \n                        sum(post_view_time_secs)/3600 hours_watched\t\t \n                        from fds_igm.fact_ig_consumption_post \n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n         group by 1\n\t union all\n         select date_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                        sum(impressions) views, \n                        sum(story_view_time_secs)/3600 hours_watched\t\t \n                        from fds_igm.fact_ig_consumption_story \n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n         group by 1)\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n--create snapchat weekly dataset\ndrop table if exists #dp_wkly_sc;\ncreate table #dp_wkly_sc as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Snapchat' as platform,\n'Snapchat' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \t        monday_date,\n                sum(views) views, \n\t\tsum(hours_watched) hours_watched \nfrom\n\t\t((\n\t\tselect \tsum(views) views, \n\t\t\t(sum(views)/6.0)/60 as hours_watched,\n\t\t\tdate_trunc('week',story_start) as monday_date\n\t\tfrom fds_sc.fact_sc_consumption_story a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom fds_sc.fact_sc_consumption_story\n\t\t\twhere \ttrunc(story_start) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and views>0\n\t\t\tgroup by 1) b\n\t\t        on trunc(a.story_start) = b.post_date and a.dim_date_id= b.max_dim_date\n\t\tgroup by 3)\n\t\tunion all \n\t\t(select sum(topsnap_views) views, \n\t\t\t\tsum(total_time_viewed_secs)/3600 hours_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted) as monday_date \n\t\t from fds_sc.fact_scd_consumption_frame a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date, max(dim_date_id) max_dim_date \n\t\t\t from fds_sc.fact_scd_consumption_frame\n\t\t\t where trunc(snap_time_posted) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t on trunc(a.snap_time_posted) = b.post_date and a.dim_date_id= b.max_dim_date\n\t\t group by 3))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n--create youtube weekly dataset\ndrop table if exists #dp_wkly_yt;\ncreate table #dp_wkly_yt as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, a.ad_impressions as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Youtube' as platform,\na.type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',view_date) as monday_date,type,\n                sum(views) views, \n                sum(hours_watched) as hours_watched,\n                sum(ad_impressions) as ad_impressions\t \n                from fds_yt.agg_yt_monetization_summary\nwhere view_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and view_date <= getdate()\ngroup by 1,2\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\ndrop table if exists #dp_wkly;\ncreate table #dp_wkly as \nselect platform, type,cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk::decimal(15,1), hours_watched_tier2_wk::decimal(15,1), views_wk::decimal(15,1),\nactive_network_subscribers_wk::decimal(15,1), hours_per_tot_subscriber_wk::decimal(15,1), ad_impressions_wk::decimal(15,1),\nnetwork_subscriber_adds_wk::decimal(15,1),\nnew_adds_direct_t3_wk::decimal(15,1),\nreg_prospects_t2_to_t3_wk::decimal(15,1),\nwinback_adds_t2_to_t3_wk::decimal(15,1),\nlp_adds_wk::decimal(15,1),\nnew_free_version_regns_wk::decimal(15,1),\nnetwork_losses_wk::decimal(15,1)\nfrom (\nselect * from #dp_wkly_nw union all\nselect * from #dp_wkly_fb union all\nselect * from #dp_wkly_dc union all\nselect * from #dp_wkly_tw union all\nselect * from #dp_wkly_ig union all\nselect * from #dp_wkly_sc union all\nselect * from #dp_wkly_yt);\n\n\ndrop table if exists #dp_wkly1;\ncreate table #dp_wkly1 as\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\ncoalesce(b.active_network_subscribers_wk,0) as prev_active_network_subscribers_wk, coalesce(b.hours_watched_wk,0) as prev_hours_watched_wk,\ncoalesce(b.hours_watched_tier2_wk,0) as prev_hours_watched_tier2_wk,\ncoalesce(b.hours_per_tot_subscriber_wk,0) as prev_hours_per_tot_subscriber_wk,coalesce(b.views_wk,0) as prev_views_wk,\ncoalesce(b.ad_impressions_wk,0) as prev_ad_impressions_wk,\ncoalesce(b.network_subscriber_adds_wk,0) as prev_network_subscriber_adds_wk,\ncoalesce(b.new_adds_direct_t3_wk,0) as prev_new_adds_direct_t3_wk,\ncoalesce(b.reg_prospects_t2_to_t3_wk,0) as prev_reg_prospects_t2_to_t3_wk,\ncoalesce(b.winback_adds_t2_to_t3_wk,0) as prev_winback_adds_t2_to_t3_wk,\ncoalesce(b.lp_adds_wk,0) as prev_lp_adds_wk,\ncoalesce(b.new_free_version_regns_wk,0) as prev_new_free_version_regns_wk,\ncoalesce(b.network_losses_wk,0) as prev_network_losses_wk\nfrom \n#dp_wkly a\nleft join \n#dp_wkly b\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type;\n\n--create monthly dataset\ndrop table if exists #dp_mthly;\ncreate table #dp_mthly as\nselect a.platform,a.type, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\nsum(b.active_network_subscribers_wk) active_network_subscribers_mtd, sum(b.hours_watched_wk) hours_watched_mtd, sum(b.hours_watched_tier2_wk) hours_watched_tier2_mtd,\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_mtd, sum(b.views_wk) views_mtd, sum(b.ad_impressions_wk) ad_impressions_mtd,\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_mtd,\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_mtd,\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_mtd,\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_mtd,\nsum(b.lp_adds_wk) as lp_adds_mtd,\nsum(b.new_free_version_regns_wk) as new_free_version_regns_mtd,\nsum(b.network_losses_wk) as network_losses_mtd,\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_mtd, sum(b.prev_hours_watched_wk) prev_hours_watched_mtd, \nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_mtd,\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_mtd, \nsum(b.prev_views_wk) prev_views_mtd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_mtd,\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_mtd,\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_mtd,\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_mtd,\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_mtd,\nsum(b.prev_lp_adds_wk) as prev_lp_adds_mtd,\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_mtd,\nsum(b.prev_network_losses_wk) as prev_network_losses_mtd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\n\n--create yearly dataset\ndrop table if exists #dp_yrly;\ncreate table #dp_yrly as\nselect a.platform,a.type,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\nsum(b.active_network_subscribers_wk) active_network_subscribers_ytd, sum(b.hours_watched_wk) hours_watched_ytd, \nsum(b.hours_watched_tier2_wk) hours_watched_tier2_ytd,\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_ytd, sum(b.views_wk) views_ytd, sum(b.ad_impressions_wk) ad_impressions_ytd,\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_ytd,\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_ytd,\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_ytd,\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_ytd,\nsum(b.lp_adds_wk) as lp_adds_ytd,\nsum(b.new_free_version_regns_wk) as new_free_version_regns_ytd,\nsum(b.network_losses_wk) as network_losses_ytd,\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_ytd, sum(b.prev_hours_watched_wk) prev_hours_watched_ytd, \nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_ytd,\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_ytd, sum(b.prev_views_wk) prev_views_ytd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_ytd,\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_ytd,\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_ytd,\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_ytd,\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_ytd,\nsum(b.prev_lp_adds_wk) as prev_lp_adds_ytd,\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_ytd,\nsum(b.prev_network_losses_wk) as prev_network_losses_ytd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\n\n--pivot weekly dataset\ndrop table if exists #dp_wkly_pivot;\ncreate table #dp_wkly_pivot as\nselect * from\n(\nselect 'Weekly' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_wk as prev_year_value\nfrom #dp_wkly1  where platform = 'Youtube'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\n);\n\n--pivot monthly dataset\ndrop table if exists #dp_mthly_pivot;\ncreate table #dp_mthly_pivot as\nselect * from\n(\nselect 'MTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_mtd as prev_year_value\nfrom #dp_mthly  where platform = 'Youtube'\nunion all\nselect 'MTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\n);\n\n--pivot yearly dataset\ndrop table if exists #dp_yrly_pivot;\ncreate table #dp_yrly_pivot as\nselect * from\n(\nselect 'YTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Youtube'\nunion all\nselect 'YTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\n);\n\ndrop table if exists #consolidation;\ncreate table #consolidation as\nselect \na.granularity, a.platform, a.type, a.metric, a.cal_year as year,\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\nfrom \n(select * from #dp_wkly_pivot union all\n select * from #dp_mthly_pivot union all\n select * from #dp_yrly_pivot) a;\n\ndrop table if exists #final;\ncreate table #final as\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nfrom #consolidation a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week;\n\n--select * from #final where platform = 'Network' and metric = 'Active Network Subscribers' order by year, week\n", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate/rpt_cp_weekly_consolidated_kpi.sql", "compiled": true, "compiled_sql": "\n\n--create dates for rollup\nselect *\nfrom #final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--create dates for rollup\nselect *\nfrom #final"}, "error": null, "status": null, "execution_time": 0.01073908805847168, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.447727Z", "completed_at": "2020-09-21T17:49:00.457785Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.458069Z", "completed_at": "2020-09-21T17:49:00.458077Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_le',\t\n\t\"materialized\": 'incremental',\n\t\"pre-hook\": ['delete from fds_le.rpt_le_weekly_consolidated_kpi;',\n\t\"drop table if exists #dim_dates;\ncreate table #dim_dates as\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) \nand cal_year_mon_week_end_date < date_trunc('week',getdate());\n\n--create live events weekly dataset\ndrop table if exists #dp_wkly;\ncreate table #dp_wkly as\nselect b.*,a.no_of_total_events_wk::decimal(15,1),\na.no_of_house_events_wk::decimal(15,1),\na.no_of_raw_house_events_wk::decimal(15,1),\na.no_of_smackdown_house_events_wk::decimal(15,1),\na.no_of_combined_house_events_wk::decimal(15,1),\na.no_of_tv_events_wk::decimal(15,1),\na.no_of_raw_tv_events_wk::decimal(15,1),\na.no_of_smackdown_tv_events_wk::decimal(15,1),\na.no_of_combined_tv_events_wk::decimal(15,1),\na.no_of_ppv_events_wk::decimal(15,1),\na.total_paid_attendance_wk::decimal(15,1),\na.total_paid_utilization_wk::decimal(15,1),\na.avg_total_attendance_wk::decimal(15,1),\na.avg_house_event_attendance_wk::decimal(15,1),\na.avg_raw_house_event_attendance_wk::decimal(15,1),\na.avg_smackdown_house_event_attendance_wk::decimal(15,1),\na.avg_cmb_house_event_attendance_wk::decimal(15,1),\na.avg_tv_event_attendance_wk::decimal(15,1),\na.avg_raw_tv_event_attendance_wk::decimal(15,1),\na.avg_smackdown_tv_event_attendance_wk::decimal(15,1),\na.avg_cmb_tv_event_attendance_wk::decimal(15,1),\na.avg_ppv_event_attendance_wk::decimal(15,1),\n'Live Events' as platform\nfrom \n#dim_dates b\nleft join \n(       \nselect date_trunc('week',event_dttm) as monday_date,\ncount(dim_event_id) as no_of_total_events_wk,\ncount(case when event_type_cd = 'LE' then dim_event_id else null end) as no_of_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_house_events_wk,\ncount(case when event_type_cd = 'TV' then dim_event_id else null end) as no_of_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_tv_events_wk,\ncount(case when event_type_cd = 'PPV' then dim_event_id else null end) as no_of_ppv_events_wk,\nsum(paid_ticket_count) as total_paid_attendance_wk,\nsum(paid_ticket_count)::decimal(15,1)/sum(capacity)::decimal(15,1) as total_paid_utilization_wk,\navg(paid_ticket_count+comp_ticket_count) as  avg_total_attendance_wk,\navg(case when event_type_cd = 'LE' then paid_ticket_count+comp_ticket_count else null end) as avg_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_house_event_attendance_wk,\navg(case when event_type_cd = 'TV' then paid_ticket_count+comp_ticket_count else null end) as avg_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_tv_event_attendance_wk,\navg(case when event_type_cd = 'PPV' then paid_ticket_count+comp_ticket_count else null end) as avg_ppv_event_attendance_wk\nfrom fds_le.aggr_event_metrics_summary \nwhere trunc(event_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\ndrop table if exists #dp_wkly1;\ncreate table #dp_wkly1 as\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\n\ncoalesce(b.no_of_total_events_wk,0) as prev_no_of_total_events_wk, \ncoalesce(b.no_of_house_events_wk,0) as prev_no_of_house_events_wk,\ncoalesce(b.no_of_raw_house_events_wk,0) as prev_no_of_raw_house_events_wk,\ncoalesce(b.no_of_smackdown_house_events_wk,0) as prev_no_of_smackdown_house_events_wk,\ncoalesce(b.no_of_combined_house_events_wk,0) as prev_no_of_combined_house_events_wk,\ncoalesce(b.no_of_tv_events_wk,0) as prev_no_of_tv_events_wk,\ncoalesce(b.no_of_raw_tv_events_wk,0) as prev_no_of_raw_tv_events_wk,\ncoalesce(b.no_of_smackdown_tv_events_wk,0) as prev_no_of_smackdown_tv_events_wk,\ncoalesce(b.no_of_combined_tv_events_wk,0) as prev_no_of_combined_tv_events_wk,\ncoalesce(b.no_of_ppv_events_wk,0) as prev_no_of_ppv_events_wk,\ncoalesce(b.total_paid_attendance_wk,0) as prev_total_paid_attendance_wk,\ncoalesce(b.total_paid_utilization_wk,0) as prev_total_paid_utilization_wk,\ncoalesce(b.avg_total_attendance_wk,0) as prev_avg_total_attendance_wk,\ncoalesce(b.avg_house_event_attendance_wk,0) as prev_avg_house_event_attendance_wk,\ncoalesce(b.avg_raw_house_event_attendance_wk,0) as prev_avg_raw_house_event_attendance_wk, \ncoalesce(b.avg_smackdown_house_event_attendance_wk,0) as prev_avg_smackdown_house_event_attendance_wk,\ncoalesce(b.avg_cmb_house_event_attendance_wk,0) as prev_avg_cmb_house_event_attendance_wk,\ncoalesce(b.avg_tv_event_attendance_wk,0) as prev_avg_tv_event_attendance_wk,\ncoalesce(b.avg_raw_tv_event_attendance_wk,0) as prev_avg_raw_tv_event_attendance_wk,\ncoalesce(b.avg_smackdown_tv_event_attendance_wk,0) as prev_avg_smackdown_tv_event_attendance_wk,\ncoalesce(b.avg_cmb_tv_event_attendance_wk,0) as prev_avg_cmb_tv_event_attendance_wk,\ncoalesce(b.avg_ppv_event_attendance_wk,0) as prev_avg_ppv_event_attendance_wk\nfrom \n#dp_wkly a\nleft join \n#dp_wkly b\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon;\n\n--create monthly dataset\ndrop table if exists #dp_mthly;\ncreate table #dp_mthly as\nselect a.platform, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\n\nsum(b.no_of_total_events_wk) as no_of_total_events_mtd, \nsum(b.no_of_house_events_wk) as no_of_house_events_mtd,\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_mtd,\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_mtd,\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_mtd,\nsum(b.no_of_tv_events_wk) as no_of_tv_events_mtd,\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_mtd,\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_mtd,\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_mtd,\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_mtd,\nsum(b.total_paid_attendance_wk) as total_paid_attendance_mtd,\nsum(b.total_paid_utilization_wk) as total_paid_utilization_mtd,\nsum(b.avg_total_attendance_wk) as avg_total_attendance_mtd,\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_mtd,\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_mtd, \nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_mtd,\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_mtd,\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_mtd,\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_mtd,\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_mtd,\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_mtd,\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_mtd,\n\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_mtd, \nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_mtd,\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_mtd,\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_mtd,\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_mtd,\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_mtd,\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_mtd,\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_mtd,\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_mtd,\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_mtd,\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_mtd,\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_mtd,\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_mtd,\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_mtd,\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_mtd, \nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_mtd,\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_mtd,\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_mtd,\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_mtd,\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_mtd,\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_mtd,\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_mtd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \ngroup by 1,2,3,4,5,6,7,8,9,10,11;\n\n--create yearly dataset\ndrop table if exists #dp_yrly;\ncreate table #dp_yrly as\nselect a.platform,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\n\nsum(b.no_of_total_events_wk) as no_of_total_events_ytd, \nsum(b.no_of_house_events_wk) as no_of_house_events_ytd,\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_ytd,\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_ytd,\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_ytd,\nsum(b.no_of_tv_events_wk) as no_of_tv_events_ytd,\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_ytd,\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_ytd,\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_ytd,\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_ytd,\nsum(b.total_paid_attendance_wk) as total_paid_attendance_ytd,\nsum(b.total_paid_utilization_wk) as total_paid_utilization_ytd,\nsum(b.avg_total_attendance_wk) as avg_total_attendance_ytd,\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_ytd,\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_ytd, \nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_ytd,\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_ytd,\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_ytd,\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_ytd,\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_ytd,\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_ytd,\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_ytd,\n\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_ytd, \nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_ytd,\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_ytd,\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_ytd,\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_ytd,\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_ytd,\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_ytd,\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_ytd,\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_ytd,\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_ytd,\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_ytd,\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_ytd,\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_ytd,\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_ytd,\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_ytd, \nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_ytd,\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_ytd,\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_ytd,\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_ytd,\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_ytd,\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_ytd,\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_ytd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \ngroup by 1,2,3,4,5,6,7,8,9,10,11;\n\n--pivot weekly dataset\ndrop table if exists #dp_wkly_pivot;\ncreate table #dp_wkly_pivot as\nselect * from\n(\nselect 'Weekly' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\n);\n\n--pivot monthly dataset\ndrop table if exists #dp_mthly_pivot;\ncreate table #dp_mthly_pivot as\nselect * from\n(\nselect 'MTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\n);\n\n--pivot yearly dataset\ndrop table if exists #dp_yrly_pivot;\ncreate table #dp_yrly_pivot as\nselect * from\n(\nselect 'YTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\n);\n\ndrop table if exists #final_dp;\ncreate table #final_dp as\nselect \na.granularity, a.platform, a.platform as type, a.metric, a.cal_year as year,\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\nfrom \n(select * from #dp_wkly_pivot union all\n select * from #dp_mthly_pivot union all\n select * from #dp_yrly_pivot) a;\n\"]})}}\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\t\nfrom #final_dp a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week", "database": "entdwdb", "schema": "fds_le", "fqn": ["analytics_engineering_marts", "fds_le", "aggregate", "rpt_le_weekly_consolidated_kpi"], "unique_id": "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_le/aggregate/rpt_le_weekly_consolidated_kpi.sql", "original_file_path": "models/fds_le/aggregate/rpt_le_weekly_consolidated_kpi.sql", "name": "rpt_le_weekly_consolidated_kpi", "resource_type": "model", "alias": "rpt_le_weekly_consolidated_kpi", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_le.rpt_le_weekly_consolidated_kpi;", "transaction": true, "index": null}, {"sql": "drop table if exists #dim_dates;\ncreate table #dim_dates as\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) \nand cal_year_mon_week_end_date < date_trunc('week',getdate());\n\n--create live events weekly dataset\ndrop table if exists #dp_wkly;\ncreate table #dp_wkly as\nselect b.*,a.no_of_total_events_wk::decimal(15,1),\na.no_of_house_events_wk::decimal(15,1),\na.no_of_raw_house_events_wk::decimal(15,1),\na.no_of_smackdown_house_events_wk::decimal(15,1),\na.no_of_combined_house_events_wk::decimal(15,1),\na.no_of_tv_events_wk::decimal(15,1),\na.no_of_raw_tv_events_wk::decimal(15,1),\na.no_of_smackdown_tv_events_wk::decimal(15,1),\na.no_of_combined_tv_events_wk::decimal(15,1),\na.no_of_ppv_events_wk::decimal(15,1),\na.total_paid_attendance_wk::decimal(15,1),\na.total_paid_utilization_wk::decimal(15,1),\na.avg_total_attendance_wk::decimal(15,1),\na.avg_house_event_attendance_wk::decimal(15,1),\na.avg_raw_house_event_attendance_wk::decimal(15,1),\na.avg_smackdown_house_event_attendance_wk::decimal(15,1),\na.avg_cmb_house_event_attendance_wk::decimal(15,1),\na.avg_tv_event_attendance_wk::decimal(15,1),\na.avg_raw_tv_event_attendance_wk::decimal(15,1),\na.avg_smackdown_tv_event_attendance_wk::decimal(15,1),\na.avg_cmb_tv_event_attendance_wk::decimal(15,1),\na.avg_ppv_event_attendance_wk::decimal(15,1),\n'Live Events' as platform\nfrom \n#dim_dates b\nleft join \n(       \nselect date_trunc('week',event_dttm) as monday_date,\ncount(dim_event_id) as no_of_total_events_wk,\ncount(case when event_type_cd = 'LE' then dim_event_id else null end) as no_of_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_house_events_wk,\ncount(case when event_type_cd = 'TV' then dim_event_id else null end) as no_of_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_tv_events_wk,\ncount(case when event_type_cd = 'PPV' then dim_event_id else null end) as no_of_ppv_events_wk,\nsum(paid_ticket_count) as total_paid_attendance_wk,\nsum(paid_ticket_count)::decimal(15,1)/sum(capacity)::decimal(15,1) as total_paid_utilization_wk,\navg(paid_ticket_count+comp_ticket_count) as  avg_total_attendance_wk,\navg(case when event_type_cd = 'LE' then paid_ticket_count+comp_ticket_count else null end) as avg_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_house_event_attendance_wk,\navg(case when event_type_cd = 'TV' then paid_ticket_count+comp_ticket_count else null end) as avg_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_tv_event_attendance_wk,\navg(case when event_type_cd = 'PPV' then paid_ticket_count+comp_ticket_count else null end) as avg_ppv_event_attendance_wk\nfrom fds_le.aggr_event_metrics_summary \nwhere trunc(event_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\ndrop table if exists #dp_wkly1;\ncreate table #dp_wkly1 as\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\n\ncoalesce(b.no_of_total_events_wk,0) as prev_no_of_total_events_wk, \ncoalesce(b.no_of_house_events_wk,0) as prev_no_of_house_events_wk,\ncoalesce(b.no_of_raw_house_events_wk,0) as prev_no_of_raw_house_events_wk,\ncoalesce(b.no_of_smackdown_house_events_wk,0) as prev_no_of_smackdown_house_events_wk,\ncoalesce(b.no_of_combined_house_events_wk,0) as prev_no_of_combined_house_events_wk,\ncoalesce(b.no_of_tv_events_wk,0) as prev_no_of_tv_events_wk,\ncoalesce(b.no_of_raw_tv_events_wk,0) as prev_no_of_raw_tv_events_wk,\ncoalesce(b.no_of_smackdown_tv_events_wk,0) as prev_no_of_smackdown_tv_events_wk,\ncoalesce(b.no_of_combined_tv_events_wk,0) as prev_no_of_combined_tv_events_wk,\ncoalesce(b.no_of_ppv_events_wk,0) as prev_no_of_ppv_events_wk,\ncoalesce(b.total_paid_attendance_wk,0) as prev_total_paid_attendance_wk,\ncoalesce(b.total_paid_utilization_wk,0) as prev_total_paid_utilization_wk,\ncoalesce(b.avg_total_attendance_wk,0) as prev_avg_total_attendance_wk,\ncoalesce(b.avg_house_event_attendance_wk,0) as prev_avg_house_event_attendance_wk,\ncoalesce(b.avg_raw_house_event_attendance_wk,0) as prev_avg_raw_house_event_attendance_wk, \ncoalesce(b.avg_smackdown_house_event_attendance_wk,0) as prev_avg_smackdown_house_event_attendance_wk,\ncoalesce(b.avg_cmb_house_event_attendance_wk,0) as prev_avg_cmb_house_event_attendance_wk,\ncoalesce(b.avg_tv_event_attendance_wk,0) as prev_avg_tv_event_attendance_wk,\ncoalesce(b.avg_raw_tv_event_attendance_wk,0) as prev_avg_raw_tv_event_attendance_wk,\ncoalesce(b.avg_smackdown_tv_event_attendance_wk,0) as prev_avg_smackdown_tv_event_attendance_wk,\ncoalesce(b.avg_cmb_tv_event_attendance_wk,0) as prev_avg_cmb_tv_event_attendance_wk,\ncoalesce(b.avg_ppv_event_attendance_wk,0) as prev_avg_ppv_event_attendance_wk\nfrom \n#dp_wkly a\nleft join \n#dp_wkly b\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon;\n\n--create monthly dataset\ndrop table if exists #dp_mthly;\ncreate table #dp_mthly as\nselect a.platform, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\n\nsum(b.no_of_total_events_wk) as no_of_total_events_mtd, \nsum(b.no_of_house_events_wk) as no_of_house_events_mtd,\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_mtd,\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_mtd,\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_mtd,\nsum(b.no_of_tv_events_wk) as no_of_tv_events_mtd,\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_mtd,\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_mtd,\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_mtd,\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_mtd,\nsum(b.total_paid_attendance_wk) as total_paid_attendance_mtd,\nsum(b.total_paid_utilization_wk) as total_paid_utilization_mtd,\nsum(b.avg_total_attendance_wk) as avg_total_attendance_mtd,\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_mtd,\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_mtd, \nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_mtd,\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_mtd,\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_mtd,\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_mtd,\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_mtd,\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_mtd,\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_mtd,\n\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_mtd, \nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_mtd,\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_mtd,\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_mtd,\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_mtd,\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_mtd,\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_mtd,\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_mtd,\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_mtd,\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_mtd,\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_mtd,\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_mtd,\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_mtd,\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_mtd,\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_mtd, \nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_mtd,\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_mtd,\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_mtd,\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_mtd,\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_mtd,\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_mtd,\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_mtd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \ngroup by 1,2,3,4,5,6,7,8,9,10,11;\n\n--create yearly dataset\ndrop table if exists #dp_yrly;\ncreate table #dp_yrly as\nselect a.platform,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\n\nsum(b.no_of_total_events_wk) as no_of_total_events_ytd, \nsum(b.no_of_house_events_wk) as no_of_house_events_ytd,\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_ytd,\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_ytd,\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_ytd,\nsum(b.no_of_tv_events_wk) as no_of_tv_events_ytd,\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_ytd,\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_ytd,\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_ytd,\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_ytd,\nsum(b.total_paid_attendance_wk) as total_paid_attendance_ytd,\nsum(b.total_paid_utilization_wk) as total_paid_utilization_ytd,\nsum(b.avg_total_attendance_wk) as avg_total_attendance_ytd,\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_ytd,\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_ytd, \nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_ytd,\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_ytd,\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_ytd,\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_ytd,\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_ytd,\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_ytd,\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_ytd,\n\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_ytd, \nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_ytd,\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_ytd,\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_ytd,\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_ytd,\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_ytd,\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_ytd,\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_ytd,\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_ytd,\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_ytd,\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_ytd,\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_ytd,\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_ytd,\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_ytd,\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_ytd, \nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_ytd,\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_ytd,\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_ytd,\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_ytd,\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_ytd,\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_ytd,\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_ytd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \ngroup by 1,2,3,4,5,6,7,8,9,10,11;\n\n--pivot weekly dataset\ndrop table if exists #dp_wkly_pivot;\ncreate table #dp_wkly_pivot as\nselect * from\n(\nselect 'Weekly' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\n);\n\n--pivot monthly dataset\ndrop table if exists #dp_mthly_pivot;\ncreate table #dp_mthly_pivot as\nselect * from\n(\nselect 'MTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\n);\n\n--pivot yearly dataset\ndrop table if exists #dp_yrly_pivot;\ncreate table #dp_yrly_pivot as\nselect * from\n(\nselect 'YTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\n);\n\ndrop table if exists #final_dp;\ncreate table #final_dp as\nselect \na.granularity, a.platform, a.platform as type, a.metric, a.cal_year as year,\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\nfrom \n(select * from #dp_wkly_pivot union all\n select * from #dp_mthly_pivot union all\n select * from #dp_yrly_pivot) a;\n", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_le", "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_le/aggregate/rpt_le_weekly_consolidated_kpi.sql", "compiled": true, "compiled_sql": "\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\t\nfrom #final_dp a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\t\nfrom #final_dp a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week"}, "error": null, "status": null, "execution_time": 0.011431694030761719, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.458712Z", "completed_at": "2020-09-21T17:49:00.469436Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.469718Z", "completed_at": "2020-09-21T17:49:00.469727Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_nplus',\t\n\t\"materialized\": 'incremental',\n\t\"pre-hook\":\"delete from fds_nplus.rpt_network_ppv_actuals_estimates_forecast\"\n\t\t})\n}}\n\nselect * from (with current_ppv as \n(select *\nfrom {{source('udl_nplus','raw_da_weekly_ppv_hourly_comps')}} where event_date between date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))-1 and  date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))+7),\n\n-- Creating a transposed table with comp events --\n current_list as \n(select event_reporting_type, event_date, event_timestamp as event_dttm, event_name, 'current_ppv' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp1_event_date as event_date, comp1_event_timestamp as event_dttm, comp1_event_name as event_name, 'comp1' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp2_event_date as event_date, comp2_event_timestamp as event_dttm, comp2_event_name as event_name, 'comp2' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp3_event_date as event_date, comp3_event_timestamp as event_dttm, comp3_event_name as event_name, 'comp3' as event_type from current_ppv\n),\n-- Creating a table with dates for the full go home week for current PPV and comps --\nfull_list as \n(select event_date, event_dttm, event_name, event_type, event_reporting_type, 0 as adds_days_to_event, event_date as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -1 as adds_days_to_event, event_date-1 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -2 as adds_days_to_event, event_date-2 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -3 as adds_days_to_event, event_date-3 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -4 as adds_days_to_event, event_date-4 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -5 as adds_days_to_event, event_date-5 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -6 as adds_days_to_event, event_date-6 as adds_date from current_list\n),\n-- Fetching historical orders for relevant comp dates and current PPV using SOS. Code is setup to exclude Roku and any other new payment method which does not have a forecast --\nhist_orders as \n(select trunc(initial_order_dttm) as adds_date, \ndate_part('hour',initial_order_dttm) as adds_time, \nsum(case when first_charged_dttm is null then 1 else 0 end) as trial_adds,\nsum(case when first_charged_dttm is not null then 1 else 0 end) as paid_adds,\ncount(*) as total_adds from {{source('fds_nplus','fact_daily_subscription_order_status')}}\nwhere trunc(initial_order_dttm) + 1 = as_on_date\nand  trunc(initial_order_dttm) in (select distinct adds_date from full_list)\nand trunc(as_on_date) - 1 in (select distinct adds_date from full_list)\nand payment_method in ('cybersource','stripe','incomm','paypal')\ngroup by 1,2 order by 1,2),\nfinal_table as \n(select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, a.adds_days_to_event,\ncase\n        when date_part(dayofweek,a.adds_date) = 0 then 'Sunday'\n        when date_part(dayofweek,a.adds_date) = 1 then 'Monday'\n        when date_part(dayofweek,a.adds_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,a.adds_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,a.adds_date) = 4 then 'Thursday'\n        when date_part(dayofweek,a.adds_date) = 5 then 'Friday'\n        when date_part(dayofweek,a.adds_date) = 6 then 'Saturday'\nelse 'Other' end as adds_day_of_week,\na.adds_date, b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\nfrom full_list as a\nleft join (\n        select adds_date, adds_time, paid_adds, trial_adds, total_adds\n        from hist_orders\n) as b\non a.adds_date = b.adds_date),\n-- This view uses the above view to generate estimate for the full week --\n-- This view will drive the Tableau dashboard --\nfinal_view as \n(select \nevent_date, event_dttm, event_name, event_type, event_reporting_type, \nadds_days_to_event, adds_day_of_week, adds_date, adds_time - extract(hour from event_dttm) as adds_time_to_event,\nadds_time, paid_adds, trial_adds, total_adds\nfrom final_table where adds_time is not null\n\nunion all\n        (select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, \n        a.adds_days_to_event, a.adds_day_of_week, a.adds_date, b.adds_time - extract(hour from a.event_dttm) as adds_time_to_event,\n        b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\n        from final_table as a\n        inner join (\n                select date as adds_date, hour as adds_time, \n                sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds\n                from {{source('udl_nplus','drvd_intra_hour_quarter_hour_adds')}}  a\n\t\t--where date = date(convert_timezone('AMERICA/NEW_YORK', getdate()))\n\t\t--TAB-2028 \n\t\twhere date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))\n\t\tand adds_time <= extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))\n\t      group by 1,2\n        ) as b\n        on a.adds_date = b.adds_date\n        where a.adds_time is null\n)\n),\nestimates as \n(select event_reporting_type, \nevent_name,\nevent_date,\nevent_dttm,\ncurrent_adds_date, \ncurrent_adds_days_to_event,\ncurrent_adds_day_of_week,\ncurrent_adds_time,\nghw_adds_tillnow, \ncase when ghw_adds_tillnow > 0 and comp_ghw_adds_tillnow > 0 then ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) else -1 end as ghw_adds_estimate,\ncurrentday_adds_tillnow,\ncase when currentday_adds_tillnow > 0 and comp_currentday_adds_tillnow > 0 then currentday_adds_tillnow/(comp_currentday_adds_tillnow/comp_currentday_adds) else -1 end as currentday_adds_estimate,\nweekend_adds_tillnow,\ncase when weekend_adds_tillnow > 0 and comp_weekend_adds_tillnow > 0 then (ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) - ghw_adds_tillnow + weekend_adds_tillnow) else -1 end as weekend_adds_estimate\nfrom (\n        select\n        max(event_reporting_type) as event_reporting_type,\n        max(case when event_type = 'current_ppv' then event_name else null end) as event_name,\n        max(case when event_type = 'current_ppv' then event_date else null end) as event_date, \n        max(case when event_type = 'current_ppv' then event_dttm else null end) as event_dttm, \n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_date else null end) as current_adds_date,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_days_to_event else null end) as current_adds_days_to_event,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_day_of_week else null end) as current_adds_day_of_week,\n        max(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type = 'current_ppv' then adds_time else null end) as current_adds_time,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as weekend_adds_tillnow,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as ghw_adds_tillnow,\n        sum(case when current_days_to_event = 1  and event_type = 'current_ppv' then total_adds::float else 0 end) as currentday_adds_tillnow,\n        sum(case when event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds,\n        sum(case when event_type != 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as comp_weekend_adds,\n        sum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds_tillnow,\n        sum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as comp_weekend_adds_tillnow,\n        sum(case when current_days_to_event = 1 and event_type != 'current_ppv' then total_adds::float else 0 end) as comp_currentday_adds,\n        sum(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type != 'current_ppv' then total_adds::float else 0 end) as comp_currentday_adds_tillnow\n        from (\n                select a.*, \n                case when b.adds_days_to_event is null then 0 else 1 end as current_days_to_event,\n                case when c.adds_time_to_event is null then 0 else 1 end as current_time_to_event\n                from final_view as a\n                left join (\n                select max(adds_days_to_event) as adds_days_to_event\n                from final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as b\n                on a.adds_days_to_event = b.adds_days_to_event\n                left join (\n                select distinct adds_days_to_event, adds_time_to_event\n                from final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as c\n                on a.adds_days_to_event = c.adds_days_to_event and a.adds_time_to_event = c.adds_time_to_event\n        )\n)),\nactuals_estimates as\n(select a.*,\nb.event_reporting_type as current_event_reporting_type,\nb.event_name as current_event_name,\nb.event_date as current_event_date,\nb.event_dttm as current_event_dttm,\nb.current_adds_date,\nb.current_adds_days_to_event,\nb.current_adds_day_of_week,\nb.current_adds_time,\nb.ghw_adds_tillnow,\nb.ghw_adds_estimate,\nb.currentday_adds_tillnow,\nb.currentday_adds_estimate,\nb.weekend_adds_tillnow,\nb.weekend_adds_estimate\nfrom final_view as a\nleft join estimates as b\non a.adds_days_to_event = b.current_adds_days_to_event),\n-- This table bring up next scheduled ppv date--\n--next_event as\n--(select top 1 trunc(event_dttm) as forecast_event_dt, \n--dateadd(day,-2,trunc(event_dttm)) as forecast_start_dt from cdm.dim_event \n--where trunc(event_dttm)>=getdate() and\n--event_type_cd = 'PPV' order by event_dttm asc),\nnext_event as\n(select top 1 event_date as forecast_event_dt, \ndateadd(day,-2,event_date) as forecast_start_dt from udl_nplus.raw_da_weekly_ppv_hourly_comps  where \nas_on_date in (select Max(as_on_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps) order by event_date desc),\n--To calculate daily Forecast--\nforecast1 as \n(select trunc(bill_date) as bill_date,\ncase\n        when date_part(dayofweek,bill_date) = 0 then 'Sunday'\n        when date_part(dayofweek,bill_date) = 1 then 'Monday'\n        when date_part(dayofweek,bill_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,bill_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,bill_date) = 4 then 'Thursday'\n        when date_part(dayofweek,bill_date) = 5 then 'Friday'\n        when date_part(dayofweek,bill_date) = 6 then 'Saturday'\nelse 'Other' end as bill_day_of_week,\n--sum(paid_new_adds+paid_winbacks+trial_adds) as current_day_forecast\n--TAB-2028\nsum(paid_new_adds+paid_winbacks) as current_day_forecast\nfrom {{source('fds_nplus','aggr_nplus_daily_forcast_output')}}\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_daily_forcast_output')}})\nand UPPER(payment_method)='MLBAM' and Upper(official_run_flag)='OFFICIAL' \nand trunc(bill_date) >= (select forecast_start_dt from next_event)\nand trunc(bill_date) <= (select forecast_event_dt from next_event)\ngroup by bill_date\norder by bill_date),\n\nforecast2 as\n(select forecast_event_dt,\nbill_date,\nbill_day_of_week,\ncurrent_day_forecast\nfrom next_event,\nforecast1),\n--To calculate Weekday Forecast--\nforecast3 as\n(select \nforecast_event_dt,\nbill_day_of_week,\ncurrent_day_forecast\nfrom forecast2 \n--where trunc(bill_date) = current_date),\n--TAB-2028\nwhere trunc(bill_date) = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))),\n\n--To calculate Weekend Forecast--\nforecast4 as \n(select \nforecast_event_dt,\nsum(current_day_forecast) as weekend_forecast\nfrom forecast2\ngroup by forecast_event_dt),\n--Merging Weekday and Weekend Forecast--\nforecast_view as \n(select a.bill_day_of_week,\na.current_day_forecast,\nb.weekend_forecast,\nb.forecast_event_dt\nfrom forecast3 as a\nleft join forecast4 as b\non a.forecast_event_dt=b.forecast_event_dt\n),\n--Merging Actuals, Estimates and Forecast data--\nactuals_estimates_forecast_view as\n(select \na.*,\nb.current_day_forecast,\nb.weekend_forecast\nfrom actuals_estimates as a \nleft join \nforecast_view as b\non a.current_event_date=b.forecast_event_dt)\nselect a.*,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    SYSDATE                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from actuals_estimates_forecast_view a)", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "rpt_network_ppv_actuals_estimates_forecast"], "unique_id": "model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/aggregate/rpt_network_ppv_actuals_estimates_forecast.sql", "original_file_path": "models/fds_nplus/aggregate/rpt_network_ppv_actuals_estimates_forecast.sql", "name": "rpt_network_ppv_actuals_estimates_forecast", "resource_type": "model", "alias": "rpt_network_ppv_actuals_estimates_forecast", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nplus.rpt_network_ppv_actuals_estimates_forecast", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": []}, "tags": [], "refs": [], "sources": [["udl_nplus", "raw_da_weekly_ppv_hourly_comps"], ["fds_nplus", "fact_daily_subscription_order_status"], ["udl_nplus", "drvd_intra_hour_quarter_hour_adds"], ["fds_nplus", "aggr_nplus_daily_forcast_output"], ["fds_nplus", "aggr_nplus_daily_forcast_output"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.udl_nplus.raw_da_weekly_ppv_hourly_comps", "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status", "source.analytics_engineering_marts.udl_nplus.drvd_intra_hour_quarter_hour_adds", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output"]}, "description": "ppv forecast information", "columns": {"event_date": {"name": "event_date", "description": "PPV event date", "meta": {}, "data_type": null, "tags": []}, "event_dttm": {"name": "event_dttm", "description": "PPV event date and time", "meta": {}, "data_type": null, "tags": []}, "event_name": {"name": "event_name", "description": "PPV event name", "meta": {}, "data_type": null, "tags": []}, "event_type": {"name": "event_type", "description": "Evenet type", "meta": {}, "data_type": null, "tags": []}, "event_reporting_type": {"name": "event_reporting_type", "description": "Event reporting type", "meta": {}, "data_type": null, "tags": []}, "adds_days_to_event": {"name": "adds_days_to_event", "description": "adds day to event", "meta": {}, "data_type": null, "tags": []}, "adds_day_of_week": {"name": "adds_day_of_week", "description": "adds day of the week", "meta": {}, "data_type": null, "tags": []}, "adds_date": {"name": "adds_date", "description": "adds date", "meta": {}, "data_type": null, "tags": []}, "adds_time_to_event": {"name": "adds_time_to_event", "description": "adds time to event", "meta": {}, "data_type": null, "tags": []}, "adds_time": {"name": "adds_time", "description": "adds time", "meta": {}, "data_type": null, "tags": []}, "paid_adds": {"name": "paid_adds", "description": "paid adds", "meta": {}, "data_type": null, "tags": []}, "trial_adds": {"name": "trial_adds", "description": "trial adds", "meta": {}, "data_type": null, "tags": []}, "total_adds": {"name": "total_adds", "description": "total adds", "meta": {}, "data_type": null, "tags": []}, "current_event_reporting_type": {"name": "current_event_reporting_type", "description": "current event reporting type", "meta": {}, "data_type": null, "tags": []}, "current_event_name": {"name": "current_event_name", "description": "current event name", "meta": {}, "data_type": null, "tags": []}, "current_event_date": {"name": "current_event_date", "description": "current event date", "meta": {}, "data_type": null, "tags": []}, "current_event_dttm": {"name": "current_event_dttm", "description": "current event date time", "meta": {}, "data_type": null, "tags": []}, "current_adds_date": {"name": "current_adds_date", "description": "current adds date", "meta": {}, "data_type": null, "tags": []}, "current_adds_days_to_event": {"name": "current_adds_days_to_event", "description": "current adds days to event", "meta": {}, "data_type": null, "tags": []}, "current_adds_day_of_week": {"name": "current_adds_day_of_week", "description": "current adds day of the week", "meta": {}, "data_type": null, "tags": []}, "current_adds_time": {"name": "current_adds_time", "description": "current adds time", "meta": {}, "data_type": null, "tags": []}, "ghw_adds_tillnow": {"name": "ghw_adds_tillnow", "description": "go home eek adds till now", "meta": {}, "data_type": null, "tags": []}, "ghw_adds_estimate": {"name": "ghw_adds_estimate", "description": "go week home adds estimate", "meta": {}, "data_type": null, "tags": []}, "currentday_adds_tillnow": {"name": "currentday_adds_tillnow", "description": "currentday adds till now", "meta": {}, "data_type": null, "tags": []}, "currentday_adds_estimate": {"name": "currentday_adds_estimate", "description": "current day adds estimate", "meta": {}, "data_type": null, "tags": []}, "weekend_adds_tillnow": {"name": "weekend_adds_tillnow", "description": "weekend adds till now", "meta": {}, "data_type": null, "tags": []}, "weekend_adds_estimate": {"name": "weekend_adds_estimate", "description": "weekends adds estimate", "meta": {}, "data_type": null, "tags": []}, "current_day_forecast": {"name": "current_day_forecast", "description": "current day forecast", "meta": {}, "data_type": null, "tags": []}, "weekend_forecast": {"name": "weekend_forecast", "description": "weekend forecast", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/aggregate/rpt_network_ppv_actuals_estimates_forecast.sql", "compiled": true, "compiled_sql": "\n\nselect * from (with current_ppv as \n(select *\nfrom \"entdwdb\".\"udl_nplus\".\"raw_da_weekly_ppv_hourly_comps\" where event_date between date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))-1 and  date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))+7),\n\n-- Creating a transposed table with comp events --\n current_list as \n(select event_reporting_type, event_date, event_timestamp as event_dttm, event_name, 'current_ppv' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp1_event_date as event_date, comp1_event_timestamp as event_dttm, comp1_event_name as event_name, 'comp1' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp2_event_date as event_date, comp2_event_timestamp as event_dttm, comp2_event_name as event_name, 'comp2' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp3_event_date as event_date, comp3_event_timestamp as event_dttm, comp3_event_name as event_name, 'comp3' as event_type from current_ppv\n),\n-- Creating a table with dates for the full go home week for current PPV and comps --\nfull_list as \n(select event_date, event_dttm, event_name, event_type, event_reporting_type, 0 as adds_days_to_event, event_date as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -1 as adds_days_to_event, event_date-1 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -2 as adds_days_to_event, event_date-2 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -3 as adds_days_to_event, event_date-3 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -4 as adds_days_to_event, event_date-4 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -5 as adds_days_to_event, event_date-5 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -6 as adds_days_to_event, event_date-6 as adds_date from current_list\n),\n-- Fetching historical orders for relevant comp dates and current PPV using SOS. Code is setup to exclude Roku and any other new payment method which does not have a forecast --\nhist_orders as \n(select trunc(initial_order_dttm) as adds_date, \ndate_part('hour',initial_order_dttm) as adds_time, \nsum(case when first_charged_dttm is null then 1 else 0 end) as trial_adds,\nsum(case when first_charged_dttm is not null then 1 else 0 end) as paid_adds,\ncount(*) as total_adds from \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_order_status\"\nwhere trunc(initial_order_dttm) + 1 = as_on_date\nand  trunc(initial_order_dttm) in (select distinct adds_date from full_list)\nand trunc(as_on_date) - 1 in (select distinct adds_date from full_list)\nand payment_method in ('cybersource','stripe','incomm','paypal')\ngroup by 1,2 order by 1,2),\nfinal_table as \n(select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, a.adds_days_to_event,\ncase\n        when date_part(dayofweek,a.adds_date) = 0 then 'Sunday'\n        when date_part(dayofweek,a.adds_date) = 1 then 'Monday'\n        when date_part(dayofweek,a.adds_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,a.adds_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,a.adds_date) = 4 then 'Thursday'\n        when date_part(dayofweek,a.adds_date) = 5 then 'Friday'\n        when date_part(dayofweek,a.adds_date) = 6 then 'Saturday'\nelse 'Other' end as adds_day_of_week,\na.adds_date, b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\nfrom full_list as a\nleft join (\n        select adds_date, adds_time, paid_adds, trial_adds, total_adds\n        from hist_orders\n) as b\non a.adds_date = b.adds_date),\n-- This view uses the above view to generate estimate for the full week --\n-- This view will drive the Tableau dashboard --\nfinal_view as \n(select \nevent_date, event_dttm, event_name, event_type, event_reporting_type, \nadds_days_to_event, adds_day_of_week, adds_date, adds_time - extract(hour from event_dttm) as adds_time_to_event,\nadds_time, paid_adds, trial_adds, total_adds\nfrom final_table where adds_time is not null\n\nunion all\n        (select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, \n        a.adds_days_to_event, a.adds_day_of_week, a.adds_date, b.adds_time - extract(hour from a.event_dttm) as adds_time_to_event,\n        b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\n        from final_table as a\n        inner join (\n                select date as adds_date, hour as adds_time, \n                sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds\n                from \"entdwdb\".\"udl_nplus\".\"drvd_intra_hour_quarter_hour_adds\"  a\n\t\t--where date = date(convert_timezone('AMERICA/NEW_YORK', getdate()))\n\t\t--TAB-2028 \n\t\twhere date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))\n\t\tand adds_time <= extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))\n\t      group by 1,2\n        ) as b\n        on a.adds_date = b.adds_date\n        where a.adds_time is null\n)\n),\nestimates as \n(select event_reporting_type, \nevent_name,\nevent_date,\nevent_dttm,\ncurrent_adds_date, \ncurrent_adds_days_to_event,\ncurrent_adds_day_of_week,\ncurrent_adds_time,\nghw_adds_tillnow, \ncase when ghw_adds_tillnow > 0 and comp_ghw_adds_tillnow > 0 then ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) else -1 end as ghw_adds_estimate,\ncurrentday_adds_tillnow,\ncase when currentday_adds_tillnow > 0 and comp_currentday_adds_tillnow > 0 then currentday_adds_tillnow/(comp_currentday_adds_tillnow/comp_currentday_adds) else -1 end as currentday_adds_estimate,\nweekend_adds_tillnow,\ncase when weekend_adds_tillnow > 0 and comp_weekend_adds_tillnow > 0 then (ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) - ghw_adds_tillnow + weekend_adds_tillnow) else -1 end as weekend_adds_estimate\nfrom (\n        select\n        max(event_reporting_type) as event_reporting_type,\n        max(case when event_type = 'current_ppv' then event_name else null end) as event_name,\n        max(case when event_type = 'current_ppv' then event_date else null end) as event_date, \n        max(case when event_type = 'current_ppv' then event_dttm else null end) as event_dttm, \n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_date else null end) as current_adds_date,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_days_to_event else null end) as current_adds_days_to_event,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_day_of_week else null end) as current_adds_day_of_week,\n        max(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type = 'current_ppv' then adds_time else null end) as current_adds_time,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as weekend_adds_tillnow,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as ghw_adds_tillnow,\n        sum(case when current_days_to_event = 1  and event_type = 'current_ppv' then total_adds::float else 0 end) as currentday_adds_tillnow,\n        sum(case when event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds,\n        sum(case when event_type != 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as comp_weekend_adds,\n        sum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds_tillnow,\n        sum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as comp_weekend_adds_tillnow,\n        sum(case when current_days_to_event = 1 and event_type != 'current_ppv' then total_adds::float else 0 end) as comp_currentday_adds,\n        sum(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type != 'current_ppv' then total_adds::float else 0 end) as comp_currentday_adds_tillnow\n        from (\n                select a.*, \n                case when b.adds_days_to_event is null then 0 else 1 end as current_days_to_event,\n                case when c.adds_time_to_event is null then 0 else 1 end as current_time_to_event\n                from final_view as a\n                left join (\n                select max(adds_days_to_event) as adds_days_to_event\n                from final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as b\n                on a.adds_days_to_event = b.adds_days_to_event\n                left join (\n                select distinct adds_days_to_event, adds_time_to_event\n                from final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as c\n                on a.adds_days_to_event = c.adds_days_to_event and a.adds_time_to_event = c.adds_time_to_event\n        )\n)),\nactuals_estimates as\n(select a.*,\nb.event_reporting_type as current_event_reporting_type,\nb.event_name as current_event_name,\nb.event_date as current_event_date,\nb.event_dttm as current_event_dttm,\nb.current_adds_date,\nb.current_adds_days_to_event,\nb.current_adds_day_of_week,\nb.current_adds_time,\nb.ghw_adds_tillnow,\nb.ghw_adds_estimate,\nb.currentday_adds_tillnow,\nb.currentday_adds_estimate,\nb.weekend_adds_tillnow,\nb.weekend_adds_estimate\nfrom final_view as a\nleft join estimates as b\non a.adds_days_to_event = b.current_adds_days_to_event),\n-- This table bring up next scheduled ppv date--\n--next_event as\n--(select top 1 trunc(event_dttm) as forecast_event_dt, \n--dateadd(day,-2,trunc(event_dttm)) as forecast_start_dt from cdm.dim_event \n--where trunc(event_dttm)>=getdate() and\n--event_type_cd = 'PPV' order by event_dttm asc),\nnext_event as\n(select top 1 event_date as forecast_event_dt, \ndateadd(day,-2,event_date) as forecast_start_dt from udl_nplus.raw_da_weekly_ppv_hourly_comps  where \nas_on_date in (select Max(as_on_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps) order by event_date desc),\n--To calculate daily Forecast--\nforecast1 as \n(select trunc(bill_date) as bill_date,\ncase\n        when date_part(dayofweek,bill_date) = 0 then 'Sunday'\n        when date_part(dayofweek,bill_date) = 1 then 'Monday'\n        when date_part(dayofweek,bill_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,bill_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,bill_date) = 4 then 'Thursday'\n        when date_part(dayofweek,bill_date) = 5 then 'Friday'\n        when date_part(dayofweek,bill_date) = 6 then 'Saturday'\nelse 'Other' end as bill_day_of_week,\n--sum(paid_new_adds+paid_winbacks+trial_adds) as current_day_forecast\n--TAB-2028\nsum(paid_new_adds+paid_winbacks) as current_day_forecast\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\"\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\")\nand UPPER(payment_method)='MLBAM' and Upper(official_run_flag)='OFFICIAL' \nand trunc(bill_date) >= (select forecast_start_dt from next_event)\nand trunc(bill_date) <= (select forecast_event_dt from next_event)\ngroup by bill_date\norder by bill_date),\n\nforecast2 as\n(select forecast_event_dt,\nbill_date,\nbill_day_of_week,\ncurrent_day_forecast\nfrom next_event,\nforecast1),\n--To calculate Weekday Forecast--\nforecast3 as\n(select \nforecast_event_dt,\nbill_day_of_week,\ncurrent_day_forecast\nfrom forecast2 \n--where trunc(bill_date) = current_date),\n--TAB-2028\nwhere trunc(bill_date) = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))),\n\n--To calculate Weekend Forecast--\nforecast4 as \n(select \nforecast_event_dt,\nsum(current_day_forecast) as weekend_forecast\nfrom forecast2\ngroup by forecast_event_dt),\n--Merging Weekday and Weekend Forecast--\nforecast_view as \n(select a.bill_day_of_week,\na.current_day_forecast,\nb.weekend_forecast,\nb.forecast_event_dt\nfrom forecast3 as a\nleft join forecast4 as b\non a.forecast_event_dt=b.forecast_event_dt\n),\n--Merging Actuals, Estimates and Forecast data--\nactuals_estimates_forecast_view as\n(select \na.*,\nb.current_day_forecast,\nb.weekend_forecast\nfrom actuals_estimates as a \nleft join \nforecast_view as b\non a.current_event_date=b.forecast_event_dt)\nselect a.*,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    SYSDATE                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from actuals_estimates_forecast_view a)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from (with current_ppv as \n(select *\nfrom \"entdwdb\".\"udl_nplus\".\"raw_da_weekly_ppv_hourly_comps\" where event_date between date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))-1 and  date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))+7),\n\n-- Creating a transposed table with comp events --\n current_list as \n(select event_reporting_type, event_date, event_timestamp as event_dttm, event_name, 'current_ppv' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp1_event_date as event_date, comp1_event_timestamp as event_dttm, comp1_event_name as event_name, 'comp1' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp2_event_date as event_date, comp2_event_timestamp as event_dttm, comp2_event_name as event_name, 'comp2' as event_type from current_ppv\nunion all\nselect event_reporting_type, comp3_event_date as event_date, comp3_event_timestamp as event_dttm, comp3_event_name as event_name, 'comp3' as event_type from current_ppv\n),\n-- Creating a table with dates for the full go home week for current PPV and comps --\nfull_list as \n(select event_date, event_dttm, event_name, event_type, event_reporting_type, 0 as adds_days_to_event, event_date as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -1 as adds_days_to_event, event_date-1 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -2 as adds_days_to_event, event_date-2 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -3 as adds_days_to_event, event_date-3 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -4 as adds_days_to_event, event_date-4 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -5 as adds_days_to_event, event_date-5 as adds_date from current_list\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -6 as adds_days_to_event, event_date-6 as adds_date from current_list\n),\n-- Fetching historical orders for relevant comp dates and current PPV using SOS. Code is setup to exclude Roku and any other new payment method which does not have a forecast --\nhist_orders as \n(select trunc(initial_order_dttm) as adds_date, \ndate_part('hour',initial_order_dttm) as adds_time, \nsum(case when first_charged_dttm is null then 1 else 0 end) as trial_adds,\nsum(case when first_charged_dttm is not null then 1 else 0 end) as paid_adds,\ncount(*) as total_adds from \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_order_status\"\nwhere trunc(initial_order_dttm) + 1 = as_on_date\nand  trunc(initial_order_dttm) in (select distinct adds_date from full_list)\nand trunc(as_on_date) - 1 in (select distinct adds_date from full_list)\nand payment_method in ('cybersource','stripe','incomm','paypal')\ngroup by 1,2 order by 1,2),\nfinal_table as \n(select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, a.adds_days_to_event,\ncase\n        when date_part(dayofweek,a.adds_date) = 0 then 'Sunday'\n        when date_part(dayofweek,a.adds_date) = 1 then 'Monday'\n        when date_part(dayofweek,a.adds_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,a.adds_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,a.adds_date) = 4 then 'Thursday'\n        when date_part(dayofweek,a.adds_date) = 5 then 'Friday'\n        when date_part(dayofweek,a.adds_date) = 6 then 'Saturday'\nelse 'Other' end as adds_day_of_week,\na.adds_date, b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\nfrom full_list as a\nleft join (\n        select adds_date, adds_time, paid_adds, trial_adds, total_adds\n        from hist_orders\n) as b\non a.adds_date = b.adds_date),\n-- This view uses the above view to generate estimate for the full week --\n-- This view will drive the Tableau dashboard --\nfinal_view as \n(select \nevent_date, event_dttm, event_name, event_type, event_reporting_type, \nadds_days_to_event, adds_day_of_week, adds_date, adds_time - extract(hour from event_dttm) as adds_time_to_event,\nadds_time, paid_adds, trial_adds, total_adds\nfrom final_table where adds_time is not null\n\nunion all\n        (select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, \n        a.adds_days_to_event, a.adds_day_of_week, a.adds_date, b.adds_time - extract(hour from a.event_dttm) as adds_time_to_event,\n        b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\n        from final_table as a\n        inner join (\n                select date as adds_date, hour as adds_time, \n                sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds\n                from \"entdwdb\".\"udl_nplus\".\"drvd_intra_hour_quarter_hour_adds\"  a\n\t\t--where date = date(convert_timezone('AMERICA/NEW_YORK', getdate()))\n\t\t--TAB-2028 \n\t\twhere date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))\n\t\tand adds_time <= extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))\n\t      group by 1,2\n        ) as b\n        on a.adds_date = b.adds_date\n        where a.adds_time is null\n)\n),\nestimates as \n(select event_reporting_type, \nevent_name,\nevent_date,\nevent_dttm,\ncurrent_adds_date, \ncurrent_adds_days_to_event,\ncurrent_adds_day_of_week,\ncurrent_adds_time,\nghw_adds_tillnow, \ncase when ghw_adds_tillnow > 0 and comp_ghw_adds_tillnow > 0 then ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) else -1 end as ghw_adds_estimate,\ncurrentday_adds_tillnow,\ncase when currentday_adds_tillnow > 0 and comp_currentday_adds_tillnow > 0 then currentday_adds_tillnow/(comp_currentday_adds_tillnow/comp_currentday_adds) else -1 end as currentday_adds_estimate,\nweekend_adds_tillnow,\ncase when weekend_adds_tillnow > 0 and comp_weekend_adds_tillnow > 0 then (ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) - ghw_adds_tillnow + weekend_adds_tillnow) else -1 end as weekend_adds_estimate\nfrom (\n        select\n        max(event_reporting_type) as event_reporting_type,\n        max(case when event_type = 'current_ppv' then event_name else null end) as event_name,\n        max(case when event_type = 'current_ppv' then event_date else null end) as event_date, \n        max(case when event_type = 'current_ppv' then event_dttm else null end) as event_dttm, \n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_date else null end) as current_adds_date,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_days_to_event else null end) as current_adds_days_to_event,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_day_of_week else null end) as current_adds_day_of_week,\n        max(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type = 'current_ppv' then adds_time else null end) as current_adds_time,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as weekend_adds_tillnow,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as ghw_adds_tillnow,\n        sum(case when current_days_to_event = 1  and event_type = 'current_ppv' then total_adds::float else 0 end) as currentday_adds_tillnow,\n        sum(case when event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds,\n        sum(case when event_type != 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as comp_weekend_adds,\n        sum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds_tillnow,\n        sum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as comp_weekend_adds_tillnow,\n        sum(case when current_days_to_event = 1 and event_type != 'current_ppv' then total_adds::float else 0 end) as comp_currentday_adds,\n        sum(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type != 'current_ppv' then total_adds::float else 0 end) as comp_currentday_adds_tillnow\n        from (\n                select a.*, \n                case when b.adds_days_to_event is null then 0 else 1 end as current_days_to_event,\n                case when c.adds_time_to_event is null then 0 else 1 end as current_time_to_event\n                from final_view as a\n                left join (\n                select max(adds_days_to_event) as adds_days_to_event\n                from final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as b\n                on a.adds_days_to_event = b.adds_days_to_event\n                left join (\n                select distinct adds_days_to_event, adds_time_to_event\n                from final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as c\n                on a.adds_days_to_event = c.adds_days_to_event and a.adds_time_to_event = c.adds_time_to_event\n        )\n)),\nactuals_estimates as\n(select a.*,\nb.event_reporting_type as current_event_reporting_type,\nb.event_name as current_event_name,\nb.event_date as current_event_date,\nb.event_dttm as current_event_dttm,\nb.current_adds_date,\nb.current_adds_days_to_event,\nb.current_adds_day_of_week,\nb.current_adds_time,\nb.ghw_adds_tillnow,\nb.ghw_adds_estimate,\nb.currentday_adds_tillnow,\nb.currentday_adds_estimate,\nb.weekend_adds_tillnow,\nb.weekend_adds_estimate\nfrom final_view as a\nleft join estimates as b\non a.adds_days_to_event = b.current_adds_days_to_event),\n-- This table bring up next scheduled ppv date--\n--next_event as\n--(select top 1 trunc(event_dttm) as forecast_event_dt, \n--dateadd(day,-2,trunc(event_dttm)) as forecast_start_dt from cdm.dim_event \n--where trunc(event_dttm)>=getdate() and\n--event_type_cd = 'PPV' order by event_dttm asc),\nnext_event as\n(select top 1 event_date as forecast_event_dt, \ndateadd(day,-2,event_date) as forecast_start_dt from udl_nplus.raw_da_weekly_ppv_hourly_comps  where \nas_on_date in (select Max(as_on_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps) order by event_date desc),\n--To calculate daily Forecast--\nforecast1 as \n(select trunc(bill_date) as bill_date,\ncase\n        when date_part(dayofweek,bill_date) = 0 then 'Sunday'\n        when date_part(dayofweek,bill_date) = 1 then 'Monday'\n        when date_part(dayofweek,bill_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,bill_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,bill_date) = 4 then 'Thursday'\n        when date_part(dayofweek,bill_date) = 5 then 'Friday'\n        when date_part(dayofweek,bill_date) = 6 then 'Saturday'\nelse 'Other' end as bill_day_of_week,\n--sum(paid_new_adds+paid_winbacks+trial_adds) as current_day_forecast\n--TAB-2028\nsum(paid_new_adds+paid_winbacks) as current_day_forecast\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\"\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\")\nand UPPER(payment_method)='MLBAM' and Upper(official_run_flag)='OFFICIAL' \nand trunc(bill_date) >= (select forecast_start_dt from next_event)\nand trunc(bill_date) <= (select forecast_event_dt from next_event)\ngroup by bill_date\norder by bill_date),\n\nforecast2 as\n(select forecast_event_dt,\nbill_date,\nbill_day_of_week,\ncurrent_day_forecast\nfrom next_event,\nforecast1),\n--To calculate Weekday Forecast--\nforecast3 as\n(select \nforecast_event_dt,\nbill_day_of_week,\ncurrent_day_forecast\nfrom forecast2 \n--where trunc(bill_date) = current_date),\n--TAB-2028\nwhere trunc(bill_date) = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))),\n\n--To calculate Weekend Forecast--\nforecast4 as \n(select \nforecast_event_dt,\nsum(current_day_forecast) as weekend_forecast\nfrom forecast2\ngroup by forecast_event_dt),\n--Merging Weekday and Weekend Forecast--\nforecast_view as \n(select a.bill_day_of_week,\na.current_day_forecast,\nb.weekend_forecast,\nb.forecast_event_dt\nfrom forecast3 as a\nleft join forecast4 as b\non a.forecast_event_dt=b.forecast_event_dt\n),\n--Merging Actuals, Estimates and Forecast data--\nactuals_estimates_forecast_view as\n(select \na.*,\nb.current_day_forecast,\nb.weekend_forecast\nfrom actuals_estimates as a \nleft join \nforecast_view as b\non a.current_event_date=b.forecast_event_dt)\nselect a.*,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    SYSDATE                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from actuals_estimates_forecast_view a)"}, "error": null, "status": null, "execution_time": 0.028716564178466797, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.470363Z", "completed_at": "2020-09-21T17:49:00.498291Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.498604Z", "completed_at": "2020-09-21T17:49:00.498614Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_nplus',\t\n\t\"materialized\": 'incremental',\"persist_docs\": {'relation' : true, 'columns' : true}\n\t\t})\n}}\nwith live_manual as\n(select * from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard --fds_nplus.live_plus_vod_manual_data \nwhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date),\nprior_change_live as\n(select a.*, prev_year_views, prev_year_event\n  from\n  (select platform,\n         views as prev_month_views,\n         event as prev_month_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_month_event from live_manual)) as a \n  join \n  (select platform,\n         views as prev_year_views,\n         event as prev_year_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_year_event from live_manual)) as b\n  on a.platform=b.platform\n  and a.event_brand = b.event_brand\n  where a.platform <> 'Total'),\nlive_manual_base as \n(select a.*,b.prev_month_views,b.prev_year_views, \ncase when a.platform = 'YouTube' then round(a.views*0.23)\n     else 0 end as us_views\nfrom live_manual a\nleft join\nprior_change_live b\non a.platform = b.platform\nand a.event_brand = b.event_brand),\nlive_nwk_unique_viewers as \n(select *\nfrom   (\n        select count(distinct a.customerid) as unique_viewers, 'PPV' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as ppv_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.ppv_flag='1'\n        \n        union\n               \n        select count(distinct a.customerid) as unique_viewers, 'NXT' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as nxt_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.nxt_flag='1'\n       )\n),\n\n\n\n\n\nlive_dotcom_plays as \n(select * \nfrom\n(\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'PPV' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') \n         group by filter_id,filter_name \n         )\nunion\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'NXT' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') \n         group by filter_id,filter_name \n         )\n)\n ),\n live_manual_base1 as \n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_plays from live_dotcom_plays where event_brand =  'NXT')\n     else views end as views,\nminutes,prev_month_views,prev_year_views,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'NXT')\n     else us_views end as us_views\nfrom live_manual_base),\nlive_manual_base_total as \n(select * from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views\nfrom live_manual_base1\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,'Total' as platform,data_level,\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\nsum(views) as views,\nsum(minutes) as minutes,\nsum(prev_month_views) as prev_month_views,\nsum(prev_year_views) as prev_year_views,\nsum(us_views) as us_views\nfrom live_manual_base1\ngroup by \nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,data_level\n)),\nlive_consolidation as\n(select *  from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views,\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \nfrom live_manual_base_total\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \nfrom fds_nplus.rpt_network_ppv_liveplusvod where event_brand in (select distinct event_brand from live_manual) and data_level = 'Live'\nand event_date <> current_date)),\n\nlive_final as \n(select a.*, \n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\n               else null end as yearly_rank,\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\n               else 'Tier 2' end as tier,\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\n          else '0' end as monthly_color,\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\n          else '0' end as yearly_color,\n          case when a.event_date=(select max(event_date) from live_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\n from live_consolidation a\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \n           from live_consolidation where current_date-event_date::date <=380 and event_brand = 'PPV') as b\non a.platform=b.platform\nand a.event=b.event\nand a.event_date=b.event_date\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \n           from live_consolidation where current_date-event_date::date <=735 and event_brand = 'NXT') as c\non a.platform=c.platform\nand a.event=c.event\nand a.event_date=c.event_date)\nselect report_name,series_name,account,url,0 as asset_id,content_wwe_id as content_wweid,production_id,\nevent,event_name,event_date,start_time,end_time,platform,views,us_views,minutes,per_us_views,\nprev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\nchoose_ppv,event_brand,data_level from live_final", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "rpt_network_ppv_liveplusvod"], "unique_id": "model.analytics_engineering_marts.rpt_network_ppv_liveplusvod", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/aggregate/rpt_network_ppv_liveplusvod.sql", "original_file_path": "models/fds_nplus/aggregate/rpt_network_ppv_liveplusvod.sql", "name": "rpt_network_ppv_liveplusvod", "resource_type": "model", "alias": "rpt_network_ppv_liveplusvod", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : rpt_network_ppv_liveplusvod\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : View contains the information related to Live NXT and HOF evenet\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"asset_id": {"name": "asset_id", "description": "The ID for a YouTube channel. In the YouTube Data API, this is the value of a channelresources id property.", "meta": {}, "data_type": null, "tags": []}, "production_id": {"name": "production_id", "description": "Unique content version level id", "meta": {}, "data_type": null, "tags": []}, "event": {"name": "event", "description": "Event name and year", "meta": {}, "data_type": null, "tags": []}, "event_name": {"name": "event_name", "description": "Event name", "meta": {}, "data_type": null, "tags": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "start timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "end timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "platform": {"name": "platform", "description": "platform name i.e. Facebook, Youtube, etc", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "number of views for the event", "meta": {}, "data_type": null, "tags": []}, "us_views": {"name": "us_views", "description": "number of views in US for the event", "meta": {}, "data_type": null, "tags": []}, "minutes": {"name": "minutes", "description": "number of minutes watched", "meta": {}, "data_type": null, "tags": []}, "per_us_views": {"name": "per_us_views", "description": "percentage of views in US against overall views", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "previous month views", "meta": {}, "data_type": null, "tags": []}, "prev_month_event": {"name": "prev_month_event", "description": "previous month event name", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "previous year views", "meta": {}, "data_type": null, "tags": []}, "prev_year_event": {"name": "prev_year_event", "description": "previous year event name", "meta": {}, "data_type": null, "tags": []}, "monthly_per_change_views": {"name": "monthly_per_change_views", "description": "monthly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "yearly_per_change_views": {"name": "yearly_per_change_views", "description": "yearly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "duration of the event", "meta": {}, "data_type": null, "tags": []}, "overall_rank": {"name": "overall_rank", "description": "overall rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "yearly_rank": {"name": "yearly_rank", "description": "yearly rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "tier": {"name": "tier", "description": "event tier", "meta": {}, "data_type": null, "tags": []}, "monthly_color": {"name": "monthly_color", "description": "color metric for the month", "meta": {}, "data_type": null, "tags": []}, "yearly_color": {"name": "yearly_color", "description": "color metric for the year", "meta": {}, "data_type": null, "tags": []}, "choose_ppv": {"name": "choose_ppv", "description": "prior or most recent ppv", "meta": {}, "data_type": null, "tags": []}, "event_brand": {"name": "event_brand", "description": "event brand i.e. PPV, NXT or Hall of Fame", "meta": {}, "data_type": null, "tags": []}, "report_name": {"name": "report_name", "description": "name of the report i.e. Kickoff show, The Bump etc", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "name of the series", "meta": {}, "data_type": null, "tags": []}, "account": {"name": "account", "description": "account name of the platform", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "platform url of the event", "meta": {}, "data_type": null, "tags": []}, "content_wweid": {"name": "content_wweid", "description": "unique identifier for the event", "meta": {}, "data_type": null, "tags": []}, "data_level": {"name": "data_level", "description": "identifier for Live data and Live+VOD data", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/aggregate/rpt_network_ppv_liveplusvod.sql", "compiled": true, "compiled_sql": "\nwith live_manual as\n(select * from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard --fds_nplus.live_plus_vod_manual_data \nwhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date),\nprior_change_live as\n(select a.*, prev_year_views, prev_year_event\n  from\n  (select platform,\n         views as prev_month_views,\n         event as prev_month_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_month_event from live_manual)) as a \n  join \n  (select platform,\n         views as prev_year_views,\n         event as prev_year_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_year_event from live_manual)) as b\n  on a.platform=b.platform\n  and a.event_brand = b.event_brand\n  where a.platform <> 'Total'),\nlive_manual_base as \n(select a.*,b.prev_month_views,b.prev_year_views, \ncase when a.platform = 'YouTube' then round(a.views*0.23)\n     else 0 end as us_views\nfrom live_manual a\nleft join\nprior_change_live b\non a.platform = b.platform\nand a.event_brand = b.event_brand),\nlive_nwk_unique_viewers as \n(select *\nfrom   (\n        select count(distinct a.customerid) as unique_viewers, 'PPV' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as ppv_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.ppv_flag='1'\n        \n        union\n               \n        select count(distinct a.customerid) as unique_viewers, 'NXT' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as nxt_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.nxt_flag='1'\n       )\n),\n\n\n\n\n\nlive_dotcom_plays as \n(select * \nfrom\n(\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'PPV' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') \n         group by filter_id,filter_name \n         )\nunion\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'NXT' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') \n         group by filter_id,filter_name \n         )\n)\n ),\n live_manual_base1 as \n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_plays from live_dotcom_plays where event_brand =  'NXT')\n     else views end as views,\nminutes,prev_month_views,prev_year_views,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'NXT')\n     else us_views end as us_views\nfrom live_manual_base),\nlive_manual_base_total as \n(select * from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views\nfrom live_manual_base1\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,'Total' as platform,data_level,\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\nsum(views) as views,\nsum(minutes) as minutes,\nsum(prev_month_views) as prev_month_views,\nsum(prev_year_views) as prev_year_views,\nsum(us_views) as us_views\nfrom live_manual_base1\ngroup by \nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,data_level\n)),\nlive_consolidation as\n(select *  from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views,\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \nfrom live_manual_base_total\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \nfrom fds_nplus.rpt_network_ppv_liveplusvod where event_brand in (select distinct event_brand from live_manual) and data_level = 'Live'\nand event_date <> current_date)),\n\nlive_final as \n(select a.*, \n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\n               else null end as yearly_rank,\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\n               else 'Tier 2' end as tier,\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\n          else '0' end as monthly_color,\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\n          else '0' end as yearly_color,\n          case when a.event_date=(select max(event_date) from live_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\n from live_consolidation a\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \n           from live_consolidation where current_date-event_date::date <=380 and event_brand = 'PPV') as b\non a.platform=b.platform\nand a.event=b.event\nand a.event_date=b.event_date\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \n           from live_consolidation where current_date-event_date::date <=735 and event_brand = 'NXT') as c\non a.platform=c.platform\nand a.event=c.event\nand a.event_date=c.event_date)\nselect report_name,series_name,account,url,0 as asset_id,content_wwe_id as content_wweid,production_id,\nevent,event_name,event_date,start_time,end_time,platform,views,us_views,minutes,per_us_views,\nprev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\nchoose_ppv,event_brand,data_level from live_final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith live_manual as\n(select * from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard --fds_nplus.live_plus_vod_manual_data \nwhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date),\nprior_change_live as\n(select a.*, prev_year_views, prev_year_event\n  from\n  (select platform,\n         views as prev_month_views,\n         event as prev_month_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_month_event from live_manual)) as a \n  join \n  (select platform,\n         views as prev_year_views,\n         event as prev_year_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_year_event from live_manual)) as b\n  on a.platform=b.platform\n  and a.event_brand = b.event_brand\n  where a.platform <> 'Total'),\nlive_manual_base as \n(select a.*,b.prev_month_views,b.prev_year_views, \ncase when a.platform = 'YouTube' then round(a.views*0.23)\n     else 0 end as us_views\nfrom live_manual a\nleft join\nprior_change_live b\non a.platform = b.platform\nand a.event_brand = b.event_brand),\nlive_nwk_unique_viewers as \n(select *\nfrom   (\n        select count(distinct a.customerid) as unique_viewers, 'PPV' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as ppv_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.ppv_flag='1'\n        \n        union\n               \n        select count(distinct a.customerid) as unique_viewers, 'NXT' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as nxt_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.nxt_flag='1'\n       )\n),\n\n\n\n\n\nlive_dotcom_plays as \n(select * \nfrom\n(\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'PPV' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') \n         group by filter_id,filter_name \n         )\nunion\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'NXT' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') \n         group by filter_id,filter_name \n         )\n)\n ),\n live_manual_base1 as \n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_plays from live_dotcom_plays where event_brand =  'NXT')\n     else views end as views,\nminutes,prev_month_views,prev_year_views,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'NXT')\n     else us_views end as us_views\nfrom live_manual_base),\nlive_manual_base_total as \n(select * from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views\nfrom live_manual_base1\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,'Total' as platform,data_level,\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\nsum(views) as views,\nsum(minutes) as minutes,\nsum(prev_month_views) as prev_month_views,\nsum(prev_year_views) as prev_year_views,\nsum(us_views) as us_views\nfrom live_manual_base1\ngroup by \nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,data_level\n)),\nlive_consolidation as\n(select *  from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views,\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \nfrom live_manual_base_total\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \nfrom fds_nplus.rpt_network_ppv_liveplusvod where event_brand in (select distinct event_brand from live_manual) and data_level = 'Live'\nand event_date <> current_date)),\n\nlive_final as \n(select a.*, \n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\n               else null end as yearly_rank,\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\n               else 'Tier 2' end as tier,\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\n          else '0' end as monthly_color,\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\n          else '0' end as yearly_color,\n          case when a.event_date=(select max(event_date) from live_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\n from live_consolidation a\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \n           from live_consolidation where current_date-event_date::date <=380 and event_brand = 'PPV') as b\non a.platform=b.platform\nand a.event=b.event\nand a.event_date=b.event_date\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \n           from live_consolidation where current_date-event_date::date <=735 and event_brand = 'NXT') as c\non a.platform=c.platform\nand a.event=c.event\nand a.event_date=c.event_date)\nselect report_name,series_name,account,url,0 as asset_id,content_wwe_id as content_wweid,production_id,\nevent,event_name,event_date,start_time,end_time,platform,views,us_views,minutes,per_us_views,\nprev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\nchoose_ppv,event_brand,data_level from live_final"}, "error": null, "status": null, "execution_time": 0.023752212524414062, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.499328Z", "completed_at": "2020-09-21T17:49:00.522073Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.522518Z", "completed_at": "2020-09-21T17:49:00.522531Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\t\t/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_weekly_overlap_4_way_oob)\"],\n\t     \"materialized\": 'incremental','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\n{% set descript = [(\"AB\",\"Total Combined SmackDown and/or Raw\"),(\"BC\",\"Total Combined Raw and/or NXT\"),(\"CA\",\"Total Combined NXT and/or SmackDown\"),\n(\"AD\",\"Total Combined SmackDown and/or AEW\"),(\"BD\",\"Total Combined Raw and/or AEW\"),(\"CD\",\"Total Combined NXT and/or AEW\"),\n(\"ABC\",\"Total Watched ANY WWE (Total Combined SmackDown and/or Raw and/or NXT)\"),\n(\"ABD\",\"Total Combined SmackDown and/or Raw and/or AEW\"),(\"BCD\",\"Total Combined Raw and/or NXT and/or AEW\"),(\"ACD\",\"Total Combined SmackDown and/or NXT and/or AEW\"),\n(\"ABCD\",\"Total Watched ANY Wrestling (SmackDown and/or Raw and/or NXT and/or AEW)\")] %}\n\n{% set schedule_formulas = [(\"(A+B-AB)\",\"Both A&B\",\"Derived\",\"Total Combined SmackDown and Raw\"),\n(\"(A+C-CA)\",\"Both A&C\",\"Derived\",\"Total Combined SmackDown and NXT\"),\n(\"(A+D-AD)\",\"Both A&D\",\"Derived\",\"Total Combined SmackDown and AEW\"),\n(\"(B+D-BD)\",\"Both B&D\",\"Derived\",\"Total Combined Raw and AEW\"),\n(\"(B+C-BC)\",\"Both B&C\",\"Derived\",\"Total Combined Raw and NXT\"),\n(\"(C+D-CD)\",\"Both C&D\",\"Derived\",\"Total Combined AEW and NXT\"),\n(\"((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC)\",\"A and B and C\",\"Derived\",\"Watched ALL WWE Total Combined SmackDown and Raw and NXT (includes AEW overlap)\"),\n(\"((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD)\",\"B and C and D\",\"Derived\",\"Total Combined Raw and NXT and AEW (includes SmackDown overlap)\"),\n(\"((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)\",\"A and C and D\",\"Derived\",\"Total Combined SmackDown and NXT and AEW (includes Raw overlap)\"),\n(\"((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD)\",\"A and B and D\",\"Derived\",\"Total Combined SmackDown and Raw and AEW (includes NXT overlap)\"),\n(\"((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B and C and D\",\"4-Way O/O/O/O/B Results\",\"Watched ALL Wrestling (SmackDown AND Raw AND NXT AND AEW)\"),\n(\"(((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B and C Only\",\"4-Way O/O/O/O/B Results\",\"Watched ALL WWE ONLY (SmackDown AND Raw AND NXT ONLY, no AEW)\"),\n(\"(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"B and C and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw AND NXT AND AEW ONLY (no SmackDown)\"),\n(\"((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"C and D and A Only\",\"4-Way O/O/O/O/B Results\",\"Watched NXT AND AEW AND SmackDown ONLY (no Raw)\"),\n(\"(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND Raw AND AEW ONLY (no NXT)\"),\n(\"(A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND Raw ONLY (no NXT or AEW)\"),\n(\"(B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"B and C Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw AND NXT ONLY (no SmackDown or AEW)\"),\n(\"(C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"C and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched NXT AND AEW ONLY (no Raw or SmackDown)\"),\n(\"(A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND AEW ONLY (no Raw or NXT)\"),\n(\"(B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"B and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw AND AEW ONLY (no SmackDown or NXT)\"),\n(\"(A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and C Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND NXT ONLY (no Raw or AEW)\"),\n(\"A-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\n)\",\"A Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown ONLY (no overlap)\"),\n(\"B-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))))\",\"B Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw ONLY (no overlap)\"),\n(\"C-(((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\",\"C Only\",\"4-Way O/O/O/O/B Results\",\"Watched NXT ONLY (no overlap)\"),\n(\"D-(((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))))\",\"D Only\",\"4-Way O/O/O/O/B Results\",\"Watched AEW ONLY (no ovelap)\")] %}\n\nwith first_15_schedules as \n(select dim_date_id,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,\nsum(case when schedule_name like '%A | SmackDown (FOX)%' then aa_reach_proj000 end) A,\nsum(case when schedule_name like '%B | Raw (USA)%' then aa_reach_proj000 end) B,\nsum(case when schedule_name like '%C | NXT (USA)%' then aa_reach_proj000 end) C,\nsum(case when schedule_name like '%D | AEW (TNT)%' then aa_reach_proj000 end) D,\n{% for schedule_name,j in descript %}\nsum(case when schedule_name = '{{schedule_name}}' then aa_reach_proj000 end) {{schedule_name}},\n{% endfor %}\nmax(aa_reach_proj000) as Max_AA_Reac_Proj_000 \nFROM   fds_nl.fact_nl_weekly_overlap_4_way_oob a\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \n--where dim_date_id='20200302'\nGROUP BY 1,2,3,4,5),\n total_schedules as \n({% for schedule_formula,schedule_name,input_type,overlap_description in schedule_formulas %}\nselect dim_date_id,'{{input_type}}' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'{{schedule_name}}' as schedule_name ,\n{{schedule_formula}} as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'{{overlap_description}}' as overlap_description  from first_15_schedules\nunion all\n{% endfor %}\nSELECT a.dim_date_id,\n       'Straight Nielsen Run' as input_type,\n       a.coverage_area,\n       a.src_market_break,\n       a.src_demographic_group,\n       a.src_playback_period_cd,\n       a.schedule_name,\n       sum(a.aa_reach_proj000) as AA_Reac_Proj_000,\n       cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(b.Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,\n\t   case when schedule_name like '%A | SmackDown (FOX)%' then 'Total Unique SmackDown'\n\t\t\twhen schedule_name like '%B | Raw (USA)%' then 'Total Unique Raw'\n\t\t\twhen schedule_name like '%C | NXT (USA)%' then 'Total Unique NXT'\n\t\t\twhen schedule_name like '%D | AEW (TNT)%' then 'Total Unique AEW'\n\t\t\t{% for schedule_nm,description in descript %}\n\t\t\twhen schedule_name='{{schedule_nm}}' then '{{description}}'\n\t\t\t{% endfor %} end as Overlap_Description\nFROM     fds_nl.fact_nl_weekly_overlap_4_way_oob a join first_15_schedules b on a.dim_date_id=b.dim_date_id\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00')\n--where a.dim_date_id='20200302'\nGROUP BY 1,2,3,4,5,6,7,b.Max_AA_Reac_Proj_000)\nselect dim_date_id week_starting_date,\ninput_type,\ncoverage_area,\nsrc_market_break market_break,\nsrc_demographic_group demographic_group,\nsrc_playback_period_cd playback_period_cd,\nschedule_name program_combination,\naa_reac_proj_000 p2_total_unique_reach_proj,\np2_total_unique_reach_percent,\noverlap_description,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n'bi_dbt_user_prd'                                   AS etl_insert_user_id,\nCURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\nNULL                                                AS etl_update_user_id,\nCAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from total_schedules a", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_weekly_overlap_derived_4_way_oob"], "unique_id": "model.analytics_engineering_marts.rpt_nl_weekly_overlap_derived_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/aggregate/rpt_nl_weekly_overlap_derived_4_way_oob.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_weekly_overlap_derived_4_way_oob.sql", "name": "rpt_nl_weekly_overlap_derived_4_way_oob", "resource_type": "model", "alias": "rpt_nl_weekly_overlap_derived_4_way_oob", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_weekly_overlap_4_way_oob)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_weekly_overlap_derived_4_way_oob.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\t\t/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\n\n\n\n\n\nwith first_15_schedules as \n(select dim_date_id,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,\nsum(case when schedule_name like '%A | SmackDown (FOX)%' then aa_reach_proj000 end) A,\nsum(case when schedule_name like '%B | Raw (USA)%' then aa_reach_proj000 end) B,\nsum(case when schedule_name like '%C | NXT (USA)%' then aa_reach_proj000 end) C,\nsum(case when schedule_name like '%D | AEW (TNT)%' then aa_reach_proj000 end) D,\n\nsum(case when schedule_name = 'AB' then aa_reach_proj000 end) AB,\n\nsum(case when schedule_name = 'BC' then aa_reach_proj000 end) BC,\n\nsum(case when schedule_name = 'CA' then aa_reach_proj000 end) CA,\n\nsum(case when schedule_name = 'AD' then aa_reach_proj000 end) AD,\n\nsum(case when schedule_name = 'BD' then aa_reach_proj000 end) BD,\n\nsum(case when schedule_name = 'CD' then aa_reach_proj000 end) CD,\n\nsum(case when schedule_name = 'ABC' then aa_reach_proj000 end) ABC,\n\nsum(case when schedule_name = 'ABD' then aa_reach_proj000 end) ABD,\n\nsum(case when schedule_name = 'BCD' then aa_reach_proj000 end) BCD,\n\nsum(case when schedule_name = 'ACD' then aa_reach_proj000 end) ACD,\n\nsum(case when schedule_name = 'ABCD' then aa_reach_proj000 end) ABCD,\n\nmax(aa_reach_proj000) as Max_AA_Reac_Proj_000 \nFROM   fds_nl.fact_nl_weekly_overlap_4_way_oob a\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00') \n--where dim_date_id='20200302'\nGROUP BY 1,2,3,4,5),\n total_schedules as \n(\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&B' as schedule_name ,\n(A+B-AB) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&C' as schedule_name ,\n(A+C-CA) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&D' as schedule_name ,\n(A+D-AD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&D' as schedule_name ,\n(B+D-BD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&C' as schedule_name ,\n(B+C-BC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both C&D' as schedule_name ,\n(C+D-CD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined AEW and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C' as schedule_name ,\n((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE Total Combined SmackDown and Raw and NXT (includes AEW overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D' as schedule_name ,\n((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT and AEW (includes SmackDown overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C and D' as schedule_name ,\n((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT and AEW (includes Raw overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D' as schedule_name ,\n((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw and AEW (includes NXT overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C and D' as schedule_name ,\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL Wrestling (SmackDown AND Raw AND NXT AND AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C Only' as schedule_name ,\n(((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE ONLY (SmackDown AND Raw AND NXT ONLY, no AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D Only' as schedule_name ,\n(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT AND AEW ONLY (no SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D and A Only' as schedule_name ,\n((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW AND SmackDown ONLY (no Raw)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D Only' as schedule_name ,\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw AND AEW ONLY (no NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B Only' as schedule_name ,\n(A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw ONLY (no NXT or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C Only' as schedule_name ,\n(B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT ONLY (no SmackDown or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D Only' as schedule_name ,\n(C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW ONLY (no Raw or SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and D Only' as schedule_name ,\n(A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND AEW ONLY (no Raw or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and D Only' as schedule_name ,\n(B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND AEW ONLY (no SmackDown or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C Only' as schedule_name ,\n(A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND NXT ONLY (no Raw or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A Only' as schedule_name ,\nA-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\n) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B Only' as schedule_name ,\nB-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C Only' as schedule_name ,\nC-(((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'D Only' as schedule_name ,\nD-(((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched AEW ONLY (no ovelap)' as overlap_description  from first_15_schedules\nunion all\n\nSELECT a.dim_date_id,\n       'Straight Nielsen Run' as input_type,\n       a.coverage_area,\n       a.src_market_break,\n       a.src_demographic_group,\n       a.src_playback_period_cd,\n       a.schedule_name,\n       sum(a.aa_reach_proj000) as AA_Reac_Proj_000,\n       cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(b.Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,\n\t   case when schedule_name like '%A | SmackDown (FOX)%' then 'Total Unique SmackDown'\n\t\t\twhen schedule_name like '%B | Raw (USA)%' then 'Total Unique Raw'\n\t\t\twhen schedule_name like '%C | NXT (USA)%' then 'Total Unique NXT'\n\t\t\twhen schedule_name like '%D | AEW (TNT)%' then 'Total Unique AEW'\n\t\t\t\n\t\t\twhen schedule_name='AB' then 'Total Combined SmackDown and/or Raw'\n\t\t\t\n\t\t\twhen schedule_name='BC' then 'Total Combined Raw and/or NXT'\n\t\t\t\n\t\t\twhen schedule_name='CA' then 'Total Combined NXT and/or SmackDown'\n\t\t\t\n\t\t\twhen schedule_name='AD' then 'Total Combined SmackDown and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BD' then 'Total Combined Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='CD' then 'Total Combined NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABC' then 'Total Watched ANY WWE (Total Combined SmackDown and/or Raw and/or NXT)'\n\t\t\t\n\t\t\twhen schedule_name='ABD' then 'Total Combined SmackDown and/or Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BCD' then 'Total Combined Raw and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ACD' then 'Total Combined SmackDown and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABCD' then 'Total Watched ANY Wrestling (SmackDown and/or Raw and/or NXT and/or AEW)'\n\t\t\t end as Overlap_Description\nFROM     fds_nl.fact_nl_weekly_overlap_4_way_oob a join first_15_schedules b on a.dim_date_id=b.dim_date_id\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00')\n--where a.dim_date_id='20200302'\nGROUP BY 1,2,3,4,5,6,7,b.Max_AA_Reac_Proj_000)\nselect dim_date_id week_starting_date,\ninput_type,\ncoverage_area,\nsrc_market_break market_break,\nsrc_demographic_group demographic_group,\nsrc_playback_period_cd playback_period_cd,\nschedule_name program_combination,\naa_reac_proj_000 p2_total_unique_reach_proj,\np2_total_unique_reach_percent,\noverlap_description,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n'bi_dbt_user_prd'                                   AS etl_insert_user_id,\nCURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\nNULL                                                AS etl_update_user_id,\nCAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from total_schedules a", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\t\t/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\n\n\n\n\n\nwith first_15_schedules as \n(select dim_date_id,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,\nsum(case when schedule_name like '%A | SmackDown (FOX)%' then aa_reach_proj000 end) A,\nsum(case when schedule_name like '%B | Raw (USA)%' then aa_reach_proj000 end) B,\nsum(case when schedule_name like '%C | NXT (USA)%' then aa_reach_proj000 end) C,\nsum(case when schedule_name like '%D | AEW (TNT)%' then aa_reach_proj000 end) D,\n\nsum(case when schedule_name = 'AB' then aa_reach_proj000 end) AB,\n\nsum(case when schedule_name = 'BC' then aa_reach_proj000 end) BC,\n\nsum(case when schedule_name = 'CA' then aa_reach_proj000 end) CA,\n\nsum(case when schedule_name = 'AD' then aa_reach_proj000 end) AD,\n\nsum(case when schedule_name = 'BD' then aa_reach_proj000 end) BD,\n\nsum(case when schedule_name = 'CD' then aa_reach_proj000 end) CD,\n\nsum(case when schedule_name = 'ABC' then aa_reach_proj000 end) ABC,\n\nsum(case when schedule_name = 'ABD' then aa_reach_proj000 end) ABD,\n\nsum(case when schedule_name = 'BCD' then aa_reach_proj000 end) BCD,\n\nsum(case when schedule_name = 'ACD' then aa_reach_proj000 end) ACD,\n\nsum(case when schedule_name = 'ABCD' then aa_reach_proj000 end) ABCD,\n\nmax(aa_reach_proj000) as Max_AA_Reac_Proj_000 \nFROM   fds_nl.fact_nl_weekly_overlap_4_way_oob a\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00') \n--where dim_date_id='20200302'\nGROUP BY 1,2,3,4,5),\n total_schedules as \n(\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&B' as schedule_name ,\n(A+B-AB) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&C' as schedule_name ,\n(A+C-CA) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&D' as schedule_name ,\n(A+D-AD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&D' as schedule_name ,\n(B+D-BD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&C' as schedule_name ,\n(B+C-BC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both C&D' as schedule_name ,\n(C+D-CD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined AEW and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C' as schedule_name ,\n((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE Total Combined SmackDown and Raw and NXT (includes AEW overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D' as schedule_name ,\n((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT and AEW (includes SmackDown overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C and D' as schedule_name ,\n((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT and AEW (includes Raw overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D' as schedule_name ,\n((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw and AEW (includes NXT overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C and D' as schedule_name ,\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL Wrestling (SmackDown AND Raw AND NXT AND AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C Only' as schedule_name ,\n(((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE ONLY (SmackDown AND Raw AND NXT ONLY, no AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D Only' as schedule_name ,\n(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT AND AEW ONLY (no SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D and A Only' as schedule_name ,\n((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW AND SmackDown ONLY (no Raw)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D Only' as schedule_name ,\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw AND AEW ONLY (no NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B Only' as schedule_name ,\n(A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw ONLY (no NXT or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C Only' as schedule_name ,\n(B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT ONLY (no SmackDown or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D Only' as schedule_name ,\n(C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW ONLY (no Raw or SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and D Only' as schedule_name ,\n(A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND AEW ONLY (no Raw or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and D Only' as schedule_name ,\n(B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND AEW ONLY (no SmackDown or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C Only' as schedule_name ,\n(A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND NXT ONLY (no Raw or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A Only' as schedule_name ,\nA-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\n) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B Only' as schedule_name ,\nB-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C Only' as schedule_name ,\nC-(((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'D Only' as schedule_name ,\nD-(((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched AEW ONLY (no ovelap)' as overlap_description  from first_15_schedules\nunion all\n\nSELECT a.dim_date_id,\n       'Straight Nielsen Run' as input_type,\n       a.coverage_area,\n       a.src_market_break,\n       a.src_demographic_group,\n       a.src_playback_period_cd,\n       a.schedule_name,\n       sum(a.aa_reach_proj000) as AA_Reac_Proj_000,\n       cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(b.Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,\n\t   case when schedule_name like '%A | SmackDown (FOX)%' then 'Total Unique SmackDown'\n\t\t\twhen schedule_name like '%B | Raw (USA)%' then 'Total Unique Raw'\n\t\t\twhen schedule_name like '%C | NXT (USA)%' then 'Total Unique NXT'\n\t\t\twhen schedule_name like '%D | AEW (TNT)%' then 'Total Unique AEW'\n\t\t\t\n\t\t\twhen schedule_name='AB' then 'Total Combined SmackDown and/or Raw'\n\t\t\t\n\t\t\twhen schedule_name='BC' then 'Total Combined Raw and/or NXT'\n\t\t\t\n\t\t\twhen schedule_name='CA' then 'Total Combined NXT and/or SmackDown'\n\t\t\t\n\t\t\twhen schedule_name='AD' then 'Total Combined SmackDown and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BD' then 'Total Combined Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='CD' then 'Total Combined NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABC' then 'Total Watched ANY WWE (Total Combined SmackDown and/or Raw and/or NXT)'\n\t\t\t\n\t\t\twhen schedule_name='ABD' then 'Total Combined SmackDown and/or Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BCD' then 'Total Combined Raw and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ACD' then 'Total Combined SmackDown and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABCD' then 'Total Watched ANY Wrestling (SmackDown and/or Raw and/or NXT and/or AEW)'\n\t\t\t end as Overlap_Description\nFROM     fds_nl.fact_nl_weekly_overlap_4_way_oob a join first_15_schedules b on a.dim_date_id=b.dim_date_id\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00')\n--where a.dim_date_id='20200302'\nGROUP BY 1,2,3,4,5,6,7,b.Max_AA_Reac_Proj_000)\nselect dim_date_id week_starting_date,\ninput_type,\ncoverage_area,\nsrc_market_break market_break,\nsrc_demographic_group demographic_group,\nsrc_playback_period_cd playback_period_cd,\nschedule_name program_combination,\naa_reac_proj_000 p2_total_unique_reach_proj,\np2_total_unique_reach_percent,\noverlap_description,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n'bi_dbt_user_prd'                                   AS etl_insert_user_id,\nCURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\nNULL                                                AS etl_update_user_id,\nCAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from total_schedules a"}, "error": null, "status": null, "execution_time": 0.021715164184570312, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.939872Z", "completed_at": "2020-09-21T17:49:00.960736Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.961084Z", "completed_at": "2020-09-21T17:49:00.961095Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'dt_prod_support',\t\r\n\t\"materialized\": 'table'\r\n\t})\r\n}}\r\n\r\nselect * from dt_prod_support.agg_yt_monetization_summary limit 100", "database": "entdwdb", "schema": "dt_prod_support", "fqn": ["analytics_engineering_marts", "test_dt_prod_support", "test_dbt_cloud"], "unique_id": "model.analytics_engineering_marts.test_dbt_cloud", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "test_dt_prod_support/test_dbt_cloud.sql", "original_file_path": "models/test_dt_prod_support/test_dbt_cloud.sql", "name": "test_dbt_cloud", "resource_type": "model", "alias": "test_dbt_cloud", "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "dt_prod_support", "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/test_dt_prod_support/test_dbt_cloud.sql", "compiled": true, "compiled_sql": "\n\nselect * from dt_prod_support.agg_yt_monetization_summary limit 100", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from dt_prod_support.agg_yt_monetization_summary limit 100"}, "error": null, "status": null, "execution_time": 0.008623838424682617, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.961719Z", "completed_at": "2020-09-21T17:49:00.969665Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.969954Z", "completed_at": "2020-09-21T17:49:00.969962Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n  config(\r\n\tschema='fds_nplus',\t\r\n\tmaterialized='view'\r\n    \r\n  )\r\n}}\r\n\r\n\r\nwith ttl_loss_data as\r\n(select as_on_date-1 as as_on_date,country,order_status,cancel_type,payment_method,payments,ttl_losses\r\nfrom (select as_on_date,\r\ncase when country_cd is null then '4.NA' when country_cd in ('united states', 'us' , 'usa' ) then '1.US'\r\nwhen country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') then '2.UK/IRE' else '3.ROW' end as country,\r\ncase when first_charged_date is null then 'Trial' else 'Paid' end as order_status,\r\ncase when revoked_date is null then 'Voluntary' else 'Involuntary' end as cancel_type,\r\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'\r\n    when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\r\ncase when payment_number between 0 and 1 then '0-1'\r\nwhen payment_number between 2 and 3 then '2-3'\r\nwhen payment_number between 4 and 6 then '4-6'\r\nwhen payment_number between 7 and 12 then '7-12'\r\nelse '13+' end as payments,\r\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'paid' then order_id end)) +\r\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'trial' then order_id end)) as ttl_losses\r\nfrom {{source('fds_nplus','fact_daily_subscription_status_plus')}}\r\ngroup by 1,2,3,4,5,6))\r\nselect * from ttl_loss_data", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_daily_network_adds_and_loss_track"], "unique_id": "model.analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "name": "vw_aggr_daily_network_adds_and_loss_track", "resource_type": "model", "alias": "vw_aggr_daily_network_adds_and_loss_track", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nplus", "fact_daily_subscription_status_plus"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_status_plus"]}, "description": "## Implementation Detail\n* Date        : 07/15/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_daily_network_adds_and_loss_track\n* Schema\t  : fds_nplus\n* Contributor : Sudhakar Andugula\n* Description : vw_aggr_daily_network_adds_and_loss_track view cosists of details about total subscription losses of orders\n## Maintenance Log\n* Date : 07/15/2020 ; Developer: Sudhakar Andugula ; Change: Initial Version as a part of Network 2.0 Project.", "columns": {"as_on_date": {"name": "as_on_date", "description": "Processing Date", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "Country of the product sku is purchased", "meta": {}, "data_type": null, "tags": []}, "order_status": {"name": "order_status", "description": "The status of order whether it is 'trial' or 'paid'", "meta": {}, "data_type": null, "tags": []}, "cancel_type": {"name": "cancel_type", "description": "Type of cancellation whether it is 'Voluntary' or 'Involuntary'", "meta": {}, "data_type": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "Payment method used for the payment", "meta": {}, "data_type": null, "tags": []}, "payments": {"name": "payments", "description": "Total number of payments done for the orders", "meta": {}, "data_type": null, "tags": []}, "ttl_losses": {"name": "ttl_losses", "description": "The total number of subscription order losses", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "compiled": true, "compiled_sql": "\n\n\nwith ttl_loss_data as\n(select as_on_date-1 as as_on_date,country,order_status,cancel_type,payment_method,payments,ttl_losses\nfrom (select as_on_date,\ncase when country_cd is null then '4.NA' when country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') then '2.UK/IRE' else '3.ROW' end as country,\ncase when first_charged_date is null then 'Trial' else 'Paid' end as order_status,\ncase when revoked_date is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'\n    when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\ncase when payment_number between 0 and 1 then '0-1'\nwhen payment_number between 2 and 3 then '2-3'\nwhen payment_number between 4 and 6 then '4-6'\nwhen payment_number between 7 and 12 then '7-12'\nelse '13+' end as payments,\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'paid' then order_id end)) +\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'trial' then order_id end)) as ttl_losses\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_status_plus\"\ngroup by 1,2,3,4,5,6))\nselect * from ttl_loss_data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nwith ttl_loss_data as\n(select as_on_date-1 as as_on_date,country,order_status,cancel_type,payment_method,payments,ttl_losses\nfrom (select as_on_date,\ncase when country_cd is null then '4.NA' when country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') then '2.UK/IRE' else '3.ROW' end as country,\ncase when first_charged_date is null then 'Trial' else 'Paid' end as order_status,\ncase when revoked_date is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'\n    when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\ncase when payment_number between 0 and 1 then '0-1'\nwhen payment_number between 2 and 3 then '2-3'\nwhen payment_number between 4 and 6 then '4-6'\nwhen payment_number between 7 and 12 then '7-12'\nelse '13+' end as payments,\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'paid' then order_id end)) +\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'trial' then order_id end)) as ttl_losses\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_status_plus\"\ngroup by 1,2,3,4,5,6))\nselect * from ttl_loss_data"}, "error": null, "status": null, "execution_time": 0.012788057327270508, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.970592Z", "completed_at": "2020-09-21T17:49:00.982674Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.982976Z", "completed_at": "2020-09-21T17:49:00.982986Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n  config(\r\n    schemas='fds_nplus',\t\r\n\tmaterialized='view'\r\n    \r\n  )\r\n}}\r\n\r\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\r\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\r\npayment_status,active_status ,\r\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\r\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\r\nthen '2.UK/IRE' else '3.ROW' end as country,\r\ncase when payment_method = 'roku_iap'  then 'roku'\r\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\r\nas payment_type,\r\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\r\ncase when payment_count between 0 and 1 then '0-1'\r\n                when payment_count between 2 and 3 then '2-3'\r\n                when payment_count between 4 and 6 then '4-6'\r\n                when payment_count between 7 and 12 then '7-12'\r\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\r\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\r\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\r\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\r\nfrom {{source('fds_nplus','fact_daily_subscription_order_status')}} where trunc(initial_order_dttm) < trunc(org_billing_dttm)\r\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\r\nwhere rk = 1)\r\nselect\r\ndt_mon billing_month,\r\nori_bill_dt original_billing_date,\r\npayment_status as order_status,\r\ncountry,\r\npayment_type payment_type,\r\ncount(order_id) as renewed_count ,\r\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\r\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\r\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\r\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\r\nsum(sf_ind) as soft_fail_enter ,\r\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\r\nPayments payments_count,\r\ncancel_type\r\nfrom ap group by 1,2,3,4,5,Payments,cancel_type", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_monthly_network_perf_renewal_payment_track"], "unique_id": "model.analytics_engineering_marts.vw_aggr_monthly_network_perf_renewal_payment_track", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "name": "vw_aggr_monthly_network_perf_renewal_payment_track", "resource_type": "model", "alias": "vw_aggr_monthly_network_perf_renewal_payment_track", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["fds_nplus", "fact_daily_subscription_order_status"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status"]}, "description": "A view to display various metrics of order subscriptions", "columns": {"billing_month": {"name": "billing_month", "description": "Original Billing Month", "meta": {}, "data_type": null, "tags": []}, "original_billing_date": {"name": "original_billing_date", "description": "Original Billing Date", "meta": {}, "data_type": null, "tags": []}, "order_status": {"name": "order_status", "description": "The status of order whether it is 'trial' or 'paid'", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "Country where payment is billed", "meta": {}, "data_type": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment method used for the payment", "meta": {}, "data_type": null, "tags": []}, "renewed_count": {"name": "renewed_count", "description": "The number of payments done for the orders", "meta": {}, "data_type": null, "tags": []}, "hard_fail_indicator": {"name": "hard_fail_indicator", "description": "Type of cancellation whether it is 'Voluntary' or 'Involuntary'", "meta": {}, "data_type": null, "tags": []}, "renewed_total": {"name": "renewed_total", "description": "The number of subscription orders up for renewal", "meta": {}, "data_type": null, "tags": []}, "involuntary_cancels_count": {"name": "involuntary_cancels_count", "description": "The number of inactive voluntary cancelled order subscriptions with same original and scheduled billing date", "meta": {}, "data_type": null, "tags": []}, "voluntary_cancels_count": {"name": "voluntary_cancels_count", "description": "The number of renewed subscription orders", "meta": {}, "data_type": null, "tags": []}, "soft_fail_enter": {"name": "soft_fail_enter", "description": "The number of inactive involuntary cancelled order subscriptions", "meta": {}, "data_type": null, "tags": []}, "soft_fail_successful_enter": {"name": "soft_fail_successful_enter", "description": "The number of inactive voluntary cancelled order subscriptions", "meta": {}, "data_type": null, "tags": []}, "payments_count": {"name": "payments_count", "description": "The number of soft fail enter (scheduled billing date > original billing date) order subscriptions", "meta": {}, "data_type": null, "tags": []}, "cancel_type": {"name": "cancel_type", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "compiled": true, "compiled_sql": "\n\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\npayment_status,active_status ,\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when payment_method = 'roku_iap'  then 'roku'\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\nas payment_type,\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_count between 0 and 1 then '0-1'\n                when payment_count between 2 and 3 then '2-3'\n                when payment_count between 4 and 6 then '4-6'\n                when payment_count between 7 and 12 then '7-12'\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_order_status\" where trunc(initial_order_dttm) < trunc(org_billing_dttm)\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\nwhere rk = 1)\nselect\ndt_mon billing_month,\nori_bill_dt original_billing_date,\npayment_status as order_status,\ncountry,\npayment_type payment_type,\ncount(order_id) as renewed_count ,\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\nsum(sf_ind) as soft_fail_enter ,\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\nPayments payments_count,\ncancel_type\nfrom ap group by 1,2,3,4,5,Payments,cancel_type", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\npayment_status,active_status ,\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when payment_method = 'roku_iap'  then 'roku'\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\nas payment_type,\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_count between 0 and 1 then '0-1'\n                when payment_count between 2 and 3 then '2-3'\n                when payment_count between 4 and 6 then '4-6'\n                when payment_count between 7 and 12 then '7-12'\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_order_status\" where trunc(initial_order_dttm) < trunc(org_billing_dttm)\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\nwhere rk = 1)\nselect\ndt_mon billing_month,\nori_bill_dt original_billing_date,\npayment_status as order_status,\ncountry,\npayment_type payment_type,\ncount(order_id) as renewed_count ,\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\nsum(sf_ind) as soft_fail_enter ,\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\nPayments payments_count,\ncancel_type\nfrom ap group by 1,2,3,4,5,Payments,cancel_type"}, "error": null, "status": null, "execution_time": 0.014946222305297852, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.983614Z", "completed_at": "2020-09-21T17:49:00.997890Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:00.998169Z", "completed_at": "2020-09-21T17:49:00.998178Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Hulu wwe viewing hour aggregate view \n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_hulu_wwe_vh_data\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu.\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\n\nselect  \nb.mth_abbr_nm as flight_month,\n datepart(YEAR,dateadd(day,adjusted_day_of_flight,flight_start_date)) as flight_year,\na.src_Series_id as src_Series_id,\nsum((mc_us_aa_proj000*TOTAL_DURATION*1000.00)  /60.00 ) as tot_viewing_hours\n from   {{source('fds_nl','fact_nl_weekly_hulu_data')}} a\n join {{source('cdm','dim_date')}}  b on \n  date(dateadd(day,a.adjusted_day_of_flight,a.flight_start_date)) = b.full_date\ngroup by 1,2,3", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_hulu_wwe_vh_data"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_monthly_hulu_wwe_vh_data.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_hulu_wwe_vh_data.sql", "name": "vw_aggr_nl_monthly_hulu_wwe_vh_data", "resource_type": "model", "alias": "vw_aggr_nl_monthly_hulu_wwe_vh_data", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_weekly_hulu_data"], ["cdm", "dim_date"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_weekly_hulu_data", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_nl_monthly_hulu_wwe_vh_data\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu. \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"flight_Month": {"name": "flight_Month", "description": "Month of program airing", "meta": {}, "data_type": null, "tags": []}, "flight_Year": {"name": "flight_Year", "description": "Year of program airing", "meta": {}, "data_type": null, "tags": []}, "src_Series_id": {"name": "src_Series_id", "description": "Program name the channel has broadcasted", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_hours": {"name": "tot_viewing_hours", "description": "Derived viewing hours", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_hulu_wwe_vh_data.sql", "compiled": true, "compiled_sql": "-- Hulu wwe viewing hour aggregate view \n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_hulu_wwe_vh_data\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu.\n*************************************************************************************************************************************************\n*/\n\n\n\n\nselect  \nb.mth_abbr_nm as flight_month,\n datepart(YEAR,dateadd(day,adjusted_day_of_flight,flight_start_date)) as flight_year,\na.src_Series_id as src_Series_id,\nsum((mc_us_aa_proj000*TOTAL_DURATION*1000.00)  /60.00 ) as tot_viewing_hours\n from   \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_hulu_data\" a\n join \"entdwdb\".\"cdm\".\"dim_date\"  b on \n  date(dateadd(day,a.adjusted_day_of_flight,a.flight_start_date)) = b.full_date\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Hulu wwe viewing hour aggregate view \n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_hulu_wwe_vh_data\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu.\n*************************************************************************************************************************************************\n*/\n\n\n\n\nselect  \nb.mth_abbr_nm as flight_month,\n datepart(YEAR,dateadd(day,adjusted_day_of_flight,flight_start_date)) as flight_year,\na.src_Series_id as src_Series_id,\nsum((mc_us_aa_proj000*TOTAL_DURATION*1000.00)  /60.00 ) as tot_viewing_hours\n from   \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_hulu_data\" a\n join \"entdwdb\".\"cdm\".\"dim_date\"  b on \n  date(dateadd(day,a.adjusted_day_of_flight,a.flight_start_date)) = b.full_date\ngroup by 1,2,3"}, "error": null, "status": null, "execution_time": 0.013322830200195312, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:00.998838Z", "completed_at": "2020-09-21T17:49:01.011482Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.011762Z", "completed_at": "2020-09-21T17:49:01.011771Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_month_nm IS 'Reporting month abbr name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\t\"]\n\t})\n}}\n\n--Primetime program ratings for non WWE program airing days(monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT b.mth_abbr_nm as rpt_month_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n       FROM {{source('cdm','dim_date')}}\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN {{source('fds_nl','dim_nl_broadcast_network')}}  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}   d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_primetime_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_monthly_primetime_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_primetime_ratings.sql", "name": "vw_aggr_nl_monthly_primetime_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_primetime_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_month_nm IS 'Reporting month abbr name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for monthly primetime ratings", "columns": {"rpt_month_nm": {"name": "rpt_month_nm", "description": "Reporting month abbr name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Reporting year';", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast network Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_primetime_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Primetime program ratings for non WWE program airing days(monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT b.mth_abbr_nm as rpt_month_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n       FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Primetime program ratings for non WWE program airing days(monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT b.mth_abbr_nm as rpt_month_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n       FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.018023252487182617, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.012385Z", "completed_at": "2020-09-21T17:49:01.029700Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.030003Z", "completed_at": "2020-09-21T17:49:01.030012Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_month_nm IS 'Reporting month abbr name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';\n\t\t\t\"]\n\t})\n}}\n\n--Timeperiod program ratings (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT  b.mth_abbr_nm as rpt_month_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\n\t\t\nFROM       {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\nLEFT JOIN {{source('cdm','dim_date')}}  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN {{source('fds_nl','dim_nl_broadcast_network')}}  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN {{source('fds_nl','dim_nl_daypart')}}   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_timeperiod_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_monthly_timeperiod_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_timeperiod_ratings.sql", "name": "vw_aggr_nl_monthly_timeperiod_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_timeperiod_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_month_nm IS 'Reporting month abbr name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';\n\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for monthly timeperiod ratings", "columns": {"billing_month": {"name": "billing_month", "description": "Original Billing Month", "meta": {}, "data_type": null, "tags": []}, "rpt_month_nm": {"name": "rpt_month_nm", "description": "Reporting month abbr name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Reporting year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast network Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_timeperiod_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Timeperiod program ratings (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT  b.mth_abbr_nm as rpt_month_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\n\t\t\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Timeperiod program ratings (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT  b.mth_abbr_nm as rpt_month_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\n\t\t\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.03301548957824707, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.030681Z", "completed_at": "2020-09-21T17:49:01.062824Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.063230Z", "completed_at": "2020-09-21T17:49:01.063243Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \"]\n\t})\n}}\n\n--Primetime program ratings for non WWE program airing days(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units  \nFROM  {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM {{source('cdm','dim_date')}}\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  {{source('fds_nl','dim_nl_broadcast_network')}}  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}  d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_primetime_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_quarterly_primetime_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_primetime_ratings.sql", "name": "vw_aggr_nl_quarterly_primetime_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_primetime_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  ", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for quarterly primetime ratings", "columns": {"rpt_quarter_nm": {"name": "rpt_quarter_nm", "description": "Reporting Quarter name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Reporting year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast network Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_primetime_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Primetime program ratings for non WWE program airing days(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units  \nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"  d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Primetime program ratings for non WWE program airing days(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units  \nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"  d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.01956772804260254, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.063926Z", "completed_at": "2020-09-21T17:49:01.082697Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.083055Z", "completed_at": "2020-09-21T17:49:01.083068Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--Timeperiod program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_pct_nw_cvg_area IS'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)'; \n \"]\n\t})\n}}\n\nSELECT  substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM       {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\nLEFT JOIN  {{source('cdm','dim_date')}}   b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  {{source('fds_nl','dim_nl_broadcast_network')}}   c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_timeperiod_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_quarterly_timeperiod_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_timeperiod_ratings.sql", "name": "vw_aggr_nl_quarterly_timeperiod_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_timeperiod_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_pct_nw_cvg_area IS'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)'; \n ", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for  quarterly timeperiod ratings", "columns": {"rpt_quarter_nm": {"name": "rpt_quarter_nm", "description": "Quarter Name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Calender year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_timeperiod_ratings.sql", "compiled": true, "compiled_sql": "--Timeperiod program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n \n\nSELECT  substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"   b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"   c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Timeperiod program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n \n\nSELECT  substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"   b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"   c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.019205331802368164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.083747Z", "completed_at": "2020-09-21T17:49:01.102194Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.102493Z", "completed_at": "2020-09-21T17:49:01.102503Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--Primetime program ratings for non WWE program airing days (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on yearly-basis.\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\t\"]\n\t})\n}}\nSELECT b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM  {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM {{source('cdm','dim_date')}} \n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN {{source('fds_nl','dim_nl_broadcast_network')}}  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}} d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_primetime_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_yearly_primetime_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_primetime_ratings.sql", "name": "vw_aggr_nl_yearly_primetime_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_primetime_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for yearly  prime time period ratings", "columns": {"rpt_year": {"name": "rpt_year", "description": "Calender year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_primetime_ratings.sql", "compiled": true, "compiled_sql": "--Primetime program ratings for non WWE program airing days (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on yearly-basis.\n*************************************************************************************************************************************************\n*/\n\n \nSELECT b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\" \n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Primetime program ratings for non WWE program airing days (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on yearly-basis.\n*************************************************************************************************************************************************\n*/\n\n \nSELECT b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\" \n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5"}, "error": null, "status": null, "execution_time": 0.01818990707397461, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.103178Z", "completed_at": "2020-09-21T17:49:01.120645Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.120950Z", "completed_at": "2020-09-21T17:49:01.120959Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--Timeperiod program ratings (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on yearly-basis.\n*************************************************************************************************************************************************\n*/\n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t  \"]\n\t})\n}}\nSELECT  b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units       \nFROM       {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\nLEFT JOIN  {{source('cdm','dim_date')}}  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  {{source('fds_nl','dim_nl_broadcast_network')}}  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_timeperiod_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_yearly_timeperiod_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_timeperiod_ratings.sql", "name": "vw_aggr_nl_yearly_timeperiod_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_timeperiod_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t  ", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for yearly time period ratings", "columns": {"rpt_year": {"name": "rpt_year", "description": "Calender year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_timeperiod_ratings.sql", "compiled": true, "compiled_sql": "--Timeperiod program ratings (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on yearly-basis.\n*************************************************************************************************************************************************\n*/\n \nSELECT  b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units       \nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Timeperiod program ratings (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on yearly-basis.\n*************************************************************************************************************************************************\n*/\n \nSELECT  b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units       \nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5"}, "error": null, "status": null, "execution_time": 0.01982712745666504, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.121617Z", "completed_at": "2020-09-21T17:49:01.140560Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.141006Z", "completed_at": "2020-09-21T17:49:01.141018Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schemas\": 'fds_nplus',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event_date IS 'Date and timestamp of the scheduled live events as received from LES';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_event_nm IS 'Name of the PPVevent';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_nm IS 'Name of the PPV';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_start_date IS 'date of Event Date minus 6 days';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_end_date IS 'date of Event date plus 2 days';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.year IS 'Extracted year from event date';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event IS 'concatenated text of PPV event name and year ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.full_date IS 'full date';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt IS 'Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_trial_adds_cnt IS 'Daily count of trial subscriber adds';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_promo_paid_add_cnt IS 'Daily count of total promo paid subscription add';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_new IS 'custom filed based on order type and Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_winback IS 'custom filed based on order type winback and Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.bill_date IS 'Process date';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_paid_winbacks IS 'Roll up of all paid winback subscriptions for the day';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_new_paid IS 'Roll up of all paid subscriptions who have paid for the first time';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_free_trial_subs IS 'Total trial adds for the day';\n\t\t\t\t\t\n\t\t\t\"]\n\t})\n}}\nSELECT c.date as event_date,\n       c.ppv_event_nm,\n       c.ppv_nm,\n       c.start_date as ghw_start_date,\n       c.end_date as ghw_end_date,\n       c.year,\n       c.event,\n       c.full_date,\n       c.daily_paid_adds_cnt,\n       c.daily_trial_adds_cnt,\n       c.daily_promo_paid_add_cnt,\n       c.daily_paid_adds_cnt_new,\n       c.daily_paid_adds_cnt_winback,\n       d.bill_date,\n       d.paid_winbacks as forecast_paid_winbacks,\n       d.new_paid as forecast_new_paid,\n       d.free_trial_subs as forecast_free_trial_subs\n\n  FROM\n  (\n\nSELECT a.* ,\n       b.daily_paid_adds_cnt,b.daily_trial_adds_cnt,b.daily_promo_paid_add_cnt,\n        b.daily_paid_adds_cnt_new,b.daily_paid_adds_cnt_winback \n FROM\n(\n\nselect date,ppv_event_nm,ppv_nm,\n\t       start_date,end_date,year,\n\t\t   event,full_date\nFROM\n        (\t\t\n          select trunc(event_dttm) as date,\n               ppv_event_nm,ppv_nm,\n               trunc(DATEADD(day, -6, date)) as start_date, \n               trunc(DATEADD(day,2, date)) as end_date,\n               EXTRACT(YEAR FROM date) as year,\n               CONCAT(ppv_event_nm,TO_CHAR(year,'9999')) as event\n          from {{source('cdm','dim_event')}}\n\t\t  \n          where ppv_event_nm <> '' \n           and event_status='Published'\n         )\n         left join {{source('cdm','dim_date')}}\n                on start_date<=full_date and end_date>=full_date\n    )a\n    \n  LEFT JOIN \n\t(\n\tselect as_on_date,\n\tsum(daily_paid_adds_cnt) as daily_paid_adds_cnt,\n\tsum(daily_trial_adds_cnt) as daily_trial_adds_cnt,\n\tsum(daily_promo_paid_add_cnt) as daily_promo_paid_add_cnt,\n\tsum(case when order_type='first' then daily_new_adds_cnt else null end) as daily_paid_adds_cnt_new,\n\tsum(case when order_type='winback' then daily_new_adds_cnt else null end) as daily_paid_adds_cnt_winback\n\tfrom {{source('fds_nplus','aggr_daily_subscription')}}\n\twhere payment_method in ('incomm' ,'paypal' ,'stripe' ,'unknown' ,'cybersource','roku_iap')\n\tgroup by 1 \n\t) b\non a.full_date=b.as_on_date-1 \n)c\n\nRIGHT JOIN\n\t(\n                 select trunc(bill_date) as bill_date,                \n                 sum(paid_winbacks)+sum(paid_new_with_trial)+sum(trial_winback_adds) as paid_winbacks,\n                 sum(paid_new_adds)-sum(paid_new_with_Trial) as new_paid,                \n                 sum(trial_adds) as free_trial_subs\n                 from {{source('fds_nplus','aggr_nplus_daily_forcast_output')}}\n                 where forecast_date=(select max(forecast_date) from \n\t\t\t\t {{source('fds_nplus','aggr_nplus_daily_forcast_output')}})\n                 and payment_method in ('mlbam','roku','apple') \n                 and official_run_flag='official' \n                 and bill_date>'2019-12-20'\n                 group by 1 \n                 order by 1\n\t )d\n on c.full_date=d.bill_date\n where c.date is not null", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_nplus_PPV_Week_Adds_Tracking"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nplus_PPV_Week_Adds_Tracking", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_aggr_nplus_PPV_Week_Adds_Tracking.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_nplus_PPV_Week_Adds_Tracking.sql", "name": "vw_aggr_nplus_PPV_Week_Adds_Tracking", "resource_type": "model", "alias": "vw_aggr_nplus_PPV_Week_Adds_Tracking", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event_date IS 'Date and timestamp of the scheduled live events as received from LES';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_event_nm IS 'Name of the PPVevent';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_nm IS 'Name of the PPV';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_start_date IS 'date of Event Date minus 6 days';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_end_date IS 'date of Event date plus 2 days';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.year IS 'Extracted year from event date';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event IS 'concatenated text of PPV event name and year ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.full_date IS 'full date';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt IS 'Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_trial_adds_cnt IS 'Daily count of trial subscriber adds';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_promo_paid_add_cnt IS 'Daily count of total promo paid subscription add';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_new IS 'custom filed based on order type and Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_winback IS 'custom filed based on order type winback and Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.bill_date IS 'Process date';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_paid_winbacks IS 'Roll up of all paid winback subscriptions for the day';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_new_paid IS 'Roll up of all paid subscriptions who have paid for the first time';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_free_trial_subs IS 'Total trial adds for the day';\n\t\t\t\t\t\n\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["cdm", "dim_event"], ["cdm", "dim_date"], ["fds_nplus", "aggr_daily_subscription"], ["fds_nplus", "aggr_nplus_daily_forcast_output"], ["fds_nplus", "aggr_nplus_daily_forcast_output"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.cdm.dim_event", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_nplus_PPV_Week_Adds_Tracking.sql", "compiled": true, "compiled_sql": "\nSELECT c.date as event_date,\n       c.ppv_event_nm,\n       c.ppv_nm,\n       c.start_date as ghw_start_date,\n       c.end_date as ghw_end_date,\n       c.year,\n       c.event,\n       c.full_date,\n       c.daily_paid_adds_cnt,\n       c.daily_trial_adds_cnt,\n       c.daily_promo_paid_add_cnt,\n       c.daily_paid_adds_cnt_new,\n       c.daily_paid_adds_cnt_winback,\n       d.bill_date,\n       d.paid_winbacks as forecast_paid_winbacks,\n       d.new_paid as forecast_new_paid,\n       d.free_trial_subs as forecast_free_trial_subs\n\n  FROM\n  (\n\nSELECT a.* ,\n       b.daily_paid_adds_cnt,b.daily_trial_adds_cnt,b.daily_promo_paid_add_cnt,\n        b.daily_paid_adds_cnt_new,b.daily_paid_adds_cnt_winback \n FROM\n(\n\nselect date,ppv_event_nm,ppv_nm,\n\t       start_date,end_date,year,\n\t\t   event,full_date\nFROM\n        (\t\t\n          select trunc(event_dttm) as date,\n               ppv_event_nm,ppv_nm,\n               trunc(DATEADD(day, -6, date)) as start_date, \n               trunc(DATEADD(day,2, date)) as end_date,\n               EXTRACT(YEAR FROM date) as year,\n               CONCAT(ppv_event_nm,TO_CHAR(year,'9999')) as event\n          from \"entdwdb\".\"cdm\".\"dim_event\"\n\t\t  \n          where ppv_event_nm <> '' \n           and event_status='Published'\n         )\n         left join \"entdwdb\".\"cdm\".\"dim_date\"\n                on start_date<=full_date and end_date>=full_date\n    )a\n    \n  LEFT JOIN \n\t(\n\tselect as_on_date,\n\tsum(daily_paid_adds_cnt) as daily_paid_adds_cnt,\n\tsum(daily_trial_adds_cnt) as daily_trial_adds_cnt,\n\tsum(daily_promo_paid_add_cnt) as daily_promo_paid_add_cnt,\n\tsum(case when order_type='first' then daily_new_adds_cnt else null end) as daily_paid_adds_cnt_new,\n\tsum(case when order_type='winback' then daily_new_adds_cnt else null end) as daily_paid_adds_cnt_winback\n\tfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\n\twhere payment_method in ('incomm' ,'paypal' ,'stripe' ,'unknown' ,'cybersource','roku_iap')\n\tgroup by 1 \n\t) b\non a.full_date=b.as_on_date-1 \n)c\n\nRIGHT JOIN\n\t(\n                 select trunc(bill_date) as bill_date,                \n                 sum(paid_winbacks)+sum(paid_new_with_trial)+sum(trial_winback_adds) as paid_winbacks,\n                 sum(paid_new_adds)-sum(paid_new_with_Trial) as new_paid,                \n                 sum(trial_adds) as free_trial_subs\n                 from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\"\n                 where forecast_date=(select max(forecast_date) from \n\t\t\t\t \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\")\n                 and payment_method in ('mlbam','roku','apple') \n                 and official_run_flag='official' \n                 and bill_date>'2019-12-20'\n                 group by 1 \n                 order by 1\n\t )d\n on c.full_date=d.bill_date\n where c.date is not null", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nSELECT c.date as event_date,\n       c.ppv_event_nm,\n       c.ppv_nm,\n       c.start_date as ghw_start_date,\n       c.end_date as ghw_end_date,\n       c.year,\n       c.event,\n       c.full_date,\n       c.daily_paid_adds_cnt,\n       c.daily_trial_adds_cnt,\n       c.daily_promo_paid_add_cnt,\n       c.daily_paid_adds_cnt_new,\n       c.daily_paid_adds_cnt_winback,\n       d.bill_date,\n       d.paid_winbacks as forecast_paid_winbacks,\n       d.new_paid as forecast_new_paid,\n       d.free_trial_subs as forecast_free_trial_subs\n\n  FROM\n  (\n\nSELECT a.* ,\n       b.daily_paid_adds_cnt,b.daily_trial_adds_cnt,b.daily_promo_paid_add_cnt,\n        b.daily_paid_adds_cnt_new,b.daily_paid_adds_cnt_winback \n FROM\n(\n\nselect date,ppv_event_nm,ppv_nm,\n\t       start_date,end_date,year,\n\t\t   event,full_date\nFROM\n        (\t\t\n          select trunc(event_dttm) as date,\n               ppv_event_nm,ppv_nm,\n               trunc(DATEADD(day, -6, date)) as start_date, \n               trunc(DATEADD(day,2, date)) as end_date,\n               EXTRACT(YEAR FROM date) as year,\n               CONCAT(ppv_event_nm,TO_CHAR(year,'9999')) as event\n          from \"entdwdb\".\"cdm\".\"dim_event\"\n\t\t  \n          where ppv_event_nm <> '' \n           and event_status='Published'\n         )\n         left join \"entdwdb\".\"cdm\".\"dim_date\"\n                on start_date<=full_date and end_date>=full_date\n    )a\n    \n  LEFT JOIN \n\t(\n\tselect as_on_date,\n\tsum(daily_paid_adds_cnt) as daily_paid_adds_cnt,\n\tsum(daily_trial_adds_cnt) as daily_trial_adds_cnt,\n\tsum(daily_promo_paid_add_cnt) as daily_promo_paid_add_cnt,\n\tsum(case when order_type='first' then daily_new_adds_cnt else null end) as daily_paid_adds_cnt_new,\n\tsum(case when order_type='winback' then daily_new_adds_cnt else null end) as daily_paid_adds_cnt_winback\n\tfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\n\twhere payment_method in ('incomm' ,'paypal' ,'stripe' ,'unknown' ,'cybersource','roku_iap')\n\tgroup by 1 \n\t) b\non a.full_date=b.as_on_date-1 \n)c\n\nRIGHT JOIN\n\t(\n                 select trunc(bill_date) as bill_date,                \n                 sum(paid_winbacks)+sum(paid_new_with_trial)+sum(trial_winback_adds) as paid_winbacks,\n                 sum(paid_new_adds)-sum(paid_new_with_Trial) as new_paid,                \n                 sum(trial_adds) as free_trial_subs\n                 from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\"\n                 where forecast_date=(select max(forecast_date) from \n\t\t\t\t \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\")\n                 and payment_method in ('mlbam','roku','apple') \n                 and official_run_flag='official' \n                 and bill_date>'2019-12-20'\n                 group by 1 \n                 order by 1\n\t )d\n on c.full_date=d.bill_date\n where c.date is not null"}, "error": null, "status": null, "execution_time": 0.0184173583984375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.141671Z", "completed_at": "2020-09-21T17:49:01.159156Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.159592Z", "completed_at": "2020-09-21T17:49:01.159606Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schemas\": 'fds_nplus',\t\n\t\"materialized\": 'view'\n\t\t})\n}}\nSELECT c.country_nm,a.*, \nb.domest_paid_active,\nb.domest_trial_active,\nb.inter_paid_active,\nb.inter_trial_active,\nb.active,\nb.inactive,\nb.lp_active,\nb.t2_inact_dedup,\nb.t2_inact_dedup_logged_in,\nb.prospects_logged_in,\nb.prospects_not_logged_in,\nb.unique_visitors_mtd_prospects_inactives,\nb.unique_visitors_network_subscribers_mtd\n from\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when order_type='first' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_new,\nsum(case when order_type='winback' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_winback,\nsum(case when order_type='first' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro')then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_new,\nsum(case when order_type='winback' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_winback,\n\nsum(case when country_cd='us' then daily_paid_adds_cnt else null end) as domest_paid_add,\nsum(case when country_cd='us' then daily_trial_adds_cnt else null end) as domest_trial_add,\nsum(case when country_cd !='us' then daily_paid_adds_cnt else null end) as inter_paid_add,\nsum(case when country_cd !='us' then daily_trial_adds_cnt else null end) as inter_trial_add,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt else null end) as lp_adds,\nsum(daily_new_adds_cnt) as adds,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as domest_paid_loss,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as domest_trial_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as inter_paid_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as inter_trial_loss,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else null end) as lp_loss,\nsum(daily_loss_cnt) as loss,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) tier2_new_registrations,\nsum(daily_unique_visitors_tier2_cnt) as Unique_Visitors_Daily_Prospects_inactives,\nsum(daily_unique_visitors_tier3_cnt) as Unique_Visitors_Network_Subscribers_Daily      \nfrom {{source('fds_nplus','aggr_daily_subscription')}}\ngroup by 1,2,3) a\nleft join\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when country_cd='us' then total_paid_active_cnt else null end) as domest_paid_active,\nsum(case when country_cd='us' then total_trial_active_cnt else null end) as domest_trial_active,\nsum(case when country_cd !='us' then total_paid_active_cnt else null end) as inter_paid_active,\nsum(case when country_cd !='us' then total_trial_active_cnt else null end) as inter_trial_active,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then total_active_cnt else null end) as lp_active,\nsum(total_active_cnt) as active, \nsum(total_tier2_inactive_cnt) as inactive,\nsum(total_tier2_inactive_dedup_cnt) as t2_inact_dedup,\nsum(total_tier2_prospect_loggedin_dedup_cnt) as t2_inact_dedup_logged_in,\nsum(total_tier2_prospect_loggedin_cnt) as Prospects_logged_in,\nsum(total_tier2_prospect_nonlogged_cnt) as Prospects_not_logged_in,\nsum(total_unique_visitors_tier2_mtd) as Unique_Visitors_MTD_Prospects_inactives,\nsum(total_unique_visitors_tier3_mtd) as Unique_Visitors_Network_Subscribers_MTD \nfrom {{source('fds_nplus','aggr_total_subscription')}} \ngroup by 1,2,3) b\non a.date = b.date\nand a.dim_country_id = b.dim_country_id\nand a.country_cd = b.country_cd\nleft join\n(select * from cdm.dim_region_country where etl_source_name = 'Network 0') c\non a.dim_country_id = c.dim_country_id\norder by date,dim_country_id,country_cd,country_nm", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_network_daily_subscription_kpis"], "unique_id": "model.analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_rpt_network_daily_subscription_kpis.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_network_daily_subscription_kpis.sql", "name": "vw_rpt_network_daily_subscription_kpis", "resource_type": "model", "alias": "vw_rpt_network_daily_subscription_kpis", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["fds_nplus", "aggr_daily_subscription"], ["fds_nplus", "aggr_total_subscription"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription"]}, "description": "## Implementation Detail\n* Date        : 06/29/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_network_daily_subscription_kpis\n* Schema\t  : fds_nl\n* Contributor : Lakshman Murugeshan\n* Description : vw_rpt_network_daily_subscription_kpis view consists of network daily kpi information\n## Maintenance Log\n* Date : 06/29/2020 ; Developer: Lakshman Murugeshan DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.", "columns": {"country_nm": {"name": "country_nm", "description": "Name of the country where the region located", "meta": {}, "data_type": null, "tags": []}, "date": {"name": "date", "description": "as on date of one day before", "meta": {}, "data_type": null, "tags": []}, "dim_country_id": {"name": "dim_country_id", "description": "References dim country for region country location", "meta": {}, "data_type": null, "tags": []}, "country_cd": {"name": "country_cd", "description": "Country Code", "meta": {}, "data_type": null, "tags": []}, "daily_paid_adds_cnt_new": {"name": "daily_paid_adds_cnt_new", "description": "Daily count of paid subscriber adds where order type = 'first'", "meta": {}, "data_type": null, "tags": []}, "daily_paid_adds_cnt_winback": {"name": "daily_paid_adds_cnt_winback", "description": "Daily count of paid subscriber adds where order type = 'winback'", "meta": {}, "data_type": null, "tags": []}, "daily_paid_loss_cnt_new": {"name": "daily_paid_loss_cnt_new", "description": "Daily count of total paid subscriber loss where order type = 'first' and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "daily_paid_loss_cnt_winback": {"name": "daily_paid_loss_cnt_winback", "description": "Daily count of total paid subscriber loss where order type = 'winback' and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "domest_paid_add": {"name": "domest_paid_add", "description": "Daily count of paid subscriber adds in US", "meta": {}, "data_type": null, "tags": []}, "domest_trial_add": {"name": "domest_trial_add", "description": "Daily count of trial subscriber adds in US", "meta": {}, "data_type": null, "tags": []}, "inter_paid_add": {"name": "inter_paid_add", "description": "Daily count of paid subscriber adds international", "meta": {}, "data_type": null, "tags": []}, "inter_trial_add": {"name": "inter_trial_add", "description": "Daily count of trial subscriber adds international", "meta": {}, "data_type": null, "tags": []}, "lp_adds": {"name": "lp_adds", "description": "Daily count of new subscriber adds for license partners", "meta": {}, "data_type": null, "tags": []}, "adds": {"name": "adds", "description": "Daily count of new subscriber adds", "meta": {}, "data_type": null, "tags": []}, "domest_paid_loss": {"name": "domest_paid_loss", "description": "Daily count of total paid subscriber loss in US and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "domest_trial_loss": {"name": "domest_trial_loss", "description": "Daily count of total trial subscriber loss in US and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "inter_paid_loss": {"name": "inter_paid_loss", "description": "Daily count of total paid subscriber loss international and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "inter_trial_loss": {"name": "inter_trial_loss", "description": "Daily count of total trial subscriber loss international and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "lp_loss": {"name": "lp_loss", "description": "Daily count of total subscriber loss for license partners", "meta": {}, "data_type": null, "tags": []}, "loss": {"name": "loss", "description": "Daily count of total subscriber loss", "meta": {}, "data_type": null, "tags": []}, "tier2_new_registrations": {"name": "tier2_new_registrations", "description": "daily tier2 prospect loggedin new users count", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_daily_prospects_inactives": {"name": "unique_visitors_daily_prospects_inactives", "description": "daily unique visitors tier2 count", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_network_subscribers_daily": {"name": "unique_visitors_network_subscribers_daily", "description": "daily unique visitors tier3 count", "meta": {}, "data_type": null, "tags": []}, "domest_paid_active": {"name": "domest_paid_active", "description": "total number of paid active subscriptions in US", "meta": {}, "data_type": null, "tags": []}, "domest_trial_active": {"name": "domest_trial_active", "description": "total number of trial active subscriptions in US", "meta": {}, "data_type": null, "tags": []}, "inter_paid_active": {"name": "inter_paid_active", "description": "total number of paid active subscriptions international", "meta": {}, "data_type": null, "tags": []}, "inter_trial_active": {"name": "inter_trial_active", "description": "total number of trial active subscriptions international", "meta": {}, "data_type": null, "tags": []}, "lp_active": {"name": "lp_active", "description": "Total active subscription for license partners", "meta": {}, "data_type": null, "tags": []}, "active": {"name": "active", "description": "Total active subscriptions", "meta": {}, "data_type": null, "tags": []}, "inactive": {"name": "inactive", "description": "Total inactive subscriptions", "meta": {}, "data_type": null, "tags": []}, "t2_inact_dedup": {"name": "t2_inact_dedup", "description": "Count of distinct exid when tier_status = T2 and ever_active = 1 and remove_guid = 0", "meta": {}, "data_type": null, "tags": []}, "t2_inact_dedup_logged_in": {"name": "t2_inact_dedup_logged_in", "description": "Count of distinct exid when tier_status = T2 and ever_active = 0  andlast_login_date is not null and remove_guid = 0", "meta": {}, "data_type": null, "tags": []}, "prospects_logged_in": {"name": "prospects_logged_in", "description": "total tier 2 prospects who have logged in post n2.0 launch", "meta": {}, "data_type": null, "tags": []}, "prospects_not_logged_in": {"name": "prospects_not_logged_in", "description": "total tier 2 users who have not logged in n2.0", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_mtd_prospects_inactives": {"name": "unique_visitors_mtd_prospects_inactives", "description": "tier 2 distinct user logins in the month. resets every month", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_network_subscribers_mtd": {"name": "unique_visitors_network_subscribers_mtd", "description": "tier 3 distinct user logins in the month. resets every month", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_network_daily_subscription_kpis.sql", "compiled": true, "compiled_sql": "\nSELECT c.country_nm,a.*, \nb.domest_paid_active,\nb.domest_trial_active,\nb.inter_paid_active,\nb.inter_trial_active,\nb.active,\nb.inactive,\nb.lp_active,\nb.t2_inact_dedup,\nb.t2_inact_dedup_logged_in,\nb.prospects_logged_in,\nb.prospects_not_logged_in,\nb.unique_visitors_mtd_prospects_inactives,\nb.unique_visitors_network_subscribers_mtd\n from\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when order_type='first' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_new,\nsum(case when order_type='winback' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_winback,\nsum(case when order_type='first' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro')then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_new,\nsum(case when order_type='winback' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_winback,\n\nsum(case when country_cd='us' then daily_paid_adds_cnt else null end) as domest_paid_add,\nsum(case when country_cd='us' then daily_trial_adds_cnt else null end) as domest_trial_add,\nsum(case when country_cd !='us' then daily_paid_adds_cnt else null end) as inter_paid_add,\nsum(case when country_cd !='us' then daily_trial_adds_cnt else null end) as inter_trial_add,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt else null end) as lp_adds,\nsum(daily_new_adds_cnt) as adds,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as domest_paid_loss,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as domest_trial_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as inter_paid_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as inter_trial_loss,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else null end) as lp_loss,\nsum(daily_loss_cnt) as loss,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) tier2_new_registrations,\nsum(daily_unique_visitors_tier2_cnt) as Unique_Visitors_Daily_Prospects_inactives,\nsum(daily_unique_visitors_tier3_cnt) as Unique_Visitors_Network_Subscribers_Daily      \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\ngroup by 1,2,3) a\nleft join\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when country_cd='us' then total_paid_active_cnt else null end) as domest_paid_active,\nsum(case when country_cd='us' then total_trial_active_cnt else null end) as domest_trial_active,\nsum(case when country_cd !='us' then total_paid_active_cnt else null end) as inter_paid_active,\nsum(case when country_cd !='us' then total_trial_active_cnt else null end) as inter_trial_active,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then total_active_cnt else null end) as lp_active,\nsum(total_active_cnt) as active, \nsum(total_tier2_inactive_cnt) as inactive,\nsum(total_tier2_inactive_dedup_cnt) as t2_inact_dedup,\nsum(total_tier2_prospect_loggedin_dedup_cnt) as t2_inact_dedup_logged_in,\nsum(total_tier2_prospect_loggedin_cnt) as Prospects_logged_in,\nsum(total_tier2_prospect_nonlogged_cnt) as Prospects_not_logged_in,\nsum(total_unique_visitors_tier2_mtd) as Unique_Visitors_MTD_Prospects_inactives,\nsum(total_unique_visitors_tier3_mtd) as Unique_Visitors_Network_Subscribers_MTD \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\" \ngroup by 1,2,3) b\non a.date = b.date\nand a.dim_country_id = b.dim_country_id\nand a.country_cd = b.country_cd\nleft join\n(select * from cdm.dim_region_country where etl_source_name = 'Network 0') c\non a.dim_country_id = c.dim_country_id\norder by date,dim_country_id,country_cd,country_nm", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nSELECT c.country_nm,a.*, \nb.domest_paid_active,\nb.domest_trial_active,\nb.inter_paid_active,\nb.inter_trial_active,\nb.active,\nb.inactive,\nb.lp_active,\nb.t2_inact_dedup,\nb.t2_inact_dedup_logged_in,\nb.prospects_logged_in,\nb.prospects_not_logged_in,\nb.unique_visitors_mtd_prospects_inactives,\nb.unique_visitors_network_subscribers_mtd\n from\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when order_type='first' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_new,\nsum(case when order_type='winback' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_winback,\nsum(case when order_type='first' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro')then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_new,\nsum(case when order_type='winback' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_winback,\n\nsum(case when country_cd='us' then daily_paid_adds_cnt else null end) as domest_paid_add,\nsum(case when country_cd='us' then daily_trial_adds_cnt else null end) as domest_trial_add,\nsum(case when country_cd !='us' then daily_paid_adds_cnt else null end) as inter_paid_add,\nsum(case when country_cd !='us' then daily_trial_adds_cnt else null end) as inter_trial_add,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt else null end) as lp_adds,\nsum(daily_new_adds_cnt) as adds,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as domest_paid_loss,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as domest_trial_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as inter_paid_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as inter_trial_loss,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else null end) as lp_loss,\nsum(daily_loss_cnt) as loss,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) tier2_new_registrations,\nsum(daily_unique_visitors_tier2_cnt) as Unique_Visitors_Daily_Prospects_inactives,\nsum(daily_unique_visitors_tier3_cnt) as Unique_Visitors_Network_Subscribers_Daily      \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\ngroup by 1,2,3) a\nleft join\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when country_cd='us' then total_paid_active_cnt else null end) as domest_paid_active,\nsum(case when country_cd='us' then total_trial_active_cnt else null end) as domest_trial_active,\nsum(case when country_cd !='us' then total_paid_active_cnt else null end) as inter_paid_active,\nsum(case when country_cd !='us' then total_trial_active_cnt else null end) as inter_trial_active,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then total_active_cnt else null end) as lp_active,\nsum(total_active_cnt) as active, \nsum(total_tier2_inactive_cnt) as inactive,\nsum(total_tier2_inactive_dedup_cnt) as t2_inact_dedup,\nsum(total_tier2_prospect_loggedin_dedup_cnt) as t2_inact_dedup_logged_in,\nsum(total_tier2_prospect_loggedin_cnt) as Prospects_logged_in,\nsum(total_tier2_prospect_nonlogged_cnt) as Prospects_not_logged_in,\nsum(total_unique_visitors_tier2_mtd) as Unique_Visitors_MTD_Prospects_inactives,\nsum(total_unique_visitors_tier3_mtd) as Unique_Visitors_Network_Subscribers_MTD \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\" \ngroup by 1,2,3) b\non a.date = b.date\nand a.dim_country_id = b.dim_country_id\nand a.country_cd = b.country_cd\nleft join\n(select * from cdm.dim_region_country where etl_source_name = 'Network 0') c\non a.dim_country_id = c.dim_country_id\norder by date,dim_country_id,country_cd,country_nm"}, "error": null, "status": null, "execution_time": 0.0274355411529541, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.160537Z", "completed_at": "2020-09-21T17:49:01.187150Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.187462Z", "completed_at": "2020-09-21T17:49:01.187472Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/26/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_chart\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n*************************************************************************************************************************************************\n*/\n\n\n{{\n  config({\n\t\t 'schema': 'fds_nl',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nSELECT\n    as_on_date,\n    primary_schedule_name             AS primary_schedule,\n    secondary_schedule_name           AS secondary_schedule,\n    src_market_break                  AS market_break,\n    src_demographic_group             AS demographic_group,\n    src_playback_period_cd            AS playback_period,\n    primary_reach_proj000             AS Primary_Reach_Proj_000,\n    combined_reach_proj000       \t  AS Combined_Reach_Proj_000,\n    primary_only_reach_proj000        AS Primary_Only_Reach_Proj_000,\n    secondary_only_reach_proj000      AS secondary_only_reach_proj000,\n    both_reach_proj000                AS both_reach_proj000,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Primary_Show ,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(combined_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(T.max_combined_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Wrestling,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN CAST(primary_only_reach_proj000 AS DECIMAL)\n        ELSE CAST(both_reach_proj000 AS DECIMAL)\n    END AS Overlap_Reach_Proj000\nFROM {{source('fds_nl','fact_nl_weekly_overlap_chart')}} a\n  \nINNER JOIN\n    (\n        SELECT\n            dim_date_id,\n            MAX(CAST(combined_reach_proj000 AS DECIMAL)) AS max_combined_reach_proj000\n        FROM  {{source('fds_nl','fact_nl_weekly_overlap_chart')}}\n           \n        GROUP BY\n            dim_date_id )T\nON\n    a.as_on_date=T.dim_date_id\n    order by as_on_date", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_weekly_overlap_chart"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_rpt_nl_weekly_overlap_chart.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_weekly_overlap_chart.sql", "name": "vw_rpt_nl_weekly_overlap_chart", "resource_type": "model", "alias": "vw_rpt_nl_weekly_overlap_chart", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_weekly_overlap_chart"], ["fds_nl", "fact_nl_weekly_overlap_chart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart", "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_nl_weekly_overlap_chart\n* Schema\t  : fds_nl\n* Contributor : Remya K Nair\n* Description :vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"as_on_date": {"name": "as_on_date", "description": "Record as-on date", "meta": {}, "data_type": null, "tags": []}, "primary_schedule": {"name": "primary_schedule", "description": "identifier for primary program/daypart selection as input within Nielsen report", "meta": {}, "data_type": null, "tags": []}, "secondary_schedule": {"name": "secondary_schedule", "description": "identifier for secondary program/daypart selection as input within Nielsen report.", "meta": {}, "data_type": null, "tags": []}, "market_break": {"name": "market_break", "description": "Identified Market break category by the broadcast nework", "meta": {}, "data_type": null, "tags": []}, "demographic_group": {"name": "demographic_group", "description": "A comma separated list of demographic group", "meta": {}, "data_type": null, "tags": []}, "playback_period": {"name": "playback_period", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load. Live (Live - Includes viewing that occurred during the live airing). Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing). Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing). Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "Primary_Reach_Proj_000": {"name": "Primary_Reach_Proj_000", "description": "unique viewers who watched primary program/daypart (whether or not they watched secondary program/daypart)", "meta": {}, "data_type": null, "tags": []}, "Combined_Reach_Proj_000": {"name": "Combined_Reach_Proj_000", "description": "unique viewers who watched either the primary program/daypart or secondary program/daypart, regarless of whether they watched both", "meta": {}, "data_type": null, "tags": []}, "Primary_Only_Reach_Proj_000": {"name": "Primary_Only_Reach_Proj_000", "description": "unique viewers who only watched primary program/daypart and did not watch secondary program/daypart", "meta": {}, "data_type": null, "tags": []}, "secondary_only_reach_proj000": {"name": "secondary_only_reach_proj000", "description": "unique viewers who only watched secondary program/daypart and did not watch primary program/daypart", "meta": {}, "data_type": null, "tags": []}, "both_reach_proj000": {"name": "both_reach_proj000", "description": "unique viewers who watched both the primary program/daypart and secondary program/daypart", "meta": {}, "data_type": null, "tags": []}, "Percent_of_Primary_Show": {"name": "Percent_of_Primary_Show", "description": "percentage of primary show  will be calculated  based on Secondary schedule name", "meta": {}, "data_type": null, "tags": []}, "Percent_of_Wrestling": {"name": "Percent_of_Wrestling", "description": "percentage of Wrestling will be calculated  based on Secondary schedule name", "meta": {}, "data_type": null, "tags": []}, "Overlap_Reach_Proj000": {"name": "Overlap_Reach_Proj000", "description": "Overlap reach  will be calculated  based on Secondary schedule name", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_weekly_overlap_chart.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/26/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_chart\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    as_on_date,\n    primary_schedule_name             AS primary_schedule,\n    secondary_schedule_name           AS secondary_schedule,\n    src_market_break                  AS market_break,\n    src_demographic_group             AS demographic_group,\n    src_playback_period_cd            AS playback_period,\n    primary_reach_proj000             AS Primary_Reach_Proj_000,\n    combined_reach_proj000       \t  AS Combined_Reach_Proj_000,\n    primary_only_reach_proj000        AS Primary_Only_Reach_Proj_000,\n    secondary_only_reach_proj000      AS secondary_only_reach_proj000,\n    both_reach_proj000                AS both_reach_proj000,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Primary_Show ,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(combined_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(T.max_combined_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Wrestling,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN CAST(primary_only_reach_proj000 AS DECIMAL)\n        ELSE CAST(both_reach_proj000 AS DECIMAL)\n    END AS Overlap_Reach_Proj000\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\" a\n  \nINNER JOIN\n    (\n        SELECT\n            dim_date_id,\n            MAX(CAST(combined_reach_proj000 AS DECIMAL)) AS max_combined_reach_proj000\n        FROM  \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\"\n           \n        GROUP BY\n            dim_date_id )T\nON\n    a.as_on_date=T.dim_date_id\n    order by as_on_date", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/26/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_chart\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    as_on_date,\n    primary_schedule_name             AS primary_schedule,\n    secondary_schedule_name           AS secondary_schedule,\n    src_market_break                  AS market_break,\n    src_demographic_group             AS demographic_group,\n    src_playback_period_cd            AS playback_period,\n    primary_reach_proj000             AS Primary_Reach_Proj_000,\n    combined_reach_proj000       \t  AS Combined_Reach_Proj_000,\n    primary_only_reach_proj000        AS Primary_Only_Reach_Proj_000,\n    secondary_only_reach_proj000      AS secondary_only_reach_proj000,\n    both_reach_proj000                AS both_reach_proj000,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Primary_Show ,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(combined_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(T.max_combined_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Wrestling,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN CAST(primary_only_reach_proj000 AS DECIMAL)\n        ELSE CAST(both_reach_proj000 AS DECIMAL)\n    END AS Overlap_Reach_Proj000\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\" a\n  \nINNER JOIN\n    (\n        SELECT\n            dim_date_id,\n            MAX(CAST(combined_reach_proj000 AS DECIMAL)) AS max_combined_reach_proj000\n        FROM  \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\"\n           \n        GROUP BY\n            dim_date_id )T\nON\n    a.as_on_date=T.dim_date_id\n    order by as_on_date"}, "error": null, "status": null, "execution_time": 0.017672300338745117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.188143Z", "completed_at": "2020-09-21T17:49:01.205059Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.205386Z", "completed_at": "2020-09-21T17:49:01.205396Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'view','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nselect * from {{source('fds_nl','rpt_nl_weekly_overlap_derived_4_way_oob')}}  A", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_weekly_overlap_derived_4_way_oob"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_derived_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_rpt_nl_weekly_overlap_derived_4_way_oob.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_weekly_overlap_derived_4_way_oob.sql", "name": "vw_rpt_nl_weekly_overlap_derived_4_way_oob", "resource_type": "model", "alias": "vw_rpt_nl_weekly_overlap_derived_4_way_oob", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "rpt_nl_weekly_overlap_derived_4_way_oob"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_weekly_overlap_derived_4_way_oob.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n*************************************************************************************************************************************************\n*/\n\n\n\nselect * from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"  A", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n*************************************************************************************************************************************************\n*/\n\n\n\nselect * from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"  A"}, "error": null, "status": null, "execution_time": 0.010715007781982422, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.206199Z", "completed_at": "2020-09-21T17:49:01.216158Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.216450Z", "completed_at": "2020-09-21T17:49:01.216460Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Marketing Subs Report View\n\n/*\n*************************************************************************************************************************************************\n   Date        : 08/14/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nplus_monthly_marketing_subs\n   Schema\t   : fds_nplus\n   Contributor : Hima Dasan\n   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t\"schemas\": 'fds_nplus',\t\n\t\"materialized\": 'view',\"persist_docs\": {'relation' : true, 'columns' : true}\n\t\t})\n}}\n\nselect a.bill_date,a.free_adds_budget,a.paid_adds_budget,a.free_disconnects_budget,a.paid_disconnects_budget,\n b.free_adds_actuals,b.paid_adds_actuals,b.free_disconnects_actuals,b.paid_disconnects_actuals,\n case when a.bill_Date < '2019-12-01' then e.EOP_Subs  else f.EOP_Subs end  as EOP_Subs ,\n  c.free_adds_FYE,c.paid_adds_FYE,c.free_disconnects_FYE,c.paid_disconnects_FYE\n from ( \n \n (select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      ROUND(sum (trial_adds)) as free_adds_budget,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_budget,\n       case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '66640'\n\t   when year='2018' and month ='3' then '11277'\n\t   when year='2018' and month ='4' then '31978'\n\t   when year='2018' and month ='5' then '116441'\n\t   when year='2018' and month ='6' then '8326'\n\t   when year='2018' and month ='7' then '32396'\n\t   when year='2018' and month ='8' then '14618'\n\t   when year='2018' and month ='9' then '33469'\n\t   when year='2018' and month ='10' then '9547'\n\t   when year='2018' and month ='11' then '14309'\n\t   when year='2018' and month ='12' then '15939'\n\t\t   else round(sum(total_trial_loss)) end as free_disconnects_budget,\n       round(sum(paid_losses_actual)) as paid_disconnects_budget\n\t  from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}  \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\n and comments='jan_budget'\n  and year between extract(year from (dateadd(month,-1,current_date))) -3 and \n  extract(year from (dateadd(month,-1,current_date)))\nand forecast_date = to_date((cast(year as char(4)) + '-01-01'),'yyyy-mm-dd') \n group by 1,2,3,4\n ) a \nleft join (select as_on_date,sum(total_active_cnt) as EOP_Subs from  {{source('fds_nplus','aggr_kpi_hist')}}  group by 1) e on \n a.bill_date= dateadd(month,-1,e.as_on_date)\n left join (select as_on_date,sum(total_active_cnt) as EOP_Subs from {{source('fds_nplus','aggr_total_subscription')}}   group by 1) f on\n a.bill_date= dateadd(month,-1,f.as_on_date)\n left join\n(select\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\nforecast_date,year,  month,\n      round(sum (trial_adds)) as free_adds_actuals,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_actuals,\n       round(sum(total_trial_loss)) as free_disconnects_actuals,\n       round(sum(paid_losses_actual)) as paid_disconnects_actuals\n from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official' \n and forecast_date= (select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} )\n and (year||case when length(month) <2 then ('0' + cast(month as varchar))\n else cast(month as varchar) end) < to_char((select max(forecast_date) from \n {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} ), 'YYYYMM')\n group by 1,2,3,4) b\n on a.bill_date = b.bill_date\n \n LEFT JOIN\n (\n select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      round(sum (trial_adds)) as free_adds_FYE,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_FYE,\n\t   case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '64263'\n\t   when year='2018' and month ='3' then '25116'\n\t   when year='2018' and month ='4' then '25791'\n\t   when year='2018' and month ='5' then '156463'\n\t   when year='2018' and month ='6' then '8345'\n\t   when year='2018' and month ='7' then '17285'\n\t   when year='2018' and month ='8' then '12532'\n\t   when year='2018' and month ='9' then '31342'\n\t   when year='2018' and month ='10' then '15455'\n\t   when year='2018' and month ='11' then '18825'\n\t   when year='2018' and month ='12' then '17960'\n       else round(sum(total_trial_loss)) end  as free_disconnects_FYE,\n       round(sum(paid_losses_actual)) as paid_disconnects_FYE\n\t  -- (total_active_cnt) as EOP_subs\n from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}   \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\nand to_date(add_months(forecast_date, -0),'yyyy-mm-01') = bill_date \n and year = extract(year from bill_date)\n and month = extract(month from bill_date)\n group by 1,2,3,4) c\n on a.BILL_dATE = c.bill_Date\n )\n order by bill_date desc", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_nplus_monthly_marketing_subs"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_rpt_nplus_monthly_marketing_subs.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_nplus_monthly_marketing_subs.sql", "name": "vw_rpt_nplus_monthly_marketing_subs", "resource_type": "model", "alias": "vw_rpt_nplus_monthly_marketing_subs", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_kpi_hist"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output"]}, "description": "## Implementation Detail\n*   Date        : 08/14/2020\n*   Version     : 1.0\n*   TableName   : vw_rpt_nplus_monthly_marketing_subs\n*   Schema      : fds_nplus\n*   Contributor : Hima Dasan\n*   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n\n## Maintenance Log\n* Date : 08/14/2020 ; Developer: Hima Dasan; Change: Initial Version", "columns": {"bill_date": {"name": "bill_date", "description": "report date", "meta": {}, "data_type": null, "tags": []}, "free_adds_budget": {"name": "free_adds_budget", "description": "Total trial adds budget for the month", "meta": {}, "data_type": null, "tags": []}, "paid_adds_budget": {"name": "paid_adds_budget", "description": "Budget for all paid subscriptions who have paid for the first time and all paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "free_disconnects_budget": {"name": "free_disconnects_budget", "description": "Budget for Total trial losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_disconnects_budget": {"name": "paid_disconnects_budget", "description": "Budget for Total Paid Losses for the month", "meta": {}, "data_type": null, "tags": []}, "free_adds_actuals": {"name": "free_adds_actuals", "description": "Total trial adds for the month", "meta": {}, "data_type": null, "tags": []}, "paid_adds_actuals": {"name": "paid_adds_actuals", "description": "All paid subscriptions who have paid for the first time and all paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "free_disconnects_actuals": {"name": "free_disconnects_actuals", "description": "Total trial losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_disconnects_actuals": {"name": "paid_disconnects_actuals", "description": "Total Paid Losses for the month", "meta": {}, "data_type": null, "tags": []}, "eop_subs": {"name": "eop_subs", "description": "end of period total subscriptions", "meta": {}, "data_type": null, "tags": []}, "free_adds_FYE": {"name": "free_adds_FYE", "description": "Total trial adds for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "paid_adds_FYE": {"name": "paid_adds_FYE", "description": "All paid subscriptions who have paid for the first time and all paid winback subscriptions for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "free_disconnects_FYE": {"name": "free_disconnects_FYE", "description": "Total trial losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "paid_disconnects_FYE": {"name": "paid_disconnects_FYE", "description": "Total Paid Losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_nplus_monthly_marketing_subs.sql", "compiled": true, "compiled_sql": "-- Marketing Subs Report View\n\n/*\n*************************************************************************************************************************************************\n   Date        : 08/14/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nplus_monthly_marketing_subs\n   Schema\t   : fds_nplus\n   Contributor : Hima Dasan\n   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n*************************************************************************************************************************************************\n*/\n\n \n\nselect a.bill_date,a.free_adds_budget,a.paid_adds_budget,a.free_disconnects_budget,a.paid_disconnects_budget,\n b.free_adds_actuals,b.paid_adds_actuals,b.free_disconnects_actuals,b.paid_disconnects_actuals,\n case when a.bill_Date < '2019-12-01' then e.EOP_Subs  else f.EOP_Subs end  as EOP_Subs ,\n  c.free_adds_FYE,c.paid_adds_FYE,c.free_disconnects_FYE,c.paid_disconnects_FYE\n from ( \n \n (select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      ROUND(sum (trial_adds)) as free_adds_budget,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_budget,\n       case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '66640'\n\t   when year='2018' and month ='3' then '11277'\n\t   when year='2018' and month ='4' then '31978'\n\t   when year='2018' and month ='5' then '116441'\n\t   when year='2018' and month ='6' then '8326'\n\t   when year='2018' and month ='7' then '32396'\n\t   when year='2018' and month ='8' then '14618'\n\t   when year='2018' and month ='9' then '33469'\n\t   when year='2018' and month ='10' then '9547'\n\t   when year='2018' and month ='11' then '14309'\n\t   when year='2018' and month ='12' then '15939'\n\t\t   else round(sum(total_trial_loss)) end as free_disconnects_budget,\n       round(sum(paid_losses_actual)) as paid_disconnects_budget\n\t  from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\n and comments='jan_budget'\n  and year between extract(year from (dateadd(month,-1,current_date))) -3 and \n  extract(year from (dateadd(month,-1,current_date)))\nand forecast_date = to_date((cast(year as char(4)) + '-01-01'),'yyyy-mm-dd') \n group by 1,2,3,4\n ) a \nleft join (select as_on_date,sum(total_active_cnt) as EOP_Subs from  \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"  group by 1) e on \n a.bill_date= dateadd(month,-1,e.as_on_date)\n left join (select as_on_date,sum(total_active_cnt) as EOP_Subs from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"   group by 1) f on\n a.bill_date= dateadd(month,-1,f.as_on_date)\n left join\n(select\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\nforecast_date,year,  month,\n      round(sum (trial_adds)) as free_adds_actuals,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_actuals,\n       round(sum(total_trial_loss)) as free_disconnects_actuals,\n       round(sum(paid_losses_actual)) as paid_disconnects_actuals\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official' \n and forecast_date= (select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" )\n and (year||case when length(month) <2 then ('0' + cast(month as varchar))\n else cast(month as varchar) end) < to_char((select max(forecast_date) from \n \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" ), 'YYYYMM')\n group by 1,2,3,4) b\n on a.bill_date = b.bill_date\n \n LEFT JOIN\n (\n select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      round(sum (trial_adds)) as free_adds_FYE,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_FYE,\n\t   case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '64263'\n\t   when year='2018' and month ='3' then '25116'\n\t   when year='2018' and month ='4' then '25791'\n\t   when year='2018' and month ='5' then '156463'\n\t   when year='2018' and month ='6' then '8345'\n\t   when year='2018' and month ='7' then '17285'\n\t   when year='2018' and month ='8' then '12532'\n\t   when year='2018' and month ='9' then '31342'\n\t   when year='2018' and month ='10' then '15455'\n\t   when year='2018' and month ='11' then '18825'\n\t   when year='2018' and month ='12' then '17960'\n       else round(sum(total_trial_loss)) end  as free_disconnects_FYE,\n       round(sum(paid_losses_actual)) as paid_disconnects_FYE\n\t  -- (total_active_cnt) as EOP_subs\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"   \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\nand to_date(add_months(forecast_date, -0),'yyyy-mm-01') = bill_date \n and year = extract(year from bill_date)\n and month = extract(month from bill_date)\n group by 1,2,3,4) c\n on a.BILL_dATE = c.bill_Date\n )\n order by bill_date desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Marketing Subs Report View\n\n/*\n*************************************************************************************************************************************************\n   Date        : 08/14/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nplus_monthly_marketing_subs\n   Schema\t   : fds_nplus\n   Contributor : Hima Dasan\n   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n*************************************************************************************************************************************************\n*/\n\n \n\nselect a.bill_date,a.free_adds_budget,a.paid_adds_budget,a.free_disconnects_budget,a.paid_disconnects_budget,\n b.free_adds_actuals,b.paid_adds_actuals,b.free_disconnects_actuals,b.paid_disconnects_actuals,\n case when a.bill_Date < '2019-12-01' then e.EOP_Subs  else f.EOP_Subs end  as EOP_Subs ,\n  c.free_adds_FYE,c.paid_adds_FYE,c.free_disconnects_FYE,c.paid_disconnects_FYE\n from ( \n \n (select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      ROUND(sum (trial_adds)) as free_adds_budget,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_budget,\n       case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '66640'\n\t   when year='2018' and month ='3' then '11277'\n\t   when year='2018' and month ='4' then '31978'\n\t   when year='2018' and month ='5' then '116441'\n\t   when year='2018' and month ='6' then '8326'\n\t   when year='2018' and month ='7' then '32396'\n\t   when year='2018' and month ='8' then '14618'\n\t   when year='2018' and month ='9' then '33469'\n\t   when year='2018' and month ='10' then '9547'\n\t   when year='2018' and month ='11' then '14309'\n\t   when year='2018' and month ='12' then '15939'\n\t\t   else round(sum(total_trial_loss)) end as free_disconnects_budget,\n       round(sum(paid_losses_actual)) as paid_disconnects_budget\n\t  from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\n and comments='jan_budget'\n  and year between extract(year from (dateadd(month,-1,current_date))) -3 and \n  extract(year from (dateadd(month,-1,current_date)))\nand forecast_date = to_date((cast(year as char(4)) + '-01-01'),'yyyy-mm-dd') \n group by 1,2,3,4\n ) a \nleft join (select as_on_date,sum(total_active_cnt) as EOP_Subs from  \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"  group by 1) e on \n a.bill_date= dateadd(month,-1,e.as_on_date)\n left join (select as_on_date,sum(total_active_cnt) as EOP_Subs from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"   group by 1) f on\n a.bill_date= dateadd(month,-1,f.as_on_date)\n left join\n(select\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\nforecast_date,year,  month,\n      round(sum (trial_adds)) as free_adds_actuals,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_actuals,\n       round(sum(total_trial_loss)) as free_disconnects_actuals,\n       round(sum(paid_losses_actual)) as paid_disconnects_actuals\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official' \n and forecast_date= (select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" )\n and (year||case when length(month) <2 then ('0' + cast(month as varchar))\n else cast(month as varchar) end) < to_char((select max(forecast_date) from \n \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" ), 'YYYYMM')\n group by 1,2,3,4) b\n on a.bill_date = b.bill_date\n \n LEFT JOIN\n (\n select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      round(sum (trial_adds)) as free_adds_FYE,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_FYE,\n\t   case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '64263'\n\t   when year='2018' and month ='3' then '25116'\n\t   when year='2018' and month ='4' then '25791'\n\t   when year='2018' and month ='5' then '156463'\n\t   when year='2018' and month ='6' then '8345'\n\t   when year='2018' and month ='7' then '17285'\n\t   when year='2018' and month ='8' then '12532'\n\t   when year='2018' and month ='9' then '31342'\n\t   when year='2018' and month ='10' then '15455'\n\t   when year='2018' and month ='11' then '18825'\n\t   when year='2018' and month ='12' then '17960'\n       else round(sum(total_trial_loss)) end  as free_disconnects_FYE,\n       round(sum(paid_losses_actual)) as paid_disconnects_FYE\n\t  -- (total_active_cnt) as EOP_subs\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"   \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\nand to_date(add_months(forecast_date, -0),'yyyy-mm-01') = bill_date \n and year = extract(year from bill_date)\n and month = extract(month from bill_date)\n group by 1,2,3,4) c\n on a.BILL_dATE = c.bill_Date\n )\n order by bill_date desc"}, "error": null, "status": null, "execution_time": 0.024027109146118164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.217116Z", "completed_at": "2020-09-21T17:49:01.240439Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.240746Z", "completed_at": "2020-09-21T17:49:01.240756Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n    \"schemas\": 'fds_nplus',\n\t\"materialized\": 'view',\n\t})\n}}\nwith curr_year as\n(\nselect \n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date,\n       sum(paid) as paid,\n       sum(lp_adds) as lp_adds,\n       sum(free_trials) as free_trials,\n       sum(losses) as losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as total_ending_actives,\n       dense_rank() over(order by cal_year desc) as cyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\ngroup by 1,2,3,4\n),\n\nprev_year as\n(\nselect       \n       cal_year as prev_cal_year,\n       cal_year_week_num as prev_cal_year_week_num,\n       cal_year_week_begin_date as prev_cal_year_week_begin_date,\n       cal_year_week_end_date as prev_cal_year_week_end_date,\n       sum(paid) as prev_paid,\n       sum(lp_adds) as prev_lp_adds,\n       sum(free_trials) as prev_free_trials,\n       sum(losses) as prev_losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as prev_paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as prev_total_ending_actives,\n       dense_rank() over(order by cal_year desc) as pyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\nwhere cal_year <> (select max(cal_year) from curr_year)\ngroup by 1,2,3,4\n)\nselect cal_year,cal_year_week_num,cal_year_week_begin_date,cal_year_week_end_date, paid, lp_adds,free_trials,losses, paid_ending_actives,total_ending_actives,\n       prev_cal_year,prev_cal_year_week_num,prev_cal_year_week_begin_date,prev_cal_year_week_end_date, prev_paid, prev_lp_adds,prev_free_trials,prev_losses,prev_paid_ending_actives,prev_total_ending_actives\nfrom \ncurr_year left join prev_year \non curr_year.cyr_rn =  prev_year.pyr_rn and curr_year.cal_year_week_num = prev_year.prev_cal_year_week_num\norder by cal_year desc, cal_year_week_num asc", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_weekly_network_subscriber_kpis_ir"], "unique_id": "model.analytics_engineering_marts.vw_rpt_weekly_network_subscriber_kpis_ir", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_rpt_weekly_network_subscriber_kpis_ir.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_weekly_network_subscriber_kpis_ir.sql", "name": "vw_rpt_weekly_network_subscriber_kpis_ir", "resource_type": "model", "alias": "vw_rpt_weekly_network_subscriber_kpis_ir", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_weekly_network_subscriber_kpis_ir\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : vw_rpt_weekly_network_subscriber_kpis_ir Weekly Network Subscriber KPIs for IR Team\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.", "columns": {"cal_year": {"name": "cal_year", "description": "Calander Year", "meta": {}, "data_type": null, "tags": []}, "cal_year_week_num": {"name": "cal_year_week_num", "description": "Calander Year Week Number", "meta": {}, "data_type": null, "tags": []}, "cal_year_week_begin_date": {"name": "cal_year_week_begin_date", "description": "Calander Year Week Begin Date", "meta": {}, "data_type": null, "tags": []}, "cal_year_week_end_date": {"name": "cal_year_week_end_date", "description": "Calander Year Week End Date", "meta": {}, "data_type": null, "tags": []}, "paid": {"name": "paid", "description": "Weekly count of paid subscriber adds", "meta": {}, "data_type": null, "tags": []}, "lp_adds": {"name": "lp_adds", "description": "Weekly count of new subscriber adds for license partners", "meta": {}, "data_type": null, "tags": []}, "free_trials": {"name": "free_trials", "description": "Weekly count of trial subscriber adds", "meta": {}, "data_type": null, "tags": []}, "losses": {"name": "losses", "description": "Weekly count of total subscriber loss", "meta": {}, "data_type": null, "tags": []}, "paid_ending_actives": {"name": "paid_ending_actives", "description": "Weekly count of total number of paid active subscriptions", "meta": {}, "data_type": null, "tags": []}, "total_ending_actives": {"name": "total_ending_actives", "description": "Weekly count of total number of active subscriptions", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_weekly_network_subscriber_kpis_ir.sql", "compiled": true, "compiled_sql": "\nwith curr_year as\n(\nselect \n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date,\n       sum(paid) as paid,\n       sum(lp_adds) as lp_adds,\n       sum(free_trials) as free_trials,\n       sum(losses) as losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as total_ending_actives,\n       dense_rank() over(order by cal_year desc) as cyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\ngroup by 1,2,3,4\n),\n\nprev_year as\n(\nselect       \n       cal_year as prev_cal_year,\n       cal_year_week_num as prev_cal_year_week_num,\n       cal_year_week_begin_date as prev_cal_year_week_begin_date,\n       cal_year_week_end_date as prev_cal_year_week_end_date,\n       sum(paid) as prev_paid,\n       sum(lp_adds) as prev_lp_adds,\n       sum(free_trials) as prev_free_trials,\n       sum(losses) as prev_losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as prev_paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as prev_total_ending_actives,\n       dense_rank() over(order by cal_year desc) as pyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\nwhere cal_year <> (select max(cal_year) from curr_year)\ngroup by 1,2,3,4\n)\nselect cal_year,cal_year_week_num,cal_year_week_begin_date,cal_year_week_end_date, paid, lp_adds,free_trials,losses, paid_ending_actives,total_ending_actives,\n       prev_cal_year,prev_cal_year_week_num,prev_cal_year_week_begin_date,prev_cal_year_week_end_date, prev_paid, prev_lp_adds,prev_free_trials,prev_losses,prev_paid_ending_actives,prev_total_ending_actives\nfrom \ncurr_year left join prev_year \non curr_year.cyr_rn =  prev_year.pyr_rn and curr_year.cal_year_week_num = prev_year.prev_cal_year_week_num\norder by cal_year desc, cal_year_week_num asc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith curr_year as\n(\nselect \n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date,\n       sum(paid) as paid,\n       sum(lp_adds) as lp_adds,\n       sum(free_trials) as free_trials,\n       sum(losses) as losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as total_ending_actives,\n       dense_rank() over(order by cal_year desc) as cyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\ngroup by 1,2,3,4\n),\n\nprev_year as\n(\nselect       \n       cal_year as prev_cal_year,\n       cal_year_week_num as prev_cal_year_week_num,\n       cal_year_week_begin_date as prev_cal_year_week_begin_date,\n       cal_year_week_end_date as prev_cal_year_week_end_date,\n       sum(paid) as prev_paid,\n       sum(lp_adds) as prev_lp_adds,\n       sum(free_trials) as prev_free_trials,\n       sum(losses) as prev_losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as prev_paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as prev_total_ending_actives,\n       dense_rank() over(order by cal_year desc) as pyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\nwhere cal_year <> (select max(cal_year) from curr_year)\ngroup by 1,2,3,4\n)\nselect cal_year,cal_year_week_num,cal_year_week_begin_date,cal_year_week_end_date, paid, lp_adds,free_trials,losses, paid_ending_actives,total_ending_actives,\n       prev_cal_year,prev_cal_year_week_num,prev_cal_year_week_begin_date,prev_cal_year_week_end_date, prev_paid, prev_lp_adds,prev_free_trials,prev_losses,prev_paid_ending_actives,prev_total_ending_actives\nfrom \ncurr_year left join prev_year \non curr_year.cyr_rn =  prev_year.pyr_rn and curr_year.cal_year_week_num = prev_year.prev_cal_year_week_num\norder by cal_year desc, cal_year_week_num asc"}, "error": null, "status": null, "execution_time": 0.012732505798339844, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.241408Z", "completed_at": "2020-09-21T17:49:01.253427Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.253726Z", "completed_at": "2020-09-21T17:49:01.253735Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='error') }}\n\n-- If channel_name doesn't have any channels with UpUpDownDown The Bella Twins WWE (failure).\n-- If channel_name  have any channels with UpUpDownDown The Bella Twins WWE (success)\n\n--script to check the three channes exists or not\n\nwith channel_check as (select COUNT(distinct channel_name) cnt from   fds_yt.agg_yt_monetization_summary  where view_date=trunc(current_date)-1\nand  channel_name  \nin ('UpUpDownDown','The Bella Twins','WWE') having count(distinct channel_name)<3),\ncheck_data as (select count(*) from fds_yt.agg_yt_monetization_summary where view_date=trunc(current_date)-1\nhaving count(*)<=0)\nselect * from channel_check\nunion \nselect * from check_data", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_yt", "data_test", "monetize_summary_test_cases"], "unique_id": "test.analytics_engineering_marts.monetize_summary_test_cases", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_yt/data_test/monetize_summary_test_cases.sql", "original_file_path": "tests/fds_yt/monetize_summary_test_cases.sql", "name": "monetize_summary_test_cases", "resource_type": "test", "alias": "monetize_summary_test_cases", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "error"}, "tags": ["data"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/tests/fds_yt/monetize_summary_test_cases.sql", "compiled": true, "compiled_sql": "\n\n-- If channel_name doesn't have any channels with UpUpDownDown The Bella Twins WWE (failure).\n-- If channel_name  have any channels with UpUpDownDown The Bella Twins WWE (success)\n\n--script to check the three channes exists or not\n\nwith channel_check as (select COUNT(distinct channel_name) cnt from   fds_yt.agg_yt_monetization_summary  where view_date=trunc(current_date)-1\nand  channel_name  \nin ('UpUpDownDown','The Bella Twins','WWE') having count(distinct channel_name)<3),\ncheck_data as (select count(*) from fds_yt.agg_yt_monetization_summary where view_date=trunc(current_date)-1\nhaving count(*)<=0)\nselect * from channel_check\nunion \nselect * from check_data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- If channel_name doesn't have any channels with UpUpDownDown The Bella Twins WWE (failure).\n-- If channel_name  have any channels with UpUpDownDown The Bella Twins WWE (success)\n\n--script to check the three channes exists or not\n\nwith channel_check as (select COUNT(distinct channel_name) cnt from   fds_yt.agg_yt_monetization_summary  where view_date=trunc(current_date)-1\nand  channel_name  \nin ('UpUpDownDown','The Bella Twins','WWE') having count(distinct channel_name)<3),\ncheck_data as (select count(*) from fds_yt.agg_yt_monetization_summary where view_date=trunc(current_date)-1\nhaving count(*)<=0)\nselect * from channel_check\nunion \nselect * from check_data"}, "error": null, "status": null, "execution_time": 0.017887353897094727, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.254380Z", "completed_at": "2020-09-21T17:49:01.271577Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.271874Z", "completed_at": "2020-09-21T17:49:01.271883Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='error') }}\nselect distinct * from(\nselect case when total=0 then null else 1 end query2 from\n(select 'total_adds_comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (with a as (select event_date,event_name,event_type,\nadds_date,sum(total_adds) as rpt_total_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast where \ndate_part(dayofweek,adds_date) = date_part(dayofweek,current_date) and event_type <> 'current_ppv' group by event_date,event_name,event_type,adds_date), \nb as (select trunc(initial_order_dttm) as adds_date, count(*) as sos_total_adds from fds_nplus.fact_daily_subscription_order_status \nwhere trunc(initial_order_dttm) + 1 = as_on_date and  trunc(initial_order_dttm) in (select distinct adds_date from a) and trunc(as_on_date) - 1 in \n(select distinct adds_date from a) and payment_method in ('cybersource','stripe','incomm','paypal') group by 1) select * from a \nleft join b on a.adds_date = b.adds_date) where rpt_total_adds <> sos_total_adds)\nunion all\nselect case when total=0 then null else 1 end query5 from\n(select 'forecasted_total_adds_fri_sat_sun' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select current_adds_days_to_event, sum(current_day_forecast) as current_day_forecast,sum(weekend_forecast) as weekend_forecast,\ncase when sum(current_day_forecast) is null or sum(current_day_forecast) = 0 or sum(weekend_forecast) = 0 or sum(weekend_forecast) is null then \n1 else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and current_adds_days_to_event in \n(0,-1,-2) group by 1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query6 from\n(select 'total_adds_comp1_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp1'and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query7 from\n(select 'total_adds_comp2_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp2' and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query8 from\n(select 'total_adds_comp3_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) \nfrom fds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp3' and (total_adds is null or total_adds = 0) \ngroup by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query9 from\n(select 'total_adds_curr_ppv_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and adds_date = current_date-1 and adds_time = 23.0 and \n(total_adds is null or total_adds = 0) then 1      when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))      \nand (total_adds is null or total_adds = 0) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere event_type = 'current_ppv' and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query10 from\n(select 'total_adds_curr_ppv_vs_comp1_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp1_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp1_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp1_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp1_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and adds_date = current_date \nand adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \nextract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp1' then total_adds end as \ncomp1_zero_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'comp1' then total_adds end as comp1_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query11 from\n(select 'total_adds_curr_ppv_vs_comp2_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp2_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp2_zero_hr_tot_adds) then 1     \n when (cur_ppv_otr_hr_tot_adds < 0.5 * comp2_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp2_otr_hr_tot_adds) then 1      \n else 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds,\n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))   \n and event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp2' then total_adds end as comp2_zero_hr_tot_adds, \n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \n and event_type = 'comp2' then total_adds end as comp2_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast \n where adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query12 from \n(select 'total_adds_curr_ppv_vs_comp3_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp3_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp3_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp3_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp3_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and     \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'current_ppv' then \n total_adds end as cur_ppv_otr_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp3' then total_adds end as comp3_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'comp3' then \n total_adds end as comp3_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where adds_date >= current_date-1 )) where flag=1)\n union all\nselect case when total=0 then null else 1 end query13 from  \n(select 'total_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds,\ncurrentday_adds_tillnow,currentday_adds_estimate, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and\n      adds_date = current_date-1 and adds_time = 23.0 and      (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1 \n\t  when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n\t  adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      \n\t  (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1       else 0 end as flag from \n\t  fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and adds_time = extract(hour \n\t  from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query14 from \t  \n(select 'wknd_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select adds_date,weekend_adds_tillnow ,currentday_adds_tillnow,weekend_adds_estimate,currentday_adds_estimate, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      adds_date = current_date-1 and \nadds_time = 23.0 and      (weekend_adds_tillnow < currentday_adds_tillnow or weekend_adds_estimate < currentday_adds_estimate) then 1       \nwhen extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      (weekend_adds_tillnow < currentday_adds_tillnow or \nweekend_adds_estimate < currentday_adds_estimate) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where \nevent_type = 'current_ppv' and adds_time = extract(hour from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and \nadds_date >= current_date-1 ) where flag=1)) where query2>0", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "ppv_hourly", "data_test", "ppv_hourly_test_post_load"], "unique_id": "test.analytics_engineering_marts.ppv_hourly_test_post_load", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "ppv_hourly/data_test/ppv_hourly_test_post_load.sql", "original_file_path": "tests/ppv_hourly/ppv_hourly_test_post_load.sql", "name": "ppv_hourly_test_post_load", "resource_type": "test", "alias": "ppv_hourly_test_post_load", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "error"}, "tags": ["data"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/tests/ppv_hourly/ppv_hourly_test_post_load.sql", "compiled": true, "compiled_sql": "\nselect distinct * from(\nselect case when total=0 then null else 1 end query2 from\n(select 'total_adds_comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (with a as (select event_date,event_name,event_type,\nadds_date,sum(total_adds) as rpt_total_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast where \ndate_part(dayofweek,adds_date) = date_part(dayofweek,current_date) and event_type <> 'current_ppv' group by event_date,event_name,event_type,adds_date), \nb as (select trunc(initial_order_dttm) as adds_date, count(*) as sos_total_adds from fds_nplus.fact_daily_subscription_order_status \nwhere trunc(initial_order_dttm) + 1 = as_on_date and  trunc(initial_order_dttm) in (select distinct adds_date from a) and trunc(as_on_date) - 1 in \n(select distinct adds_date from a) and payment_method in ('cybersource','stripe','incomm','paypal') group by 1) select * from a \nleft join b on a.adds_date = b.adds_date) where rpt_total_adds <> sos_total_adds)\nunion all\nselect case when total=0 then null else 1 end query5 from\n(select 'forecasted_total_adds_fri_sat_sun' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select current_adds_days_to_event, sum(current_day_forecast) as current_day_forecast,sum(weekend_forecast) as weekend_forecast,\ncase when sum(current_day_forecast) is null or sum(current_day_forecast) = 0 or sum(weekend_forecast) = 0 or sum(weekend_forecast) is null then \n1 else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and current_adds_days_to_event in \n(0,-1,-2) group by 1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query6 from\n(select 'total_adds_comp1_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp1'and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query7 from\n(select 'total_adds_comp2_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp2' and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query8 from\n(select 'total_adds_comp3_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) \nfrom fds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp3' and (total_adds is null or total_adds = 0) \ngroup by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query9 from\n(select 'total_adds_curr_ppv_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and adds_date = current_date-1 and adds_time = 23.0 and \n(total_adds is null or total_adds = 0) then 1      when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))      \nand (total_adds is null or total_adds = 0) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere event_type = 'current_ppv' and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query10 from\n(select 'total_adds_curr_ppv_vs_comp1_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp1_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp1_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp1_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp1_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and adds_date = current_date \nand adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \nextract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp1' then total_adds end as \ncomp1_zero_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'comp1' then total_adds end as comp1_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query11 from\n(select 'total_adds_curr_ppv_vs_comp2_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp2_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp2_zero_hr_tot_adds) then 1     \n when (cur_ppv_otr_hr_tot_adds < 0.5 * comp2_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp2_otr_hr_tot_adds) then 1      \n else 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds,\n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))   \n and event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp2' then total_adds end as comp2_zero_hr_tot_adds, \n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \n and event_type = 'comp2' then total_adds end as comp2_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast \n where adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query12 from \n(select 'total_adds_curr_ppv_vs_comp3_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp3_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp3_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp3_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp3_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and     \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'current_ppv' then \n total_adds end as cur_ppv_otr_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp3' then total_adds end as comp3_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'comp3' then \n total_adds end as comp3_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where adds_date >= current_date-1 )) where flag=1)\n union all\nselect case when total=0 then null else 1 end query13 from  \n(select 'total_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds,\ncurrentday_adds_tillnow,currentday_adds_estimate, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and\n      adds_date = current_date-1 and adds_time = 23.0 and      (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1 \n\t  when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n\t  adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      \n\t  (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1       else 0 end as flag from \n\t  fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and adds_time = extract(hour \n\t  from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query14 from \t  \n(select 'wknd_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select adds_date,weekend_adds_tillnow ,currentday_adds_tillnow,weekend_adds_estimate,currentday_adds_estimate, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      adds_date = current_date-1 and \nadds_time = 23.0 and      (weekend_adds_tillnow < currentday_adds_tillnow or weekend_adds_estimate < currentday_adds_estimate) then 1       \nwhen extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      (weekend_adds_tillnow < currentday_adds_tillnow or \nweekend_adds_estimate < currentday_adds_estimate) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where \nevent_type = 'current_ppv' and adds_time = extract(hour from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and \nadds_date >= current_date-1 ) where flag=1)) where query2>0", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect distinct * from(\nselect case when total=0 then null else 1 end query2 from\n(select 'total_adds_comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (with a as (select event_date,event_name,event_type,\nadds_date,sum(total_adds) as rpt_total_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast where \ndate_part(dayofweek,adds_date) = date_part(dayofweek,current_date) and event_type <> 'current_ppv' group by event_date,event_name,event_type,adds_date), \nb as (select trunc(initial_order_dttm) as adds_date, count(*) as sos_total_adds from fds_nplus.fact_daily_subscription_order_status \nwhere trunc(initial_order_dttm) + 1 = as_on_date and  trunc(initial_order_dttm) in (select distinct adds_date from a) and trunc(as_on_date) - 1 in \n(select distinct adds_date from a) and payment_method in ('cybersource','stripe','incomm','paypal') group by 1) select * from a \nleft join b on a.adds_date = b.adds_date) where rpt_total_adds <> sos_total_adds)\nunion all\nselect case when total=0 then null else 1 end query5 from\n(select 'forecasted_total_adds_fri_sat_sun' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select current_adds_days_to_event, sum(current_day_forecast) as current_day_forecast,sum(weekend_forecast) as weekend_forecast,\ncase when sum(current_day_forecast) is null or sum(current_day_forecast) = 0 or sum(weekend_forecast) = 0 or sum(weekend_forecast) is null then \n1 else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and current_adds_days_to_event in \n(0,-1,-2) group by 1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query6 from\n(select 'total_adds_comp1_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp1'and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query7 from\n(select 'total_adds_comp2_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp2' and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query8 from\n(select 'total_adds_comp3_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) \nfrom fds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp3' and (total_adds is null or total_adds = 0) \ngroup by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query9 from\n(select 'total_adds_curr_ppv_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and adds_date = current_date-1 and adds_time = 23.0 and \n(total_adds is null or total_adds = 0) then 1      when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))      \nand (total_adds is null or total_adds = 0) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere event_type = 'current_ppv' and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query10 from\n(select 'total_adds_curr_ppv_vs_comp1_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp1_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp1_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp1_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp1_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and adds_date = current_date \nand adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \nextract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp1' then total_adds end as \ncomp1_zero_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'comp1' then total_adds end as comp1_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query11 from\n(select 'total_adds_curr_ppv_vs_comp2_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp2_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp2_zero_hr_tot_adds) then 1     \n when (cur_ppv_otr_hr_tot_adds < 0.5 * comp2_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp2_otr_hr_tot_adds) then 1      \n else 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds,\n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))   \n and event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp2' then total_adds end as comp2_zero_hr_tot_adds, \n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \n and event_type = 'comp2' then total_adds end as comp2_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast \n where adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query12 from \n(select 'total_adds_curr_ppv_vs_comp3_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp3_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp3_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp3_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp3_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and     \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'current_ppv' then \n total_adds end as cur_ppv_otr_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp3' then total_adds end as comp3_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'comp3' then \n total_adds end as comp3_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where adds_date >= current_date-1 )) where flag=1)\n union all\nselect case when total=0 then null else 1 end query13 from  \n(select 'total_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds,\ncurrentday_adds_tillnow,currentday_adds_estimate, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and\n      adds_date = current_date-1 and adds_time = 23.0 and      (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1 \n\t  when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n\t  adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      \n\t  (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1       else 0 end as flag from \n\t  fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and adds_time = extract(hour \n\t  from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query14 from \t  \n(select 'wknd_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select adds_date,weekend_adds_tillnow ,currentday_adds_tillnow,weekend_adds_estimate,currentday_adds_estimate, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      adds_date = current_date-1 and \nadds_time = 23.0 and      (weekend_adds_tillnow < currentday_adds_tillnow or weekend_adds_estimate < currentday_adds_estimate) then 1       \nwhen extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      (weekend_adds_tillnow < currentday_adds_tillnow or \nweekend_adds_estimate < currentday_adds_estimate) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where \nevent_type = 'current_ppv' and adds_time = extract(hour from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and \nadds_date >= current_date-1 ) where flag=1)) where query2>0"}, "error": null, "status": null, "execution_time": 0.01008296012878418, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.272496Z", "completed_at": "2020-09-21T17:49:01.281706Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.282137Z", "completed_at": "2020-09-21T17:49:01.282148Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='error') }}\n\nselect distinct query1 from\n(select case when total>0 then null else 1 end query1 from\n(select 'comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(event_name) as total from \nudl_nplus.raw_da_weekly_ppv_hourly_comps \nwhere event_date >= current_date and \n(comp1_event_name != '' or comp2_event_name != '' or comp3_event_name != ''))\nunion all\nselect case when total>0 then null else 1 end query2 from\n(select 'total_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select date as adds_date, hour as adds_time,sum(paid_adds) as \npaid_adds,sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where \ndate = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and hour = extract(hour from \ndateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2 ) where total_adds != 0)\nunion all\nselect case when total>0 then null else 1 end query3 from\n(select 'total_adds_prev_quarter_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select date as adds_date, hour as adds_time, \nquarter_hour,sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2,3) where total_adds!= 0))", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "ppv_hourly", "data_test", "ppv_hourly_test_pre_load"], "unique_id": "test.analytics_engineering_marts.ppv_hourly_test_pre_load", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "ppv_hourly/data_test/ppv_hourly_test_pre_load.sql", "original_file_path": "tests/ppv_hourly/ppv_hourly_test_pre_load.sql", "name": "ppv_hourly_test_pre_load", "resource_type": "test", "alias": "ppv_hourly_test_pre_load", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "error"}, "tags": ["data"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/tests/ppv_hourly/ppv_hourly_test_pre_load.sql", "compiled": true, "compiled_sql": "\n\nselect distinct query1 from\n(select case when total>0 then null else 1 end query1 from\n(select 'comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(event_name) as total from \nudl_nplus.raw_da_weekly_ppv_hourly_comps \nwhere event_date >= current_date and \n(comp1_event_name != '' or comp2_event_name != '' or comp3_event_name != ''))\nunion all\nselect case when total>0 then null else 1 end query2 from\n(select 'total_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select date as adds_date, hour as adds_time,sum(paid_adds) as \npaid_adds,sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where \ndate = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and hour = extract(hour from \ndateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2 ) where total_adds != 0)\nunion all\nselect case when total>0 then null else 1 end query3 from\n(select 'total_adds_prev_quarter_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select date as adds_date, hour as adds_time, \nquarter_hour,sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2,3) where total_adds!= 0))", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect distinct query1 from\n(select case when total>0 then null else 1 end query1 from\n(select 'comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(event_name) as total from \nudl_nplus.raw_da_weekly_ppv_hourly_comps \nwhere event_date >= current_date and \n(comp1_event_name != '' or comp2_event_name != '' or comp3_event_name != ''))\nunion all\nselect case when total>0 then null else 1 end query2 from\n(select 'total_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select date as adds_date, hour as adds_time,sum(paid_adds) as \npaid_adds,sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where \ndate = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and hour = extract(hour from \ndateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2 ) where total_adds != 0)\nunion all\nselect case when total>0 then null else 1 end query3 from\n(select 'total_adds_prev_quarter_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select date as adds_date, hour as adds_time, \nquarter_hour,sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2,3) where total_adds!= 0))"}, "error": null, "status": null, "execution_time": 0.008464813232421875, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.282847Z", "completed_at": "2020-09-21T17:49:01.290583Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.290881Z", "completed_at": "2020-09-21T17:49:01.290888Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Monthly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\n\nselect broadcast_fin_month_nm as broadcast_fin_month, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}\nwhere broadcast_fin_month is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_fin_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_fin_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_monthly_fin_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_fin_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_monthly_fin_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_fin_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on financial month-basis", "columns": {"broadcast_fin_month": {"name": "broadcast_fin_month", "description": "Broadcast Financial Month", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Broadcast Financial Year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24)", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "(Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airings", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_fin_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Monthly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_month_nm as broadcast_fin_month, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_month is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Monthly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_month_nm as broadcast_fin_month, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_month is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.0152740478515625, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.291536Z", "completed_at": "2020-09-21T17:49:01.306100Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.306400Z", "completed_at": "2020-09-21T17:49:01.306410Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\n\nSELECT broadcast_cal_month_nm as broadcast_month, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM {{ref('rpt_nl_daily_wwe_program_ratings')}}\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_monthly_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_monthly_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live program ratings on monthly-basis", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "Broadcast Calendar Month", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calendar Year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airings", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\nSELECT broadcast_cal_month_nm as broadcast_month, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\nSELECT broadcast_cal_month_nm as broadcast_month, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.015067577362060547, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.307089Z", "completed_at": "2020-09-21T17:49:01.321478Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.321765Z", "completed_at": "2020-09-21T17:49:01.321774Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Quarterly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\n\nselect broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}\nwhere broadcast_fin_quarter is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_fin_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_fin_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_quarterly_fin_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_fin_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_quarterly_fin_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_fin_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on financial quarter-basis", "columns": {"broadcast_fin_quarter": {"name": "broadcast_fin_quarter", "description": "Broadcast Financial Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Broadcast Financial Year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program nam.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airings", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_fin_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Quarterly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_quarter is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Quarterly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_quarter is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.01477193832397461, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.322380Z", "completed_at": "2020-09-21T17:49:01.336431Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.336719Z", "completed_at": "2020-09-21T17:49:01.336728Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--WWE LIVE program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\n\nSELECT broadcast_cal_quarter as broadcast_quarter, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM {{ref('rpt_nl_daily_wwe_program_ratings')}}\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_quarterly_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_quarterly_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on quarterly-basis", "columns": {"broadcast_quarter": {"name": "broadcast_quarter", "description": "Broadcast Calendar Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airing", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "--WWE LIVE program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_cal_quarter as broadcast_quarter, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--WWE LIVE program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_cal_quarter as broadcast_quarter, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.015150785446166992, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.337402Z", "completed_at": "2020-09-21T17:49:01.351880Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.352162Z", "completed_at": "2020-09-21T17:49:01.352171Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Yearly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\n\nselect broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}\nwhere broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_fin_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_fin_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_yearly_fin_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_fin_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_yearly_fin_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_fin_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on financial year-basis", "columns": {"broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Broadcast Financial year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airing", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_fin_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Yearly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Yearly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.014547348022460938, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.352780Z", "completed_at": "2020-09-21T17:49:01.366528Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.366869Z", "completed_at": "2020-09-21T17:49:01.366882Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\n\nSELECT broadcast_cal_year as broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM {{ref('rpt_nl_daily_wwe_program_ratings')}}\nWHERE (src_broadcast_network_id, src_program_id)\n  IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_yearly_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_yearly_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on yearly-basis", "columns": {"broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airing", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT broadcast_cal_year as broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n  IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT broadcast_cal_year as broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n  IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.014519691467285156, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.367564Z", "completed_at": "2020-09-21T17:49:01.381382Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.381693Z", "completed_at": "2020-09-21T17:49:01.381702Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_daily_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from WWE Program Ratings Daily Report table\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\n\nselect broadcast_date, broadcast_cal_week_begin_date, broadcast_cal_week_end_date, broadcast_cal_week_num, broadcast_cal_month_nm, broadcast_cal_quarter, broadcast_cal_year, broadcast_fin_week_begin_date, broadcast_fin_week_end_date, broadcast_fin_week_num, \nbroadcast_fin_month_nm, broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, broadcast_network_name, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name, src_daypart_cd, src_daypart_name, program_telecast_rpt_starttime, program_telecast_rpt_endtime,avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, viewing_minutes_units\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_daily_wwe_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_daily_wwe_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_rpt_nl_daily_wwe_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_daily_wwe_program_ratings.sql", "name": "vw_rpt_nl_daily_wwe_program_ratings", "resource_type": "model", "alias": "vw_rpt_nl_daily_wwe_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_daily_wwe_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_daily_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from WWE Program Ratings Daily Report table\n*************************************************************************************************************************************************\n*/\n\n\nselect broadcast_date, broadcast_cal_week_begin_date, broadcast_cal_week_end_date, broadcast_cal_week_num, broadcast_cal_month_nm, broadcast_cal_quarter, broadcast_cal_year, broadcast_fin_week_begin_date, broadcast_fin_week_end_date, broadcast_fin_week_num, \nbroadcast_fin_month_nm, broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, broadcast_network_name, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name, src_daypart_cd, src_daypart_name, program_telecast_rpt_starttime, program_telecast_rpt_endtime,avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, viewing_minutes_units\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_daily_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from WWE Program Ratings Daily Report table\n*************************************************************************************************************************************************\n*/\n\n\nselect broadcast_date, broadcast_cal_week_begin_date, broadcast_cal_week_end_date, broadcast_cal_week_num, broadcast_cal_month_nm, broadcast_cal_quarter, broadcast_cal_year, broadcast_fin_week_begin_date, broadcast_fin_week_end_date, broadcast_fin_week_num, \nbroadcast_fin_month_nm, broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, broadcast_network_name, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name, src_daypart_cd, src_daypart_name, program_telecast_rpt_starttime, program_telecast_rpt_endtime,avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, viewing_minutes_units\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\""}, "error": null, "status": null, "execution_time": 0.010426044464111328, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.382466Z", "completed_at": "2020-09-21T17:49:01.391939Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.392367Z", "completed_at": "2020-09-21T17:49:01.392379Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_month_nm", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_nm is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_nm is null\n\n", "column_name": "broadcast_cal_month_nm"}, "error": null, "status": null, "execution_time": 0.02158951759338379, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.393085Z", "completed_at": "2020-09-21T17:49:01.413662Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.414098Z", "completed_at": "2020-09-21T17:49:01.414111Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_month_num", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_num is null\n\n", "column_name": "broadcast_cal_month_num"}, "error": null, "status": null, "execution_time": 0.011519193649291992, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.414998Z", "completed_at": "2020-09-21T17:49:01.425620Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.426031Z", "completed_at": "2020-09-21T17:49:01.426042Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_week_begin_date", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_begin_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_begin_date is null\n\n", "column_name": "broadcast_cal_week_begin_date"}, "error": null, "status": null, "execution_time": 0.010577678680419922, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.426779Z", "completed_at": "2020-09-21T17:49:01.436414Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.436820Z", "completed_at": "2020-09-21T17:49:01.436831Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_week_end_date", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_end_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_end_date is null\n\n", "column_name": "broadcast_cal_week_end_date"}, "error": null, "status": null, "execution_time": 0.010308504104614258, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.437569Z", "completed_at": "2020-09-21T17:49:01.446931Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.447338Z", "completed_at": "2020-09-21T17:49:01.447350Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_week_num", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_num is null\n\n", "column_name": "broadcast_cal_week_num"}, "error": null, "status": null, "execution_time": 0.010447025299072266, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.448128Z", "completed_at": "2020-09-21T17:49:01.457651Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.458078Z", "completed_at": "2020-09-21T17:49:01.458090Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "error": null, "status": null, "execution_time": 0.010760307312011719, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.458860Z", "completed_at": "2020-09-21T17:49:01.468680Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.469102Z", "completed_at": "2020-09-21T17:49:01.469114Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date_id", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date_id is null\n\n", "column_name": "broadcast_date_id"}, "error": null, "status": null, "execution_time": 0.010976314544677734, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.469865Z", "completed_at": "2020-09-21T17:49:01.479852Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.480279Z", "completed_at": "2020-09-21T17:49:01.480292Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "src_program_id", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_src_program_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_src_program_id", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_src_program_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_src_program_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_src_program_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_src_program_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere src_program_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere src_program_id is null\n\n", "column_name": "src_program_id"}, "error": null, "status": null, "execution_time": 0.010693550109863281, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.481131Z", "completed_at": "2020-09-21T17:49:01.490881Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.491311Z", "completed_at": "2020-09-21T17:49:01.491323Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect month, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}} \ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_monthly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_monthly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_monthly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Monthly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on monthly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"month": {"name": "month", "description": "Abbreviated Month Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total monthly durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The monthly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The monthly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on monthly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The average weekly cumulative Audience who watched the competitive program on monthly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect month, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\" \ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect month, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\" \ngroup by 1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.015004873275756836, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.492061Z", "completed_at": "2020-09-21T17:49:01.506041Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.506478Z", "completed_at": "2020-09-21T17:49:01.506490Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect quarter, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}}\ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_quarterly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_quarterly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_quarterly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_quarterly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_quarterly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_quarterly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Quarterly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on quarterly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"quarter": {"name": "quarter", "description": "Abbreviated Quarter Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total quarterly durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The quarterly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The quarterly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on quarterly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The average weekly cumulative Audience who watched the competitive program on quarterly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_quarterly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect quarter, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect quarter, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.014418601989746094, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.507330Z", "completed_at": "2020-09-21T17:49:01.521030Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.521336Z", "completed_at": "2020-09-21T17:49:01.521345Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect week_start_date, src_country, src_channel, src_property, demographic, hd_flag, \nduration_hours, rat_value, viewing_hours, telecasts_count, weekly_cumulative_audience as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}}", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_weekly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_weekly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_weekly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_weekly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_weekly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_weekly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Weekly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "Calendar Year Week Start Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The weekly total durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The weekly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The weekly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on weekly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The weekly cumulative Audience who watched the competitive program", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_weekly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect week_start_date, src_country, src_channel, src_property, demographic, hd_flag, \nduration_hours, rat_value, viewing_hours, telecasts_count, weekly_cumulative_audience as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect week_start_date, src_country, src_channel, src_property, demographic, hd_flag, \nduration_hours, rat_value, viewing_hours, telecasts_count, weekly_cumulative_audience as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\""}, "error": null, "status": null, "execution_time": 0.015456199645996094, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.521978Z", "completed_at": "2020-09-21T17:49:01.536728Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.537028Z", "completed_at": "2020-09-21T17:49:01.537038Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}}\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_yearly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_yearly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_yearly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_yearly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_yearly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_yearly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Yearly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on yearly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total yearly durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The yearly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The yearly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on yearly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The average weekly cumulative Audience who watched the competitive program on yearly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_yearly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.014570951461791992, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.537678Z", "completed_at": "2020-09-21T17:49:01.551527Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.551835Z", "completed_at": "2020-09-21T17:49:01.551845Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "month", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_month"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_month", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_month.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_month", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_month", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_month.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere month is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere month is null\n\n", "column_name": "month"}, "error": null, "status": null, "execution_time": 0.011908769607543945, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.552508Z", "completed_at": "2020-09-21T17:49:01.563701Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.564008Z", "completed_at": "2020-09-21T17:49:01.564018Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "quarter", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_quarter"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_quarter", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_quarter.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_quarter", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_quarter", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_quarter.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere quarter is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere quarter is null\n\n", "column_name": "quarter"}, "error": null, "status": null, "execution_time": 0.010488271713256836, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.564644Z", "completed_at": "2020-09-21T17:49:01.574409Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.574724Z", "completed_at": "2020-09-21T17:49:01.574733Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "week_start_date", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere week_start_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere week_start_date is null\n\n", "column_name": "week_start_date"}, "error": null, "status": null, "execution_time": 0.010048627853393555, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.575390Z", "completed_at": "2020-09-21T17:49:01.584761Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.585031Z", "completed_at": "2020-09-21T17:49:01.585039Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "year", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_year"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_year", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_year.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_year", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_year", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_year.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere year is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere year is null\n\n", "column_name": "year"}, "error": null, "status": null, "execution_time": 0.010112285614013672, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.585647Z", "completed_at": "2020-09-21T17:49:01.595096Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.595366Z", "completed_at": "2020-09-21T17:49:01.595375Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\n  select TO_CHAR(TO_DATE (month::text, 'MM'), 'Mon') as month,\n  year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom {{ref('intm_kntr_wwe_program_rating')}} group by 1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating.sql", "name": "vw_aggr_kntr_monthly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_monthly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"month": {"name": "month", "description": "Month Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Monthly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\n  select TO_CHAR(TO_DATE (month::text, 'MM'), 'Mon') as month,\n  year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\n  select TO_CHAR(TO_DATE (month::text, 'MM'), 'Mon') as month,\n  year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8"}, "error": null, "status": null, "execution_time": 0.022901535034179688, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.596025Z", "completed_at": "2020-09-21T17:49:01.617974Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.618427Z", "completed_at": "2020-09-21T17:49:01.618440Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect 'q'+ cast(quarter as varchar) as quarter,\nyear,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom {{ref('intm_kntr_wwe_program_rating')}} group by 1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_quarterly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating.sql", "name": "vw_aggr_kntr_quarterly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_quarterly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_quarterly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"quarter": {"name": "quarter", "description": "Quarter Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Quarterly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect 'q'+ cast(quarter as varchar) as quarter,\nyear,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect 'q'+ cast(quarter as varchar) as quarter,\nyear,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8"}, "error": null, "status": null, "execution_time": 0.026304006576538086, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.619158Z", "completed_at": "2020-09-21T17:49:01.644742Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.645067Z", "completed_at": "2020-09-21T17:49:01.645077Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_Weekly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect week_start_date,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\nrat_value,\nviewing_hours,\nduration_hours,\ncount_telecast,\nWeekly_Cumulative_Audience as average_weekly_cumulative_audience_000\nfrom  {{ref('intm_kntr_wwe_program_rating')}}", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_weekly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_weekly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_weekly_wwe_program_rating.sql", "name": "vw_aggr_kntr_weekly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_weekly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_weekly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "Start date of the week", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Monthly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_weekly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_Weekly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect week_start_date,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\nrat_value,\nviewing_hours,\nduration_hours,\ncount_telecast,\nWeekly_Cumulative_Audience as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_Weekly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect week_start_date,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\nrat_value,\nviewing_hours,\nduration_hours,\ncount_telecast,\nWeekly_Cumulative_Audience as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating"}, "error": null, "status": null, "execution_time": 0.018042325973510742, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.645709Z", "completed_at": "2020-09-21T17:49:01.662827Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.663304Z", "completed_at": "2020-09-21T17:49:01.663317Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom {{ref('intm_kntr_wwe_program_rating')}} group by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_yearly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating.sql", "name": "vw_aggr_kntr_yearly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_yearly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_yearly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Yearly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.02121114730834961, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.664007Z", "completed_at": "2020-09-21T17:49:01.684253Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.684729Z", "completed_at": "2020-09-21T17:49:01.684744Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect  cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  {{ref('intm_kntr_wwe_program_rating_schedule')}}\ngroup by 1,2,3,4,5,6,7,8,9", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", " "], "unique_id": "model.analytics_engineering_marts. ", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/ .sql", "original_file_path": "models/fds_kntr/view/ .sql", "name": " ", "resource_type": "model", "alias": "", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating_schedule"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/ .sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9"}, "error": null, "status": null, "execution_time": 0.018705368041992188, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.732487Z", "completed_at": "2020-09-21T17:49:01.750243Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.750639Z", "completed_at": "2020-09-21T17:49:01.750678Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect  TO_CHAR(TO_DATE (cal_month::text, 'MM'), 'Mon') as month,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n\t\t(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\n        \nfrom  {{ref('intm_kntr_wwe_program_rating_schedule')}}\ngroup by 1,2,3,4,5,6,7,8,9,10", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_wwe_program_rating_schedule"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating_schedule.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating_schedule.sql", "name": "vw_aggr_kntr_monthly_wwe_program_rating_schedule", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_wwe_program_rating_schedule", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating_schedule"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"]}, "description": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"month": {"name": "month", "description": "Month Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "live_flag": {"name": "live_flag", "description": "Program live telecasted identifier", "meta": {}, "data_type": null, "tags": []}, "nth_run": {"name": "nth_run", "description": "Program telecasted count after live telecasted", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Monthly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating_schedule.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  TO_CHAR(TO_DATE (cal_month::text, 'MM'), 'Mon') as month,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n\t\t(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\n        \nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  TO_CHAR(TO_DATE (cal_month::text, 'MM'), 'Mon') as month,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n\t\t(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\n        \nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10"}, "error": null, "status": null, "execution_time": 0.03397655487060547, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.751471Z", "completed_at": "2020-09-21T17:49:01.784409Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.784863Z", "completed_at": "2020-09-21T17:49:01.784877Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect 'q'+ cast(cal_quarter as varchar) as quarter,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  {{ref('intm_kntr_wwe_program_rating_schedule')}}\ngroup by 1,2,3,4,5,6,7,8,9,10", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_quarterly_wwe_program_rating_schedule"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating_schedule.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating_schedule.sql", "name": "vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "resource_type": "model", "alias": "vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating_schedule"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"]}, "description": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"quarter": {"name": "quarter", "description": "Quarter Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "live_flag": {"name": "live_flag", "description": "Program live telecasted identifier", "meta": {}, "data_type": null, "tags": []}, "nth_run": {"name": "nth_run", "description": "Program telecasted count after live telecasted", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Quarterly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating_schedule.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\nselect 'q'+ cast(cal_quarter as varchar) as quarter,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\nselect 'q'+ cast(cal_quarter as varchar) as quarter,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10"}, "error": null, "status": null, "execution_time": 0.029476404190063477, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.785906Z", "completed_at": "2020-09-21T17:49:01.814543Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.814886Z", "completed_at": "2020-09-21T17:49:01.814896Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_month IS 'Broadcast Month name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';\"]\n\t})\n}}\n\n--Commercial ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect broadcast_month_nm as broadcast_month, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  {{ref('rpt_nl_daily_wwe_live_commercial_ratings')}}\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_monthly_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_commercial_ratings.sql", "name": "vw_aggr_nl_monthly_wwe_live_commercial_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_month IS 'Broadcast Month name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "A view to display various dimensions and metrics for live commercial ratings", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "Broadcast Month name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast  year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name.", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Commercial ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect broadcast_month_nm as broadcast_month, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Commercial ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect broadcast_month_nm as broadcast_month, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.015148639678955078, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.815545Z", "completed_at": "2020-09-21T17:49:01.829919Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.830258Z", "completed_at": "2020-09-21T17:49:01.830268Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--Commercial ratings for WWE program(quarterly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_quarter IS 'Broadcast Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS  'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';\n\t\t\t\t\t\"]\n\t})\n}}\n\n\nselect  broadcast_quarter_nm as broadcast_quarter, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  {{ref('rpt_nl_daily_wwe_live_commercial_ratings')}}\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_quarterly_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_commercial_ratings.sql", "name": "vw_aggr_nl_quarterly_wwe_live_commercial_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_quarter IS 'Broadcast Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS  'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';\n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "A view to display various dimensions and metrics for quarterly Commercial ratings", "columns": {"broadcast_quarter": {"name": "broadcast_quarter", "description": "Broadcast Calendar Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "--Commercial ratings for WWE program(quarterly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\n\nselect  broadcast_quarter_nm as broadcast_quarter, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Commercial ratings for WWE program(quarterly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\n\nselect  broadcast_quarter_nm as broadcast_quarter, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6"}, "error": null, "status": null, "execution_time": 0.014832735061645508, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.831031Z", "completed_at": "2020-09-21T17:49:01.845148Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.845437Z", "completed_at": "2020-09-21T17:49:01.845446Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--Commercial ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in munites ';\"]\n\t})\n}}\n\nselect  broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  {{ref('rpt_nl_daily_wwe_live_commercial_ratings')}}\ngroup by 1,2,3,4,5", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_yearly_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_commercial_ratings.sql", "name": "vw_aggr_nl_yearly_wwe_live_commercial_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in munites ';", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "A view to display various dimensions and metrics for yearly Commercial ratings", "columns": {"broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "--Commercial ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nselect  broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Commercial ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nselect  broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5"}, "error": null, "status": null, "execution_time": 0.014597177505493164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.846070Z", "completed_at": "2020-09-21T17:49:01.859965Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.860271Z", "completed_at": "2020-09-21T17:49:01.860281Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "error": null, "status": null, "execution_time": 0.01093435287475586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.860921Z", "completed_at": "2020-09-21T17:49:01.871148Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.871450Z", "completed_at": "2020-09-21T17:49:01.871460Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date_id", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date_id is null\n\n", "column_name": "broadcast_date_id"}, "error": null, "status": null, "execution_time": 0.012954473495483398, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.872096Z", "completed_at": "2020-09-21T17:49:01.884115Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.884577Z", "completed_at": "2020-09-21T17:49:01.884589Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_month_nm", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_nm is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_nm is null\n\n", "column_name": "broadcast_month_nm"}, "error": null, "status": null, "execution_time": 0.011762857437133789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.885328Z", "completed_at": "2020-09-21T17:49:01.896387Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.896666Z", "completed_at": "2020-09-21T17:49:01.896675Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_month_num", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_num is null\n\n", "column_name": "broadcast_month_num"}, "error": null, "status": null, "execution_time": 0.012647151947021484, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.897325Z", "completed_at": "2020-09-21T17:49:01.909019Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.909452Z", "completed_at": "2020-09-21T17:49:01.909465Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "src_broadcast_network_id", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere src_broadcast_network_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere src_broadcast_network_id is null\n\n", "column_name": "src_broadcast_network_id"}, "error": null, "status": null, "execution_time": 0.010789632797241211, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.910233Z", "completed_at": "2020-09-21T17:49:01.920065Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.920473Z", "completed_at": "2020-09-21T17:49:01.920484Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--QH ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on monthly-basis\n**************************************************************************************************************************************************\n*/\n \n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_month IS 'Broadcast Month name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t\"]\n\t})\n}}\n\nSELECT broadcast_month_nm broadcast_month, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM {{ref('rpt_nl_daily_wwe_live_quarterhour_ratings')}}\nGROUP BY  1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.sql", "name": "vw_aggr_nl_monthly_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_month IS 'Broadcast Month name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "A view to display various dimensions and metrics for wwe live quarterhour ratings", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "Broadcast Month name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast  year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be profided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be profided", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--QH ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on monthly-basis\n**************************************************************************************************************************************************\n*/\n \n \n\nSELECT broadcast_month_nm broadcast_month, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--QH ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on monthly-basis\n**************************************************************************************************************************************************\n*/\n \n \n\nSELECT broadcast_month_nm broadcast_month, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8"}, "error": null, "status": null, "execution_time": 0.015880584716796875, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.921361Z", "completed_at": "2020-09-21T17:49:01.936220Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.936654Z", "completed_at": "2020-09-21T17:49:01.936667Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--QH ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN  fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_quarter IS 'Broadcast Quarter Name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided' ;\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t\t\t\"]\n\t})\n}}\nSELECT broadcast_quarter_nm broadcast_quarter, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM {{ref('rpt_nl_daily_wwe_live_quarterhour_ratings')}}\nGROUP BY  1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.sql", "name": "vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN  fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_quarter IS 'Broadcast Quarter Name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided' ;\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "A view to display various dimensions and metrics for quarterly wwe live Quarter hour ratings", "columns": {"broadcast_quarter": {"name": "broadcast_quarter", "description": "Broadcast Calendar Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be provided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be provided", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--QH ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \nSELECT broadcast_quarter_nm broadcast_quarter, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--QH ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \nSELECT broadcast_quarter_nm broadcast_quarter, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8"}, "error": null, "status": null, "execution_time": 0.017798662185668945, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.937448Z", "completed_at": "2020-09-21T17:49:01.954485Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.954832Z", "completed_at": "2020-09-21T17:49:01.954842Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--QH ratings for WWE program(yearly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t'schema': 'fds_nl',\n\t\"materialized\": 'view',\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u00e2\u20ac\u0153programId\u00e2\u20ac?. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u00e2\u20ac\u2122s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t\t\t\"]\n\t})\n}}\n\nSELECT broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM {{ref('rpt_nl_daily_wwe_live_quarterhour_ratings')}}\nGROUP BY  1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.sql", "name": "vw_aggr_nl_yearly_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u00e2\u20ac\u0153programId\u00e2\u20ac?. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u00e2\u20ac\u2122s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": []}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "A view to display various dimensions and metrics for yearly wwe live Quarter hour ratings", "columns": {"broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be provided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be provided", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--QH ratings for WWE program(yearly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--QH ratings for WWE program(yearly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7"}, "error": null, "status": null, "execution_time": 0.01485896110534668, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.955491Z", "completed_at": "2020-09-21T17:49:01.969429Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.969861Z", "completed_at": "2020-09-21T17:49:01.969874Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "error": null, "status": null, "execution_time": 0.010561227798461914, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.970603Z", "completed_at": "2020-09-21T17:49:01.980256Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.980668Z", "completed_at": "2020-09-21T17:49:01.980679Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date_id", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date_id is null\n\n", "column_name": "broadcast_date_id"}, "error": null, "status": null, "execution_time": 0.010372400283813477, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.981410Z", "completed_at": "2020-09-21T17:49:01.990817Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:01.991260Z", "completed_at": "2020-09-21T17:49:01.991270Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_month_num", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_month_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_month_num is null\n\n", "column_name": "broadcast_month_num"}, "error": null, "status": null, "execution_time": 0.010604619979858398, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:01.992021Z", "completed_at": "2020-09-21T17:49:02.001723Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.002135Z", "completed_at": "2020-09-21T17:49:02.002145Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "src_program_id", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere src_program_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere src_program_id is null\n\n", "column_name": "src_program_id"}, "error": null, "status": null, "execution_time": 0.010841131210327148, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.002911Z", "completed_at": "2020-09-21T17:49:02.013033Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.013353Z", "completed_at": "2020-09-21T17:49:02.013362Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_cp',\n    \"materialized\": \"view\"\n  })\n}}\n\nselect * from {{ref('aggr_cp_weekly_consumption_by_platform')}}", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "view", "vw_aggr_cp_weekly_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cp/view/vw_aggr_cp_weekly_consumption_by_platform.sql", "original_file_path": "models/fds_cp/view/vw_aggr_cp_weekly_consumption_by_platform.sql", "name": "vw_aggr_cp_weekly_consumption_by_platform", "resource_type": "model", "alias": "vw_aggr_cp_weekly_consumption_by_platform", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": []}, "tags": [], "refs": [["aggr_cp_weekly_consumption_by_platform"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"]}, "description": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_cp_weekly_consumption_by_platform\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : vw_aggr_cp_weekly_consumption_by_platform This aggregate table stores the crossplatform consumption metrics - total views and total minutes watched aggregated for each week for platforms- Youtube, facebook, Twitter, Instagram, Snapchat and dotcom/App.\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.", "columns": {"platform": {"name": "platform", "description": "stores the name of cross platform", "meta": {}, "data_type": null, "tags": []}, "monday_date": {"name": "monday_date", "description": "represents the start of the week for measurement period Monday to Sunday", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "indicates the total views for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "minutes_watched": {"name": "minutes_watched", "description": "indicates the total minutes watched for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_views": {"name": "prev_views", "description": "indicates the total views for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_mins": {"name": "prev_mins", "description": "indicates the total minutes watched for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_views": {"name": "weekly_per_change_views", "description": "gives the week over week change in total views for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_mins": {"name": "weekly_per_change_mins", "description": "gives the week over week change in total minutes watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/view/vw_aggr_cp_weekly_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"aggr_cp_weekly_consumption_by_platform\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"aggr_cp_weekly_consumption_by_platform\""}, "error": null, "status": null, "execution_time": 0.017217636108398438, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.037486Z", "completed_at": "2020-09-21T17:49:02.053958Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.054265Z", "completed_at": "2020-09-21T17:49:02.054275Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\t 'schema': 'fds_cpg',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase 5B',\"persist_docs\": {'relation' : true, 'columns' : true}\n        })\n}}\nselect * from {{ref('aggr_cpg_daily_kit_sales')}}", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "view", "vw_aggr_cpg_daily_kit_sales"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cpg/view/vw_aggr_cpg_daily_kit_sales.sql", "original_file_path": "models/fds_cpg/view/vw_aggr_cpg_daily_kit_sales.sql", "name": "vw_aggr_cpg_daily_kit_sales", "resource_type": "model", "alias": "vw_aggr_cpg_daily_kit_sales", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"]}, "tags": ["Phase 5B"], "refs": [["aggr_cpg_daily_kit_sales"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_kit_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Kit Sales View consist of Sales details of WWE Kit products on daily-basis\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "Order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "Type of Order", "meta": {}, "data_type": null, "tags": []}, "dim_kit_item_id": {"name": "dim_kit_item_id", "description": "dim_kit_item_id referencing from dim_cpg_kit_item table", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id of dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "Cost per Unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "Current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "kit_units_sold": {"name": "kit_units_sold", "description": "Number of Kit Units Sold", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Returned COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id of dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/view/vw_aggr_cpg_daily_kit_sales.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_kit_sales\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_kit_sales\""}, "error": null, "status": null, "execution_time": 0.04395437240600586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.054980Z", "completed_at": "2020-09-21T17:49:02.098083Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.098461Z", "completed_at": "2020-09-21T17:49:02.098472Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\t 'schema': 'fds_cpg',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase 5B',\"persist_docs\": {'relation' : true, 'columns' : true}\n        })\n}}\nselect * from {{ref('aggr_cpg_daily_sales')}}", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "view", "vw_aggr_cpg_daily_sales"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cpg_daily_sales", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cpg/view/vw_aggr_cpg_daily_sales.sql", "original_file_path": "models/fds_cpg/view/vw_aggr_cpg_daily_sales.sql", "name": "vw_aggr_cpg_daily_sales", "resource_type": "model", "alias": "vw_aggr_cpg_daily_sales", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"]}, "tags": ["Phase 5B"], "refs": [["aggr_cpg_daily_sales"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_cpg_daily_sales"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Sales Table View of Sales details of WWE products on daily-basis\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "type of order", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id from dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "cost per unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Return COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency Code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id from dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/view/vw_aggr_cpg_daily_sales.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_sales\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_sales\""}, "error": null, "status": null, "execution_time": 0.03382277488708496, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.099444Z", "completed_at": "2020-09-21T17:49:02.132379Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.132727Z", "completed_at": "2020-09-21T17:49:02.132738Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n    \"schemas\": 'fds_nplus',\n\t\"materialized\": 'view',\n\t})\n}}\nselect * from {{ref('aggr_monthly_network_kpis_vkm')}}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_monthly_network_kpis_vkm"], "unique_id": "model.analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_aggr_monthly_network_kpis_vkm.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_monthly_network_kpis_vkm.sql", "name": "vw_aggr_monthly_network_kpis_vkm", "resource_type": "model", "alias": "vw_aggr_monthly_network_kpis_vkm", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [["aggr_monthly_network_kpis_vkm"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm"]}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_monthly_network_kpis_vkm\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : monthly VKM network kpis\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT : Sudhakar Change: Initial Version", "columns": {"bill_date": {"name": "bill_date", "description": "report date", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks": {"name": "paid_winbacks", "description": "All paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "new_paid": {"name": "new_paid", "description": "All paid subscriptions who have paid for the first time", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs": {"name": "free_trial_subs", "description": "Total trial adds for the month", "meta": {}, "data_type": null, "tags": []}, "losses": {"name": "losses", "description": "Total Paid and trial Losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate": {"name": "paid_churn_rate", "description": "paid churn rate", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate": {"name": "total_churn_rate", "description": "total churn rate", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs": {"name": "eom_total_subs", "description": "end of month total subscriptions", "meta": {}, "data_type": null, "tags": []}, "adp": {"name": "adp", "description": "average daily paid subscriptions", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_ly": {"name": "paid_winbacks_ly", "description": "All paid winback subscriptions for the month in last year", "meta": {}, "data_type": null, "tags": []}, "new_paid_ly": {"name": "new_paid_ly", "description": "All paid subscriptions who have paid for the first time last year", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_ly": {"name": "free_trial_subs_ly", "description": "Total trial adds for the month in last year", "meta": {}, "data_type": null, "tags": []}, "losses_ly": {"name": "losses_ly", "description": "Total Paid and trial Losses for the month last year", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate_ly": {"name": "paid_churn_rate_ly", "description": "paid churn rate last year", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate_ly": {"name": "total_churn_rate_ly", "description": "total churn rate last year", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_ly": {"name": "eom_total_subs_ly", "description": "end of month total subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "adp_ly": {"name": "adp_ly", "description": "average daily paid subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_f": {"name": "paid_winbacks_f", "description": "All paid winback subscriptions for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "new_paid_f": {"name": "new_paid_f", "description": "All paid subscriptions who have paid for the first time forecasted", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_f": {"name": "free_trial_subs_f", "description": "Total trial adds for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "losses_f": {"name": "losses_f", "description": "Total Paid and trial Losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_f": {"name": "eom_total_subs_f", "description": "end of month total subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "adp_f": {"name": "adp_f", "description": "average daily paid subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched": {"name": "mnthly_total_hours_watched", "description": "Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub": {"name": "mnthly_avg_hours_per_sub", "description": "average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate": {"name": "lst_mnth_subs_viewing_cohort_rate", "description": "viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched_ly": {"name": "mnthly_total_hours_watched_ly", "description": "last year Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub_ly": {"name": "mnthly_avg_hours_per_sub_ly", "description": "last year average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate_ly": {"name": "lst_mnth_subs_viewing_cohort_rate_ly", "description": "last year viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_monthly_network_kpis_vkm.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_network_kpis_vkm\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_network_kpis_vkm\""}, "error": null, "status": null, "execution_time": 0.02914142608642578, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.133578Z", "completed_at": "2020-09-21T17:49:02.161757Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.162218Z", "completed_at": "2020-09-21T17:49:02.162233Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_cp',\n    \"materialized\": \"view\"\n  })\n}}\n\nselect * from {{ref('rpt_cp_monthly_global_consumption_by_platform')}}", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "view", "vw_rpt_cp_monthly_global_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cp/view/vw_rpt_cp_monthly_global_consumption_by_platform.sql", "original_file_path": "models/fds_cp/view/vw_rpt_cp_monthly_global_consumption_by_platform.sql", "name": "vw_rpt_cp_monthly_global_consumption_by_platform", "resource_type": "model", "alias": "vw_rpt_cp_monthly_global_consumption_by_platform", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": []}, "tags": [], "refs": [["rpt_cp_monthly_global_consumption_by_platform"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform"]}, "description": "## Implementation Detail\n*   Date        : 07/14/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_cp_monthly_global_consumption_by_platform\n*   Schema\t: fds_cp\n*   Contributor : Sandeep Battula\n*   Description : Monthly Cross Platform Global Content Consumption aggregate table consists of consumption metrics Views and Hours watched with country and \tregion details for all cross platforms. This script inserts last month data for platforms- Youtube, Facebook, WWE.Com and WWE App, Instagram, Snapchat and Twitter from respective source tables on monthly basis (5th of every month). Inaddition to the latest month, metrics are also calculated and inserted for previous month, year-to-date and previous year-to-date. \n\n## Maintenance Log\n* Date : 07/14/2020 ; Developer: Sandeep Battula ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"platform": {"name": "platform", "description": "name of cross platform", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "platform type where applicable", "meta": {}, "data_type": null, "tags": []}, "type2": {"name": "type2", "description": "network premium type for International TV - Pay or FTA", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "geographical region based on country", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "country", "meta": {}, "data_type": null, "tags": []}, "month": {"name": "month", "description": "view month", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "total views for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "hours_watched": {"name": "hours_watched", "description": "total hours watched for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "total views for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_hours": {"name": "prev_month_hours", "description": "total hours watched for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_views": {"name": "ytd_views", "description": "total year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_hours_watched": {"name": "ytd_hours_watched", "description": "total year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "total previous year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_hours": {"name": "prev_year_hours", "description": "total previous year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/view/vw_rpt_cp_monthly_global_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"rpt_cp_monthly_global_consumption_by_platform\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"rpt_cp_monthly_global_consumption_by_platform\""}, "error": null, "status": null, "execution_time": 0.016693115234375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.185197Z", "completed_at": "2020-09-21T17:49:02.201071Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.201367Z", "completed_at": "2020-09-21T17:49:02.201376Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schema\": 'fds_cp',\n    \"materialized\": \"view\"\n  })\n}}\nselect * from {{ref('rpt_cp_weekly_consolidated_kpi')}}\nunion all\nselect * from {{ref('rpt_le_weekly_consolidated_kpi')}}", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "view", "vw_rpt_cp_weekly_consolidated_kpi"], "unique_id": "model.analytics_engineering_marts.vw_rpt_cp_weekly_consolidated_kpi", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_cp/view/vw_rpt_cp_weekly_consolidated_kpi.sql", "original_file_path": "models/fds_cp/view/vw_rpt_cp_weekly_consolidated_kpi.sql", "name": "vw_rpt_cp_weekly_consolidated_kpi", "resource_type": "model", "alias": "vw_rpt_cp_weekly_consolidated_kpi", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": []}, "tags": [], "refs": [["rpt_cp_weekly_consolidated_kpi"], ["rpt_le_weekly_consolidated_kpi"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi", "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/view/vw_rpt_cp_weekly_consolidated_kpi.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_cp_weekly_consolidated_kpi\"\nunion all\nselect * from \"entdwdb\".\"fds_le\".\"rpt_le_weekly_consolidated_kpi\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_cp_weekly_consolidated_kpi\"\nunion all\nselect * from \"entdwdb\".\"fds_le\".\"rpt_le_weekly_consolidated_kpi\""}, "error": null, "status": null, "execution_time": 0.014551401138305664, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.202102Z", "completed_at": "2020-09-21T17:49:02.215669Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.216090Z", "completed_at": "2020-09-21T17:49:02.216102Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\"schemas\": 'fds_nplus',\t\n\t\"materialized\": 'view'\n\t\t})\n}}\nselect * from {{ref('rpt_network_ppv_actuals_estimates_forecast')}}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_network_ppv_actuals_estimates_forecast"], "unique_id": "model.analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_rpt_network_ppv_actuals_estimates_forecast.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_network_ppv_actuals_estimates_forecast.sql", "name": "vw_rpt_network_ppv_actuals_estimates_forecast", "resource_type": "model", "alias": "vw_rpt_network_ppv_actuals_estimates_forecast", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [["rpt_network_ppv_actuals_estimates_forecast"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_network_ppv_actuals_estimates_forecast.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_actuals_estimates_forecast\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_actuals_estimates_forecast\""}, "error": null, "status": null, "execution_time": 0.014484167098999023, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.217091Z", "completed_at": "2020-09-21T17:49:02.230814Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.231122Z", "completed_at": "2020-09-21T17:49:02.231135Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n    \"schemas\": 'fds_nplus',\n\t\"materialized\": 'view',\n\t})\n}}\nselect * from {{ref('rpt_network_ppv_liveplusvod')}}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_network_ppv_liveplusvod"], "unique_id": "model.analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nplus/views/vw_rpt_network_ppv_liveplusvod.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_network_ppv_liveplusvod.sql", "name": "vw_rpt_network_ppv_liveplusvod", "resource_type": "model", "alias": "vw_rpt_network_ppv_liveplusvod", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "schemas": "fds_nplus"}, "tags": [], "refs": [["rpt_network_ppv_liveplusvod"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_network_ppv_liveplusvod"]}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_network_ppv_liveplusvod\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : View contains the information related to Live NXT and HOF evenet\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"asset_id": {"name": "asset_id", "description": "The ID for a YouTube channel. In the YouTube Data API, this is the value of a channelresources id property.", "meta": {}, "data_type": null, "tags": []}, "production_id": {"name": "production_id", "description": "Unique content version level id", "meta": {}, "data_type": null, "tags": []}, "event": {"name": "event", "description": "Event name and year", "meta": {}, "data_type": null, "tags": []}, "event_name": {"name": "event_name", "description": "Event name", "meta": {}, "data_type": null, "tags": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "start timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "end timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "platform": {"name": "platform", "description": "platform name i.e. Facebook, Youtube, etc", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "number of views for the event", "meta": {}, "data_type": null, "tags": []}, "us_views": {"name": "us_views", "description": "number of views in US for the event", "meta": {}, "data_type": null, "tags": []}, "minutes": {"name": "minutes", "description": "number of minutes watched", "meta": {}, "data_type": null, "tags": []}, "per_us_views": {"name": "per_us_views", "description": "percentage of views in US against overall views", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "previous month views", "meta": {}, "data_type": null, "tags": []}, "prev_month_event": {"name": "prev_month_event", "description": "previous month event name", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "previous year views", "meta": {}, "data_type": null, "tags": []}, "prev_year_event": {"name": "prev_year_event", "description": "previous year event name", "meta": {}, "data_type": null, "tags": []}, "monthly_per_change_views": {"name": "monthly_per_change_views", "description": "monthly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "yearly_per_change_views": {"name": "yearly_per_change_views", "description": "yearly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "duration of the event", "meta": {}, "data_type": null, "tags": []}, "overall_rank": {"name": "overall_rank", "description": "overall rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "yearly_rank": {"name": "yearly_rank", "description": "yearly rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "tier": {"name": "tier", "description": "event tier", "meta": {}, "data_type": null, "tags": []}, "monthly_color": {"name": "monthly_color", "description": "color metric for the month", "meta": {}, "data_type": null, "tags": []}, "yearly_color": {"name": "yearly_color", "description": "color metric for the year", "meta": {}, "data_type": null, "tags": []}, "choose_ppv": {"name": "choose_ppv", "description": "prior or most recent ppv", "meta": {}, "data_type": null, "tags": []}, "event_brand": {"name": "event_brand", "description": "event brand i.e. PPV, NXT or Hall of Fame", "meta": {}, "data_type": null, "tags": []}, "report_name": {"name": "report_name", "description": "name of the report i.e. Kickoff show, The Bump etc", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "name of the series", "meta": {}, "data_type": null, "tags": []}, "account": {"name": "account", "description": "account name of the platform", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "platform url of the event", "meta": {}, "data_type": null, "tags": []}, "content_wweid": {"name": "content_wweid", "description": "unique identifier for the event", "meta": {}, "data_type": null, "tags": []}, "data_level": {"name": "data_level", "description": "identifier for Live data and Live+VOD data", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_network_ppv_liveplusvod.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_liveplusvod\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_liveplusvod\""}, "error": null, "status": null, "execution_time": 0.021318435668945312, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.231803Z", "completed_at": "2020-09-21T17:49:02.252438Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.252720Z", "completed_at": "2020-09-21T17:49:02.252729Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"pre-hook\": [\"truncate fds_nl.rpt_nl_daily_minxmin_lite_log_ratings\"],\n\t\t\"materialized\": 'incremental','tags': \"Phase4B\"\n  })\n}}\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, \nsrc_market_break, src_daypart_name, src_playback_period_cd, src_demographic_group, mxm_source, \nprogram_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct, b.*,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom {{source('fds_nl','fact_nl_minxmin_ratings')}} a\njoin {{ref('intm_nl_lite_log_est')}} b on trunc(a.broadcast_date) = b.airdate\nand lower(trim(a.mxm_source)) = lower(trim(b.title)) and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp))\n>= b.modified_inpoint and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp)) \n< b.modified_outpoint \nwhere a.min_of_pgm_value is not null and a.program_telecast_rpt_starttime is not null \nand a.program_telecast_rpt_starttime <> ' '", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_minxmin_lite_log_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/aggregate/rpt_nl_daily_minxmin_lite_log_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_minxmin_lite_log_ratings.sql", "name": "rpt_nl_daily_minxmin_lite_log_ratings", "resource_type": "model", "alias": "rpt_nl_daily_minxmin_lite_log_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_nl.rpt_nl_daily_minxmin_lite_log_ratings", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_nl_lite_log_est"]], "sources": [["fds_nl", "fact_nl_minxmin_ratings"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings", "model.analytics_engineering_marts.intm_nl_lite_log_est"]}, "description": "## Implementation Detail\n*   Date        : 08/17/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_minxmin_lite_log_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : Minute By Minture Ratings joining with Lite Log Report table consist of ratings of segments along with its details referencing from Minute By Minute Ratings and Lite Log tables on daily-basis\n\n## Maintenance Log\n* Date : 08/17/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the program is broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Broadcast Network Channel Name", "meta": {}, "data_type": null, "tags": []}, "src_program_name": {"name": "src_program_name", "description": "Name of the Program", "meta": {}, "data_type": null, "tags": []}, "src_market_break": {"name": "src_market_break", "description": "Identified Market break category by the broadcast network", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "Name of the day part when program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "mxm_source": {"name": "mxm_source", "description": "The source information for each feed type available for the minute by minute ratings", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_starttime": {"name": "program_telecast_rpt_starttime", "description": "Program Telecast Report Start Time", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_endtime": {"name": "program_telecast_rpt_endtime", "description": "Program Telecast Report End Time", "meta": {}, "data_type": null, "tags": []}, "min_of_pgm_value": {"name": "min_of_pgm_value", "description": "Metrics for Minute of program value", "meta": {}, "data_type": null, "tags": []}, "most_current_audience_avg_pct": {"name": "most_current_audience_avg_pct", "description": "Metrics for most current audience average percentage value", "meta": {}, "data_type": null, "tags": []}, "most_current_us_audience_avg_proj_000": {"name": "most_current_us_audience_avg_proj_000", "description": "Metrics for most current US audience average projection in thousands", "meta": {}, "data_type": null, "tags": []}, "most_current_nw_cvg_area_avg_pct": {"name": "most_current_nw_cvg_area_avg_pct", "description": "Metrics for most current network coverage areas average percentage", "meta": {}, "data_type": null, "tags": []}, "showdbid": {"name": "showdbid", "description": "Show DB ID to uniquely identify the lite log of the program telecasted at a time", "meta": {}, "data_type": null, "tags": []}, "title": {"name": "title", "description": "Title of the Program like NXT, RAW, SmackDown, etc.", "meta": {}, "data_type": null, "tags": []}, "subtitle": {"name": "subtitle", "description": "Subtitle of the program", "meta": {}, "data_type": null, "tags": []}, "episodenumber": {"name": "episodenumber", "description": "Episode Number", "meta": {}, "data_type": null, "tags": []}, "airdate": {"name": "airdate", "description": "The date on when the program aired", "meta": {}, "data_type": null, "tags": []}, "inpoint": {"name": "inpoint", "description": "The starting time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "outpoint": {"name": "outpoint", "description": "The end time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "inpoint_24hr_est": {"name": "inpoint_24hr_est", "description": "The starting time of the particular segment converted to 24Hr Clock", "meta": {}, "data_type": null, "tags": []}, "modified_inpoint": {"name": "modified_inpoint", "description": "Modified starting time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "modified_outpoint": {"name": "modified_outpoint", "description": "Modified end time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "segmenttype": {"name": "segmenttype", "description": "Type of Segment", "meta": {}, "data_type": null, "tags": []}, "comment": {"name": "comment", "description": "The comment about the segment", "meta": {}, "data_type": null, "tags": []}, "matchtype": {"name": "matchtype", "description": "Type of the Match", "meta": {}, "data_type": null, "tags": []}, "talentactions": {"name": "talentactions", "description": "Describing the actions of talents", "meta": {}, "data_type": null, "tags": []}, "move": {"name": "move", "description": "Describing the move", "meta": {}, "data_type": null, "tags": []}, "finishtype": {"name": "finishtype", "description": "The type of finish", "meta": {}, "data_type": null, "tags": []}, "recorddate": {"name": "recorddate", "description": "The date on when the program recorded", "meta": {}, "data_type": null, "tags": []}, "fileid": {"name": "fileid", "description": "The File ID field", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "Duration of the Segment", "meta": {}, "data_type": null, "tags": []}, "additionaltalent": {"name": "additionaltalent", "description": "gives the details of additional talents", "meta": {}, "data_type": null, "tags": []}, "announcers": {"name": "announcers", "description": "Announcers of the program", "meta": {}, "data_type": null, "tags": []}, "matchtitle": {"name": "matchtitle", "description": "Title of the match", "meta": {}, "data_type": null, "tags": []}, "venuelocation": {"name": "venuelocation", "description": "Venue Location of the Program", "meta": {}, "data_type": null, "tags": []}, "venuename": {"name": "venuename", "description": "Venue Name of the Program", "meta": {}, "data_type": null, "tags": []}, "issegmentmarker": {"name": "issegmentmarker", "description": "Segment Marker", "meta": {}, "data_type": null, "tags": []}, "logentrydbid": {"name": "logentrydbid", "description": "Log Entry DB ID Field", "meta": {}, "data_type": null, "tags": []}, "logentryguid": {"name": "logentryguid", "description": "Log Entry Guide", "meta": {}, "data_type": null, "tags": []}, "loggername": {"name": "loggername", "description": "Name of the Logger", "meta": {}, "data_type": null, "tags": []}, "logname": {"name": "logname", "description": "Log Name", "meta": {}, "data_type": null, "tags": []}, "masterclipid": {"name": "masterclipid", "description": "Master Clip ID", "meta": {}, "data_type": null, "tags": []}, "modifieddatetime": {"name": "modifieddatetime", "description": "Modified Date Time", "meta": {}, "data_type": null, "tags": []}, "networkassetid": {"name": "networkassetid", "description": "Network Asset ID", "meta": {}, "data_type": null, "tags": []}, "sponsors": {"name": "sponsors", "description": "Sponsors of the Program", "meta": {}, "data_type": null, "tags": []}, "weapon": {"name": "weapon", "description": "Weapons used", "meta": {}, "data_type": null, "tags": []}, "season": {"name": "season", "description": "Season details", "meta": {}, "data_type": null, "tags": []}, "source_ffed_name": {"name": "source_ffed_name", "description": "source_ffed_name", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_minxmin_lite_log_ratings.sql", "compiled": true, "compiled_sql": "\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, \nsrc_market_break, src_daypart_name, src_playback_period_cd, src_demographic_group, mxm_source, \nprogram_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct, b.*,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" a\njoin __dbt__CTE__intm_nl_lite_log_est b on trunc(a.broadcast_date) = b.airdate\nand lower(trim(a.mxm_source)) = lower(trim(b.title)) and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp))\n>= b.modified_inpoint and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp)) \n< b.modified_outpoint \nwhere a.min_of_pgm_value is not null and a.program_telecast_rpt_starttime is not null \nand a.program_telecast_rpt_starttime <> ' '", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "sql": " __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_lite_log_est", "sql": " __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n),  __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)select broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, \nsrc_market_break, src_daypart_name, src_playback_period_cd, src_demographic_group, mxm_source, \nprogram_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct, b.*,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" a\njoin __dbt__CTE__intm_nl_lite_log_est b on trunc(a.broadcast_date) = b.airdate\nand lower(trim(a.mxm_source)) = lower(trim(b.title)) and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp))\n>= b.modified_inpoint and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp)) \n< b.modified_outpoint \nwhere a.min_of_pgm_value is not null and a.program_telecast_rpt_starttime is not null \nand a.program_telecast_rpt_starttime <> ' '"}, "error": null, "status": null, "execution_time": 0.04549145698547363, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.301162Z", "completed_at": "2020-09-21T17:49:02.345826Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.346233Z", "completed_at": "2020-09-21T17:49:02.346244Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_country_vh\n   Schema\t   : fds_kntr\n   Contributor : Hima Dasan\n   Description : View calculates actual viewing hour on monthly basis and calculates estimate value for last month\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\n\nselect substring(broadcast_month_year, 5, 2) as broadcast_month,\n       substring(broadcast_month_year, 1, 4) as broadcast_year,\n       region, \n\t   src_country, \n\t   broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \ncase \n\twhen broadcast_month_year = to_char((add_months(current_date, -1)), 'YYYYMM')  then\n\t\tavg(viewing_hours) over (\n\t\t                          partition by region, src_country, broadcast_network_prem_type, \n\t\t                                       src_demographic_group, src_demographic_age \n\t\t                              order by broadcast_month_year desc  \n\t\t\t\t\t\t\t\t rows between 1 following and 3 following\n\t\t\t\t\t\t\t\t)\n\telse (viewing_hours) end as viewing_hours\nfrom (\n      select broadcast_month_year,\n             region, src_country, broadcast_network_prem_type, \n\t\t\t src_demographic_group, src_demographic_age,viewing_hours \n      from {{ref('intm_kntr_monthly_country_vh')}}\n\n      union \n      select broadcast_month_year,\n             region, src_country, broadcast_network_prem_type, \n\t\t\t src_demographic_group, src_demographic_age,0 as viewing_hours \n\t  from  {{ref('intm_kntr_previous_month_value')}}\n\n    )", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_country_vh"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_monthly_country_vh.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_country_vh.sql", "name": "vw_aggr_kntr_monthly_country_vh", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_country_vh", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_monthly_country_vh"], ["intm_kntr_previous_month_value"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "model.analytics_engineering_marts.intm_kntr_previous_month_value"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_monthly_country_vh\n*   Schema\t: fds_kntr\n*   Contributor : Hima Dasan\n*   Description : View calculates actual viewing hour on monthly basis and calculates estimate value for last month for all WWE programs\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "The broadcast month based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "The broadcast year based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Average monthly viewing Hours by specified demographic group", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_country_vh.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_country_vh\n   Schema\t   : fds_kntr\n   Contributor : Hima Dasan\n   Description : View calculates actual viewing hour on monthly basis and calculates estimate value for last month\n*************************************************************************************************************************************************\n*/\n\n\n\nselect substring(broadcast_month_year, 5, 2) as broadcast_month,\n       substring(broadcast_month_year, 1, 4) as broadcast_year,\n       region, \n\t   src_country, \n\t   broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \ncase \n\twhen broadcast_month_year = to_char((add_months(current_date, -1)), 'YYYYMM')  then\n\t\tavg(viewing_hours) over (\n\t\t                          partition by region, src_country, broadcast_network_prem_type, \n\t\t                                       src_demographic_group, src_demographic_age \n\t\t                              order by broadcast_month_year desc  \n\t\t\t\t\t\t\t\t rows between 1 following and 3 following\n\t\t\t\t\t\t\t\t)\n\telse (viewing_hours) end as viewing_hours\nfrom (\n      select broadcast_month_year,\n             region, src_country, broadcast_network_prem_type, \n\t\t\t src_demographic_group, src_demographic_age,viewing_hours \n      from __dbt__CTE__intm_kntr_monthly_country_vh\n\n      union \n      select broadcast_month_year,\n             region, src_country, broadcast_network_prem_type, \n\t\t\t src_demographic_group, src_demographic_age,0 as viewing_hours \n\t  from  __dbt__CTE__intm_kntr_previous_month_value\n\n    )", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "sql": " __dbt__CTE__intm_kntr_monthly_country_vh as (\n\n\nselect to_char(broadcast_date :: date, 'YYYYMM') as broadcast_month_year,\ncase \n   when upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n        else b.region end as region,\n       src_country, \n       broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \nsum(watched_mins/60) as viewing_hours \nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country) = upper(b.country)\nwhere to_char(broadcast_date :: date, 'YYYYMM') < to_char(current_date, 'YYYYMM')\ngroup by 1,2,3,4,5,6\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_previous_month_value", "sql": " __dbt__CTE__intm_kntr_previous_month_value as (\n\n\nselect to_char((add_months(current_date, -1)), 'YYYYMM') as broadcast_month_year, \nregion, \nsrc_country, \nbroadcast_network_prem_type, \nsrc_demographic_group,\n src_demographic_age \n from (\nselect  \nregion, src_country, broadcast_network_prem_type, src_demographic_group, src_demographic_age ,\nmax(broadcast_month_year) as max_mon_year \n from __dbt__CTE__intm_kntr_monthly_country_vh\ngroup by 1,2,3,4,5 \n) where max_mon_year <> to_char((add_months(current_date, -1)), 'YYYYMM')\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_monthly_country_vh as (\n\n\nselect to_char(broadcast_date :: date, 'YYYYMM') as broadcast_month_year,\ncase \n   when upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n        else b.region end as region,\n       src_country, \n       broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \nsum(watched_mins/60) as viewing_hours \nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country) = upper(b.country)\nwhere to_char(broadcast_date :: date, 'YYYYMM') < to_char(current_date, 'YYYYMM')\ngroup by 1,2,3,4,5,6\n),  __dbt__CTE__intm_kntr_previous_month_value as (\n\n\nselect to_char((add_months(current_date, -1)), 'YYYYMM') as broadcast_month_year, \nregion, \nsrc_country, \nbroadcast_network_prem_type, \nsrc_demographic_group,\n src_demographic_age \n from (\nselect  \nregion, src_country, broadcast_network_prem_type, src_demographic_group, src_demographic_age ,\nmax(broadcast_month_year) as max_mon_year \n from __dbt__CTE__intm_kntr_monthly_country_vh\ngroup by 1,2,3,4,5 \n) where max_mon_year <> to_char((add_months(current_date, -1)), 'YYYYMM')\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_country_vh\n   Schema\t   : fds_kntr\n   Contributor : Hima Dasan\n   Description : View calculates actual viewing hour on monthly basis and calculates estimate value for last month\n*************************************************************************************************************************************************\n*/\n\n\n\nselect substring(broadcast_month_year, 5, 2) as broadcast_month,\n       substring(broadcast_month_year, 1, 4) as broadcast_year,\n       region, \n\t   src_country, \n\t   broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \ncase \n\twhen broadcast_month_year = to_char((add_months(current_date, -1)), 'YYYYMM')  then\n\t\tavg(viewing_hours) over (\n\t\t                          partition by region, src_country, broadcast_network_prem_type, \n\t\t                                       src_demographic_group, src_demographic_age \n\t\t                              order by broadcast_month_year desc  \n\t\t\t\t\t\t\t\t rows between 1 following and 3 following\n\t\t\t\t\t\t\t\t)\n\telse (viewing_hours) end as viewing_hours\nfrom (\n      select broadcast_month_year,\n             region, src_country, broadcast_network_prem_type, \n\t\t\t src_demographic_group, src_demographic_age,viewing_hours \n      from __dbt__CTE__intm_kntr_monthly_country_vh\n\n      union \n      select broadcast_month_year,\n             region, src_country, broadcast_network_prem_type, \n\t\t\t src_demographic_group, src_demographic_age,0 as viewing_hours \n\t  from  __dbt__CTE__intm_kntr_previous_month_value\n\n    )"}, "error": null, "status": null, "execution_time": 0.02581787109375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.401543Z", "completed_at": "2020-09-21T17:49:02.426346Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.426865Z", "completed_at": "2020-09-21T17:49:02.426879Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, src_playback_period_cd, \nsrc_demographic_group, program_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct,\nshowdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, modified_inpoint, modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, \nannouncers, matchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name\nfrom {{ref('rpt_nl_daily_minxmin_lite_log_ratings')}}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_daily_minxmin_lite_log_ratings"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_rpt_nl_daily_minxmin_lite_log_ratings.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_daily_minxmin_lite_log_ratings.sql", "name": "vw_rpt_nl_daily_minxmin_lite_log_ratings", "resource_type": "model", "alias": "vw_rpt_nl_daily_minxmin_lite_log_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "## Implementation Detail\n*   Date        : 08/17/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_nl_daily_minxmin_lite_log_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : Minute By Minture Ratings joining with Lite Log Report View consist of ratings of segments along with its details referencing from Minute By Minute Ratings joining with Lite Log daily table\n\n## Maintenance Log\n* Date : 08/17/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the program is broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Broadcast Network Channel Name", "meta": {}, "data_type": null, "tags": []}, "src_program_name": {"name": "src_program_name", "description": "Name of the Program", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_starttime": {"name": "program_telecast_rpt_starttime", "description": "Program Telecast Report Start Time", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_endtime": {"name": "program_telecast_rpt_endtime", "description": "Program Telecast Report End Time", "meta": {}, "data_type": null, "tags": []}, "min_of_pgm_value": {"name": "min_of_pgm_value", "description": "Metrics for Minute of program value", "meta": {}, "data_type": null, "tags": []}, "most_current_audience_avg_pct": {"name": "most_current_audience_avg_pct", "description": "Metrics for most current audience average percentage value", "meta": {}, "data_type": null, "tags": []}, "most_current_us_audience_avg_proj_000": {"name": "most_current_us_audience_avg_proj_000", "description": "Metrics for most current US audience average projection in thousands", "meta": {}, "data_type": null, "tags": []}, "most_current_nw_cvg_area_avg_pct": {"name": "most_current_nw_cvg_area_avg_pct", "description": "Metrics for most current network coverage areas average percentage", "meta": {}, "data_type": null, "tags": []}, "showdbid": {"name": "showdbid", "description": "Show DB ID to uniquely identify the lite log of the program telecasted at a time", "meta": {}, "data_type": null, "tags": []}, "title": {"name": "title", "description": "Title of the Program like NXT, RAW, SmackDown, etc.", "meta": {}, "data_type": null, "tags": []}, "subtitle": {"name": "subtitle", "description": "Subtitle of the program", "meta": {}, "data_type": null, "tags": []}, "episodenumber": {"name": "episodenumber", "description": "Episode Number", "meta": {}, "data_type": null, "tags": []}, "airdate": {"name": "airdate", "description": "The date on when the program aired", "meta": {}, "data_type": null, "tags": []}, "inpoint": {"name": "inpoint", "description": "The starting time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "outpoint": {"name": "outpoint", "description": "The end time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "modified_inpoint": {"name": "modified_inpoint", "description": "Modified starting time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "modified_outpoint": {"name": "modified_outpoint", "description": "Modified end time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "segmenttype": {"name": "segmenttype", "description": "Type of Segment", "meta": {}, "data_type": null, "tags": []}, "comment": {"name": "comment", "description": "The comment about the segment", "meta": {}, "data_type": null, "tags": []}, "matchtype": {"name": "matchtype", "description": "Type of the Match", "meta": {}, "data_type": null, "tags": []}, "talentactions": {"name": "talentactions", "description": "Describing the actions of talents", "meta": {}, "data_type": null, "tags": []}, "move": {"name": "move", "description": "Describing the move", "meta": {}, "data_type": null, "tags": []}, "finishtype": {"name": "finishtype", "description": "The type of finish", "meta": {}, "data_type": null, "tags": []}, "recorddate": {"name": "recorddate", "description": "The date on when the program recorded", "meta": {}, "data_type": null, "tags": []}, "fileid": {"name": "fileid", "description": "The File ID field", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "Duration of the Segment", "meta": {}, "data_type": null, "tags": []}, "additionaltalent": {"name": "additionaltalent", "description": "gives the details of additional talents", "meta": {}, "data_type": null, "tags": []}, "announcers": {"name": "announcers", "description": "Announcers of the program", "meta": {}, "data_type": null, "tags": []}, "matchtitle": {"name": "matchtitle", "description": "Title of the match", "meta": {}, "data_type": null, "tags": []}, "venuelocation": {"name": "venuelocation", "description": "Venue Location of the Program", "meta": {}, "data_type": null, "tags": []}, "venuename": {"name": "venuename", "description": "Venue Name of the Program", "meta": {}, "data_type": null, "tags": []}, "issegmentmarker": {"name": "issegmentmarker", "description": "Segment Marker", "meta": {}, "data_type": null, "tags": []}, "logentrydbid": {"name": "logentrydbid", "description": "Log Entry DB ID Field", "meta": {}, "data_type": null, "tags": []}, "logentryguid": {"name": "logentryguid", "description": "Log Entry Guide", "meta": {}, "data_type": null, "tags": []}, "loggername": {"name": "loggername", "description": "Name of the Logger", "meta": {}, "data_type": null, "tags": []}, "logname": {"name": "logname", "description": "Log Name", "meta": {}, "data_type": null, "tags": []}, "masterclipid": {"name": "masterclipid", "description": "Master Clip ID", "meta": {}, "data_type": null, "tags": []}, "modifieddatetime": {"name": "modifieddatetime", "description": "Modified Date Time", "meta": {}, "data_type": null, "tags": []}, "networkassetid": {"name": "networkassetid", "description": "Network Asset ID", "meta": {}, "data_type": null, "tags": []}, "sponsors": {"name": "sponsors", "description": "Sponsors of the Program", "meta": {}, "data_type": null, "tags": []}, "weapon": {"name": "weapon", "description": "Weapons used", "meta": {}, "data_type": null, "tags": []}, "season": {"name": "season", "description": "Season details", "meta": {}, "data_type": null, "tags": []}, "source_ffed_name": {"name": "source_ffed_name", "description": "source_ffed_name", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_daily_minxmin_lite_log_ratings.sql", "compiled": true, "compiled_sql": "\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, src_playback_period_cd, \nsrc_demographic_group, program_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct,\nshowdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, modified_inpoint, modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, \nannouncers, matchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, src_playback_period_cd, \nsrc_demographic_group, program_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct,\nshowdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, modified_inpoint, modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, \nannouncers, matchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\""}, "error": null, "status": null, "execution_time": 0.02828240394592285, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.427605Z", "completed_at": "2020-09-21T17:49:02.455156Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.455466Z", "completed_at": "2020-09-21T17:49:02.455476Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "airdate", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere airdate is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere airdate is null\n\n", "column_name": "airdate"}, "error": null, "status": null, "execution_time": 0.010835647583007812, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.456150Z", "completed_at": "2020-09-21T17:49:02.465973Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.466408Z", "completed_at": "2020-09-21T17:49:02.466420Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "error": null, "status": null, "execution_time": 0.01035308837890625, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.467224Z", "completed_at": "2020-09-21T17:49:02.476675Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.477082Z", "completed_at": "2020-09-21T17:49:02.477094Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "duration", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere duration is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere duration is null\n\n", "column_name": "duration"}, "error": null, "status": null, "execution_time": 0.010350942611694336, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.477823Z", "completed_at": "2020-09-21T17:49:02.487267Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.487679Z", "completed_at": "2020-09-21T17:49:02.487690Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "inpoint", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint is null\n\n", "column_name": "inpoint"}, "error": null, "status": null, "execution_time": 0.010056734085083008, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.488408Z", "completed_at": "2020-09-21T17:49:02.497773Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.498059Z", "completed_at": "2020-09-21T17:49:02.498067Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "inpoint_24hr_est", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint_24hr_est is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint_24hr_est is null\n\n", "column_name": "inpoint_24hr_est"}, "error": null, "status": null, "execution_time": 0.010233640670776367, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.498740Z", "completed_at": "2020-09-21T17:49:02.508241Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.508534Z", "completed_at": "2020-09-21T17:49:02.508542Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "min_of_pgm_value", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere min_of_pgm_value is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere min_of_pgm_value is null\n\n", "column_name": "min_of_pgm_value"}, "error": null, "status": null, "execution_time": 0.011586189270019531, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.509178Z", "completed_at": "2020-09-21T17:49:02.520020Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.520326Z", "completed_at": "2020-09-21T17:49:02.520334Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "modified_inpoint", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_inpoint is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_inpoint is null\n\n", "column_name": "modified_inpoint"}, "error": null, "status": null, "execution_time": 0.01198720932006836, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.521034Z", "completed_at": "2020-09-21T17:49:02.532258Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.532586Z", "completed_at": "2020-09-21T17:49:02.532596Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "modified_outpoint", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_outpoint is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_outpoint is null\n\n", "column_name": "modified_outpoint"}, "error": null, "status": null, "execution_time": 0.010321617126464844, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.533195Z", "completed_at": "2020-09-21T17:49:02.542862Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.543143Z", "completed_at": "2020-09-21T17:49:02.543151Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "mxm_source", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere mxm_source is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere mxm_source is null\n\n", "column_name": "mxm_source"}, "error": null, "status": null, "execution_time": 0.010460615158081055, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.543755Z", "completed_at": "2020-09-21T17:49:02.553509Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.553784Z", "completed_at": "2020-09-21T17:49:02.553793Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "program_telecast_rpt_starttime", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere program_telecast_rpt_starttime is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere program_telecast_rpt_starttime is null\n\n", "column_name": "program_telecast_rpt_starttime"}, "error": null, "status": null, "execution_time": 0.011015176773071289, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.554452Z", "completed_at": "2020-09-21T17:49:02.564658Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.565037Z", "completed_at": "2020-09-21T17:49:02.565050Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "showdbid", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere showdbid is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere showdbid is null\n\n", "column_name": "showdbid"}, "error": null, "status": null, "execution_time": 0.011594295501708984, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.565739Z", "completed_at": "2020-09-21T17:49:02.576376Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.576799Z", "completed_at": "2020-09-21T17:49:02.576811Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "title", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_title"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_title", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_title.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_title", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_title", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_title.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere title is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere title is null\n\n", "column_name": "title"}, "error": null, "status": null, "execution_time": 0.010584354400634766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.577543Z", "completed_at": "2020-09-21T17:49:02.587206Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.587608Z", "completed_at": "2020-09-21T17:49:02.587619Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_kntr',\n\t\t\"pre-hook\": \"truncate fds_kntr.rpt_kntr_schedule_vh_data\",\n\t\t\"materialized\": 'incremental','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\nselect a.*, b.regional_viewing_hours,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom {{ref('intm_kntr_schedule_vh_data')}} a\nleft join {{ref('intm_kntr_region_vh')}} b on a.modified_month = b.modified_month and a.region = b.region \nand a.demographic_type = b.demographic_type and a.demographic_group_name = b.demographic_group_name", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate", "rpt_kntr_schedule_vh_data"], "unique_id": "model.analytics_engineering_marts.rpt_kntr_schedule_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/aggregate/rpt_kntr_schedule_vh_data.sql", "original_file_path": "models/fds_kntr/aggregate/rpt_kntr_schedule_vh_data.sql", "name": "rpt_kntr_schedule_vh_data", "resource_type": "model", "alias": "rpt_kntr_schedule_vh_data", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_kntr.rpt_kntr_schedule_vh_data", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intm_kntr_schedule_vh_data"], ["intm_kntr_region_vh"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_schedule_vh_data", "model.analytics_engineering_marts.intm_kntr_region_vh"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   TableName   : rpt_kntr_schedule_vh_data\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Schedule Viewing Hours Report table consist of rating and other details of WWE program schedule referencing from WWE Telecast Data table on daily-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"dim_date_id": {"name": "dim_date_id", "description": "The broadcast date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_weekday": {"name": "src_weekday", "description": "The day on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_name": {"name": "month_name", "description": "The month name on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_num": {"name": "month_num", "description": "The month number on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "modified_month": {"name": "modified_month", "description": "Derived from broadcast_date; day part of broadcast_date replaced with '01'", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "The broadcast year when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which WWE program telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic_type": {"name": "demographic_type", "description": "The type of demographic group watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "demographic_group_name": {"name": "demographic_group_name", "description": "The demographic group name who watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "src_series": {"name": "src_series", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "series_episode_name": {"name": "series_episode_name", "description": "Name of the content broadcast", "meta": {}, "data_type": null, "tags": []}, "series_episode_num": {"name": "series_episode_num", "description": "No.of episodes broadcast", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Indicates WWE series name", "meta": {}, "data_type": null, "tags": []}, "series_type": {"name": "series_type", "description": "Indicates WWE series type", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "End Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "duration_mins": {"name": "duration_mins", "description": "The duration of WWE Program in minutes", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "week_start_date": {"name": "week_start_date", "description": "Calendar Year Week Start Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "start_time_modified": {"name": "start_time_modified", "description": "The Start Time of WWE Program rounded off to the closest hour in timestamp format", "meta": {}, "data_type": null, "tags": []}, "channel_1": {"name": "channel_1", "description": "The value will be 'Others', if the channel is broadcasting for more than an year and percentage of viewership of the channel (compared to total viewership of country) is <=0.01", "meta": {}, "data_type": null, "tags": []}, "program_1": {"name": "program_1", "description": "The value will be 'Others' for the programs other than 'RAW', 'SMACKDOWN', 'NXT', 'PPV', 'SUNDAY DHAMAAL', 'SATURDAY NIGHT', 'TOTAL BELLAS' and 'TOTAL DIVAS'", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The average rating value of the WWE program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The viewing hours of WWE program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "aud": {"name": "aud", "description": "The average audience who watched the WWE Program", "meta": {}, "data_type": null, "tags": []}, "regional_viewing_hours": {"name": "regional_viewing_hours", "description": "The regional viewing hours of the demographic group on monthly-basis", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate/rpt_kntr_schedule_vh_data.sql", "compiled": true, "compiled_sql": "\nselect a.*, b.regional_viewing_hours,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom __dbt__CTE__intm_kntr_schedule_vh_data a\nleft join __dbt__CTE__intm_kntr_region_vh b on a.modified_month = b.modified_month and a.region = b.region \nand a.demographic_type = b.demographic_type and a.demographic_group_name = b.demographic_group_name", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_germany_high_income", "sql": " __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_channel_vh", "sql": " __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_vh", "sql": " __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_channel_1", "sql": " __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_schedule_vh_data", "sql": " __dbt__CTE__intm_kntr_schedule_vh_data as (\n\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_region_vh", "sql": " __dbt__CTE__intm_kntr_region_vh as (\n\nselect modified_month, region, demographic_type, demographic_group_name, sum(viewing_hours) as regional_viewing_hours\nfrom __dbt__CTE__intm_kntr_schedule_vh_data\ngroup by 1,2,3,4\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n),  __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n),  __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n),  __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n),  __dbt__CTE__intm_kntr_schedule_vh_data as (\n\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n),  __dbt__CTE__intm_kntr_region_vh as (\n\nselect modified_month, region, demographic_type, demographic_group_name, sum(viewing_hours) as regional_viewing_hours\nfrom __dbt__CTE__intm_kntr_schedule_vh_data\ngroup by 1,2,3,4\n)select a.*, b.regional_viewing_hours,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom __dbt__CTE__intm_kntr_schedule_vh_data a\nleft join __dbt__CTE__intm_kntr_region_vh b on a.modified_month = b.modified_month and a.region = b.region \nand a.demographic_type = b.demographic_type and a.demographic_group_name = b.demographic_group_name"}, "error": null, "status": null, "execution_time": 0.03152275085449219, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.692462Z", "completed_at": "2020-09-21T17:49:02.723253Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.723575Z", "completed_at": "2020-09-21T17:49:02.723586Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Switch behavior absolute value ranking table\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t\"schema\": 'fds_nl',\n\t\t\"pre-hook\": [\"truncate fds_nl.rpt_nl_weekly_channel_switch\"],\n\t\t\"materialized\": 'incremental','tags': 'Phase4B', \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,\na.src_broadcast_network_name,a.src_demographic_group,a.time_minute,\nmost_current_us_audience_avg_proj_000 as mc_us_aa000,\nabsolute_set_off_off_air,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\n b.switch_percent_rank as switch_percent_rank,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\n from {{ref('intermediate_nl_absolute_switch_stay_detail')}}  A \nleft  join {{ref('intermediate_nl_ranking')}}  b\n on a.broadcast_Date = b.broadcast_Date and\n a.src_broadcast_network_name = b.src_broadcast_network_name and\n a.src_demographic_group = b.src_demographic_group and \n a.time_minute = b.time_minute", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_weekly_channel_switch"], "unique_id": "model.analytics_engineering_marts.rpt_nl_weekly_channel_switch", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/aggregate/rpt_nl_weekly_channel_switch.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_weekly_channel_switch.sql", "name": "rpt_nl_weekly_channel_switch", "resource_type": "model", "alias": "rpt_nl_weekly_channel_switch", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_nl.rpt_nl_weekly_channel_switch", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["intermediate_nl_absolute_switch_stay_detail"], ["intermediate_nl_ranking"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "model.analytics_engineering_marts.intermediate_nl_ranking"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* TableName   : rpt_nl_weekly_channel_switch\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE and AEW Programs \n\n## Schedule Details\n* Frequency : Daily ; 12:00 A.M EST (Sun-Mon)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_weekly_live_switching_behavior_destination_dist_abac ; 12128,  t_di_nielsen_fact_nl_minxmin_ratings_aew_abac ; 12133, t_di_nielsen_fact_nl_minxmin_ratings_nxt_abac ; 12135, t_di_nielsen_fact_nl_minxmin_ratings_raw_abac ; 12136 and t_di_nielsen_fact_nl_minxmin_ratings_smackdown_abac ; 12137 (Sun-Mon)\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n* Date : 08/28/2020 ; Developer: Hima Dasan ; Change: Enhancement to remove commercial break minutes and starting and ending 5 minutes from ranking.", "columns": {"coverage_area": {"name": "coverage_area", "description": "NPOWER- Coverage Area", "meta": {}, "data_type": null, "tags": []}, "src_market_break": {"name": "src_market_break", "description": "Identified Marcket break category by the broadcast nework", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "broadcast_Date": {"name": "broadcast_Date", "description": "Broadcast date for the given channel", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Viewing source of the network channel", "meta": {}, "data_type": null, "tags": []}, "time_minute": {"name": "time_minute", "description": "minute of measurement the intervel of switching beahiour is measured", "meta": {}, "data_type": null, "tags": []}, "mc_us_aa000": {"name": "mc_us_aa000", "description": "Metrics for most current US audience average projection in thousants", "meta": {}, "data_type": null, "tags": []}, "absolute_stay": {"name": "absolute_stay", "description": "unique viewers who stayed in the same network", "meta": {}, "data_type": null, "tags": []}, "stay_percent": {"name": "stay_percent", "description": "percentage value of viewers stayed in same network", "meta": {}, "data_type": null, "tags": []}, "absolute_switch": {"name": "absolute_switch", "description": "unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent": {"name": "switch_percent", "description": "percentage value of unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent_rank": {"name": "switch_percent_rank", "description": "ranking based on percentage switch", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_weekly_channel_switch.sql", "compiled": true, "compiled_sql": "-- Switch behavior absolute value ranking table\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,\na.src_broadcast_network_name,a.src_demographic_group,a.time_minute,\nmost_current_us_audience_avg_proj_000 as mc_us_aa000,\nabsolute_set_off_off_air,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\n b.switch_percent_rank as switch_percent_rank,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\n from __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  A \nleft  join __dbt__CTE__intermediate_nl_ranking  b\n on a.broadcast_Date = b.broadcast_Date and\n a.src_broadcast_network_name = b.src_broadcast_network_name and\n a.src_demographic_group = b.src_demographic_group and \n a.time_minute = b.time_minute", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "sql": " __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "sql": " __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "sql": " __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_lite_log_est", "sql": " __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "sql": " __dbt__CTE__intermediate_nl_absolute_switch_stay_detail as (\n\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_ranking", "sql": " __dbt__CTE__intermediate_nl_ranking as (\n\n\n\n\n select a.broadcast_Date,a.src_broadcast_network_name,a.src_demographic_group,\n a.time_minute,\n dense_rank() over(partition by src_broadcast_network_name,broadcast_Date,src_demographic_group  order by \nswitch_percent desc NULLS LAST)\nas switch_percent_rank\nfrom __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  a\nwhere ((lower(a.source_name) in ('nxt','smackdown') and time_minute  between '20:05:00'\nand '21:54:00') or (lower(a.source_name) in ('raw') and time_minute  between '20:05:00'\nand '22:54:00')  or \n( lower(a.source_name)  in ('aew'))) and  comment is null\n)"}], "injected_sql": "with __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n),  __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n),  __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n),  __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n),  __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n),  __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n),  __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n),  __dbt__CTE__intermediate_nl_absolute_switch_stay_detail as (\n\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint\n),  __dbt__CTE__intermediate_nl_ranking as (\n\n\n\n\n select a.broadcast_Date,a.src_broadcast_network_name,a.src_demographic_group,\n a.time_minute,\n dense_rank() over(partition by src_broadcast_network_name,broadcast_Date,src_demographic_group  order by \nswitch_percent desc NULLS LAST)\nas switch_percent_rank\nfrom __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  a\nwhere ((lower(a.source_name) in ('nxt','smackdown') and time_minute  between '20:05:00'\nand '21:54:00') or (lower(a.source_name) in ('raw') and time_minute  between '20:05:00'\nand '22:54:00')  or \n( lower(a.source_name)  in ('aew'))) and  comment is null\n)-- Switch behavior absolute value ranking table\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,\na.src_broadcast_network_name,a.src_demographic_group,a.time_minute,\nmost_current_us_audience_avg_proj_000 as mc_us_aa000,\nabsolute_set_off_off_air,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\n b.switch_percent_rank as switch_percent_rank,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\n from __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  A \nleft  join __dbt__CTE__intermediate_nl_ranking  b\n on a.broadcast_Date = b.broadcast_Date and\n a.src_broadcast_network_name = b.src_broadcast_network_name and\n a.src_demographic_group = b.src_demographic_group and \n a.time_minute = b.time_minute"}, "error": null, "status": null, "execution_time": 0.027336597442626953, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.724243Z", "completed_at": "2020-09-21T17:49:02.750733Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.751133Z", "completed_at": "2020-09-21T17:49:02.751144Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect week_start_date, src_country, region, broadcast_network_prem_type, src_channel, demographic_type, \ndemographic_group_name, series_name, series_type, hd_flag, channel_1, program_1, sum(duration_mins/60.00) as duration_hours,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(aud) as weekly_cumulative_audience, count(*) as telecasts_count\nfrom {{ref('rpt_kntr_schedule_vh_data')}}\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_schedule_wca_data"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_aggr_kntr_schedule_wca_data.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_schedule_wca_data.sql", "name": "vw_aggr_kntr_schedule_wca_data", "resource_type": "model", "alias": "vw_aggr_kntr_schedule_wca_data", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_schedule_wca_data\n*   Schema\t    : fds_kntr\n*   Contributor : Hima Dasan\n*   Description : WWE Program Schedule Weekly Cumulative Audience Aggregate View consist of rating and other details of WWE program schedule referencing from Schedule VH Data Report Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "The week start date based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which WWE program telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic_type": {"name": "demographic_type", "description": "The type of demographic group watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "demographic_group_name": {"name": "demographic_group_name", "description": "The demographic group name who watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Indicates WWE series name", "meta": {}, "data_type": null, "tags": []}, "series_type": {"name": "series_type", "description": "Indicates WWE series type", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "channel_1": {"name": "channel_1", "description": "The value will be 'Others', if the channel is broadcasting for more than an year and percentage of viewership of the channel (compared to total viewership of country) is <=0.01", "meta": {}, "data_type": null, "tags": []}, "program_1": {"name": "program_1", "description": "The value will be 'Others' for the programs other than 'RAW', 'SMACKDOWN', 'NXT', 'PPV', 'SUNDAY DHAMAAL', 'SATURDAY NIGHT', 'TOTAL BELLAS' and 'TOTAL DIVAS'", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The weekly duration of WWE Program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The average weekly rating value of the WWE program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The weekly viewing hours of WWE program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "weekly_cumulative_audience": {"name": "weekly_cumulative_audience", "description": "The weekly cumulative audience", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "The count of telecasts on weekly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_schedule_wca_data.sql", "compiled": true, "compiled_sql": "\nselect week_start_date, src_country, region, broadcast_network_prem_type, src_channel, demographic_type, \ndemographic_group_name, series_name, series_type, hd_flag, channel_1, program_1, sum(duration_mins/60.00) as duration_hours,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(aud) as weekly_cumulative_audience, count(*) as telecasts_count\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect week_start_date, src_country, region, broadcast_network_prem_type, src_channel, demographic_type, \ndemographic_group_name, series_name, series_type, hd_flag, channel_1, program_1, sum(duration_mins/60.00) as duration_hours,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(aud) as weekly_cumulative_audience, count(*) as telecasts_count\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12"}, "error": null, "status": null, "execution_time": 0.016942977905273438, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.751807Z", "completed_at": "2020-09-21T17:49:02.768014Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.768322Z", "completed_at": "2020-09-21T17:49:02.768332Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect dim_date_id, broadcast_date, src_weekday, month_name, month_num, modified_month, year, src_country, region, \nbroadcast_network_prem_type, src_channel, demographic_type, demographic_group_name, src_series, series_episode_name,\nseries_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, start_time_modified,\nchannel_1, program_1, rat_value, viewing_hours, regional_viewing_hours\nfrom {{ref('rpt_kntr_schedule_vh_data')}}", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_rpt_kntr_schedule_vh_data"], "unique_id": "model.analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_kntr/view/vw_rpt_kntr_schedule_vh_data.sql", "original_file_path": "models/fds_kntr/view/vw_rpt_kntr_schedule_vh_data.sql", "name": "vw_rpt_kntr_schedule_vh_data", "resource_type": "model", "alias": "vw_rpt_kntr_schedule_vh_data", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_kntr_schedule_vh_data\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Schedule Viewing Hours Report View consist of rating and other details of WWE program schedule referencing from Schedule VH Data Report Table on daily-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"dim_date_id": {"name": "dim_date_id", "description": "The broadcast date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_weekday": {"name": "src_weekday", "description": "The day on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_name": {"name": "month_name", "description": "The month name on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_num": {"name": "month_num", "description": "The month number on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "modified_month": {"name": "modified_month", "description": "Derived from broadcast_date; day part of broadcast_date replaced with '01'", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "The broadcast year when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which WWE program telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic_type": {"name": "demographic_type", "description": "The type of demographic group watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "demographic_group_name": {"name": "demographic_group_name", "description": "The demographic group name who watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "src_series": {"name": "src_series", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "series_episode_name": {"name": "series_episode_name", "description": "Name of the content broadcast", "meta": {}, "data_type": null, "tags": []}, "series_episode_num": {"name": "series_episode_num", "description": "No.of episodes broadcast", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Indicates WWE series name", "meta": {}, "data_type": null, "tags": []}, "series_type": {"name": "series_type", "description": "Indicates WWE series type", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "End Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "duration_mins": {"name": "duration_mins", "description": "The duration of WWE Program in minutes", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "start_time_modified": {"name": "start_time_modified", "description": "The Start Time of WWE Program rounded off to the closest hour in timestamp format", "meta": {}, "data_type": null, "tags": []}, "channel_1": {"name": "channel_1", "description": "The value will be 'Others', if the channel is broadcasting for more than an year and percentage of viewership of the channel (compared to total viewership of country) is <=0.01", "meta": {}, "data_type": null, "tags": []}, "program_1": {"name": "program_1", "description": "The value will be 'Others' for the programs other than 'RAW', 'SMACKDOWN', 'NXT', 'PPV', 'SUNDAY DHAMAAL', 'SATURDAY NIGHT', 'TOTAL BELLAS' and 'TOTAL DIVAS'", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The average rating value of the WWE program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The viewing hours of WWE program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "regional_viewing_hours": {"name": "regional_viewing_hours", "description": "The regional viewing hours of the demographic group on monthly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_rpt_kntr_schedule_vh_data.sql", "compiled": true, "compiled_sql": "\nselect dim_date_id, broadcast_date, src_weekday, month_name, month_num, modified_month, year, src_country, region, \nbroadcast_network_prem_type, src_channel, demographic_type, demographic_group_name, src_series, series_episode_name,\nseries_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, start_time_modified,\nchannel_1, program_1, rat_value, viewing_hours, regional_viewing_hours\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect dim_date_id, broadcast_date, src_weekday, month_name, month_num, modified_month, year, src_country, region, \nbroadcast_network_prem_type, src_channel, demographic_type, demographic_group_name, src_series, series_episode_name,\nseries_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, start_time_modified,\nchannel_1, program_1, rat_value, viewing_hours, regional_viewing_hours\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\""}, "error": null, "status": null, "execution_time": 0.025182008743286133, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.768994Z", "completed_at": "2020-09-21T17:49:02.793165Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.793617Z", "completed_at": "2020-09-21T17:49:02.793630Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_kntr_schedule_vh_data') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_kntr_schedule_vh_data_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_kntr_schedule_vh_data_broadcast_date.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_rpt_kntr_schedule_vh_data_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_kntr_schedule_vh_data_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_rpt_kntr_schedule_vh_data_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "error": null, "status": null, "execution_time": 0.013209342956542969, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.794680Z", "completed_at": "2020-09-21T17:49:02.806913Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.807342Z", "completed_at": "2020-09-21T17:49:02.807352Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "dim_date_id", "model": "{{ ref('rpt_kntr_schedule_vh_data') }}"}}, "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_kntr_schedule_vh_data_dim_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_dim_date_id", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "schema_test/not_null_rpt_kntr_schedule_vh_data_dim_date_id.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_rpt_kntr_schedule_vh_data_dim_date_id", "resource_type": "test", "alias": "not_null_rpt_kntr_schedule_vh_data_dim_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR"}, "tags": ["schema"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_rpt_kntr_schedule_vh_data_dim_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere dim_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere dim_date_id is null\n\n", "column_name": "dim_date_id"}, "error": null, "status": null, "execution_time": 0.011061906814575195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.808036Z", "completed_at": "2020-09-21T17:49:02.818381Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.818696Z", "completed_at": "2020-09-21T17:49:02.818705Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Switch behavior absolute value ranking view\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'view','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nselect broadcast_Date,coverage_area,src_market_break,src_demographic_group\n,src_broadcast_network_name,time_minute,mc_us_aa000,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\nswitch_percent_rank\n from {{ref('rpt_nl_weekly_channel_switch')}}  A", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_weekly_channel_switch"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch", "package_name": "analytics_engineering_marts", "root_path": "/usr/src/develop/user-2/environment-7/repository-6", "path": "fds_nl/view/vw_rpt_nl_weekly_channel_switch.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_weekly_channel_switch.sql", "name": "vw_rpt_nl_weekly_channel_switch", "resource_type": "model", "alias": "vw_rpt_nl_weekly_channel_switch", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"]}, "tags": ["Phase4B"], "refs": [["rpt_nl_weekly_channel_switch"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_weekly_channel_switch"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* TableName   : vw_rpt_nl_weekly_channel_switch\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"coverage_area": {"name": "coverage_area", "description": "NPOWER- Coverage Area", "meta": {}, "data_type": null, "tags": []}, "src_market_break": {"name": "src_market_break", "description": "Identified Marcket break category by the broadcast nework", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "broadcast_Date": {"name": "broadcast_Date", "description": "Broadcast date for the given channel", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Viewing source of the network channel", "meta": {}, "data_type": null, "tags": []}, "time_minute": {"name": "time_minute", "description": "minute of measurement the intervel of switching beahiour is measured", "meta": {}, "data_type": null, "tags": []}, "mc_us_aa000": {"name": "mc_us_aa000", "description": "Metrics for most current US audience average projection in thousants", "meta": {}, "data_type": null, "tags": []}, "absolute_stay": {"name": "absolute_stay", "description": "unique viewers who stayed in the same network", "meta": {}, "data_type": null, "tags": []}, "stay_percent": {"name": "stay_percent", "description": "percentage value of viewers stayed in same network", "meta": {}, "data_type": null, "tags": []}, "absolute_switch": {"name": "absolute_switch", "description": "unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent": {"name": "switch_percent", "description": "percentage value of unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent_rank": {"name": "switch_percent_rank", "description": "ranking based on percentage switch", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_weekly_channel_switch.sql", "compiled": true, "compiled_sql": "-- Switch behavior absolute value ranking view\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_Date,coverage_area,src_market_break,src_demographic_group\n,src_broadcast_network_name,time_minute,mc_us_aa000,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\nswitch_percent_rank\n from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_channel_switch\"  A", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Switch behavior absolute value ranking view\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_Date,coverage_area,src_market_break,src_demographic_group\n,src_broadcast_network_name,time_minute,mc_us_aa000,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\nswitch_percent_rank\n from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_channel_switch\"  A"}, "error": null, "status": null, "execution_time": 0.015180826187133789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-09-21T17:49:02.819348Z", "completed_at": "2020-09-21T17:49:02.833811Z"}, {"name": "execute", "started_at": "2020-09-21T17:49:02.834128Z", "completed_at": "2020-09-21T17:49:02.834137Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-09-21T17:49:02.857726Z", "elapsed_time": 4.978976011276245}