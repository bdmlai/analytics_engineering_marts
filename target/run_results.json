{"results": [{"node": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_nplus',\t\r\n\t\"materialized\": 'incremental',\r\n\t\"pre-hook\":\"delete from fds_nplus.rpt_ntwrk_ppv_liveplusvod\r\n\t\t\t\twhere event_brand in (select distinct event_brand from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard \r\n\t\t\t\twhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date)  and data_level = 'Live'\"\r\n\t\t})\r\n}}\r\n\r\nwith live_manual as\r\n(select * from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard --dwh_read_write.live_plus_vod_manual_data \r\nwhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date),\r\nprior_change_live as\r\n(select a.*, prev_year_views, prev_year_event\r\n  from\r\n  (select platform,\r\n         views as prev_month_views,\r\n         event as prev_month_event,\r\n         event_brand\r\n  from fds_nplus.rpt_ntwrk_ppv_liveplusvod\r\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_month_event from live_manual)) as a \r\n  join \r\n  (select platform,\r\n         views as prev_year_views,\r\n         event as prev_year_event,\r\n         event_brand\r\n  from fds_nplus.rpt_ntwrk_ppv_liveplusvod\r\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_year_event from live_manual)) as b\r\n  on a.platform=b.platform\r\n  and a.event_brand = b.event_brand\r\n  where a.platform <> 'Total'),\r\nlive_manual_base as \r\n(select a.*,b.prev_month_views,b.prev_year_views, \r\ncase when a.platform = 'YouTube' then round(a.views*0.23)\r\n     else 0 end as us_views\r\nfrom live_manual a\r\nleft join\r\nprior_change_live b\r\non a.platform = b.platform\r\nand a.event_brand = b.event_brand),\r\nlive_nwk_unique_viewers as \r\n(select *\r\nfrom   (\r\n        select count(distinct a.customerid) as unique_viewers, 'PPV' as event_brand\r\n        from \r\n              (    \r\n                select b.*,\r\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')  --  (START TIME + 6 MINUTES, EST)\r\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')         -- (END TIME - 5 MINUTES, EST)\r\n                then 1 else 0 end as ppv_flag\r\n                from \r\n                    (\r\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \r\n                     from\r\n                       (\r\n                        select customerid, payload_data_cid,min_time,\r\n                        case when max_time is null then \r\n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\r\n                        else max_time end as max_time   \r\n                        from    \r\n                           (\r\n                           select customerid, payload_data_cid,\r\n                           min(min_time) as min_time,\r\n                           max(max_time) as max_time     \r\n                           from (     \r\n                                select *,\r\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\r\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\r\n                                from (\r\n                                SELECT distinct \r\n                                customerid, payload_data_ta,payload_data_cid,\r\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\r\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\r\n                                payload_data_device,payload_data_last_active_at \r\n                                FROM udl_nplus.stg_dice_stream_flattened \r\n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\r\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \r\n                                between \r\n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV'))       \r\n                                )\r\n                            group by customerid, payload_data_cid \r\n                            )\r\n                           ) c\r\n                         ) b where b.time_spent>=6\r\n               ) a where a.ppv_flag='1'\r\n        \r\n        union\r\n               \r\n        select count(distinct a.customerid) as unique_viewers, 'NXT' as event_brand\r\n        from \r\n              (    \r\n                select b.*,\r\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')  --  (START TIME + 6 MINUTES, EST)\r\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')         -- (END TIME - 5 MINUTES, EST)\r\n                then 1 else 0 end as nxt_flag\r\n                from \r\n                    (\r\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \r\n                     from\r\n                       (\r\n                        select customerid, payload_data_cid,min_time,\r\n                        case when max_time is null then \r\n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\r\n                        else max_time end as max_time   \r\n                        from    \r\n                           (\r\n                           select customerid, payload_data_cid,\r\n                           min(min_time) as min_time,\r\n                           max(max_time) as max_time     \r\n                           from (     \r\n                                select *,\r\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\r\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\r\n                                from (\r\n                                SELECT distinct \r\n                                customerid, payload_data_ta,payload_data_cid,\r\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\r\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\r\n                                payload_data_device,payload_data_last_active_at \r\n                                FROM udl_nplus.stg_dice_stream_flattened \r\n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\r\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \r\n                                between \r\n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT'))       \r\n                                )\r\n                            group by customerid, payload_data_cid \r\n                            )\r\n                           ) c\r\n                         ) b where b.time_spent>=6\r\n               ) a where a.nxt_flag='1'\r\n       )\r\n),\r\n\r\n\r\n\r\n\r\n\r\nlive_dotcom_plays as \r\n(select * \r\nfrom\r\n(\r\n        select max(sum_max_value_plays) as dotcom_plays,\r\n               min(sum_max_value_plays) as dotcom_us_plays,\r\n               'PPV' as event_brand\r\n        from (\r\n        select filter_id, filter_name,\r\n               sum(max_value) as sum_max_value_plays\r\n          from udl_nplus.raw_conviva_pulse_realtime\r\n         where account_name='WWE .Com'\r\n           and filter_id in ('138579','138580')   \r\n           and min_time_est between \r\n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') \r\n         group by filter_id,filter_name \r\n         )\r\nunion\r\n        select max(sum_max_value_plays) as dotcom_plays,\r\n               min(sum_max_value_plays) as dotcom_us_plays,\r\n               'NXT' as event_brand\r\n        from (\r\n        select filter_id, filter_name,\r\n               sum(max_value) as sum_max_value_plays\r\n          from udl_nplus.raw_conviva_pulse_realtime\r\n         where account_name='WWE .Com'\r\n           and filter_id in ('138579','138580')   \r\n           and min_time_est between \r\n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') \r\n         group by filter_id,filter_name \r\n         )\r\n)\r\n ),\r\n live_manual_base1 as \r\n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\r\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'PPV') \r\n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_plays from live_dotcom_plays where event_brand =  'PPV')\r\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'NXT') \r\n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_plays from live_dotcom_plays where event_brand =  'NXT')\r\n     else views end as views,\r\nminutes,prev_month_views,prev_year_views,\r\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'PPV') \r\n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'PPV')\r\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'NXT') \r\n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'NXT')\r\n     else us_views end as us_views\r\nfrom live_manual_base),\r\nlive_manual_base_total as \r\n(select * from\r\n(\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\r\nviews,minutes,prev_month_views,prev_year_views,us_views\r\nfrom live_manual_base1\r\nunion all\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,'Total' as platform,data_level,\r\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\r\nsum(views) as views,\r\nsum(minutes) as minutes,\r\nsum(prev_month_views) as prev_month_views,\r\nsum(prev_year_views) as prev_year_views,\r\nsum(us_views) as us_views\r\nfrom live_manual_base1\r\ngroup by \r\nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,data_level\r\n)),\r\nlive_consolidation as\r\n(select *  from\r\n(\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\r\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\r\nviews,minutes,prev_month_views,prev_year_views,us_views,\r\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \r\nfrom live_manual_base_total\r\nunion all\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\r\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\r\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \r\nfrom fds_nplus.rpt_ntwrk_ppv_liveplusvod where event_brand in (select distinct event_brand from live_manual) and data_level = 'Live'\r\nand event_date <> current_date)),\r\n\r\nlive_final as \r\n(select a.*, \r\n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\r\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\r\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\r\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\r\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \r\n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\r\n               else null end as yearly_rank,\r\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\r\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\r\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\r\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\r\n               else 'Tier 2' end as tier,\r\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\r\n          else '0' end as monthly_color,\r\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\r\n          else '0' end as yearly_color,\r\n          case when a.event_date=(select max(event_date) from live_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\r\n from live_consolidation a\r\n left join\r\n           (select platform, event,event_date,views,\r\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \r\n           from live_consolidation where current_date-event_date::date <=380 and event_brand = 'PPV') as b\r\non a.platform=b.platform\r\nand a.event=b.event\r\nand a.event_date=b.event_date\r\n left join\r\n           (select platform, event,event_date,views,\r\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \r\n           from live_consolidation where current_date-event_date::date <=735 and event_brand = 'NXT') as c\r\non a.platform=c.platform\r\nand a.event=c.event\r\nand a.event_date=c.event_date)\r\nselect report_name,series_name,account,url,0 as asset_id,content_wwe_id as content_wweid,production_id,\r\nevent,event_name,event_date,start_time,end_time,platform,views,us_views,minutes,per_us_views,\r\nprev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\r\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\r\nchoose_ppv,event_brand,data_level from live_final", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "rpt_ntwrk_ppv_liveplusvod"], "unique_id": "model.analytics_engineering_marts.rpt_ntwrk_ppv_liveplusvod", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/aggregate/rpt_ntwrk_ppv_liveplusvod.sql", "original_file_path": "models/fds_nplus/aggregate/rpt_ntwrk_ppv_liveplusvod.sql", "name": "rpt_ntwrk_ppv_liveplusvod", "resource_type": "model", "alias": "rpt_ntwrk_ppv_liveplusvod", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nplus.rpt_ntwrk_ppv_liveplusvod\n\t\t\t\twhere event_brand in (select distinct event_brand from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard \n\t\t\t\twhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date)  and data_level = 'Live'", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/run/analytics_engineering_marts/models/fds_nplus/aggregate/rpt_ntwrk_ppv_liveplusvod.sql", "compiled": true, "compiled_sql": "\n\nwith live_manual as\n(select * from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard --dwh_read_write.live_plus_vod_manual_data \nwhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date),\nprior_change_live as\n(select a.*, prev_year_views, prev_year_event\n  from\n  (select platform,\n         views as prev_month_views,\n         event as prev_month_event,\n         event_brand\n  from fds_nplus.rpt_ntwrk_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_month_event from live_manual)) as a \n  join \n  (select platform,\n         views as prev_year_views,\n         event as prev_year_event,\n         event_brand\n  from fds_nplus.rpt_ntwrk_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_year_event from live_manual)) as b\n  on a.platform=b.platform\n  and a.event_brand = b.event_brand\n  where a.platform <> 'Total'),\nlive_manual_base as \n(select a.*,b.prev_month_views,b.prev_year_views, \ncase when a.platform = 'YouTube' then round(a.views*0.23)\n     else 0 end as us_views\nfrom live_manual a\nleft join\nprior_change_live b\non a.platform = b.platform\nand a.event_brand = b.event_brand),\nlive_nwk_unique_viewers as \n(select *\nfrom   (\n        select count(distinct a.customerid) as unique_viewers, 'PPV' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as ppv_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.ppv_flag='1'\n        \n        union\n               \n        select count(distinct a.customerid) as unique_viewers, 'NXT' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as nxt_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.nxt_flag='1'\n       )\n),\n\n\n\n\n\nlive_dotcom_plays as \n(select * \nfrom\n(\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'PPV' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') \n         group by filter_id,filter_name \n         )\nunion\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'NXT' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') \n         group by filter_id,filter_name \n         )\n)\n ),\n live_manual_base1 as \n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_plays from live_dotcom_plays where event_brand =  'NXT')\n     else views end as views,\nminutes,prev_month_views,prev_year_views,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'NXT')\n     else us_views end as us_views\nfrom live_manual_base),\nlive_manual_base_total as \n(select * from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views\nfrom live_manual_base1\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,'Total' as platform,data_level,\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\nsum(views) as views,\nsum(minutes) as minutes,\nsum(prev_month_views) as prev_month_views,\nsum(prev_year_views) as prev_year_views,\nsum(us_views) as us_views\nfrom live_manual_base1\ngroup by \nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,data_level\n)),\nlive_consolidation as\n(select *  from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views,\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \nfrom live_manual_base_total\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \nfrom fds_nplus.rpt_ntwrk_ppv_liveplusvod where event_brand in (select distinct event_brand from live_manual) and data_level = 'Live'\nand event_date <> current_date)),\n\nlive_final as \n(select a.*, \n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\n               else null end as yearly_rank,\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\n               else 'Tier 2' end as tier,\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\n          else '0' end as monthly_color,\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\n          else '0' end as yearly_color,\n          case when a.event_date=(select max(event_date) from live_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\n from live_consolidation a\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \n           from live_consolidation where current_date-event_date::date <=380 and event_brand = 'PPV') as b\non a.platform=b.platform\nand a.event=b.event\nand a.event_date=b.event_date\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \n           from live_consolidation where current_date-event_date::date <=735 and event_brand = 'NXT') as c\non a.platform=c.platform\nand a.event=c.event\nand a.event_date=c.event_date)\nselect report_name,series_name,account,url,0 as asset_id,content_wwe_id as content_wweid,production_id,\nevent,event_name,event_date,start_time,end_time,platform,views,us_views,minutes,per_us_views,\nprev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\nchoose_ppv,event_brand,data_level from live_final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith live_manual as\n(select * from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard --dwh_read_write.live_plus_vod_manual_data \nwhere event_brand in ('PPV','NXT') and data_level = 'Live' and event_date = current_date),\nprior_change_live as\n(select a.*, prev_year_views, prev_year_event\n  from\n  (select platform,\n         views as prev_month_views,\n         event as prev_month_event,\n         event_brand\n  from fds_nplus.rpt_ntwrk_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_month_event from live_manual)) as a \n  join \n  (select platform,\n         views as prev_year_views,\n         event as prev_year_event,\n         event_brand\n  from fds_nplus.rpt_ntwrk_ppv_liveplusvod\n  where data_level = 'Live' and event_brand in (select distinct event_brand from live_manual) and event in (select distinct prev_year_event from live_manual)) as b\n  on a.platform=b.platform\n  and a.event_brand = b.event_brand\n  where a.platform <> 'Total'),\nlive_manual_base as \n(select a.*,b.prev_month_views,b.prev_year_views, \ncase when a.platform = 'YouTube' then round(a.views*0.23)\n     else 0 end as us_views\nfrom live_manual a\nleft join\nprior_change_live b\non a.platform = b.platform\nand a.event_brand = b.event_brand),\nlive_nwk_unique_viewers as \n(select *\nfrom   (\n        select count(distinct a.customerid) as unique_viewers, 'PPV' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'PPV')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as ppv_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'PPV'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.ppv_flag='1'\n        \n        union\n               \n        select count(distinct a.customerid) as unique_viewers, 'NXT' as event_brand\n        from \n              (    \n                select b.*,\n                case when max_time >= (select dateadd(m,6,start_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')  --  (START TIME + 6 MINUTES, EST)\n                and min_time < (select dateadd(m,-5,end_timestamp) from live_manual where platform = 'Network' and event_brand = 'NXT')         -- (END TIME - 5 MINUTES, EST)\n                then 1 else 0 end as nxt_flag\n                from \n                    (\n                     select c.*, (EXTRACT(EPOCH FROM (max_time-min_time))/60::numeric) as time_spent  \n                     from\n                       (\n                        select customerid, payload_data_cid,min_time,\n                        case when max_time is null then \n                        to_timestamp((current_timestamp AT TIME ZONE 'US/Eastern') AT TIME ZONE 'UTC', 'yyyy-mm-dd hh24:mi:ss')\n                        else max_time end as max_time   \n                        from    \n                           (\n                           select customerid, payload_data_cid,\n                           min(min_time) as min_time,\n                           max(max_time) as max_time     \n                           from (     \n                                select *,\n                                (readable_startedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as min_time,\n                                (readable_endedat AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern' as max_time\n                                from (\n                                SELECT distinct \n                                customerid, payload_data_ta,payload_data_cid,\n                                timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second' AS readable_startedat,\n                                timestamp 'epoch' + CAST(payload_data_endedat AS BIGINT)/1000 * interval '1 second' AS readable_endedat,\n                                payload_data_device,payload_data_last_active_at \n                                FROM udl_nplus.stg_dice_stream_flattened \n                                where payload_data_ta in ('LIVE_WATCHING_START','LIVE_WATCHING_END')\n                                and (((timestamp 'epoch' + CAST(payload_data_startedat AS BIGINT)/1000 * interval '1 second') AT TIME ZONE 'UTC') AT TIME ZONE 'US/Eastern') \n                                between \n                                    (select start_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'Network' and event_brand = 'NXT'))       \n                                )\n                            group by customerid, payload_data_cid \n                            )\n                           ) c\n                         ) b where b.time_spent>=6\n               ) a where a.nxt_flag='1'\n       )\n),\n\n\n\n\n\nlive_dotcom_plays as \n(select * \nfrom\n(\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'PPV' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'PPV') \n         group by filter_id,filter_name \n         )\nunion\n        select max(sum_max_value_plays) as dotcom_plays,\n               min(sum_max_value_plays) as dotcom_us_plays,\n               'NXT' as event_brand\n        from (\n        select filter_id, filter_name,\n               sum(max_value) as sum_max_value_plays\n          from udl_nplus.raw_conviva_pulse_realtime\n         where account_name='WWE .Com'\n           and filter_id in ('138579','138580')   \n           and min_time_est between \n           (select start_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') and (select end_timestamp from live_manual where platform = 'WWE.COM' and event_brand = 'NXT') \n         group by filter_id,filter_name \n         )\n)\n ),\n live_manual_base1 as \n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_plays from live_dotcom_plays where event_brand =  'NXT')\n     else views end as views,\nminutes,prev_month_views,prev_year_views,\ncase when platform = 'Network' and event_brand =  'PPV' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'PPV') \n     when platform = 'WWE.COM' and event_brand =  'PPV' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'PPV')\n     when platform = 'Network' and event_brand =  'NXT' then (select unique_viewers*0.75 from live_nwk_unique_viewers where event_brand =  'NXT') \n     when platform = 'WWE.COM' and event_brand =  'NXT' then (select dotcom_us_plays from live_dotcom_plays where event_brand =  'NXT')\n     else us_views end as us_views\nfrom live_manual_base),\nlive_manual_base_total as \n(select * from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views\nfrom live_manual_base1\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,'Total' as platform,data_level,\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\nsum(views) as views,\nsum(minutes) as minutes,\nsum(prev_month_views) as prev_month_views,\nsum(prev_year_views) as prev_year_views,\nsum(us_views) as us_views\nfrom live_manual_base1\ngroup by \nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,data_level\n)),\nlive_consolidation as\n(select *  from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views,\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \nfrom live_manual_base_total\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \nfrom fds_nplus.rpt_ntwrk_ppv_liveplusvod where event_brand in (select distinct event_brand from live_manual) and data_level = 'Live'\nand event_date <> current_date)),\n\nlive_final as \n(select a.*, \n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\n               else null end as yearly_rank,\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\n               else 'Tier 2' end as tier,\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\n          else '0' end as monthly_color,\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\n          else '0' end as yearly_color,\n          case when a.event_date=(select max(event_date) from live_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\n from live_consolidation a\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \n           from live_consolidation where current_date-event_date::date <=380 and event_brand = 'PPV') as b\non a.platform=b.platform\nand a.event=b.event\nand a.event_date=b.event_date\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \n           from live_consolidation where current_date-event_date::date <=735 and event_brand = 'NXT') as c\non a.platform=c.platform\nand a.event=c.event\nand a.event_date=c.event_date)\nselect report_name,series_name,account,url,0 as asset_id,content_wwe_id as content_wweid,production_id,\nevent,event_name,event_date,start_time,end_time,platform,views,us_views,minutes,per_us_views,\nprev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\nchoose_ppv,event_brand,data_level from live_final"}, "error": null, "status": "INSERT 0 9", "execution_time": 25.029075860977173, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-07-14T19:16:31.854058Z", "completed_at": "2020-07-14T19:16:31.896923Z"}, {"name": "execute", "started_at": "2020-07-14T19:16:31.898435Z", "completed_at": "2020-07-14T19:16:56.855060Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-07-14T19:16:56.925290Z", "elapsed_time": 26.28188705444336}