{"results": [{"node": {"raw_sql": "{{\r\n  config({\r\n    \"pre-hook\": \"delete from dwh_read_write.agg_yt_monetization_detail_dbt\",\r\n    \"materialized\": \"incremental\"\r\n  })\r\n}}\r\nselect * from (select a.*,\r\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.views desc) as viewrank,\r\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.watch_time_mins desc) as watchrank,\r\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.likes desc) as likerank,\r\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.dislikes desc) as dislikerank,\r\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.ad_impressions desc) as adrank,\r\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.estimated_partner_revenue desc) as revenuerank,\r\nsysdate insert_timestamp from \r\n(select * from dwh_read_write.Agg_YT_monetization_base \r\nunion all\r\nselect * from (select a.*, b.ad_impressions, b.estimated_partner_revenue, b.estimated_partner_ad_revenue, c.debut_date\r\n from \r\n(select report_date_dt date, \r\nreport_date, video_id,Title,video_uploaded_flg, \r\nchannel_name,region_nm as region2, \r\ncase when country_code in ('IN','US','ID','GB','SA','PK','PH',\r\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_code else 'ZZ' end as country_code, \r\ncase when country_code in ('IN','US','ID','GB','SA','PK','PH',\r\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_name else 'Other' end as country_name,\r\n'Owned' as content_type, \r\nsum(views) views, sum(likes) likes, sum(dislikes) dislikes, sum(watch_time_minutes) watch_time_mins\r\nfrom \r\n(select a.*,d.* \r\nfrom \r\n(select * from fds_yt.rpt_yt_wwe_engagement_daily where report_date between 20190101 and cast(to_char(current_date,'YYYYMMDD') as int)) a \r\nleft join\r\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,initcap(country_nm) as country_name,region_nm from cdm.dim_region_country\r\nwhere etl_source_name='Youtube')d \r\non a.country_code=d.iso_alpha2_ctry_cd) group by 1,2,3,4,5,6,7,8,9,10) a\r\nleft join \r\n(select video_id, report_date, case when country_code in ('IN','US','ID','GB','SA','PK','PH',\r\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_code else 'ZZ' end as country_code,\r\nregion_nm as region2,\r\nnvl(sum(ad_impressions),0) ad_impressions, nvl(sum(estimated_partner_revenue),0) estimated_partner_revenue, nvl(sum(estimated_partner_ad_revenue),0) estimated_partner_ad_revenue\r\nfrom \r\n(select a.*,d.* from (select * from fds_yt.rpt_yt_revenue_daily where report_date between 20190101 and cast(to_char(current_date,'YYYYMMDD') as int)) a \r\nleft join\r\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,initcap(country_nm) as country_name,region_nm from cdm.dim_region_country\r\nwhere etl_source_name='Youtube')d on a.country_code=d.iso_alpha2_ctry_cd) group by 1,2,3,4) b\r\non a.video_id=b.video_id and a.report_date=b.report_date and a.country_code=b.country_code and a.region2=b.region2\r\nleft join (select distinct report_date_dt debut_date, video_id from fds_yt.rpt_yt_wwe_engagement_daily where video_uploaded_flg=1 ) c\r\non a.video_id=c.video_id)) a) where (viewrank<20 or watchrank<20 or likerank<20 or dislikerank<20 or adrank<20 or revenuerank<20)", "database": "entdwdb", "schema": "dwh_read_write", "fqn": ["dbt_projects", "fds_yt", "aggregate", "agg_yt_monetization_detail_dbt"], "unique_id": "model.dbt_projects.agg_yt_monetization_detail_dbt", "package_name": "dbt_projects", "root_path": "/home/ec2-user/workspace/deploy", "path": "fds_yt/aggregate/agg_yt_monetization_detail_dbt.sql", "original_file_path": "models/fds_yt/aggregate/agg_yt_monetization_detail_dbt.sql", "name": "agg_yt_monetization_detail_dbt", "resource_type": "model", "alias": "agg_yt_monetization_detail_dbt", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from dwh_read_write.agg_yt_monetization_detail_dbt", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/compiled/dbt_projects/fds_yt/aggregate/agg_yt_monetization_detail_dbt.sql", "compiled": true, "compiled_sql": "\nselect * from (select a.*,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.views desc) as viewrank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.watch_time_mins desc) as watchrank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.likes desc) as likerank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.dislikes desc) as dislikerank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.ad_impressions desc) as adrank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.estimated_partner_revenue desc) as revenuerank,\nsysdate insert_timestamp from \n(select * from dwh_read_write.Agg_YT_monetization_base \nunion all\nselect * from (select a.*, b.ad_impressions, b.estimated_partner_revenue, b.estimated_partner_ad_revenue, c.debut_date\n from \n(select report_date_dt date, \nreport_date, video_id,Title,video_uploaded_flg, \nchannel_name,region_nm as region2, \ncase when country_code in ('IN','US','ID','GB','SA','PK','PH',\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_code else 'ZZ' end as country_code, \ncase when country_code in ('IN','US','ID','GB','SA','PK','PH',\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_name else 'Other' end as country_name,\n'Owned' as content_type, \nsum(views) views, sum(likes) likes, sum(dislikes) dislikes, sum(watch_time_minutes) watch_time_mins\nfrom \n(select a.*,d.* \nfrom \n(select * from fds_yt.rpt_yt_wwe_engagement_daily where report_date between 20190101 and cast(to_char(current_date,'YYYYMMDD') as int)) a \nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,initcap(country_nm) as country_name,region_nm from cdm.dim_region_country\nwhere etl_source_name='Youtube')d \non a.country_code=d.iso_alpha2_ctry_cd) group by 1,2,3,4,5,6,7,8,9,10) a\nleft join \n(select video_id, report_date, case when country_code in ('IN','US','ID','GB','SA','PK','PH',\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_code else 'ZZ' end as country_code,\nregion_nm as region2,\nnvl(sum(ad_impressions),0) ad_impressions, nvl(sum(estimated_partner_revenue),0) estimated_partner_revenue, nvl(sum(estimated_partner_ad_revenue),0) estimated_partner_ad_revenue\nfrom \n(select a.*,d.* from (select * from fds_yt.rpt_yt_revenue_daily where report_date between 20190101 and cast(to_char(current_date,'YYYYMMDD') as int)) a \nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,initcap(country_nm) as country_name,region_nm from cdm.dim_region_country\nwhere etl_source_name='Youtube')d on a.country_code=d.iso_alpha2_ctry_cd) group by 1,2,3,4) b\non a.video_id=b.video_id and a.report_date=b.report_date and a.country_code=b.country_code and a.region2=b.region2\nleft join (select distinct report_date_dt debut_date, video_id from fds_yt.rpt_yt_wwe_engagement_daily where video_uploaded_flg=1 ) c\non a.video_id=c.video_id)) a) where (viewrank<20 or watchrank<20 or likerank<20 or dislikerank<20 or adrank<20 or revenuerank<20)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from (select a.*,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.views desc) as viewrank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.watch_time_mins desc) as watchrank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.likes desc) as likerank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.dislikes desc) as dislikerank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.ad_impressions desc) as adrank,\nrow_number() over (partition by a.date,a.country_code,a.region2 order by a.estimated_partner_revenue desc) as revenuerank,\nsysdate insert_timestamp from \n(select * from dwh_read_write.Agg_YT_monetization_base \nunion all\nselect * from (select a.*, b.ad_impressions, b.estimated_partner_revenue, b.estimated_partner_ad_revenue, c.debut_date\n from \n(select report_date_dt date, \nreport_date, video_id,Title,video_uploaded_flg, \nchannel_name,region_nm as region2, \ncase when country_code in ('IN','US','ID','GB','SA','PK','PH',\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_code else 'ZZ' end as country_code, \ncase when country_code in ('IN','US','ID','GB','SA','PK','PH',\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_name else 'Other' end as country_name,\n'Owned' as content_type, \nsum(views) views, sum(likes) likes, sum(dislikes) dislikes, sum(watch_time_minutes) watch_time_mins\nfrom \n(select a.*,d.* \nfrom \n(select * from fds_yt.rpt_yt_wwe_engagement_daily where report_date between 20190101 and cast(to_char(current_date,'YYYYMMDD') as int)) a \nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,initcap(country_nm) as country_name,region_nm from cdm.dim_region_country\nwhere etl_source_name='Youtube')d \non a.country_code=d.iso_alpha2_ctry_cd) group by 1,2,3,4,5,6,7,8,9,10) a\nleft join \n(select video_id, report_date, case when country_code in ('IN','US','ID','GB','SA','PK','PH',\n'MX','VN','TH','MY','DE','TR','BR','BD','EG','AE','IT','CA','FR') then country_code else 'ZZ' end as country_code,\nregion_nm as region2,\nnvl(sum(ad_impressions),0) ad_impressions, nvl(sum(estimated_partner_revenue),0) estimated_partner_revenue, nvl(sum(estimated_partner_ad_revenue),0) estimated_partner_ad_revenue\nfrom \n(select a.*,d.* from (select * from fds_yt.rpt_yt_revenue_daily where report_date between 20190101 and cast(to_char(current_date,'YYYYMMDD') as int)) a \nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,initcap(country_nm) as country_name,region_nm from cdm.dim_region_country\nwhere etl_source_name='Youtube')d on a.country_code=d.iso_alpha2_ctry_cd) group by 1,2,3,4) b\non a.video_id=b.video_id and a.report_date=b.report_date and a.country_code=b.country_code and a.region2=b.region2\nleft join (select distinct report_date_dt debut_date, video_id from fds_yt.rpt_yt_wwe_engagement_daily where video_uploaded_flg=1 ) c\non a.video_id=c.video_id)) a) where (viewrank<20 or watchrank<20 or likerank<20 or dislikerank<20 or adrank<20 or revenuerank<20)", "wrapped_sql": "None"}, "error": null, "status": null, "execution_time": 0.043182373046875, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T10:40:38.325656Z", "completed_at": "2020-05-06T10:40:38.348375Z"}, {"name": "execute", "started_at": "2020-05-06T10:40:38.350178Z", "completed_at": "2020-05-06T10:40:38.350187Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n  config(\r\n\tmaterialized='view'\r\n    \r\n  )\r\n}}\r\n\r\nselect trunc(entitlement_expiry_dttm) as date,\r\ncase when billing_sku_country_cd is null then '4.NA' when billing_sku_country_cd in ('united states', 'us' , 'usa' ) then '1.US' \r\nwhen billing_sku_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') \r\nthen '2.UK/IRE' else '3.ROW' end as country,\r\ncase when first_charged_dttm is null then 'Trial' else 'Paid' end as order_status,\r\n--using revoked_dttm since it's matching with legacy table\r\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\r\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'  when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\r\ncase when payments between 0 and 1 then '0-1'\r\nwhen payments between 2 and 3 then '2-3'\r\nwhen payments between 4 and 6 then '4-6'\r\nwhen payments between 7 and 12 then '7-12'\r\nelse '13+' end as payments_count,\r\ncount(distinct order_id) as total_losses\r\nfrom (select * from(select *, max(payment_count) over (partition by order_id) as payments,\r\nrow_number() over (partition by order_id order by as_on_date desc) as rk from {{ref('fact_daily_subscription_order_status')}}) where rk=1)\r\nwhere trunc(entitlement_expiry_dttm) >= '2019-09-01' and entitlement_expiry_dttm < as_on_date\r\ngroup by 1,2,3,4,5,6 order by 1,2,3,4,5,6", "database": "entdwdb", "schema": "dwh_read_write", "fqn": ["dbt_projects", "fds_nplus", "views", "vw_aggr_daily_network_adds_and_loss_track"], "unique_id": "model.dbt_projects.vw_aggr_daily_network_adds_and_loss_track", "package_name": "dbt_projects", "root_path": "/home/ec2-user/workspace/deploy", "path": "fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "name": "vw_aggr_daily_network_adds_and_loss_track", "resource_type": "model", "alias": "vw_aggr_daily_network_adds_and_loss_track", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["fact_daily_subscription_order_status"]], "sources": [], "depends_on": {"nodes": ["model.dbt_projects.fact_daily_subscription_order_status"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/compiled/dbt_projects/fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "compiled": true, "compiled_sql": "\n\nselect trunc(entitlement_expiry_dttm) as date,\ncase when billing_sku_country_cd is null then '4.NA' when billing_sku_country_cd in ('united states', 'us' , 'usa' ) then '1.US' \nwhen billing_sku_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') \nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when first_charged_dttm is null then 'Trial' else 'Paid' end as order_status,\n--using revoked_dttm since it's matching with legacy table\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'  when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\ncase when payments between 0 and 1 then '0-1'\nwhen payments between 2 and 3 then '2-3'\nwhen payments between 4 and 6 then '4-6'\nwhen payments between 7 and 12 then '7-12'\nelse '13+' end as payments_count,\ncount(distinct order_id) as total_losses\nfrom (select * from(select *, max(payment_count) over (partition by order_id) as payments,\nrow_number() over (partition by order_id order by as_on_date desc) as rk from __dbt__CTE__fact_daily_subscription_order_status) where rk=1)\nwhere trunc(entitlement_expiry_dttm) >= '2019-09-01' and entitlement_expiry_dttm < as_on_date\ngroup by 1,2,3,4,5,6 order by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_projects.fact_daily_subscription_order_status", "sql": " __dbt__CTE__fact_daily_subscription_order_status as (\n\n\nselect * from fds_nplus.fact_daily_subscription_order_status\n)"}], "injected_sql": "\n\nwith __dbt__CTE__fact_daily_subscription_order_status as (\n\n\nselect * from fds_nplus.fact_daily_subscription_order_status\n)select trunc(entitlement_expiry_dttm) as date,\ncase when billing_sku_country_cd is null then '4.NA' when billing_sku_country_cd in ('united states', 'us' , 'usa' ) then '1.US' \nwhen billing_sku_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') \nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when first_charged_dttm is null then 'Trial' else 'Paid' end as order_status,\n--using revoked_dttm since it's matching with legacy table\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'  when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\ncase when payments between 0 and 1 then '0-1'\nwhen payments between 2 and 3 then '2-3'\nwhen payments between 4 and 6 then '4-6'\nwhen payments between 7 and 12 then '7-12'\nelse '13+' end as payments_count,\ncount(distinct order_id) as total_losses\nfrom (select * from(select *, max(payment_count) over (partition by order_id) as payments,\nrow_number() over (partition by order_id order by as_on_date desc) as rk from __dbt__CTE__fact_daily_subscription_order_status) where rk=1)\nwhere trunc(entitlement_expiry_dttm) >= '2019-09-01' and entitlement_expiry_dttm < as_on_date\ngroup by 1,2,3,4,5,6 order by 1,2,3,4,5,6", "wrapped_sql": "None"}, "error": null, "status": null, "execution_time": 0.16435837745666504, "thread_id": "Thread-2", "timing": [{"name": "compile", "started_at": "2020-05-06T10:40:38.351854Z", "completed_at": "2020-05-06T10:40:38.484095Z"}, {"name": "execute", "started_at": "2020-05-06T10:40:38.496085Z", "completed_at": "2020-05-06T10:40:38.496097Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\r\n  config(\r\n\tmaterialized='view'\r\n    \r\n  )\r\n}}\r\n\r\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\r\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\r\npayment_status,active_status ,\r\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\r\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\r\nthen '2.UK/IRE' else '3.ROW' end as country,\r\ncase when payment_method = 'roku_iap'  then 'roku'\r\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\r\nas payment_type,\r\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\r\ncase when payment_count between 0 and 1 then '0-1'\r\n                when payment_count between 2 and 3 then '2-3'\r\n                when payment_count between 4 and 6 then '4-6'\r\n                when payment_count between 7 and 12 then '7-12'\r\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\r\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\r\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\r\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\r\nfrom {{ref('fact_daily_subscription_order_status')}} where trunc(initial_order_dttm) < trunc(org_billing_dttm)\r\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\r\nwhere rk = 1)\r\nselect\r\ndt_mon billing_month,\r\nori_bill_dt original_billing_date,\r\npayment_status as order_status,\r\ncountry,\r\npayment_type payment_type,\r\ncount(order_id) as renewed_count ,\r\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\r\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\r\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\r\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\r\nsum(sf_ind) as soft_fail_enter ,\r\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\r\nPayments payments_count,\r\ncancel_type\r\nfrom ap group by 1,2,3,4,5,Payments,cancel_type", "database": "entdwdb", "schema": "dwh_read_write", "fqn": ["dbt_projects", "fds_nplus", "views", "vw_aggr_monthly_network_perf_renewal_payment_track"], "unique_id": "model.dbt_projects.vw_aggr_monthly_network_perf_renewal_payment_track", "package_name": "dbt_projects", "root_path": "/home/ec2-user/workspace/deploy", "path": "fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "name": "vw_aggr_monthly_network_perf_renewal_payment_track", "resource_type": "model", "alias": "vw_aggr_monthly_network_perf_renewal_payment_track", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["fact_daily_subscription_order_status"]], "sources": [], "depends_on": {"nodes": ["model.dbt_projects.fact_daily_subscription_order_status"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/compiled/dbt_projects/fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "compiled": true, "compiled_sql": "\n\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\npayment_status,active_status ,\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when payment_method = 'roku_iap'  then 'roku'\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\nas payment_type,\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_count between 0 and 1 then '0-1'\n                when payment_count between 2 and 3 then '2-3'\n                when payment_count between 4 and 6 then '4-6'\n                when payment_count between 7 and 12 then '7-12'\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\nfrom __dbt__CTE__fact_daily_subscription_order_status where trunc(initial_order_dttm) < trunc(org_billing_dttm)\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\nwhere rk = 1)\nselect\ndt_mon billing_month,\nori_bill_dt original_billing_date,\npayment_status as order_status,\ncountry,\npayment_type payment_type,\ncount(order_id) as renewed_count ,\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\nsum(sf_ind) as soft_fail_enter ,\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\nPayments payments_count,\ncancel_type\nfrom ap group by 1,2,3,4,5,Payments,cancel_type", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_projects.fact_daily_subscription_order_status", "sql": " __dbt__CTE__fact_daily_subscription_order_status as (\n\n\nselect * from fds_nplus.fact_daily_subscription_order_status\n)"}], "injected_sql": "\n\nwith  __dbt__CTE__fact_daily_subscription_order_status as (\n\n\nselect * from fds_nplus.fact_daily_subscription_order_status\n),ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\npayment_status,active_status ,\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when payment_method = 'roku_iap'  then 'roku'\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\nas payment_type,\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_count between 0 and 1 then '0-1'\n                when payment_count between 2 and 3 then '2-3'\n                when payment_count between 4 and 6 then '4-6'\n                when payment_count between 7 and 12 then '7-12'\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\nfrom __dbt__CTE__fact_daily_subscription_order_status where trunc(initial_order_dttm) < trunc(org_billing_dttm)\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\nwhere rk = 1)\nselect\ndt_mon billing_month,\nori_bill_dt original_billing_date,\npayment_status as order_status,\ncountry,\npayment_type payment_type,\ncount(order_id) as renewed_count ,\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\nsum(sf_ind) as soft_fail_enter ,\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\nPayments payments_count,\ncancel_type\nfrom ap group by 1,2,3,4,5,Payments,cancel_type", "wrapped_sql": "None"}, "error": null, "status": null, "execution_time": 0.16408157348632812, "thread_id": "Thread-3", "timing": [{"name": "compile", "started_at": "2020-05-06T10:40:38.378071Z", "completed_at": "2020-05-06T10:40:38.485230Z"}, {"name": "execute", "started_at": "2020-05-06T10:40:38.513001Z", "completed_at": "2020-05-06T10:40:38.513014Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{\n  config({\n    \"pre-hook\": \"delete from dwh_read_write.agg_yt_monetization_summary_dbt where view_date between current_date - 52  and current_date - 1\",\n\t\"materialized\": \"incremental\",\n\t\"post-hook\":[\"update dwh_read_write.agg_yt_monetization_summary_dbt\n\tset yt_ad_revenue = Case when b.views <> 0 then a.views * (b.yt_ad_Revenue/(b.views*1.000000)) else a.yt_ad_revenue end,\n\tad_impressions = Case when b.views <> 0 then a.views * (b.ad_impressions/(b.views*1.000000)) else a.ad_impressions end,\n\tpartner_revenue = Case when b.views <> 0 then a.views * (b.partner_revenue/(b.views*1.000000)) else a.partner_revenue end,\n\tsubscribers_gained = Case when b.views <> 0 then a.views * (b.subscribers_gained/(b.views*1.000000)) else a.subscribers_gained end,\nsubscribers_lost = Case when b.views <> 0 then a.views * (b.subscribers_lost/(b.views*1.000000)) else a.subscribers_lost end\nfrom dwh_read_write.agg_yt_monetization_summary_dbt a\njoin (select channel_name,debut_type,type,owned_class, duration_group,sum(yt_ad_revenue) yt_ad_revenue,sum(views) views,sum(ad_impressions) ad_impressions,sum(partner_revenue) partner_revenue,sum(subscribers_gained) subscribers_gained,sum(subscribers_lost) subscribers_lost\nfrom dwh_read_write.agg_yt_monetization_summary_dbt\nwhere view_date between (select max(view_date) - 31 from dwh_read_write.agg_yt_monetization_summary_dbt) and (select max(view_date) - 2 from dwh_read_write.agg_yt_monetization_summary_dbt)\ngroup by 1,2,3,4,5) b on a.channel_name = b.channel_name and a.debut_type = b.debut_type and a.type = b.type and a.owned_class = b.owned_class\nand a.duration_group = b.duration_group\nwhere a.view_date in (select max(view_date) as Maxdate from dwh_read_write.agg_yt_monetization_summary_dbt)\",\n\"update dwh_read_write.agg_yt_monetization_summary_dbt\nset yt_ad_revenue = Case when b.views <> 0 then a.views * (b.yt_ad_Revenue/(b.views*1.000000)) else a.yt_ad_revenue end,\nad_impressions = Case when b.views <> 0 then a.views * (b.ad_impressions/(b.views*1.000000)) else a.ad_impressions end,\npartner_revenue = Case when b.views <> 0 then a.views * (b.partner_revenue/(b.views*1.000000)) else a.partner_revenue end,\nsubscribers_gained = Case when b.views <> 0 then a.views * (b.subscribers_gained/(b.views*1.000000)) else a.subscribers_gained end,\nsubscribers_lost = Case when b.views <> 0 then a.views * (b.subscribers_lost/(b.views*1.000000)) else a.subscribers_lost end\nfrom dwh_read_write.agg_yt_monetization_summary_dbt a\njoin (select channel_name,debut_type,type,owned_class, duration_group, sum(yt_ad_revenue) yt_ad_revenue,sum(views) views,sum(ad_impressions) ad_impressions,sum(partner_revenue) partner_revenue,sum(subscribers_gained) subscribers_gained,sum(subscribers_lost) subscribers_lost\nfrom dwh_read_write.agg_yt_monetization_summary_dbt\nwhere view_date between (select max(view_date) - 32 from dwh_read_write.agg_yt_monetization_summary_dbt) and (select max(view_date) - 2 from dwh_read_write.agg_yt_monetization_summary_dbt)\ngroup by 1,2,3,4,5) b on a.channel_name = b.channel_name and a.debut_type = b.debut_type and a.type = b.type and a.owned_class = b.owned_class\nand a.duration_group = b.duration_group\nwhere a.view_date in (select max(view_date)-1 as Maxdate from dwh_read_write.agg_yt_monetization_summary_dbt)\"]})}}\n\nselect country_name,country_code,channel_name, view_date, report_date, region, channel_short,region2, country_name2,\nviews,hours_watched, yt_ad_revenue,ad_impressions,partner_revenue,watch_time_minutes,\nlikes,\ndislikes,\nsubscribers_gained, \nsubscribers_lost,\nrevenue_views,\nmale,\nfemale,\ngender_other,\nAGE_25_34,\nAGE_45_54,\nAGE_13_17,\nAGE_35_44,\nAGE_55_64,\nAGE_65_,\nAGE_18_24,\ndebut_type, type, owned_class, duration_group,'mb_yt_exec_weekly_trend' as table_name, b.week_name,\ncurrent_timestamp::timestamp without time zone as insert_timestamp\nfrom (select * , report_date_dt as view_date,\ncase when country_name='United States' then 'United States' \nelse 'ROW' end as region,\n'mb_yt_exec_weekly_trend' as table_name,\ncase when channel_name='UpUpDownDown' then 'UUDD'\nwhen channel_name='WWE' then 'WWE'\nwhen channel_name='UGC' then 'UGC'\nelse 'Other' end as channel_short\nfrom  \n(\n(select * from {{ ref('monetize_summary_wwe') }}\nunion all\nselect * from {{ ref('monetize_summary_ugc') }})\n)) a\njoin \n(select full_date, Case when cal_year_week_num = 53 then 'Wk-1,' || cal_year + 1 else 'Wk-' || cal_year_week_num || ', ' || cal_year end as week_name from \ncdm.dim_date \nwhere full_date between current_date - 52 and current_date - 1) b on a.view_date = b.full_date", "database": "entdwdb", "schema": "dwh_read_write", "fqn": ["dbt_projects", "fds_yt", "aggregate", "agg_yt_monetization_summary_dbt"], "unique_id": "model.dbt_projects.agg_yt_monetization_summary_dbt", "package_name": "dbt_projects", "root_path": "/home/ec2-user/workspace/deploy", "path": "fds_yt/aggregate/agg_yt_monetization_summary_dbt.sql", "original_file_path": "models/fds_yt/aggregate/agg_yt_monetization_summary_dbt.sql", "name": "agg_yt_monetization_summary_dbt", "resource_type": "model", "alias": "agg_yt_monetization_summary_dbt", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "update dwh_read_write.agg_yt_monetization_summary_dbt\n\tset yt_ad_revenue = Case when b.views <> 0 then a.views * (b.yt_ad_Revenue/(b.views*1.000000)) else a.yt_ad_revenue end,\n\tad_impressions = Case when b.views <> 0 then a.views * (b.ad_impressions/(b.views*1.000000)) else a.ad_impressions end,\n\tpartner_revenue = Case when b.views <> 0 then a.views * (b.partner_revenue/(b.views*1.000000)) else a.partner_revenue end,\n\tsubscribers_gained = Case when b.views <> 0 then a.views * (b.subscribers_gained/(b.views*1.000000)) else a.subscribers_gained end,\nsubscribers_lost = Case when b.views <> 0 then a.views * (b.subscribers_lost/(b.views*1.000000)) else a.subscribers_lost end\nfrom dwh_read_write.agg_yt_monetization_summary_dbt a\njoin (select channel_name,debut_type,type,owned_class, duration_group,sum(yt_ad_revenue) yt_ad_revenue,sum(views) views,sum(ad_impressions) ad_impressions,sum(partner_revenue) partner_revenue,sum(subscribers_gained) subscribers_gained,sum(subscribers_lost) subscribers_lost\nfrom dwh_read_write.agg_yt_monetization_summary_dbt\nwhere view_date between (select max(view_date) - 31 from dwh_read_write.agg_yt_monetization_summary_dbt) and (select max(view_date) - 2 from dwh_read_write.agg_yt_monetization_summary_dbt)\ngroup by 1,2,3,4,5) b on a.channel_name = b.channel_name and a.debut_type = b.debut_type and a.type = b.type and a.owned_class = b.owned_class\nand a.duration_group = b.duration_group\nwhere a.view_date in (select max(view_date) as Maxdate from dwh_read_write.agg_yt_monetization_summary_dbt)", "transaction": true, "index": null}, {"sql": "update dwh_read_write.agg_yt_monetization_summary_dbt\nset yt_ad_revenue = Case when b.views <> 0 then a.views * (b.yt_ad_Revenue/(b.views*1.000000)) else a.yt_ad_revenue end,\nad_impressions = Case when b.views <> 0 then a.views * (b.ad_impressions/(b.views*1.000000)) else a.ad_impressions end,\npartner_revenue = Case when b.views <> 0 then a.views * (b.partner_revenue/(b.views*1.000000)) else a.partner_revenue end,\nsubscribers_gained = Case when b.views <> 0 then a.views * (b.subscribers_gained/(b.views*1.000000)) else a.subscribers_gained end,\nsubscribers_lost = Case when b.views <> 0 then a.views * (b.subscribers_lost/(b.views*1.000000)) else a.subscribers_lost end\nfrom dwh_read_write.agg_yt_monetization_summary_dbt a\njoin (select channel_name,debut_type,type,owned_class, duration_group, sum(yt_ad_revenue) yt_ad_revenue,sum(views) views,sum(ad_impressions) ad_impressions,sum(partner_revenue) partner_revenue,sum(subscribers_gained) subscribers_gained,sum(subscribers_lost) subscribers_lost\nfrom dwh_read_write.agg_yt_monetization_summary_dbt\nwhere view_date between (select max(view_date) - 32 from dwh_read_write.agg_yt_monetization_summary_dbt) and (select max(view_date) - 2 from dwh_read_write.agg_yt_monetization_summary_dbt)\ngroup by 1,2,3,4,5) b on a.channel_name = b.channel_name and a.debut_type = b.debut_type and a.type = b.type and a.owned_class = b.owned_class\nand a.duration_group = b.duration_group\nwhere a.view_date in (select max(view_date)-1 as Maxdate from dwh_read_write.agg_yt_monetization_summary_dbt)", "transaction": true, "index": null}], "pre-hook": [{"sql": "delete from dwh_read_write.agg_yt_monetization_summary_dbt where view_date between current_date - 52  and current_date - 1", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "tags": []}, "tags": [], "refs": [["monetize_summary_wwe"], ["monetize_summary_ugc"]], "sources": [], "depends_on": {"nodes": ["model.dbt_projects.monetize_summary_wwe", "model.dbt_projects.monetize_summary_ugc"], "macros": []}, "docrefs": [], "description": "", "columns": {}, "patch_path": null, "build_path": "target/compiled/dbt_projects/fds_yt/aggregate/agg_yt_monetization_summary_dbt.sql", "compiled": true, "compiled_sql": "\n\nselect country_name,country_code,channel_name, view_date, report_date, region, channel_short,region2, country_name2,\nviews,hours_watched, yt_ad_revenue,ad_impressions,partner_revenue,watch_time_minutes,\nlikes,\ndislikes,\nsubscribers_gained, \nsubscribers_lost,\nrevenue_views,\nmale,\nfemale,\ngender_other,\nAGE_25_34,\nAGE_45_54,\nAGE_13_17,\nAGE_35_44,\nAGE_55_64,\nAGE_65_,\nAGE_18_24,\ndebut_type, type, owned_class, duration_group,'mb_yt_exec_weekly_trend' as table_name, b.week_name,\ncurrent_timestamp::timestamp without time zone as insert_timestamp\nfrom (select * , report_date_dt as view_date,\ncase when country_name='United States' then 'United States' \nelse 'ROW' end as region,\n'mb_yt_exec_weekly_trend' as table_name,\ncase when channel_name='UpUpDownDown' then 'UUDD'\nwhen channel_name='WWE' then 'WWE'\nwhen channel_name='UGC' then 'UGC'\nelse 'Other' end as channel_short\nfrom  \n(\n(select * from __dbt__CTE__monetize_summary_wwe\nunion all\nselect * from __dbt__CTE__monetize_summary_ugc)\n)) a\njoin \n(select full_date, Case when cal_year_week_num = 53 then 'Wk-1,' || cal_year + 1 else 'Wk-' || cal_year_week_num || ', ' || cal_year end as week_name from \ncdm.dim_date \nwhere full_date between current_date - 52 and current_date - 1) b on a.view_date = b.full_date", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.dbt_projects.rpt_yt_wwe_engagement_daily", "sql": " __dbt__CTE__rpt_yt_wwe_engagement_daily as (\n\n\n\nselect * from fds_yt.rpt_yt_wwe_engagement_daily\n)"}, {"id": "model.dbt_projects.yt_amg_content_groups", "sql": " __dbt__CTE__yt_amg_content_groups as (\n\n\n\nselect * from public.yt_amg_content_groups\n)"}, {"id": "model.dbt_projects.dim_region_country", "sql": " __dbt__CTE__dim_region_country as (\n\n\nselect * from cdm.dim_region_country\n)"}, {"id": "model.dbt_projects.wwe_engagement_measures", "sql": " __dbt__CTE__wwe_engagement_measures as (\n\n\n\nselect  x.report_date_dt,x.report_date,case when x.channel_name is null then 'Unknown' else x.channel_name end as channel_name,x.country_code,\ncase when x.country_code='US' then 'United States'\n     when x.country_code='IN' then 'India'\n     when x.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncase when x.duration<=60 then '1_Under 1 Minute'\n     when x.duration<=120 then '2_1-2 Minutes'\n\t when x.duration<=240 then '3_2-4 Minutes'\n\t when x.duration<=360 then '4_4-6 Minutes'\n\t when x.duration<=480 then '5_6-8 Minutes'\n     when x.duration<=600 then '6_8-10 Minutes'\n     when x.duration<=1200 then '7_10-20 Minutes'\n     when x.duration<=3600 then '8_20-60 Minutes'\n     when x.duration>3600 then '9_Over 60 Minutes'\n     else 'other' end as duration_group,\ncase when  report_date_dt-trunc(x.time_uploaded)<=7 then 'new'\nelse 'old' end as debut_type, \ncase when y.amg_content_group in ('Full Match','Kickoff','Network','Originals','PPV Clips','Raw','SmackDown','The Bella Twins','UpUpDownDown','WWE Performance Center') \nthen y.amg_content_group else 'Other' end as owned_class,\nd.region_nm as region2,initcap(d.country_nm) as country_name2,\nsum(x.views) views,\nsum(x.watch_time_minutes) watch_time_minutes,\nsum(x.watch_time_minutes)/60 as hours_watched,\nsum(x.likes) likes,\nsum(x.dislikes) dislikes,\nsum(x.subscribers_gained) subscribers_gained, \nsum(x.subscribers_lost) subscribers_lost\nfrom \n(select report_date_dt,report_date,channel_name,country_code,duration,time_uploaded,video_id,views,watch_time_minutes,likes,dislikes,subscribers_gained,\nsubscribers_lost,dim_source_type_id,title from __dbt__CTE__rpt_yt_wwe_engagement_daily where report_date_dt \nbetween current_date - 52 and current_date - 1 and dim_source_type_id in (2,3)) x\nleft join __dbt__CTE__yt_amg_content_groups y     \non x.video_id=y.yt_id\nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,country_nm,region_nm from __dbt__CTE__dim_region_country\nwhere etl_source_name='Youtube') d\non x.country_code=d.iso_alpha2_ctry_cd\nwhere x.report_date_dt between current_date - 52 and current_date - 1\nand dim_source_type_id in (2,3)\ngroup by 1,2,3,4,5,6,7,8,9,10\n)"}, {"id": "model.dbt_projects.rpt_yt_revenue_daily", "sql": " __dbt__CTE__rpt_yt_revenue_daily as (\n\n\n\nselect * from fds_yt.rpt_yt_revenue_daily\n)"}, {"id": "model.dbt_projects.wwe_revenue_views_uploader_self", "sql": " __dbt__CTE__wwe_revenue_views_uploader_self as (\n\n\nselect r.report_date,case when m.channel_name is null then 'Unknown' else m.channel_name end as channel_name,r.country_code,\ncase when r.country_code='US' then 'United States'\n     when r.country_code='IN' then 'India'\n     when r.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncase when v.length<=60 then '1_Under 1 Minute'\n     when v.length<=120 then '2_1-2 Minutes'\n\t when v.length<=240 then '3_2-4 Minutes'\n\t when v.length<=360 then '4_4-6 Minutes'\n\t when v.length<=480 then '5_6-8 Minutes'\n     when v.length<=600 then '6_8-10 Minutes'\n     when v.length<=1200 then '7_10-20 Minutes'\n     when v.length<=3600 then '8_20-60 Minutes'\n     when v.length>3600 then '9_Over 60 Minutes'\n     else 'other' end as duration_group,\ncase when  cast (substring(report_date,1,8) as date)-trunc(v.time_uploaded)<=7 then 'new'\nelse 'old' end as debut_type, \ncase when y.amg_content_group in ('Full Match','Kickoff','Network','Originals','PPV Clips','Raw','SmackDown','The Bella Twins','UpUpDownDown','WWE Performance Center') \nthen y.amg_content_group else 'Other' end as owned_class,\nsum(r.ad_impressions) ad_impressions, sum(r.estimated_youtube_ad_revenue) estimated_youtube_ad_revenue, \nsum(r.estimated_partner_revenue) estimated_partner_revenue,\nsum(case when r.video_id+r.report_date in \n(select distinct video_id+report_date from __dbt__CTE__rpt_yt_revenue_daily where estimated_partner_revenue!=0 group by video_id, report_date)\nthen views else 0 end) revenue_views\nfrom (select report_date,country_code,ad_impressions,estimated_youtube_ad_revenue,estimated_partner_revenue,video_id,views,uploader_type\nfrom __dbt__CTE__rpt_yt_revenue_daily where report_date between to_char(current_date - 52, 'YYYYMMDD')   \nand to_char(current_date - 1, 'YYYYMMDD') and uploader_type in ('self' ,'thirdParty')) r join fds_yt.dim_video v on r.video_id=v.video_id\nleft join \n(select distinct video_id, channel_name from fds_yt.youtube_video_metadata_direct\n where as_on_date=(select max(as_on_date) from fds_yt.youtube_video_metadata_direct)) m\n on r.video_id=m.video_id\nleft join __dbt__CTE__yt_amg_content_groups y\non r.video_id=y.yt_id\nwhere r.report_date between to_char(current_date - 52, 'YYYYMMDD')  and to_char(current_date - 1, 'YYYYMMDD')\nand r.uploader_type='self' \ngroup by 1, 2,3,4,5,6,7\n)"}, {"id": "model.dbt_projects.rpt_yt_demographics_views_daily", "sql": " __dbt__CTE__rpt_yt_demographics_views_daily as (\n\n\nselect * from fds_yt.rpt_yt_demographics_views_daily\n)"}, {"id": "model.dbt_projects.wwe_demograph_by_gender_age_group", "sql": " __dbt__CTE__wwe_demograph_by_gender_age_group as (\n\n\nselect report_date, case when d.channel_name is null then 'Unknown' else d.channel_name end as channel_name, country_code,\ncase when d.country_code='US' then 'United States'\n     when d.country_code='IN' then 'India'\n     when d.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncase when d.duration<=60 then '1_Under 1 Minute'\n     when d.duration<=120 then '2_1-2 Minutes'\n\t when d.duration<=240 then '3_2-4 Minutes'\n\t when d.duration<=360 then '4_4-6 Minutes'\n\t when d.duration<=480 then '5_6-8 Minutes'\n     when d.duration<=600 then '6_8-10 Minutes'\n     when d.duration<=1200 then '7_10-20 Minutes'\n     when d.duration<=3600 then '8_20-60 Minutes'\n     when d.duration>3600 then '9_Over 60 Minutes'\n     else 'other' end as duration_group,\ncase when  report_date_dt-trunc(d.time_uploaded)<=7 then 'new'\nelse 'old' end as debut_type, \ncase when y.amg_content_group in ('Full Match','Kickoff','Network','Originals','PPV Clips','Raw','SmackDown','The Bella Twins','UpUpDownDown','WWE Performance Center') \nthen y.amg_content_group else 'Other' end as owned_class,\ncoalesce(sum(case when gender='MALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as male,\ncoalesce(sum(case when gender='FEMALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as female,\ncoalesce(sum(case when gender='GENDER_OTHER' then views*1000000 else 0 end)/nullif(sum(views),0),0) as gender_other,\ncoalesce(sum(case when age_group='AGE_25_34' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_25_34,\ncoalesce(sum(case when age_group='AGE_45_54' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_45_54,\ncoalesce(sum(case when age_group='AGE_13_17' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_13_17,\ncoalesce(sum(case when age_group='AGE_35_44' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_35_44,\ncoalesce(sum(case when age_group='AGE_55_64' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_55_64,\ncoalesce(sum(case when age_group='AGE_65_' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_65_,\ncoalesce(sum(case when age_group='AGE_18_24' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_18_24\nfrom \n(select report_date,channel_name,country_code,duration,report_date_dt,time_uploaded,gender,age_group,views,video_id,uploader_type\nfrom __dbt__CTE__rpt_yt_demographics_views_daily   where report_date_dt between current_date-52 and current_date - 1 \nand uploader_type in ( 'self' , 'thirdParty')) d \nleft join __dbt__CTE__yt_amg_content_groups y\non d.video_id=y.yt_id\nwhere d.report_date_dt between current_date - 52 and current_date - 1 and d.uploader_type = 'self'\ngroup by 1,2,3,4,5,6,7\n)"}, {"id": "model.dbt_projects.monetize_summary_wwe", "sql": " __dbt__CTE__monetize_summary_wwe as (\n\nselect a.report_date_dt,a.report_date,a.channel_name,a.country_name,a.country_code,a.duration_group,\na.debut_type,a.owned_class, a.region2, a.country_name2,\nsum(a.views) as views,\nsum(a.hours_watched) as hours_watched,\nsum(a.watch_time_minutes) as watch_time_minutes,\nsum(b.ad_impressions) as ad_impressions,\nsum(b.estimated_youtube_ad_revenue) as yt_ad_revenue,\nsum(b.estimated_partner_revenue) as partner_revenue,\nsum(a.likes) likes,\nsum(a.dislikes) dislikes,\nsum(a.subscribers_gained) subscribers_gained,\nsum(a.subscribers_lost) subscribers_lost,\nsum(b.revenue_views) revenue_views,\nsum(c.male) male,\nsum(c.female) as female,\nsum(c.gender_other) gender_other,\nsum(c.AGE_25_34) AGE_25_34,\nsum(c.AGE_45_54) AGE_45_54,\nsum(c.AGE_13_17) AGE_13_17,\nsum(c.AGE_35_44) AGE_35_44,\nsum(c.AGE_55_64) AGE_55_64,\nsum(c.AGE_65_) AGE_65_,\nsum(c.AGE_18_24) AGE_18_24,\n'Owned' as type from\n __dbt__CTE__wwe_engagement_measures  a\n left join\n  __dbt__CTE__wwe_revenue_views_uploader_self b\n  on a.report_date=b.report_date\nand a.owned_class=b.owned_class\nand a.debut_type=b.debut_type\nand a.country_name=b.country_name\nand a.country_code = b.country_code\nand a.duration_group=b.duration_group\nand a.channel_name=b.channel_name\nleft join\n__dbt__CTE__wwe_demograph_by_gender_age_group c\non a.report_date=c.report_date\nand a.owned_class=c.owned_class\nand a.debut_type=c.debut_type\nand a.country_name=c.country_name\nand a.country_code = c.country_code\nand a.duration_group=c.duration_group\nand a.channel_name=c.channel_name\ngroup by a.report_date_dt,a.report_date,a.channel_name,a.region2, a.country_name2,a.country_name,a.country_code,a.duration_group,a.debut_type,a.owned_class\n)"}, {"id": "model.dbt_projects.rpt_yt_ugc_engagement_daily", "sql": " __dbt__CTE__rpt_yt_ugc_engagement_daily as (\n\n\n\nselect * from fds_yt.rpt_yt_ugc_engagement_daily\n)"}, {"id": "model.dbt_projects.ugc_engage_measures", "sql": " __dbt__CTE__ugc_engage_measures as (\n\n\n\nselect report_date,report_date_dt,country_code,\ncase when country_code='US' then 'United States'\n     when country_code='IN' then 'India'\n     when country_code='GB' then 'United Kingdom'\n     else 'ROW' end as country_name,\nd.region_nm as region2,initcap(d.country_nm) as country_name2,\nsum(views) views,sum(watch_time_minutes)/60 as hours_watched,\nsum(watch_time_minutes) as watch_time_minutes,\nsum(likes) likes,\nsum(dislikes) dislikes,\nsum(subscribers_gained) subscribers_gained, \nsum(subscribers_lost) subscribers_lost\nfrom __dbt__CTE__rpt_yt_ugc_engagement_daily ue\nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,country_nm,region_nm from __dbt__CTE__dim_region_country\nwhere etl_source_name='Youtube') d\non ue.country_code=d.iso_alpha2_ctry_cd\nwhere report_date_dt between current_date - 52 and current_date - 1 \nand dim_source_type_id in (2,3)\ngroup by 1,2,3,4,5,6\n)"}, {"id": "model.dbt_projects.ugc_revenue_views_uploader_thirdparty", "sql": " __dbt__CTE__ugc_revenue_views_uploader_thirdparty as (\n\n\n\nselect r.report_date,r.country_code,\ncase when r.country_code='US' then 'United States'\n     when r.country_code='IN' then 'India'\n     when r.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name, \nsum(r.ad_impressions) ad_impressions, sum(r.estimated_youtube_ad_revenue) estimated_youtube_ad_revenue, \nsum(r.estimated_partner_revenue) estimated_partner_revenue,\nsum(case when r.video_id+r.report_date in \n(select distinct video_id+report_date from __dbt__CTE__rpt_yt_revenue_daily where estimated_partner_revenue!=0 group by video_id, report_date)\nthen views else 0 end) revenue_views\nfrom \n(select report_date,country_code,ad_impressions,estimated_youtube_ad_revenue,estimated_partner_revenue,video_id,views,uploader_type\nfrom __dbt__CTE__rpt_yt_revenue_daily where report_date between to_char(current_date - 52, 'YYYYMMDD')   and to_char(current_date - 1, 'YYYYMMDD') \nand uploader_type in ('self' ,'thirdParty')) r \nwhere r.report_date between to_char(current_date - 52, 'YYYYMMDD') and to_char(current_date - 1, 'YYYYMMDD')\nand r.uploader_type='thirdParty' \ngroup by 1,2,3\n)"}, {"id": "model.dbt_projects.ugc_demograph_by_gender_age_group", "sql": " __dbt__CTE__ugc_demograph_by_gender_age_group as (\n\n\n\nselect report_date, country_code,\ncase when d.country_code='US' then 'United States'\n     when d.country_code='IN' then 'India'\n     when d.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncoalesce(sum(case when gender='MALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as male,\ncoalesce(sum(case when gender='FEMALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as female,\ncoalesce(sum(case when gender='GENDER_OTHER' then views*1000000 else 0 end)/nullif(sum(views),0),0) as gender_other,\ncoalesce(sum(case when age_group='AGE_25_34' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_25_34,\ncoalesce(sum(case when age_group='AGE_45_54' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_45_54,\ncoalesce(sum(case when age_group='AGE_13_17' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_13_17,\ncoalesce(sum(case when age_group='AGE_35_44' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_35_44,\ncoalesce(sum(case when age_group='AGE_55_64' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_55_64,\ncoalesce(sum(case when age_group='AGE_65_' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_65_,\ncoalesce(sum(case when age_group='AGE_18_24' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_18_24\nfrom (select report_date,channel_name,country_code,duration,report_date_dt,time_uploaded,gender,age_group,views,video_id,uploader_type\nfrom __dbt__CTE__rpt_yt_demographics_views_daily where report_date_dt between current_date-52 and current_date - 1 and uploader_type in ( 'self' , 'thirdParty')) d \nwhere d.report_date_dt between current_date - 52 and current_date - 1  and d.uploader_type = 'thirdParty'\ngroup by 1,2,3\n)"}, {"id": "model.dbt_projects.monetize_summary_ugc", "sql": " __dbt__CTE__monetize_summary_ugc as (\n\nselect a.report_date_dt,a.report_date,'UGC' as channel_name,a.country_name,a.country_code,'' as duration_group,'' as debut_type, '' as owned_class, a.region2, a.country_name2,\nsum(a.views) as views,\nsum(a.hours_watched) as hours_watched,\nsum(a.watch_time_minutes) as watch_time_minutes,\nsum(b.ad_impressions) as ad_impressions, \nsum(b.estimated_youtube_ad_revenue) as yt_ad_revenue,\nsum(b.estimated_partner_revenue) as partner_revenue,\nsum(a.likes) likes,\nsum(a.dislikes) dislikes,\nsum(a.subscribers_gained) subscribers_gained, \nsum(a.subscribers_lost) subscribers_lost,\nsum(b.revenue_views) revenue_views,\nsum(c.male) male,\nsum(c.female) as female,\nsum(c.gender_other) gender_other,\nsum(c.AGE_25_34) AGE_25_34,\nsum(c.AGE_45_54) AGE_45_54,\nsum(c.AGE_13_17) AGE_13_17,\nsum(c.AGE_35_44) AGE_35_44,\nsum(c.AGE_55_64) AGE_55_64,\nsum(c.AGE_65_) AGE_65_,\nsum(c.AGE_18_24) AGE_18_24,\n'UGC' as type from\n__dbt__CTE__ugc_engage_measures a\nleft join \n__dbt__CTE__ugc_revenue_views_uploader_thirdparty b\non \na.report_date=b.report_date\nand a.country_code=b.country_code\nleft join __dbt__CTE__ugc_demograph_by_gender_age_group c\non a.report_date=c.report_date\nand a.country_name=c.country_name\nand a.country_code = c.country_code\ngroup by a.report_date,a.report_date_dt, a.region2, a.country_name2, a.country_name,a.country_code\n)"}], "injected_sql": "\n\nwith __dbt__CTE__rpt_yt_wwe_engagement_daily as (\n\n\n\nselect * from fds_yt.rpt_yt_wwe_engagement_daily\n),  __dbt__CTE__yt_amg_content_groups as (\n\n\n\nselect * from public.yt_amg_content_groups\n),  __dbt__CTE__dim_region_country as (\n\n\nselect * from cdm.dim_region_country\n),  __dbt__CTE__wwe_engagement_measures as (\n\n\n\nselect  x.report_date_dt,x.report_date,case when x.channel_name is null then 'Unknown' else x.channel_name end as channel_name,x.country_code,\ncase when x.country_code='US' then 'United States'\n     when x.country_code='IN' then 'India'\n     when x.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncase when x.duration<=60 then '1_Under 1 Minute'\n     when x.duration<=120 then '2_1-2 Minutes'\n\t when x.duration<=240 then '3_2-4 Minutes'\n\t when x.duration<=360 then '4_4-6 Minutes'\n\t when x.duration<=480 then '5_6-8 Minutes'\n     when x.duration<=600 then '6_8-10 Minutes'\n     when x.duration<=1200 then '7_10-20 Minutes'\n     when x.duration<=3600 then '8_20-60 Minutes'\n     when x.duration>3600 then '9_Over 60 Minutes'\n     else 'other' end as duration_group,\ncase when  report_date_dt-trunc(x.time_uploaded)<=7 then 'new'\nelse 'old' end as debut_type, \ncase when y.amg_content_group in ('Full Match','Kickoff','Network','Originals','PPV Clips','Raw','SmackDown','The Bella Twins','UpUpDownDown','WWE Performance Center') \nthen y.amg_content_group else 'Other' end as owned_class,\nd.region_nm as region2,initcap(d.country_nm) as country_name2,\nsum(x.views) views,\nsum(x.watch_time_minutes) watch_time_minutes,\nsum(x.watch_time_minutes)/60 as hours_watched,\nsum(x.likes) likes,\nsum(x.dislikes) dislikes,\nsum(x.subscribers_gained) subscribers_gained, \nsum(x.subscribers_lost) subscribers_lost\nfrom \n(select report_date_dt,report_date,channel_name,country_code,duration,time_uploaded,video_id,views,watch_time_minutes,likes,dislikes,subscribers_gained,\nsubscribers_lost,dim_source_type_id,title from __dbt__CTE__rpt_yt_wwe_engagement_daily where report_date_dt \nbetween current_date - 52 and current_date - 1 and dim_source_type_id in (2,3)) x\nleft join __dbt__CTE__yt_amg_content_groups y     \non x.video_id=y.yt_id\nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,country_nm,region_nm from __dbt__CTE__dim_region_country\nwhere etl_source_name='Youtube') d\non x.country_code=d.iso_alpha2_ctry_cd\nwhere x.report_date_dt between current_date - 52 and current_date - 1\nand dim_source_type_id in (2,3)\ngroup by 1,2,3,4,5,6,7,8,9,10\n),  __dbt__CTE__rpt_yt_revenue_daily as (\n\n\n\nselect * from fds_yt.rpt_yt_revenue_daily\n),  __dbt__CTE__wwe_revenue_views_uploader_self as (\n\n\nselect r.report_date,case when m.channel_name is null then 'Unknown' else m.channel_name end as channel_name,r.country_code,\ncase when r.country_code='US' then 'United States'\n     when r.country_code='IN' then 'India'\n     when r.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncase when v.length<=60 then '1_Under 1 Minute'\n     when v.length<=120 then '2_1-2 Minutes'\n\t when v.length<=240 then '3_2-4 Minutes'\n\t when v.length<=360 then '4_4-6 Minutes'\n\t when v.length<=480 then '5_6-8 Minutes'\n     when v.length<=600 then '6_8-10 Minutes'\n     when v.length<=1200 then '7_10-20 Minutes'\n     when v.length<=3600 then '8_20-60 Minutes'\n     when v.length>3600 then '9_Over 60 Minutes'\n     else 'other' end as duration_group,\ncase when  cast (substring(report_date,1,8) as date)-trunc(v.time_uploaded)<=7 then 'new'\nelse 'old' end as debut_type, \ncase when y.amg_content_group in ('Full Match','Kickoff','Network','Originals','PPV Clips','Raw','SmackDown','The Bella Twins','UpUpDownDown','WWE Performance Center') \nthen y.amg_content_group else 'Other' end as owned_class,\nsum(r.ad_impressions) ad_impressions, sum(r.estimated_youtube_ad_revenue) estimated_youtube_ad_revenue, \nsum(r.estimated_partner_revenue) estimated_partner_revenue,\nsum(case when r.video_id+r.report_date in \n(select distinct video_id+report_date from __dbt__CTE__rpt_yt_revenue_daily where estimated_partner_revenue!=0 group by video_id, report_date)\nthen views else 0 end) revenue_views\nfrom (select report_date,country_code,ad_impressions,estimated_youtube_ad_revenue,estimated_partner_revenue,video_id,views,uploader_type\nfrom __dbt__CTE__rpt_yt_revenue_daily where report_date between to_char(current_date - 52, 'YYYYMMDD')   \nand to_char(current_date - 1, 'YYYYMMDD') and uploader_type in ('self' ,'thirdParty')) r join fds_yt.dim_video v on r.video_id=v.video_id\nleft join \n(select distinct video_id, channel_name from fds_yt.youtube_video_metadata_direct\n where as_on_date=(select max(as_on_date) from fds_yt.youtube_video_metadata_direct)) m\n on r.video_id=m.video_id\nleft join __dbt__CTE__yt_amg_content_groups y\non r.video_id=y.yt_id\nwhere r.report_date between to_char(current_date - 52, 'YYYYMMDD')  and to_char(current_date - 1, 'YYYYMMDD')\nand r.uploader_type='self' \ngroup by 1, 2,3,4,5,6,7\n),  __dbt__CTE__rpt_yt_demographics_views_daily as (\n\n\nselect * from fds_yt.rpt_yt_demographics_views_daily\n),  __dbt__CTE__wwe_demograph_by_gender_age_group as (\n\n\nselect report_date, case when d.channel_name is null then 'Unknown' else d.channel_name end as channel_name, country_code,\ncase when d.country_code='US' then 'United States'\n     when d.country_code='IN' then 'India'\n     when d.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncase when d.duration<=60 then '1_Under 1 Minute'\n     when d.duration<=120 then '2_1-2 Minutes'\n\t when d.duration<=240 then '3_2-4 Minutes'\n\t when d.duration<=360 then '4_4-6 Minutes'\n\t when d.duration<=480 then '5_6-8 Minutes'\n     when d.duration<=600 then '6_8-10 Minutes'\n     when d.duration<=1200 then '7_10-20 Minutes'\n     when d.duration<=3600 then '8_20-60 Minutes'\n     when d.duration>3600 then '9_Over 60 Minutes'\n     else 'other' end as duration_group,\ncase when  report_date_dt-trunc(d.time_uploaded)<=7 then 'new'\nelse 'old' end as debut_type, \ncase when y.amg_content_group in ('Full Match','Kickoff','Network','Originals','PPV Clips','Raw','SmackDown','The Bella Twins','UpUpDownDown','WWE Performance Center') \nthen y.amg_content_group else 'Other' end as owned_class,\ncoalesce(sum(case when gender='MALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as male,\ncoalesce(sum(case when gender='FEMALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as female,\ncoalesce(sum(case when gender='GENDER_OTHER' then views*1000000 else 0 end)/nullif(sum(views),0),0) as gender_other,\ncoalesce(sum(case when age_group='AGE_25_34' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_25_34,\ncoalesce(sum(case when age_group='AGE_45_54' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_45_54,\ncoalesce(sum(case when age_group='AGE_13_17' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_13_17,\ncoalesce(sum(case when age_group='AGE_35_44' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_35_44,\ncoalesce(sum(case when age_group='AGE_55_64' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_55_64,\ncoalesce(sum(case when age_group='AGE_65_' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_65_,\ncoalesce(sum(case when age_group='AGE_18_24' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_18_24\nfrom \n(select report_date,channel_name,country_code,duration,report_date_dt,time_uploaded,gender,age_group,views,video_id,uploader_type\nfrom __dbt__CTE__rpt_yt_demographics_views_daily   where report_date_dt between current_date-52 and current_date - 1 \nand uploader_type in ( 'self' , 'thirdParty')) d \nleft join __dbt__CTE__yt_amg_content_groups y\non d.video_id=y.yt_id\nwhere d.report_date_dt between current_date - 52 and current_date - 1 and d.uploader_type = 'self'\ngroup by 1,2,3,4,5,6,7\n),  __dbt__CTE__monetize_summary_wwe as (\n\nselect a.report_date_dt,a.report_date,a.channel_name,a.country_name,a.country_code,a.duration_group,\na.debut_type,a.owned_class, a.region2, a.country_name2,\nsum(a.views) as views,\nsum(a.hours_watched) as hours_watched,\nsum(a.watch_time_minutes) as watch_time_minutes,\nsum(b.ad_impressions) as ad_impressions,\nsum(b.estimated_youtube_ad_revenue) as yt_ad_revenue,\nsum(b.estimated_partner_revenue) as partner_revenue,\nsum(a.likes) likes,\nsum(a.dislikes) dislikes,\nsum(a.subscribers_gained) subscribers_gained,\nsum(a.subscribers_lost) subscribers_lost,\nsum(b.revenue_views) revenue_views,\nsum(c.male) male,\nsum(c.female) as female,\nsum(c.gender_other) gender_other,\nsum(c.AGE_25_34) AGE_25_34,\nsum(c.AGE_45_54) AGE_45_54,\nsum(c.AGE_13_17) AGE_13_17,\nsum(c.AGE_35_44) AGE_35_44,\nsum(c.AGE_55_64) AGE_55_64,\nsum(c.AGE_65_) AGE_65_,\nsum(c.AGE_18_24) AGE_18_24,\n'Owned' as type from\n __dbt__CTE__wwe_engagement_measures  a\n left join\n  __dbt__CTE__wwe_revenue_views_uploader_self b\n  on a.report_date=b.report_date\nand a.owned_class=b.owned_class\nand a.debut_type=b.debut_type\nand a.country_name=b.country_name\nand a.country_code = b.country_code\nand a.duration_group=b.duration_group\nand a.channel_name=b.channel_name\nleft join\n__dbt__CTE__wwe_demograph_by_gender_age_group c\non a.report_date=c.report_date\nand a.owned_class=c.owned_class\nand a.debut_type=c.debut_type\nand a.country_name=c.country_name\nand a.country_code = c.country_code\nand a.duration_group=c.duration_group\nand a.channel_name=c.channel_name\ngroup by a.report_date_dt,a.report_date,a.channel_name,a.region2, a.country_name2,a.country_name,a.country_code,a.duration_group,a.debut_type,a.owned_class\n),  __dbt__CTE__rpt_yt_ugc_engagement_daily as (\n\n\n\nselect * from fds_yt.rpt_yt_ugc_engagement_daily\n),  __dbt__CTE__ugc_engage_measures as (\n\n\n\nselect report_date,report_date_dt,country_code,\ncase when country_code='US' then 'United States'\n     when country_code='IN' then 'India'\n     when country_code='GB' then 'United Kingdom'\n     else 'ROW' end as country_name,\nd.region_nm as region2,initcap(d.country_nm) as country_name2,\nsum(views) views,sum(watch_time_minutes)/60 as hours_watched,\nsum(watch_time_minutes) as watch_time_minutes,\nsum(likes) likes,\nsum(dislikes) dislikes,\nsum(subscribers_gained) subscribers_gained, \nsum(subscribers_lost) subscribers_lost\nfrom __dbt__CTE__rpt_yt_ugc_engagement_daily ue\nleft join\n(select distinct upper(iso_alpha2_ctry_cd) as iso_alpha2_ctry_cd ,country_nm,region_nm from __dbt__CTE__dim_region_country\nwhere etl_source_name='Youtube') d\non ue.country_code=d.iso_alpha2_ctry_cd\nwhere report_date_dt between current_date - 52 and current_date - 1 \nand dim_source_type_id in (2,3)\ngroup by 1,2,3,4,5,6\n),  __dbt__CTE__ugc_revenue_views_uploader_thirdparty as (\n\n\n\nselect r.report_date,r.country_code,\ncase when r.country_code='US' then 'United States'\n     when r.country_code='IN' then 'India'\n     when r.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name, \nsum(r.ad_impressions) ad_impressions, sum(r.estimated_youtube_ad_revenue) estimated_youtube_ad_revenue, \nsum(r.estimated_partner_revenue) estimated_partner_revenue,\nsum(case when r.video_id+r.report_date in \n(select distinct video_id+report_date from __dbt__CTE__rpt_yt_revenue_daily where estimated_partner_revenue!=0 group by video_id, report_date)\nthen views else 0 end) revenue_views\nfrom \n(select report_date,country_code,ad_impressions,estimated_youtube_ad_revenue,estimated_partner_revenue,video_id,views,uploader_type\nfrom __dbt__CTE__rpt_yt_revenue_daily where report_date between to_char(current_date - 52, 'YYYYMMDD')   and to_char(current_date - 1, 'YYYYMMDD') \nand uploader_type in ('self' ,'thirdParty')) r \nwhere r.report_date between to_char(current_date - 52, 'YYYYMMDD') and to_char(current_date - 1, 'YYYYMMDD')\nand r.uploader_type='thirdParty' \ngroup by 1,2,3\n),  __dbt__CTE__ugc_demograph_by_gender_age_group as (\n\n\n\nselect report_date, country_code,\ncase when d.country_code='US' then 'United States'\n     when d.country_code='IN' then 'India'\n     when d.country_code='GB' then 'United Kingdom'\nelse 'ROW' end as country_name,\ncoalesce(sum(case when gender='MALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as male,\ncoalesce(sum(case when gender='FEMALE' then views*1000000 else 0 end)/nullif(sum(views),0),0) as female,\ncoalesce(sum(case when gender='GENDER_OTHER' then views*1000000 else 0 end)/nullif(sum(views),0),0) as gender_other,\ncoalesce(sum(case when age_group='AGE_25_34' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_25_34,\ncoalesce(sum(case when age_group='AGE_45_54' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_45_54,\ncoalesce(sum(case when age_group='AGE_13_17' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_13_17,\ncoalesce(sum(case when age_group='AGE_35_44' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_35_44,\ncoalesce(sum(case when age_group='AGE_55_64' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_55_64,\ncoalesce(sum(case when age_group='AGE_65_' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_65_,\ncoalesce(sum(case when age_group='AGE_18_24' then views*1000000 else 0 end)/nullif(sum(views),0),0) as AGE_18_24\nfrom (select report_date,channel_name,country_code,duration,report_date_dt,time_uploaded,gender,age_group,views,video_id,uploader_type\nfrom __dbt__CTE__rpt_yt_demographics_views_daily where report_date_dt between current_date-52 and current_date - 1 and uploader_type in ( 'self' , 'thirdParty')) d \nwhere d.report_date_dt between current_date - 52 and current_date - 1  and d.uploader_type = 'thirdParty'\ngroup by 1,2,3\n),  __dbt__CTE__monetize_summary_ugc as (\n\nselect a.report_date_dt,a.report_date,'UGC' as channel_name,a.country_name,a.country_code,'' as duration_group,'' as debut_type, '' as owned_class, a.region2, a.country_name2,\nsum(a.views) as views,\nsum(a.hours_watched) as hours_watched,\nsum(a.watch_time_minutes) as watch_time_minutes,\nsum(b.ad_impressions) as ad_impressions, \nsum(b.estimated_youtube_ad_revenue) as yt_ad_revenue,\nsum(b.estimated_partner_revenue) as partner_revenue,\nsum(a.likes) likes,\nsum(a.dislikes) dislikes,\nsum(a.subscribers_gained) subscribers_gained, \nsum(a.subscribers_lost) subscribers_lost,\nsum(b.revenue_views) revenue_views,\nsum(c.male) male,\nsum(c.female) as female,\nsum(c.gender_other) gender_other,\nsum(c.AGE_25_34) AGE_25_34,\nsum(c.AGE_45_54) AGE_45_54,\nsum(c.AGE_13_17) AGE_13_17,\nsum(c.AGE_35_44) AGE_35_44,\nsum(c.AGE_55_64) AGE_55_64,\nsum(c.AGE_65_) AGE_65_,\nsum(c.AGE_18_24) AGE_18_24,\n'UGC' as type from\n__dbt__CTE__ugc_engage_measures a\nleft join \n__dbt__CTE__ugc_revenue_views_uploader_thirdparty b\non \na.report_date=b.report_date\nand a.country_code=b.country_code\nleft join __dbt__CTE__ugc_demograph_by_gender_age_group c\non a.report_date=c.report_date\nand a.country_name=c.country_name\nand a.country_code = c.country_code\ngroup by a.report_date,a.report_date_dt, a.region2, a.country_name2, a.country_name,a.country_code\n)select country_name,country_code,channel_name, view_date, report_date, region, channel_short,region2, country_name2,\nviews,hours_watched, yt_ad_revenue,ad_impressions,partner_revenue,watch_time_minutes,\nlikes,\ndislikes,\nsubscribers_gained, \nsubscribers_lost,\nrevenue_views,\nmale,\nfemale,\ngender_other,\nAGE_25_34,\nAGE_45_54,\nAGE_13_17,\nAGE_35_44,\nAGE_55_64,\nAGE_65_,\nAGE_18_24,\ndebut_type, type, owned_class, duration_group,'mb_yt_exec_weekly_trend' as table_name, b.week_name,\ncurrent_timestamp::timestamp without time zone as insert_timestamp\nfrom (select * , report_date_dt as view_date,\ncase when country_name='United States' then 'United States' \nelse 'ROW' end as region,\n'mb_yt_exec_weekly_trend' as table_name,\ncase when channel_name='UpUpDownDown' then 'UUDD'\nwhen channel_name='WWE' then 'WWE'\nwhen channel_name='UGC' then 'UGC'\nelse 'Other' end as channel_short\nfrom  \n(\n(select * from __dbt__CTE__monetize_summary_wwe\nunion all\nselect * from __dbt__CTE__monetize_summary_ugc)\n)) a\njoin \n(select full_date, Case when cal_year_week_num = 53 then 'Wk-1,' || cal_year + 1 else 'Wk-' || cal_year_week_num || ', ' || cal_year end as week_name from \ncdm.dim_date \nwhere full_date between current_date - 52 and current_date - 1) b on a.view_date = b.full_date", "wrapped_sql": "None"}, "error": null, "status": null, "execution_time": 0.035452842712402344, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2020-05-06T10:40:38.798822Z", "completed_at": "2020-05-06T10:40:38.832888Z"}, {"name": "execute", "started_at": "2020-05-06T10:40:38.833285Z", "completed_at": "2020-05-06T10:40:38.833298Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2020-05-06T10:40:38.868222Z", "elapsed_time": 0.6406092643737793}