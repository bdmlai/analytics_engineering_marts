{"nodes": {"model.analytics_engineering_marts.aggr_mkt_monthly_paid_media_execution": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_nplus',\t\r\n\t\"materialized\": 'incremental',\r\n\t\"pre-hook\":\"delete from fds_nplus.aggr_nplus_monthly_paid_media_execution\"\r\n\t\t})\r\n}}\r\n\r\nwith display as \r\n(select  trunc(next_day(trunc(date)-1,'Su')) as week,\r\ncase when country= 'US' then 'USA'\r\nwhen country = 'DE' then 'GERMANY'\r\nwhen country = 'AU' or country = 'NZ' then 'AUS/NZ'\r\nwhen country in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE', 'UK' ) then 'UK/IRE' else 'ROW' end as country,\r\n'Paid Display' as vehicle,\r\ncase when split_part(placement,'_',8) in ('craveonline media','draftkings','reddit, inc','sublime skinz inc','wikia. inc') then 'Nurture'\r\nwhen split_part(placement,'_',8) in ('tapjoy','xaxis','xaxisdirect','emea','exponential','mediaiq','miq','turbine','yieldmo','aol',\r\n'bleacherreport.com','fite.tv','fyber','samsung electronics','viant us llc','vibrant media','ebuzzing','tapjoy','captify','programmaticmechanics',\r\n'vdx','vdxl','samba','fandom') then 'Conversion' else split_part(placement,'_',8) end as level2, \r\nsplit_part(placement,'_',8) as level3, \r\ncase when level3 = 'yieldmo' then 'Clicks' else 'Impressions' end as metric,\r\nsum(impressions) as Impressions,\r\nsum(actualized_spend) as Spend,\r\n0 as Clicks\r\nfrom fds_nplus.wavemaker_monthly_display_mmm\r\ngroup by 1,2,3,4,5,6),\r\n\r\nsearch as \r\n(select trunc(next_day(trunc(\"from\")-1,'Su')) as week,\r\ncase when geo_group = 'USA' then 'USA'\r\nwhen geo_group = 'Germany' then 'GERMANY'\r\nwhen geo_group in ('Australia','New Zealand') then 'AUS/NZ'\r\nwhen geo_group in ('UK','Ireland','IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\r\n'Paid Search' as vehicle,\r\ncase when publisher = 'Google AdWords' then 'Google' \r\n     when publisher = 'Bing Ads' then 'Bing' else publisher end as level2, \r\n'' as level3, \r\n'Clicks' as metric,\r\n0 as Impressions,\r\nsum(cost) as Spend,\r\nsum(clicks) as Clicks\r\nfrom fds_nplus.wavemaker_monthly_search_mmm\r\ngroup by 1,2,3,4,5,6),\r\n\r\nyoutube as\r\n(select trunc(next_day(trunc(day)-1,'Su')) as week,\r\ncase when geography = 'US' then 'USA'\r\nwhen geography = 'Germany' then 'GERMANY'\r\nwhen geography in ('Australia','New Zealand') then 'AUS/NZ'\r\nwhen geography in ('UK','Ireland','IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\r\n'Paid Youtube' as vehicle,\r\n'Youtube Trueview' as level2,\r\n'' as level3, \r\n'Impressions' as metric,\r\nsum(impressions) as Impressions,\r\nsum(cost) as Spend,\r\n0 as Clicks\r\nfrom fds_nplus.wavemaker_monthly_youtube_mmm\r\ngroup by 1,2,3,4,5,6),\r\n\r\nfacebook as \r\n(select trunc(next_day(trunc(day)-1,'Su')) as week,\r\ncase when country = 'US' then 'USA'\r\nwhen country = 'DE' then 'GERMANY'\r\nwhen country in ('AU','NZ') then 'AUS/NZ'\r\nwhen country in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE','UK') then 'UK/IRE' else 'ROW' end as country,\r\n'Paid Social' as vehicle,\r\n'Paid Facebook' as level2,\r\n'Facebook' as level3, \r\n'Impressions' as metric,\r\nsum(impressions) as Impressions,\r\nsum(amount_spent_usd) as Spend,\r\n0 as Clicks\r\nfrom fds_nplus.wavemaker_monthly_facebook_mmm\r\ngroup by 1,2,3,4,5,6),\r\n\r\ntwitter as \r\n(select trunc(next_day(trunc(time_period)-1,'Su')) as week,\r\ncase when location = 'United States' then 'USA'\r\nwhen location = 'DE' then 'GERMANY'\r\nwhen location in ('AU','NZ') then 'AUS/NZ'\r\nwhen location in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE','UK') then 'UK/IRE' else 'ROW' end as country,\r\n'Paid Social' as vehicle,\r\n'Paid Twitter' as level2,\r\n'Twitter' as level3, \r\n'Impressions' as metric,\r\nsum(impressions) as Impressions,\r\nsum(spend) as Spend,\r\n0 as Clicks\r\nfrom fds_nplus.wavemaker_monthly_twitter_mmm\r\ngroup by 1,2,3,4,5,6),\r\n\r\nsnapchat as \r\n(select trunc(next_day(trunc(day)-1,'Su')) as week,\r\n'USA' as country,\r\n'Paid Social' as vehicle,\r\n'Paid Snapchat' as level2,\r\n'Snapchat' as level3, \r\n'Impressions' as metric,\r\nsum(paid_impressions) as Impressions,\r\nsum(spend) as Spend,\r\n0 as Clicks\r\nfrom fds_nplus.wavemaker_monthly_snapchat_mmm\r\ngroup by 1,2,3,4,5,6),\r\n\r\nconsolidation as \r\n(select * from display\r\nunion all select * from search\r\nunion all select * from youtube\r\nunion all select * from facebook\r\nunion all select * from twitter\r\nunion all select * from snapchat\r\norder by week,country)\r\n\r\nselect a.*,'Paid Media' as data_category,'All' as audience,\r\ncase when b.ppv_name is null then 'Non Go-Home Week' else b.ppv_name end as ppv_name,\r\ncase when b.ppv_type is null then 'Non Go-Home Week' else b.ppv_type end as ppv_type,\r\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_NPLUS' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\r\n    SYSDATE                                   AS etl_insert_rec_dttm,\r\n    CAST(NULL as VARCHAR)                     AS etl_update_user_id,\r\n    CAST( NULL AS TIMESTAMP)                  AS etl_update_rec_dttm\r\nfrom consolidation a\r\nleft join \r\n(select distinct \r\ntrunc(next_day(trunc(premiere_date)-1,'Su')) as week,\r\ncase when episode_nm in ('WrestleMania 36 Part 1','WrestleMania 36 Part 2') then  'WrestleMania 36' else episode_nm end as ppv_name,\r\nppv_brand_name as ppv_type\r\nfrom cdm.dim_content_classification_title where series_group='WWE PPV') b\r\non a.week = b.week\r\norder by a.week", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_mkt", "aggregate", "aggr_mkt_monthly_paid_media_execution"], "unique_id": "model.analytics_engineering_marts.aggr_mkt_monthly_paid_media_execution", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_mkt/aggregate/aggr_mkt_monthly_paid_media_execution.sql", "original_file_path": "models/fds_mkt/aggregate/aggr_mkt_monthly_paid_media_execution.sql", "name": "aggr_mkt_monthly_paid_media_execution", "resource_type": "model", "alias": "aggr_mkt_monthly_paid_media_execution", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nplus.aggr_nplus_monthly_paid_media_execution", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_mkt/aggregate/aggr_mkt_monthly_paid_media_execution.sql", "compiled": true, "compiled_sql": "\n\nwith display as \n(select  trunc(next_day(trunc(date)-1,'Su')) as week,\ncase when country= 'US' then 'USA'\nwhen country = 'DE' then 'GERMANY'\nwhen country = 'AU' or country = 'NZ' then 'AUS/NZ'\nwhen country in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE', 'UK' ) then 'UK/IRE' else 'ROW' end as country,\n'Paid Display' as vehicle,\ncase when split_part(placement,'_',8) in ('craveonline media','draftkings','reddit, inc','sublime skinz inc','wikia. inc') then 'Nurture'\nwhen split_part(placement,'_',8) in ('tapjoy','xaxis','xaxisdirect','emea','exponential','mediaiq','miq','turbine','yieldmo','aol',\n'bleacherreport.com','fite.tv','fyber','samsung electronics','viant us llc','vibrant media','ebuzzing','tapjoy','captify','programmaticmechanics',\n'vdx','vdxl','samba','fandom') then 'Conversion' else split_part(placement,'_',8) end as level2, \nsplit_part(placement,'_',8) as level3, \ncase when level3 = 'yieldmo' then 'Clicks' else 'Impressions' end as metric,\nsum(impressions) as Impressions,\nsum(actualized_spend) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_display_mmm\ngroup by 1,2,3,4,5,6),\n\nsearch as \n(select trunc(next_day(trunc(\"from\")-1,'Su')) as week,\ncase when geo_group = 'USA' then 'USA'\nwhen geo_group = 'Germany' then 'GERMANY'\nwhen geo_group in ('Australia','New Zealand') then 'AUS/NZ'\nwhen geo_group in ('UK','Ireland','IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Paid Search' as vehicle,\ncase when publisher = 'Google AdWords' then 'Google' \n     when publisher = 'Bing Ads' then 'Bing' else publisher end as level2, \n'' as level3, \n'Clicks' as metric,\n0 as Impressions,\nsum(cost) as Spend,\nsum(clicks) as Clicks\nfrom fds_nplus.wavemaker_monthly_search_mmm\ngroup by 1,2,3,4,5,6),\n\nyoutube as\n(select trunc(next_day(trunc(day)-1,'Su')) as week,\ncase when geography = 'US' then 'USA'\nwhen geography = 'Germany' then 'GERMANY'\nwhen geography in ('Australia','New Zealand') then 'AUS/NZ'\nwhen geography in ('UK','Ireland','IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Paid Youtube' as vehicle,\n'Youtube Trueview' as level2,\n'' as level3, \n'Impressions' as metric,\nsum(impressions) as Impressions,\nsum(cost) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_youtube_mmm\ngroup by 1,2,3,4,5,6),\n\nfacebook as \n(select trunc(next_day(trunc(day)-1,'Su')) as week,\ncase when country = 'US' then 'USA'\nwhen country = 'DE' then 'GERMANY'\nwhen country in ('AU','NZ') then 'AUS/NZ'\nwhen country in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE','UK') then 'UK/IRE' else 'ROW' end as country,\n'Paid Social' as vehicle,\n'Paid Facebook' as level2,\n'Facebook' as level3, \n'Impressions' as metric,\nsum(impressions) as Impressions,\nsum(amount_spent_usd) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_facebook_mmm\ngroup by 1,2,3,4,5,6),\n\ntwitter as \n(select trunc(next_day(trunc(time_period)-1,'Su')) as week,\ncase when location = 'United States' then 'USA'\nwhen location = 'DE' then 'GERMANY'\nwhen location in ('AU','NZ') then 'AUS/NZ'\nwhen location in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE','UK') then 'UK/IRE' else 'ROW' end as country,\n'Paid Social' as vehicle,\n'Paid Twitter' as level2,\n'Twitter' as level3, \n'Impressions' as metric,\nsum(impressions) as Impressions,\nsum(spend) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_twitter_mmm\ngroup by 1,2,3,4,5,6),\n\nsnapchat as \n(select trunc(next_day(trunc(day)-1,'Su')) as week,\n'USA' as country,\n'Paid Social' as vehicle,\n'Paid Snapchat' as level2,\n'Snapchat' as level3, \n'Impressions' as metric,\nsum(paid_impressions) as Impressions,\nsum(spend) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_snapchat_mmm\ngroup by 1,2,3,4,5,6),\n\nconsolidation as \n(select * from display\nunion all select * from search\nunion all select * from youtube\nunion all select * from facebook\nunion all select * from twitter\nunion all select * from snapchat\norder by week,country)\n\nselect a.*,'Paid Media' as data_category,'All' as audience,\ncase when b.ppv_name is null then 'Non Go-Home Week' else b.ppv_name end as ppv_name,\ncase when b.ppv_type is null then 'Non Go-Home Week' else b.ppv_type end as ppv_type,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_NPLUS' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    SYSDATE                                   AS etl_insert_rec_dttm,\n    CAST(NULL as VARCHAR)                     AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                  AS etl_update_rec_dttm\nfrom consolidation a\nleft join \n(select distinct \ntrunc(next_day(trunc(premiere_date)-1,'Su')) as week,\ncase when episode_nm in ('WrestleMania 36 Part 1','WrestleMania 36 Part 2') then  'WrestleMania 36' else episode_nm end as ppv_name,\nppv_brand_name as ppv_type\nfrom cdm.dim_content_classification_title where series_group='WWE PPV') b\non a.week = b.week\norder by a.week", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith display as \n(select  trunc(next_day(trunc(date)-1,'Su')) as week,\ncase when country= 'US' then 'USA'\nwhen country = 'DE' then 'GERMANY'\nwhen country = 'AU' or country = 'NZ' then 'AUS/NZ'\nwhen country in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE', 'UK' ) then 'UK/IRE' else 'ROW' end as country,\n'Paid Display' as vehicle,\ncase when split_part(placement,'_',8) in ('craveonline media','draftkings','reddit, inc','sublime skinz inc','wikia. inc') then 'Nurture'\nwhen split_part(placement,'_',8) in ('tapjoy','xaxis','xaxisdirect','emea','exponential','mediaiq','miq','turbine','yieldmo','aol',\n'bleacherreport.com','fite.tv','fyber','samsung electronics','viant us llc','vibrant media','ebuzzing','tapjoy','captify','programmaticmechanics',\n'vdx','vdxl','samba','fandom') then 'Conversion' else split_part(placement,'_',8) end as level2, \nsplit_part(placement,'_',8) as level3, \ncase when level3 = 'yieldmo' then 'Clicks' else 'Impressions' end as metric,\nsum(impressions) as Impressions,\nsum(actualized_spend) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_display_mmm\ngroup by 1,2,3,4,5,6),\n\nsearch as \n(select trunc(next_day(trunc(\"from\")-1,'Su')) as week,\ncase when geo_group = 'USA' then 'USA'\nwhen geo_group = 'Germany' then 'GERMANY'\nwhen geo_group in ('Australia','New Zealand') then 'AUS/NZ'\nwhen geo_group in ('UK','Ireland','IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Paid Search' as vehicle,\ncase when publisher = 'Google AdWords' then 'Google' \n     when publisher = 'Bing Ads' then 'Bing' else publisher end as level2, \n'' as level3, \n'Clicks' as metric,\n0 as Impressions,\nsum(cost) as Spend,\nsum(clicks) as Clicks\nfrom fds_nplus.wavemaker_monthly_search_mmm\ngroup by 1,2,3,4,5,6),\n\nyoutube as\n(select trunc(next_day(trunc(day)-1,'Su')) as week,\ncase when geography = 'US' then 'USA'\nwhen geography = 'Germany' then 'GERMANY'\nwhen geography in ('Australia','New Zealand') then 'AUS/NZ'\nwhen geography in ('UK','Ireland','IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Paid Youtube' as vehicle,\n'Youtube Trueview' as level2,\n'' as level3, \n'Impressions' as metric,\nsum(impressions) as Impressions,\nsum(cost) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_youtube_mmm\ngroup by 1,2,3,4,5,6),\n\nfacebook as \n(select trunc(next_day(trunc(day)-1,'Su')) as week,\ncase when country = 'US' then 'USA'\nwhen country = 'DE' then 'GERMANY'\nwhen country in ('AU','NZ') then 'AUS/NZ'\nwhen country in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE','UK') then 'UK/IRE' else 'ROW' end as country,\n'Paid Social' as vehicle,\n'Paid Facebook' as level2,\n'Facebook' as level3, \n'Impressions' as metric,\nsum(impressions) as Impressions,\nsum(amount_spent_usd) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_facebook_mmm\ngroup by 1,2,3,4,5,6),\n\ntwitter as \n(select trunc(next_day(trunc(time_period)-1,'Su')) as week,\ncase when location = 'United States' then 'USA'\nwhen location = 'DE' then 'GERMANY'\nwhen location in ('AU','NZ') then 'AUS/NZ'\nwhen location in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE','UK') then 'UK/IRE' else 'ROW' end as country,\n'Paid Social' as vehicle,\n'Paid Twitter' as level2,\n'Twitter' as level3, \n'Impressions' as metric,\nsum(impressions) as Impressions,\nsum(spend) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_twitter_mmm\ngroup by 1,2,3,4,5,6),\n\nsnapchat as \n(select trunc(next_day(trunc(day)-1,'Su')) as week,\n'USA' as country,\n'Paid Social' as vehicle,\n'Paid Snapchat' as level2,\n'Snapchat' as level3, \n'Impressions' as metric,\nsum(paid_impressions) as Impressions,\nsum(spend) as Spend,\n0 as Clicks\nfrom fds_nplus.wavemaker_monthly_snapchat_mmm\ngroup by 1,2,3,4,5,6),\n\nconsolidation as \n(select * from display\nunion all select * from search\nunion all select * from youtube\nunion all select * from facebook\nunion all select * from twitter\nunion all select * from snapchat\norder by week,country)\n\nselect a.*,'Paid Media' as data_category,'All' as audience,\ncase when b.ppv_name is null then 'Non Go-Home Week' else b.ppv_name end as ppv_name,\ncase when b.ppv_type is null then 'Non Go-Home Week' else b.ppv_type end as ppv_type,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_NPLUS' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    SYSDATE                                   AS etl_insert_rec_dttm,\n    CAST(NULL as VARCHAR)                     AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                  AS etl_update_rec_dttm\nfrom consolidation a\nleft join \n(select distinct \ntrunc(next_day(trunc(premiere_date)-1,'Su')) as week,\ncase when episode_nm in ('WrestleMania 36 Part 1','WrestleMania 36 Part 2') then  'WrestleMania 36' else episode_nm end as ppv_name,\nppv_brand_name as ppv_type\nfrom cdm.dim_content_classification_title where series_group='WWE PPV') b\non a.week = b.week\norder by a.week"}, "model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_nplus',\t\r\n\t\"materialized\": 'incremental',\r\n\t\"pre-hook\":\"delete from fds_nplus.aggr_nplus_monthly_owned_media_execution\"\r\n\t\t})\r\n}}\r\n\r\nwith yt_card_impressions as\r\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\r\ncase when country_code= 'US' then 'USA'\r\nwhen country_code = 'DE' then 'GERMANY'\r\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\r\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\r\n'Owned Youtube' as vehicle,'Cards' as level2, '' as level3  , 'Impressions' as metric ,\r\nsum(card_teaser_impressions) as exposure\r\nfrom fds_yt.youtube_cards\r\nwhere card_type= 68 AND uploader_type = 'self' \r\ngroup by 1,2,3,4,5,6),\r\n\r\nyt_annotation_impressions as\r\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\r\ncase when country_code= 'US' then 'USA'\r\nwhen country_code = 'DE' then 'GERMANY'\r\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\r\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\r\n'Owned Youtube' as vehicle,'Annotations' as level2, '' as level3  , 'Impressions' as metric,\r\nsum(annotation_impressions) as exposure\r\nfrom {{source('fds_yt','youtube_annotations')}}\r\nwhere annotation_type='30' AND uploader_type = 'self'\r\ngroup by 1,2,3,4,5,6),\r\n\r\nyt_end_screen_impressions as\r\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\r\ncase when country_code= 'US' then 'USA'\r\nwhen country_code = 'DE' then 'GERMANY'\r\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\r\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\r\n'Owned Youtube' as vehicle,'EndScreen' as level2, '' as level3 , 'Impressions' as metric,\r\nsum(end_screen_element_impressions) as exposure\r\nfrom {{source('fds_yt','youtube_end_screens')}}\r\nwhere end_screen_element_type = '506' AND uploader_type = 'self'\r\ngroup by 1,2,3,4,5,6),\r\n\r\nfb_impressions as \r\n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\r\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Facebook' as level3 , 'Impressions' as metric,\r\nsum(impressions_total) as exposure from\r\n(select * from {{source('fds_fbk','fact_fb_consumption_post')}} where lower(post_text)  like '%network%')\r\ngroup by 1,2,3,4,5,6),\r\n\r\ntw_impressions as\r\n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\r\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Twitter' as level3 , 'Impressions' as metric,\r\nsum(impressions) as exposure from\r\n(select distinct * from {{source('fds_tw','fact_tw_consumption_post')}} where lower(tweet)  like '%network%')\r\ngroup by 1,2,3,4,5,6),\r\n\r\nig_impressions as\r\n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\r\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Instagram' as level3 , 'Impressions' as metric,\r\nsum(impressions) as exposure from\r\n(select distinct * from {{source('fds_igm','fact_ig_consumption_post')}} where lower(caption)  like '%network%')\r\ngroup by 1,2,3,4,5,6),\r\n\r\nowned_tv_us_vshp as\r\n(select trunc(next_day(trunc(cast(cast(orig_broadcast_date_id as varchar) as date))-1,'Su')) as week,\r\n'USA' as country,'Owned TV' as vehicle,'Owned TV Viewership' as level2,\r\ncase when src_program_name='WWE ENTERTAINMENT' then 'RAW' \r\nwhen src_program_name like '%WWE FRI NIGHT SMACKDOWN%' then 'SMACKDOWN'\r\nwhen src_program_name='WWE NXT' then 'NXT' end as level3,\r\n'Viewership' as metric,\r\navg(most_current_us_audience_avg_proj_000) as exposure\r\nfrom {{source('fds_nl','fact_nl_minxmin_ratings')}} where  \r\nsrc_demographic_group='Persons 2 - 99' and src_playback_period_cd='Live+SD | TV with Digital | Linear with VOD'\r\nand src_program_name in ('WWE ENTERTAINMENT','WWE FRI NIGHT SMACKDOWN','WWE FRI NIGHT SMACKDOWN L','WWE NXT')\r\ngroup by 1,2,3,4,5,6),\r\n\r\nowned_tv_promos as\r\n(select distinct trunc(next_day(trunc(airdate)-1,'Su')) as week,\r\n'Global' as country,'Owned TV' as vehicle,\r\ncase when lower(segmenttype) like  'announcer on camera' and network_flag = 1 then 'Paid Tier TV Promos Count Announcer on Camera'\r\nwhen (lower(segmenttype) ='promo' or lower(segmenttype) like '%sponsor element%' ) and network_flag = 1 then 'Paid Tier TV Promos Count Promo'\r\nwhen lower(segmenttype) like '%lower third%' and network_flag = 1 then 'Paid Tier TV Promos Count Lower Third' \r\nwhen lower(segmenttype) ='promo graphic' and network_flag = 1 then 'Paid Tier TV Promos Count Promo Graphic'\r\n\r\nwhen lower(segmenttype) like  'announcer on camera' and freetier_flag = 1 then 'Free Tier TV Promos Count Announcer on Camera'\r\nwhen (lower(segmenttype) ='promo' or lower(segmenttype) like '%sponsor element%' ) and freetier_flag = 1  then 'Free Tier TV Promos Count Promo'\r\nwhen lower(segmenttype) like '%lower third%' and freetier_flag = 1  then 'Free Tier TV Promos Count Lower Third' \r\nwhen lower(segmenttype) ='promo graphic' and freetier_flag = 1  then 'Free Tier TV Promos Count Promo Graphic'\r\nelse lower(segmenttype) end as level2,\r\nupper(show_type) as level3,'Number of Promos' as metric,\r\ncount ((lower(sponsors))) as exposure\r\nfrom \r\n(select cast(title as varchar(512)) as show_type, cast(showdbid as varchar(512)) as fileid , airdate, segmenttype, comment ,sponsors,\r\ncase when (lower(sponsors) like '%network%' and lower(sponsors) not like '%free tier%') then 1 else 0 end as network_flag,\r\ncase when lower(sponsors) like '%free tier%' then 1 else 0 end as freetier_flag\r\nfrom {{source('udl_nplus','raw_lite_log')}}\r\nwhere (lower(segmenttype) like  'announcer on camera' or lower(segmenttype) like '%promo%' or lower(segmenttype) like '%sponsor element%' \r\nor lower(segmenttype) like '%lower third%')\r\nand (lower(sponsors) like '%network%' or lower(sponsors) like '%free tier%') \r\nand lower(title) in ('smackdown' ,'raw','nxt'))\r\ngroup by 1,2,3,4,5,6),\r\n\r\nowned_tv_impressions as\r\n(select a.week,'USA' as country,'Owned TV' as vehicle,\r\ncase when b.level2 = 'Paid Tier TV Promos Count Announcer on Camera' then 'Owned TV Paid Tier Announcer on Camera'\r\nwhen b.level2 = 'Paid Tier TV Promos Count Lower Third' then 'Owned TV Paid Tier Lower Third'\r\nwhen b.level2 = 'Paid Tier TV Promos Count Promo' then 'Owned TV Paid Tier Promo'\r\nwhen b.level2 = 'Paid Tier TV Promos Count Promo Graphic' then 'Owned TV Paid Tier Promo Graphic' \r\nwhen b.level2 = 'Free Tier TV Promos Count Announcer on Camera' then 'Owned TV Free Tier Announcer on Camera'\r\nwhen b.level2 = 'Free Tier TV Promos Count Lower Third' then 'Owned TV Free Tier Lower Third'\r\nwhen b.level2 = 'Free Tier TV Promos Count Promo' then 'Owned TV Free Tier Promo'\r\nwhen b.level2 = 'Free Tier TV Promos Count Promo Graphic' then 'Owned TV Free Tier Promo Graphic' \r\nend as level2,\r\na.level3,\r\n'Impressions' as metric,a.exposure*b.exposure as exposure\r\nfrom owned_tv_us_vshp a\r\nleft join owned_tv_promos b\r\non a.week = b.week\r\nand a.level3 = b.level3),\r\n\r\nowned_tv_nonus_vshp as\r\n(select trunc(next_day(trunc(cast(broadcast_date as date))-1,'Su')) as week,\r\ncase when src_country in ( 'united kingdom', 'ireland') then 'UK/IRE'\r\nwhen src_country in  ('australia', 'new zealand') then 'AUS/NZ' \r\nwhen src_country in ('germany') then 'GERMANY'else 'ROW' end as country,\r\n'Owned TV' as vehicle,'Owned TV Viewership' as level2,\r\nupper(series_name) as level3,'Viewership' as metric,\r\nsum(aud) as exposure\r\nfrom fds_kntr.fact_kntr_wwe_telecast_data \r\nwhere demographic_type='Everyone' and live_flag='Y'\r\ngroup by 1,2,3,4,5,6),\r\n\r\nowned_tv_nonus_impressions as\r\n(select a.week,a.country,'Owned TV' as vehicle,\r\ncase when b.level2 = 'Paid Tier TV Promos Count Announcer on Camera' then 'Owned TV Paid Tier Announcer on Camera'\r\nwhen b.level2 = 'Paid Tier TV Promos Count Lower Third' then 'Owned TV Paid Tier Lower Third'\r\nwhen b.level2 = 'Paid Tier TV Promos Count Promo' then 'Owned TV Paid Tier Promo'\r\nwhen b.level2 = 'Paid Tier TV Promos Count Promo Graphic' then 'Owned TV Paid Tier Promo Graphic' \r\n\r\nwhen b.level2 = 'Free Tier TV Promos Count Announcer on Camera' then 'Owned TV Free Tier Announcer on Camera'\r\nwhen b.level2 = 'Free Tier TV Promos Count Lower Third' then 'Owned TV Free Tier Lower Third'\r\nwhen b.level2 = 'Free Tier TV Promos Count Promo' then 'Owned TV Free Tier Promo'\r\nwhen b.level2 = 'Free Tier TV Promos Count Promo Graphic' then 'Owned TV Free Tier Promo Graphic' \r\nend as level2,\r\na.level3,\r\n'Impressions' as metric,a.exposure*b.exposure as exposure\r\nfrom owned_tv_nonus_vshp a\r\nleft join owned_tv_promos b\r\non a.week = b.week\r\nand a.level3 = b.level3),\r\n\r\nowned_tv_ppv_vshp as\r\n(select trunc(next_day(trunc(event_date)-1,'Su')) as week,\r\n'Global' as country,\r\n'Owned TV' as vehicle,\r\n'Owned TV Viewership' as level2,\r\n'PPV Kick-Off' as level3,\r\n'Viewership' as metric,\r\nsum(views) as exposure\r\nfrom fds_nplus.rpt_network_ppv_liveplusvod\r\nwhere event_brand='PPV' and platform='Total' and data_level='Live+VOD'\r\ngroup by 1,2,3,4,5,6),\r\n\r\nowned_tv_ppv_promos as\r\n(select distinct trunc(next_day(trunc(airdate)-1,'Su')) as week,\r\n'Global' as country,'Owned TV' as vehicle,\r\n'TV Promos Count PPV Kick-Off' as level2,\r\n'PPV Kick-Off' as level3,'Number of Promos' as metric,\r\nsum(network_flag) as exposure\r\nfrom \r\n(select cast(title as varchar(512)) as show_type, cast(showdbid as varchar(512)) as fileid , airdate, segmenttype, comment ,sponsors,\r\ncase when lower(sponsors) like '%network%' then 1 else 0 end as network_flag\r\nfrom udl_nplus.raw_lite_log\r\nwhere (lower(segmenttype) like  'announcer on camera' or lower(segmenttype) like '%promo%' or lower(segmenttype) like '%sponsor element%' \r\nor lower(segmenttype) like '%lower third%')\r\nand lower(sponsors) like '%network%' and lower(sponsors) not like '%free tier%' and lower(title) in ('smackdown' ,'raw','nxt'))\r\ngroup by 1,2,3,4,5,6),\r\n\r\nowned_tv_ppv_impressions as\r\n(select a.week,'Global' as country,'Owned TV' as vehicle,\r\n'TV Promos Count PPV Kick-Off' as level2,\r\na.level3,\r\n'Impressions' as metric,a.exposure*b.exposure as exposure\r\nfrom owned_tv_ppv_vshp a\r\nleft join owned_tv_ppv_promos b\r\non a.week = b.week\r\nand a.level3 = b.level3),\r\nfinal as (\r\nselect * from yt_card_impressions\r\nunion all select * from yt_annotation_impressions\r\nunion all select * from yt_end_screen_impressions\r\nunion all select * from fb_impressions\r\nunion all select * from tw_impressions\r\nunion all select * from ig_impressions\r\nunion all select * from owned_tv_us_vshp\r\nunion all select * from owned_tv_promos\r\nunion all select * from owned_tv_impressions\r\nunion all select * from owned_tv_nonus_vshp\r\nunion all select * from owned_tv_nonus_impressions\r\nunion all select * from owned_tv_ppv_vshp\r\nunion all select * from owned_tv_ppv_promos\r\nunion all select * from owned_tv_ppv_impressions\r\norder by week)\r\nselect a.*,'Owned Media' as data_category,'All' as audience,\r\ncase when b.ppv_name is null then 'Non Go-Home Week' else b.ppv_name end as ppv_name,\r\ncase when b.ppv_type is null then 'Non Go-Home Week' else b.ppv_type end as ppv_type,\r\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_NPLUS' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\r\n    SYSDATE                                   AS etl_insert_rec_dttm,\r\n    CAST(NULL as VARCHAR)                     AS etl_update_user_id,\r\n    CAST( NULL AS TIMESTAMP)                  AS etl_update_rec_dttm\r\nfrom final a\r\nleft join \r\n(select distinct \r\ntrunc(next_day(trunc(premiere_date)-1,'Su')) as week,\r\ncase when episode_nm in ('WrestleMania 36 Part 1','WrestleMania 36 Part 2') then  'WrestleMania 36' else episode_nm end as ppv_name,\r\nppv_brand_name as ppv_type\r\nfrom cdm.dim_content_classification_title where series_group='WWE PPV') b\r\non a.week = b.week\r\norder by a.week", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_mkt", "aggregate", "aggr_mkt_monthly_owned_media_execution"], "unique_id": "model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_mkt/aggregate/aggr_mkt_monthly_owned_media_execution.sql", "original_file_path": "models/fds_mkt/aggregate/aggr_mkt_monthly_owned_media_execution.sql", "name": "aggr_mkt_monthly_owned_media_execution", "resource_type": "model", "alias": "aggr_mkt_monthly_owned_media_execution", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nplus.aggr_nplus_monthly_owned_media_execution", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_yt", "youtube_annotations"], ["fds_yt", "youtube_end_screens"], ["fds_fbk", "fact_fb_consumption_post"], ["fds_tw", "fact_tw_consumption_post"], ["fds_igm", "fact_ig_consumption_post"], ["fds_nl", "fact_nl_minxmin_ratings"], ["udl_nplus", "raw_lite_log"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_yt.youtube_annotations", "source.analytics_engineering_marts.fds_yt.youtube_end_screens", "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_post", "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post", "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_post", "source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings", "source.analytics_engineering_marts.udl_nplus.raw_lite_log"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_mkt/aggregate/aggr_mkt_monthly_owned_media_execution.sql", "compiled": true, "compiled_sql": "\n\nwith yt_card_impressions as\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\ncase when country_code= 'US' then 'USA'\nwhen country_code = 'DE' then 'GERMANY'\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Owned Youtube' as vehicle,'Cards' as level2, '' as level3  , 'Impressions' as metric ,\nsum(card_teaser_impressions) as exposure\nfrom fds_yt.youtube_cards\nwhere card_type= 68 AND uploader_type = 'self' \ngroup by 1,2,3,4,5,6),\n\nyt_annotation_impressions as\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\ncase when country_code= 'US' then 'USA'\nwhen country_code = 'DE' then 'GERMANY'\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Owned Youtube' as vehicle,'Annotations' as level2, '' as level3  , 'Impressions' as metric,\nsum(annotation_impressions) as exposure\nfrom \"entdwdb\".\"fds_yt\".\"youtube_annotations\"\nwhere annotation_type='30' AND uploader_type = 'self'\ngroup by 1,2,3,4,5,6),\n\nyt_end_screen_impressions as\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\ncase when country_code= 'US' then 'USA'\nwhen country_code = 'DE' then 'GERMANY'\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Owned Youtube' as vehicle,'EndScreen' as level2, '' as level3 , 'Impressions' as metric,\nsum(end_screen_element_impressions) as exposure\nfrom \"entdwdb\".\"fds_yt\".\"youtube_end_screens\"\nwhere end_screen_element_type = '506' AND uploader_type = 'self'\ngroup by 1,2,3,4,5,6),\n\nfb_impressions as \n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Facebook' as level3 , 'Impressions' as metric,\nsum(impressions_total) as exposure from\n(select * from \"entdwdb\".\"fds_fbk\".\"fact_fb_consumption_post\" where lower(post_text)  like '%network%')\ngroup by 1,2,3,4,5,6),\n\ntw_impressions as\n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Twitter' as level3 , 'Impressions' as metric,\nsum(impressions) as exposure from\n(select distinct * from \"entdwdb\".\"fds_tw\".\"fact_tw_consumption_post\" where lower(tweet)  like '%network%')\ngroup by 1,2,3,4,5,6),\n\nig_impressions as\n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Instagram' as level3 , 'Impressions' as metric,\nsum(impressions) as exposure from\n(select distinct * from \"entdwdb\".\"fds_igm\".\"fact_ig_consumption_post\" where lower(caption)  like '%network%')\ngroup by 1,2,3,4,5,6),\n\nowned_tv_us_vshp as\n(select trunc(next_day(trunc(cast(cast(orig_broadcast_date_id as varchar) as date))-1,'Su')) as week,\n'USA' as country,'Owned TV' as vehicle,'Owned TV Viewership' as level2,\ncase when src_program_name='WWE ENTERTAINMENT' then 'RAW' \nwhen src_program_name like '%WWE FRI NIGHT SMACKDOWN%' then 'SMACKDOWN'\nwhen src_program_name='WWE NXT' then 'NXT' end as level3,\n'Viewership' as metric,\navg(most_current_us_audience_avg_proj_000) as exposure\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" where  \nsrc_demographic_group='Persons 2 - 99' and src_playback_period_cd='Live+SD | TV with Digital | Linear with VOD'\nand src_program_name in ('WWE ENTERTAINMENT','WWE FRI NIGHT SMACKDOWN','WWE FRI NIGHT SMACKDOWN L','WWE NXT')\ngroup by 1,2,3,4,5,6),\n\nowned_tv_promos as\n(select distinct trunc(next_day(trunc(airdate)-1,'Su')) as week,\n'Global' as country,'Owned TV' as vehicle,\ncase when lower(segmenttype) like  'announcer on camera' and network_flag = 1 then 'Paid Tier TV Promos Count Announcer on Camera'\nwhen (lower(segmenttype) ='promo' or lower(segmenttype) like '%sponsor element%' ) and network_flag = 1 then 'Paid Tier TV Promos Count Promo'\nwhen lower(segmenttype) like '%lower third%' and network_flag = 1 then 'Paid Tier TV Promos Count Lower Third' \nwhen lower(segmenttype) ='promo graphic' and network_flag = 1 then 'Paid Tier TV Promos Count Promo Graphic'\n\nwhen lower(segmenttype) like  'announcer on camera' and freetier_flag = 1 then 'Free Tier TV Promos Count Announcer on Camera'\nwhen (lower(segmenttype) ='promo' or lower(segmenttype) like '%sponsor element%' ) and freetier_flag = 1  then 'Free Tier TV Promos Count Promo'\nwhen lower(segmenttype) like '%lower third%' and freetier_flag = 1  then 'Free Tier TV Promos Count Lower Third' \nwhen lower(segmenttype) ='promo graphic' and freetier_flag = 1  then 'Free Tier TV Promos Count Promo Graphic'\nelse lower(segmenttype) end as level2,\nupper(show_type) as level3,'Number of Promos' as metric,\ncount ((lower(sponsors))) as exposure\nfrom \n(select cast(title as varchar(512)) as show_type, cast(showdbid as varchar(512)) as fileid , airdate, segmenttype, comment ,sponsors,\ncase when (lower(sponsors) like '%network%' and lower(sponsors) not like '%free tier%') then 1 else 0 end as network_flag,\ncase when lower(sponsors) like '%free tier%' then 1 else 0 end as freetier_flag\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere (lower(segmenttype) like  'announcer on camera' or lower(segmenttype) like '%promo%' or lower(segmenttype) like '%sponsor element%' \nor lower(segmenttype) like '%lower third%')\nand (lower(sponsors) like '%network%' or lower(sponsors) like '%free tier%') \nand lower(title) in ('smackdown' ,'raw','nxt'))\ngroup by 1,2,3,4,5,6),\n\nowned_tv_impressions as\n(select a.week,'USA' as country,'Owned TV' as vehicle,\ncase when b.level2 = 'Paid Tier TV Promos Count Announcer on Camera' then 'Owned TV Paid Tier Announcer on Camera'\nwhen b.level2 = 'Paid Tier TV Promos Count Lower Third' then 'Owned TV Paid Tier Lower Third'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo' then 'Owned TV Paid Tier Promo'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo Graphic' then 'Owned TV Paid Tier Promo Graphic' \nwhen b.level2 = 'Free Tier TV Promos Count Announcer on Camera' then 'Owned TV Free Tier Announcer on Camera'\nwhen b.level2 = 'Free Tier TV Promos Count Lower Third' then 'Owned TV Free Tier Lower Third'\nwhen b.level2 = 'Free Tier TV Promos Count Promo' then 'Owned TV Free Tier Promo'\nwhen b.level2 = 'Free Tier TV Promos Count Promo Graphic' then 'Owned TV Free Tier Promo Graphic' \nend as level2,\na.level3,\n'Impressions' as metric,a.exposure*b.exposure as exposure\nfrom owned_tv_us_vshp a\nleft join owned_tv_promos b\non a.week = b.week\nand a.level3 = b.level3),\n\nowned_tv_nonus_vshp as\n(select trunc(next_day(trunc(cast(broadcast_date as date))-1,'Su')) as week,\ncase when src_country in ( 'united kingdom', 'ireland') then 'UK/IRE'\nwhen src_country in  ('australia', 'new zealand') then 'AUS/NZ' \nwhen src_country in ('germany') then 'GERMANY'else 'ROW' end as country,\n'Owned TV' as vehicle,'Owned TV Viewership' as level2,\nupper(series_name) as level3,'Viewership' as metric,\nsum(aud) as exposure\nfrom fds_kntr.fact_kntr_wwe_telecast_data \nwhere demographic_type='Everyone' and live_flag='Y'\ngroup by 1,2,3,4,5,6),\n\nowned_tv_nonus_impressions as\n(select a.week,a.country,'Owned TV' as vehicle,\ncase when b.level2 = 'Paid Tier TV Promos Count Announcer on Camera' then 'Owned TV Paid Tier Announcer on Camera'\nwhen b.level2 = 'Paid Tier TV Promos Count Lower Third' then 'Owned TV Paid Tier Lower Third'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo' then 'Owned TV Paid Tier Promo'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo Graphic' then 'Owned TV Paid Tier Promo Graphic' \n\nwhen b.level2 = 'Free Tier TV Promos Count Announcer on Camera' then 'Owned TV Free Tier Announcer on Camera'\nwhen b.level2 = 'Free Tier TV Promos Count Lower Third' then 'Owned TV Free Tier Lower Third'\nwhen b.level2 = 'Free Tier TV Promos Count Promo' then 'Owned TV Free Tier Promo'\nwhen b.level2 = 'Free Tier TV Promos Count Promo Graphic' then 'Owned TV Free Tier Promo Graphic' \nend as level2,\na.level3,\n'Impressions' as metric,a.exposure*b.exposure as exposure\nfrom owned_tv_nonus_vshp a\nleft join owned_tv_promos b\non a.week = b.week\nand a.level3 = b.level3),\n\nowned_tv_ppv_vshp as\n(select trunc(next_day(trunc(event_date)-1,'Su')) as week,\n'Global' as country,\n'Owned TV' as vehicle,\n'Owned TV Viewership' as level2,\n'PPV Kick-Off' as level3,\n'Viewership' as metric,\nsum(views) as exposure\nfrom fds_nplus.rpt_network_ppv_liveplusvod\nwhere event_brand='PPV' and platform='Total' and data_level='Live+VOD'\ngroup by 1,2,3,4,5,6),\n\nowned_tv_ppv_promos as\n(select distinct trunc(next_day(trunc(airdate)-1,'Su')) as week,\n'Global' as country,'Owned TV' as vehicle,\n'TV Promos Count PPV Kick-Off' as level2,\n'PPV Kick-Off' as level3,'Number of Promos' as metric,\nsum(network_flag) as exposure\nfrom \n(select cast(title as varchar(512)) as show_type, cast(showdbid as varchar(512)) as fileid , airdate, segmenttype, comment ,sponsors,\ncase when lower(sponsors) like '%network%' then 1 else 0 end as network_flag\nfrom udl_nplus.raw_lite_log\nwhere (lower(segmenttype) like  'announcer on camera' or lower(segmenttype) like '%promo%' or lower(segmenttype) like '%sponsor element%' \nor lower(segmenttype) like '%lower third%')\nand lower(sponsors) like '%network%' and lower(sponsors) not like '%free tier%' and lower(title) in ('smackdown' ,'raw','nxt'))\ngroup by 1,2,3,4,5,6),\n\nowned_tv_ppv_impressions as\n(select a.week,'Global' as country,'Owned TV' as vehicle,\n'TV Promos Count PPV Kick-Off' as level2,\na.level3,\n'Impressions' as metric,a.exposure*b.exposure as exposure\nfrom owned_tv_ppv_vshp a\nleft join owned_tv_ppv_promos b\non a.week = b.week\nand a.level3 = b.level3),\nfinal as (\nselect * from yt_card_impressions\nunion all select * from yt_annotation_impressions\nunion all select * from yt_end_screen_impressions\nunion all select * from fb_impressions\nunion all select * from tw_impressions\nunion all select * from ig_impressions\nunion all select * from owned_tv_us_vshp\nunion all select * from owned_tv_promos\nunion all select * from owned_tv_impressions\nunion all select * from owned_tv_nonus_vshp\nunion all select * from owned_tv_nonus_impressions\nunion all select * from owned_tv_ppv_vshp\nunion all select * from owned_tv_ppv_promos\nunion all select * from owned_tv_ppv_impressions\norder by week)\nselect a.*,'Owned Media' as data_category,'All' as audience,\ncase when b.ppv_name is null then 'Non Go-Home Week' else b.ppv_name end as ppv_name,\ncase when b.ppv_type is null then 'Non Go-Home Week' else b.ppv_type end as ppv_type,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_NPLUS' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    SYSDATE                                   AS etl_insert_rec_dttm,\n    CAST(NULL as VARCHAR)                     AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                  AS etl_update_rec_dttm\nfrom final a\nleft join \n(select distinct \ntrunc(next_day(trunc(premiere_date)-1,'Su')) as week,\ncase when episode_nm in ('WrestleMania 36 Part 1','WrestleMania 36 Part 2') then  'WrestleMania 36' else episode_nm end as ppv_name,\nppv_brand_name as ppv_type\nfrom cdm.dim_content_classification_title where series_group='WWE PPV') b\non a.week = b.week\norder by a.week", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith yt_card_impressions as\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\ncase when country_code= 'US' then 'USA'\nwhen country_code = 'DE' then 'GERMANY'\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Owned Youtube' as vehicle,'Cards' as level2, '' as level3  , 'Impressions' as metric ,\nsum(card_teaser_impressions) as exposure\nfrom fds_yt.youtube_cards\nwhere card_type= 68 AND uploader_type = 'self' \ngroup by 1,2,3,4,5,6),\n\nyt_annotation_impressions as\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\ncase when country_code= 'US' then 'USA'\nwhen country_code = 'DE' then 'GERMANY'\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Owned Youtube' as vehicle,'Annotations' as level2, '' as level3  , 'Impressions' as metric,\nsum(annotation_impressions) as exposure\nfrom \"entdwdb\".\"fds_yt\".\"youtube_annotations\"\nwhere annotation_type='30' AND uploader_type = 'self'\ngroup by 1,2,3,4,5,6),\n\nyt_end_screen_impressions as\n(select  trunc(next_day(trunc(report_date)-1,'Su')) as week,\ncase when country_code= 'US' then 'USA'\nwhen country_code = 'DE' then 'GERMANY'\nwhen country_code = 'AU' or country_code = 'NZ' then 'AUS/NZ'\nwhen country_code in ('IR' , 'EG' , 'SC', 'WS' , 'GB', 'JE','IM', 'IE' ) then 'UK/IRE' else 'ROW' end as country,\n'Owned Youtube' as vehicle,'EndScreen' as level2, '' as level3 , 'Impressions' as metric,\nsum(end_screen_element_impressions) as exposure\nfrom \"entdwdb\".\"fds_yt\".\"youtube_end_screens\"\nwhere end_screen_element_type = '506' AND uploader_type = 'self'\ngroup by 1,2,3,4,5,6),\n\nfb_impressions as \n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Facebook' as level3 , 'Impressions' as metric,\nsum(impressions_total) as exposure from\n(select * from \"entdwdb\".\"fds_fbk\".\"fact_fb_consumption_post\" where lower(post_text)  like '%network%')\ngroup by 1,2,3,4,5,6),\n\ntw_impressions as\n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Twitter' as level3 , 'Impressions' as metric,\nsum(impressions) as exposure from\n(select distinct * from \"entdwdb\".\"fds_tw\".\"fact_tw_consumption_post\" where lower(tweet)  like '%network%')\ngroup by 1,2,3,4,5,6),\n\nig_impressions as\n(select trunc(next_day(trunc(post_date)-1,'Su')) as week,\n'Global' as country,'Owned Social' as vehicle,'Network' as level2, 'Instagram' as level3 , 'Impressions' as metric,\nsum(impressions) as exposure from\n(select distinct * from \"entdwdb\".\"fds_igm\".\"fact_ig_consumption_post\" where lower(caption)  like '%network%')\ngroup by 1,2,3,4,5,6),\n\nowned_tv_us_vshp as\n(select trunc(next_day(trunc(cast(cast(orig_broadcast_date_id as varchar) as date))-1,'Su')) as week,\n'USA' as country,'Owned TV' as vehicle,'Owned TV Viewership' as level2,\ncase when src_program_name='WWE ENTERTAINMENT' then 'RAW' \nwhen src_program_name like '%WWE FRI NIGHT SMACKDOWN%' then 'SMACKDOWN'\nwhen src_program_name='WWE NXT' then 'NXT' end as level3,\n'Viewership' as metric,\navg(most_current_us_audience_avg_proj_000) as exposure\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" where  \nsrc_demographic_group='Persons 2 - 99' and src_playback_period_cd='Live+SD | TV with Digital | Linear with VOD'\nand src_program_name in ('WWE ENTERTAINMENT','WWE FRI NIGHT SMACKDOWN','WWE FRI NIGHT SMACKDOWN L','WWE NXT')\ngroup by 1,2,3,4,5,6),\n\nowned_tv_promos as\n(select distinct trunc(next_day(trunc(airdate)-1,'Su')) as week,\n'Global' as country,'Owned TV' as vehicle,\ncase when lower(segmenttype) like  'announcer on camera' and network_flag = 1 then 'Paid Tier TV Promos Count Announcer on Camera'\nwhen (lower(segmenttype) ='promo' or lower(segmenttype) like '%sponsor element%' ) and network_flag = 1 then 'Paid Tier TV Promos Count Promo'\nwhen lower(segmenttype) like '%lower third%' and network_flag = 1 then 'Paid Tier TV Promos Count Lower Third' \nwhen lower(segmenttype) ='promo graphic' and network_flag = 1 then 'Paid Tier TV Promos Count Promo Graphic'\n\nwhen lower(segmenttype) like  'announcer on camera' and freetier_flag = 1 then 'Free Tier TV Promos Count Announcer on Camera'\nwhen (lower(segmenttype) ='promo' or lower(segmenttype) like '%sponsor element%' ) and freetier_flag = 1  then 'Free Tier TV Promos Count Promo'\nwhen lower(segmenttype) like '%lower third%' and freetier_flag = 1  then 'Free Tier TV Promos Count Lower Third' \nwhen lower(segmenttype) ='promo graphic' and freetier_flag = 1  then 'Free Tier TV Promos Count Promo Graphic'\nelse lower(segmenttype) end as level2,\nupper(show_type) as level3,'Number of Promos' as metric,\ncount ((lower(sponsors))) as exposure\nfrom \n(select cast(title as varchar(512)) as show_type, cast(showdbid as varchar(512)) as fileid , airdate, segmenttype, comment ,sponsors,\ncase when (lower(sponsors) like '%network%' and lower(sponsors) not like '%free tier%') then 1 else 0 end as network_flag,\ncase when lower(sponsors) like '%free tier%' then 1 else 0 end as freetier_flag\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere (lower(segmenttype) like  'announcer on camera' or lower(segmenttype) like '%promo%' or lower(segmenttype) like '%sponsor element%' \nor lower(segmenttype) like '%lower third%')\nand (lower(sponsors) like '%network%' or lower(sponsors) like '%free tier%') \nand lower(title) in ('smackdown' ,'raw','nxt'))\ngroup by 1,2,3,4,5,6),\n\nowned_tv_impressions as\n(select a.week,'USA' as country,'Owned TV' as vehicle,\ncase when b.level2 = 'Paid Tier TV Promos Count Announcer on Camera' then 'Owned TV Paid Tier Announcer on Camera'\nwhen b.level2 = 'Paid Tier TV Promos Count Lower Third' then 'Owned TV Paid Tier Lower Third'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo' then 'Owned TV Paid Tier Promo'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo Graphic' then 'Owned TV Paid Tier Promo Graphic' \nwhen b.level2 = 'Free Tier TV Promos Count Announcer on Camera' then 'Owned TV Free Tier Announcer on Camera'\nwhen b.level2 = 'Free Tier TV Promos Count Lower Third' then 'Owned TV Free Tier Lower Third'\nwhen b.level2 = 'Free Tier TV Promos Count Promo' then 'Owned TV Free Tier Promo'\nwhen b.level2 = 'Free Tier TV Promos Count Promo Graphic' then 'Owned TV Free Tier Promo Graphic' \nend as level2,\na.level3,\n'Impressions' as metric,a.exposure*b.exposure as exposure\nfrom owned_tv_us_vshp a\nleft join owned_tv_promos b\non a.week = b.week\nand a.level3 = b.level3),\n\nowned_tv_nonus_vshp as\n(select trunc(next_day(trunc(cast(broadcast_date as date))-1,'Su')) as week,\ncase when src_country in ( 'united kingdom', 'ireland') then 'UK/IRE'\nwhen src_country in  ('australia', 'new zealand') then 'AUS/NZ' \nwhen src_country in ('germany') then 'GERMANY'else 'ROW' end as country,\n'Owned TV' as vehicle,'Owned TV Viewership' as level2,\nupper(series_name) as level3,'Viewership' as metric,\nsum(aud) as exposure\nfrom fds_kntr.fact_kntr_wwe_telecast_data \nwhere demographic_type='Everyone' and live_flag='Y'\ngroup by 1,2,3,4,5,6),\n\nowned_tv_nonus_impressions as\n(select a.week,a.country,'Owned TV' as vehicle,\ncase when b.level2 = 'Paid Tier TV Promos Count Announcer on Camera' then 'Owned TV Paid Tier Announcer on Camera'\nwhen b.level2 = 'Paid Tier TV Promos Count Lower Third' then 'Owned TV Paid Tier Lower Third'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo' then 'Owned TV Paid Tier Promo'\nwhen b.level2 = 'Paid Tier TV Promos Count Promo Graphic' then 'Owned TV Paid Tier Promo Graphic' \n\nwhen b.level2 = 'Free Tier TV Promos Count Announcer on Camera' then 'Owned TV Free Tier Announcer on Camera'\nwhen b.level2 = 'Free Tier TV Promos Count Lower Third' then 'Owned TV Free Tier Lower Third'\nwhen b.level2 = 'Free Tier TV Promos Count Promo' then 'Owned TV Free Tier Promo'\nwhen b.level2 = 'Free Tier TV Promos Count Promo Graphic' then 'Owned TV Free Tier Promo Graphic' \nend as level2,\na.level3,\n'Impressions' as metric,a.exposure*b.exposure as exposure\nfrom owned_tv_nonus_vshp a\nleft join owned_tv_promos b\non a.week = b.week\nand a.level3 = b.level3),\n\nowned_tv_ppv_vshp as\n(select trunc(next_day(trunc(event_date)-1,'Su')) as week,\n'Global' as country,\n'Owned TV' as vehicle,\n'Owned TV Viewership' as level2,\n'PPV Kick-Off' as level3,\n'Viewership' as metric,\nsum(views) as exposure\nfrom fds_nplus.rpt_network_ppv_liveplusvod\nwhere event_brand='PPV' and platform='Total' and data_level='Live+VOD'\ngroup by 1,2,3,4,5,6),\n\nowned_tv_ppv_promos as\n(select distinct trunc(next_day(trunc(airdate)-1,'Su')) as week,\n'Global' as country,'Owned TV' as vehicle,\n'TV Promos Count PPV Kick-Off' as level2,\n'PPV Kick-Off' as level3,'Number of Promos' as metric,\nsum(network_flag) as exposure\nfrom \n(select cast(title as varchar(512)) as show_type, cast(showdbid as varchar(512)) as fileid , airdate, segmenttype, comment ,sponsors,\ncase when lower(sponsors) like '%network%' then 1 else 0 end as network_flag\nfrom udl_nplus.raw_lite_log\nwhere (lower(segmenttype) like  'announcer on camera' or lower(segmenttype) like '%promo%' or lower(segmenttype) like '%sponsor element%' \nor lower(segmenttype) like '%lower third%')\nand lower(sponsors) like '%network%' and lower(sponsors) not like '%free tier%' and lower(title) in ('smackdown' ,'raw','nxt'))\ngroup by 1,2,3,4,5,6),\n\nowned_tv_ppv_impressions as\n(select a.week,'Global' as country,'Owned TV' as vehicle,\n'TV Promos Count PPV Kick-Off' as level2,\na.level3,\n'Impressions' as metric,a.exposure*b.exposure as exposure\nfrom owned_tv_ppv_vshp a\nleft join owned_tv_ppv_promos b\non a.week = b.week\nand a.level3 = b.level3),\nfinal as (\nselect * from yt_card_impressions\nunion all select * from yt_annotation_impressions\nunion all select * from yt_end_screen_impressions\nunion all select * from fb_impressions\nunion all select * from tw_impressions\nunion all select * from ig_impressions\nunion all select * from owned_tv_us_vshp\nunion all select * from owned_tv_promos\nunion all select * from owned_tv_impressions\nunion all select * from owned_tv_nonus_vshp\nunion all select * from owned_tv_nonus_impressions\nunion all select * from owned_tv_ppv_vshp\nunion all select * from owned_tv_ppv_promos\nunion all select * from owned_tv_ppv_impressions\norder by week)\nselect a.*,'Owned Media' as data_category,'All' as audience,\ncase when b.ppv_name is null then 'Non Go-Home Week' else b.ppv_name end as ppv_name,\ncase when b.ppv_type is null then 'Non Go-Home Week' else b.ppv_type end as ppv_type,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_NPLUS' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    SYSDATE                                   AS etl_insert_rec_dttm,\n    CAST(NULL as VARCHAR)                     AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                  AS etl_update_rec_dttm\nfrom final a\nleft join \n(select distinct \ntrunc(next_day(trunc(premiere_date)-1,'Su')) as week,\ncase when episode_nm in ('WrestleMania 36 Part 1','WrestleMania 36 Part 2') then  'WrestleMania 36' else episode_nm end as ppv_name,\nppv_brand_name as ppv_type\nfrom cdm.dim_content_classification_title where series_group='WWE PPV') b\non a.week = b.week\norder by a.week"}, "model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings": {"raw_sql": "{{\r\n  config({\r\n\t\t'schema': 'fds_nl',\r\n\t\t\"pre-hook\": [\"truncate fds_nl.rpt_nl_daily_minxmin_lite_log_ratings\"],\r\n\t\t\"materialized\": 'incremental','tags': \"Phase4B\"\r\n  })\r\n}}\r\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, \r\nsrc_market_break, src_daypart_name, src_playback_period_cd, src_demographic_group, mxm_source, \r\nprogram_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \r\nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct, b.*,\r\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \r\ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\r\nfrom {{source('fds_nl','fact_nl_minxmin_ratings')}} a\r\njoin {{ref('intm_nl_lite_log_est')}} b on trunc(a.broadcast_date) = b.airdate\r\nand lower(trim(a.mxm_source)) = lower(trim(b.title)) and \r\n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp))\r\n>= b.modified_inpoint and \r\n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp)) \r\n< b.modified_outpoint \r\nwhere a.min_of_pgm_value is not null and a.program_telecast_rpt_starttime is not null \r\nand a.program_telecast_rpt_starttime <> ' '", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_minxmin_lite_log_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate/rpt_nl_daily_minxmin_lite_log_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_minxmin_lite_log_ratings.sql", "name": "rpt_nl_daily_minxmin_lite_log_ratings", "resource_type": "model", "alias": "rpt_nl_daily_minxmin_lite_log_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_nl.rpt_nl_daily_minxmin_lite_log_ratings", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_nl_lite_log_est"]], "sources": [["fds_nl", "fact_nl_minxmin_ratings"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings", "model.analytics_engineering_marts.intm_nl_lite_log_est"]}, "description": "## Implementation Detail\n*   Date        : 08/17/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_minxmin_lite_log_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : Minute By Minture Ratings joining with Lite Log Report table consist of ratings of segments along with its details referencing from Minute By Minute Ratings and Lite Log tables on daily-basis\n\n## Maintenance Log\n* Date : 08/17/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the program is broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Broadcast Network Channel Name", "meta": {}, "data_type": null, "tags": []}, "src_program_name": {"name": "src_program_name", "description": "Name of the Program", "meta": {}, "data_type": null, "tags": []}, "src_market_break": {"name": "src_market_break", "description": "Identified Market break category by the broadcast network", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "Name of the day part when program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "mxm_source": {"name": "mxm_source", "description": "The source information for each feed type available for the minute by minute ratings", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_starttime": {"name": "program_telecast_rpt_starttime", "description": "Program Telecast Report Start Time", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_endtime": {"name": "program_telecast_rpt_endtime", "description": "Program Telecast Report End Time", "meta": {}, "data_type": null, "tags": []}, "min_of_pgm_value": {"name": "min_of_pgm_value", "description": "Metrics for Minute of program value", "meta": {}, "data_type": null, "tags": []}, "most_current_audience_avg_pct": {"name": "most_current_audience_avg_pct", "description": "Metrics for most current audience average percentage value", "meta": {}, "data_type": null, "tags": []}, "most_current_us_audience_avg_proj_000": {"name": "most_current_us_audience_avg_proj_000", "description": "Metrics for most current US audience average projection in thousands", "meta": {}, "data_type": null, "tags": []}, "most_current_nw_cvg_area_avg_pct": {"name": "most_current_nw_cvg_area_avg_pct", "description": "Metrics for most current network coverage areas average percentage", "meta": {}, "data_type": null, "tags": []}, "showdbid": {"name": "showdbid", "description": "Show DB ID to uniquely identify the lite log of the program telecasted at a time", "meta": {}, "data_type": null, "tags": []}, "title": {"name": "title", "description": "Title of the Program like NXT, RAW, SmackDown, etc.", "meta": {}, "data_type": null, "tags": []}, "subtitle": {"name": "subtitle", "description": "Subtitle of the program", "meta": {}, "data_type": null, "tags": []}, "episodenumber": {"name": "episodenumber", "description": "Episode Number", "meta": {}, "data_type": null, "tags": []}, "airdate": {"name": "airdate", "description": "The date on when the program aired", "meta": {}, "data_type": null, "tags": []}, "inpoint": {"name": "inpoint", "description": "The starting time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "outpoint": {"name": "outpoint", "description": "The end time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "inpoint_24hr_est": {"name": "inpoint_24hr_est", "description": "The starting time of the particular segment converted to 24Hr Clock", "meta": {}, "data_type": null, "tags": []}, "modified_inpoint": {"name": "modified_inpoint", "description": "Modified starting time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "modified_outpoint": {"name": "modified_outpoint", "description": "Modified end time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "segmenttype": {"name": "segmenttype", "description": "Type of Segment", "meta": {}, "data_type": null, "tags": []}, "comment": {"name": "comment", "description": "The comment about the segment", "meta": {}, "data_type": null, "tags": []}, "matchtype": {"name": "matchtype", "description": "Type of the Match", "meta": {}, "data_type": null, "tags": []}, "talentactions": {"name": "talentactions", "description": "Describing the actions of talents", "meta": {}, "data_type": null, "tags": []}, "move": {"name": "move", "description": "Describing the move", "meta": {}, "data_type": null, "tags": []}, "finishtype": {"name": "finishtype", "description": "The type of finish", "meta": {}, "data_type": null, "tags": []}, "recorddate": {"name": "recorddate", "description": "The date on when the program recorded", "meta": {}, "data_type": null, "tags": []}, "fileid": {"name": "fileid", "description": "The File ID field", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "Duration of the Segment", "meta": {}, "data_type": null, "tags": []}, "additionaltalent": {"name": "additionaltalent", "description": "gives the details of additional talents", "meta": {}, "data_type": null, "tags": []}, "announcers": {"name": "announcers", "description": "Announcers of the program", "meta": {}, "data_type": null, "tags": []}, "matchtitle": {"name": "matchtitle", "description": "Title of the match", "meta": {}, "data_type": null, "tags": []}, "venuelocation": {"name": "venuelocation", "description": "Venue Location of the Program", "meta": {}, "data_type": null, "tags": []}, "venuename": {"name": "venuename", "description": "Venue Name of the Program", "meta": {}, "data_type": null, "tags": []}, "issegmentmarker": {"name": "issegmentmarker", "description": "Segment Marker", "meta": {}, "data_type": null, "tags": []}, "logentrydbid": {"name": "logentrydbid", "description": "Log Entry DB ID Field", "meta": {}, "data_type": null, "tags": []}, "logentryguid": {"name": "logentryguid", "description": "Log Entry Guide", "meta": {}, "data_type": null, "tags": []}, "loggername": {"name": "loggername", "description": "Name of the Logger", "meta": {}, "data_type": null, "tags": []}, "logname": {"name": "logname", "description": "Log Name", "meta": {}, "data_type": null, "tags": []}, "masterclipid": {"name": "masterclipid", "description": "Master Clip ID", "meta": {}, "data_type": null, "tags": []}, "modifieddatetime": {"name": "modifieddatetime", "description": "Modified Date Time", "meta": {}, "data_type": null, "tags": []}, "networkassetid": {"name": "networkassetid", "description": "Network Asset ID", "meta": {}, "data_type": null, "tags": []}, "sponsors": {"name": "sponsors", "description": "Sponsors of the Program", "meta": {}, "data_type": null, "tags": []}, "weapon": {"name": "weapon", "description": "Weapons used", "meta": {}, "data_type": null, "tags": []}, "season": {"name": "season", "description": "Season details", "meta": {}, "data_type": null, "tags": []}, "source_ffed_name": {"name": "source_ffed_name", "description": "source_ffed_name", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_minxmin_lite_log_ratings.sql", "compiled": true, "compiled_sql": "\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, \nsrc_market_break, src_daypart_name, src_playback_period_cd, src_demographic_group, mxm_source, \nprogram_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct, b.*,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" a\njoin __dbt__CTE__intm_nl_lite_log_est b on trunc(a.broadcast_date) = b.airdate\nand lower(trim(a.mxm_source)) = lower(trim(b.title)) and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp))\n>= b.modified_inpoint and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp)) \n< b.modified_outpoint \nwhere a.min_of_pgm_value is not null and a.program_telecast_rpt_starttime is not null \nand a.program_telecast_rpt_starttime <> ' '", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "sql": " __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_lite_log_est", "sql": " __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n),  __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)select broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, \nsrc_market_break, src_daypart_name, src_playback_period_cd, src_demographic_group, mxm_source, \nprogram_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct, b.*,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" a\njoin __dbt__CTE__intm_nl_lite_log_est b on trunc(a.broadcast_date) = b.airdate\nand lower(trim(a.mxm_source)) = lower(trim(b.title)) and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp))\n>= b.modified_inpoint and \n(dateadd(min, (a.min_of_pgm_value - 1), (trunc(a.broadcast_date) || ' ' || trim(a.program_telecast_rpt_starttime))::timestamp)) \n< b.modified_outpoint \nwhere a.min_of_pgm_value is not null and a.program_telecast_rpt_starttime is not null \nand a.program_telecast_rpt_starttime <> ' '"}, "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings": {"raw_sql": "--WWE Live Commercial Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n*************************************************************************************************************************************************\n*/\n\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_daily_wwe_live_commercial_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_commercial_viewership_ratings)\"],\n\t     \"materialized\": 'incremental','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    program_telecast_rpt_starttime, \n    program_telecast_rpt_endtime,\n    avg_viewing_hours_units,\n    natl_comm_clockmts_avg_audience_proj_000,\n    natl_comm_clockmts_avg_audience_proj_pct,\n    natl_comm_clockmts_cvg_area_avg_audience_proj_pct,\n    natl_comm_clockmts_duration,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    {{source('fds_nl','fact_nl_commercial_viewership_ratings')}} a\nLEFT JOIN\n    {{source('cdm','dim_date')}} b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n{% if is_incremental() %}\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00')  \n{% endif %}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate/rpt_nl_daily_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_wwe_live_commercial_ratings.sql", "name": "rpt_nl_daily_wwe_live_commercial_ratings", "resource_type": "model", "alias": "rpt_nl_daily_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_daily_wwe_live_commercial_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_commercial_viewership_ratings)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_commercial_viewership_ratings"], ["cdm", "dim_date"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_commercial_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n* Date        : 06/12/2020\n* Version     : 1.0\n* TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n* Schema\t  : fds_nl\n* Contributor : Rahul Chandran\n* Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n\n## Schedule Details\n* Frequency : Weekly ; 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_commercial_viewership_ratings_abac ; 12132 (Tue) \n\n## Maintenance Log\n* Date : 06/12/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "Derived dates based on the viewing period; before 6 am morning hours is the previous date broadcast hour", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_num": {"name": "broadcast_month_num", "description": "Broadcast Month Number", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_nm": {"name": "broadcast_month_nm", "description": "Broadcast Month abbr name", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_num": {"name": "broadcast_quarter_num", "description": "Broadcast Quarter number", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_nm": {"name": "broadcast_quarter_nm", "description": "broadcast Quarter Name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name.", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_starttime": {"name": "program_telecast_rpt_starttime", "description": "The start time of the program telecast (HH:MM).", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_endtime": {"name": "program_telecast_rpt_endtime", "description": "The end time of the program telecast (HH:MM).", "meta": {}, "data_type": null, "tags": []}, "avg_viewing_hours_units": {"name": "avg_viewing_hours_units", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_duration": {"name": "natl_comm_clockmts_duration", "description": "National Commerical Clock Minutes Duration (seconds) (The total number of seconds across qualified commercial minutes within a selected program.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "--WWE Live Commercial Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    program_telecast_rpt_starttime, \n    program_telecast_rpt_endtime,\n    avg_viewing_hours_units,\n    natl_comm_clockmts_avg_audience_proj_000,\n    natl_comm_clockmts_avg_audience_proj_pct,\n    natl_comm_clockmts_cvg_area_avg_audience_proj_pct,\n    natl_comm_clockmts_duration,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_commercial_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"), '1900-01-01 00:00:00')  \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--WWE Live Commercial Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    program_telecast_rpt_starttime, \n    program_telecast_rpt_endtime,\n    avg_viewing_hours_units,\n    natl_comm_clockmts_avg_audience_proj_000,\n    natl_comm_clockmts_avg_audience_proj_pct,\n    natl_comm_clockmts_cvg_area_avg_audience_proj_pct,\n    natl_comm_clockmts_duration,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_commercial_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"), '1900-01-01 00:00:00')  \n"}, "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings": {"raw_sql": "--WWE Live QH Ratings Report Table (daily)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Sudhakar Andugula\r\n   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n\r\n{{\r\n  config({\r\n\t\t\"schema\": 'fds_nl',\r\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_daily_wwe_live_quarterhour_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_quaterhour_viewership_ratings)\"],\r\n\t     \"materialized\": 'incremental','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n  })\r\n}}\r\n\r\nSELECT\r\n    broadcast_date_id,\r\n    broadcast_date,\r\n    b.cal_mth_num                        AS broadcast_month_num,\r\n    b.mth_abbr_nm                        AS broadcast_month_nm,\r\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\r\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\r\n    b.cal_year                           AS broadcast_year,\r\n    src_broadcast_network_id,\r\n    src_playback_period_cd,\r\n    src_demographic_group,\r\n    src_program_id,\r\n    interval_starttime,\r\n    interval_endtime,\r\n    interval_duration,\r\n    avg_viewing_hours_units,\r\n    avg_audience_proj_000,\r\n    avg_audience_pct,\r\n    avg_pct_nw_cvg_area,\r\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\r\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\r\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\r\n    NULL                                                AS etl_update_user_id,\r\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\r\nFROM\r\n    {{source('fds_nl','fact_nl_quaterhour_viewership_ratings')}} a\r\nLEFT JOIN\r\n    {{source('cdm','dim_date')}} b\r\nON\r\n    a.broadcast_date_id = b.dim_date_id\r\nWHERE \r\n       (src_broadcast_network_id, src_program_id) IN ((5,\r\n                                                       296881),\r\n                                                      (5, 339681),\r\n                                                      (5, 436999),\r\n                                                      (81, 898521),\r\n                                                      (10433, 1000131)) \r\n{% if is_incremental() %}\r\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \r\n{% endif %}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate/rpt_nl_daily_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_wwe_live_quarterhour_ratings.sql", "name": "rpt_nl_daily_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "rpt_nl_daily_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_daily_wwe_live_quarterhour_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_quaterhour_viewership_ratings)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_quaterhour_viewership_ratings"], ["cdm", "dim_date"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_quaterhour_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n*   Date        : 06/12/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Sudhakar Andugula\n*   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n\n## Schedule Details\n* Frequency : Daily ; 02:00 A.M EST (Wed-Mon) & 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_quarterhour_viewership_ratings_daily_slot2_abac ; 12145 (Wed-Mon) & t_di_nielsen_fact_nl_quarterhour_viewership_ratings_abac ; 12122 (Tue)\n\n## Maintenance Log\n* Date : 06/12/2020 ; Developer: Sudhakar Andugula ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID Field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "Derived dates based on the viewing period; before 6 am morning hours is the preious date broadcast hour", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_num": {"name": "broadcast_month_num", "description": "Broadcast Month Number", "meta": {}, "data_type": null, "tags": []}, "broadcast_month_nm": {"name": "broadcast_month_nm", "description": "Broadcast Month Name", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_num": {"name": "broadcast_quarter_num", "description": "Broadcast Quarter Number", "meta": {}, "data_type": null, "tags": []}, "broadcast_quarter_nm": {"name": "broadcast_quarter_nm", "description": "Broadcast Quarter Name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program nam.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be profided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be profided", "meta": {}, "data_type": null, "tags": []}, "interval_duration": {"name": "interval_duration", "description": "quarter period interval duration", "meta": {}, "data_type": null, "tags": []}, "avg_viewing_hours_units": {"name": "avg_viewing_hours_units", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--WWE Live QH Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    interval_starttime,\n    interval_endtime,\n    interval_duration,\n    avg_viewing_hours_units,\n    avg_audience_proj_000,\n    avg_audience_pct,\n    avg_pct_nw_cvg_area,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_quaterhour_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"), '1900-01-01 00:00:00') \n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--WWE Live QH Ratings Report Table (daily)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    broadcast_date_id,\n    broadcast_date,\n    b.cal_mth_num                        AS broadcast_month_num,\n    b.mth_abbr_nm                        AS broadcast_month_nm,\n    b.cal_year_qtr_num                   AS broadcast_quarter_num,\n    substring(b.cal_year_qtr_desc, 5, 2) AS broadcast_quarter_nm,\n    b.cal_year                           AS broadcast_year,\n    src_broadcast_network_id,\n    src_playback_period_cd,\n    src_demographic_group,\n    src_program_id,\n    interval_starttime,\n    interval_endtime,\n    interval_duration,\n    avg_viewing_hours_units,\n    avg_audience_proj_000,\n    avg_audience_pct,\n    avg_pct_nw_cvg_area,\n    'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nFROM\n    \"entdwdb\".\"fds_nl\".\"fact_nl_quaterhour_viewership_ratings\" a\nLEFT JOIN\n    \"entdwdb\".\"cdm\".\"dim_date\" b\nON\n    a.broadcast_date_id = b.dim_date_id\nWHERE \n       (src_broadcast_network_id, src_program_id) IN ((5,\n                                                       296881),\n                                                      (5, 339681),\n                                                      (5, 436999),\n                                                      (81, 898521),\n                                                      (10433, 1000131)) \n\n\t and a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"), '1900-01-01 00:00:00') \n"}, "model.analytics_engineering_marts.rpt_nl_weekly_channel_switch": {"raw_sql": "-- Switch behavior absolute value ranking table\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t\"schema\": 'fds_nl',\n\t\t\"pre-hook\": [\"truncate fds_nl.rpt_nl_weekly_channel_switch\"],\n\t\t\"materialized\": 'incremental','tags': 'Phase4B', \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,\na.src_broadcast_network_name,a.src_demographic_group,a.time_minute,\nmost_current_us_audience_avg_proj_000 as mc_us_aa000,\nabsolute_set_off_off_air,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\n b.switch_percent_rank as switch_percent_rank,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\n from {{ref('intermediate_nl_absolute_switch_stay_detail')}}  A \nleft  join {{ref('intermediate_nl_ranking')}}  b\n on a.broadcast_Date = b.broadcast_Date and\n a.src_broadcast_network_name = b.src_broadcast_network_name and\n a.src_demographic_group = b.src_demographic_group and \n a.time_minute = b.time_minute", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_weekly_channel_switch"], "unique_id": "model.analytics_engineering_marts.rpt_nl_weekly_channel_switch", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate/rpt_nl_weekly_channel_switch.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_weekly_channel_switch.sql", "name": "rpt_nl_weekly_channel_switch", "resource_type": "model", "alias": "rpt_nl_weekly_channel_switch", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_nl.rpt_nl_weekly_channel_switch", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intermediate_nl_absolute_switch_stay_detail"], ["intermediate_nl_ranking"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "model.analytics_engineering_marts.intermediate_nl_ranking"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* TableName   : rpt_nl_weekly_channel_switch\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE and AEW Programs \n\n## Schedule Details\n* Frequency : Daily ; 12:00 A.M EST (Sun-Mon)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_weekly_live_switching_behavior_destination_dist_abac ; 12128,  t_di_nielsen_fact_nl_minxmin_ratings_aew_abac ; 12133, t_di_nielsen_fact_nl_minxmin_ratings_nxt_abac ; 12135, t_di_nielsen_fact_nl_minxmin_ratings_raw_abac ; 12136 and t_di_nielsen_fact_nl_minxmin_ratings_smackdown_abac ; 12137 (Sun-Mon)\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n* Date : 08/28/2020 ; Developer: Hima Dasan ; Change: Enhancement to remove commercial break minutes and starting and ending 5 minutes from ranking.", "columns": {"coverage_area": {"name": "coverage_area", "description": "NPOWER- Coverage Area", "meta": {}, "data_type": null, "tags": []}, "src_market_break": {"name": "src_market_break", "description": "Identified Marcket break category by the broadcast nework", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "broadcast_Date": {"name": "broadcast_Date", "description": "Broadcast date for the given channel", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Viewing source of the network channel", "meta": {}, "data_type": null, "tags": []}, "time_minute": {"name": "time_minute", "description": "minute of measurement the intervel of switching beahiour is measured", "meta": {}, "data_type": null, "tags": []}, "mc_us_aa000": {"name": "mc_us_aa000", "description": "Metrics for most current US audience average projection in thousants", "meta": {}, "data_type": null, "tags": []}, "absolute_stay": {"name": "absolute_stay", "description": "unique viewers who stayed in the same network", "meta": {}, "data_type": null, "tags": []}, "stay_percent": {"name": "stay_percent", "description": "percentage value of viewers stayed in same network", "meta": {}, "data_type": null, "tags": []}, "absolute_switch": {"name": "absolute_switch", "description": "unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent": {"name": "switch_percent", "description": "percentage value of unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent_rank": {"name": "switch_percent_rank", "description": "ranking based on percentage switch", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_weekly_channel_switch.sql", "compiled": true, "compiled_sql": "-- Switch behavior absolute value ranking table\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,\na.src_broadcast_network_name,a.src_demographic_group,a.time_minute,\nmost_current_us_audience_avg_proj_000 as mc_us_aa000,\nabsolute_set_off_off_air,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\n b.switch_percent_rank as switch_percent_rank,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\n from __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  A \nleft  join __dbt__CTE__intermediate_nl_ranking  b\n on a.broadcast_Date = b.broadcast_Date and\n a.src_broadcast_network_name = b.src_broadcast_network_name and\n a.src_demographic_group = b.src_demographic_group and \n a.time_minute = b.time_minute", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "sql": " __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "sql": " __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "sql": " __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_lite_log_est", "sql": " __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "sql": " __dbt__CTE__intermediate_nl_absolute_switch_stay_detail as (\n\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_ranking", "sql": " __dbt__CTE__intermediate_nl_ranking as (\n\n\n\n\n select a.broadcast_Date,a.src_broadcast_network_name,a.src_demographic_group,\n a.time_minute,\n dense_rank() over(partition by src_broadcast_network_name,broadcast_Date,src_demographic_group  order by \nswitch_percent desc NULLS LAST)\nas switch_percent_rank\nfrom __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  a\nwhere ((lower(a.source_name) in ('nxt','smackdown') and time_minute  between '20:05:00'\nand '21:54:00') or (lower(a.source_name) in ('raw') and time_minute  between '20:05:00'\nand '22:54:00')  or \n( lower(a.source_name)  in ('aew'))) and  comment is null\n)"}], "injected_sql": "with __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n),  __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n),  __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n),  __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n),  __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n),  __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n),  __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n),  __dbt__CTE__intermediate_nl_absolute_switch_stay_detail as (\n\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint\n),  __dbt__CTE__intermediate_nl_ranking as (\n\n\n\n\n select a.broadcast_Date,a.src_broadcast_network_name,a.src_demographic_group,\n a.time_minute,\n dense_rank() over(partition by src_broadcast_network_name,broadcast_Date,src_demographic_group  order by \nswitch_percent desc NULLS LAST)\nas switch_percent_rank\nfrom __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  a\nwhere ((lower(a.source_name) in ('nxt','smackdown') and time_minute  between '20:05:00'\nand '21:54:00') or (lower(a.source_name) in ('raw') and time_minute  between '20:05:00'\nand '22:54:00')  or \n( lower(a.source_name)  in ('aew'))) and  comment is null\n)-- Switch behavior absolute value ranking table\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,\na.src_broadcast_network_name,a.src_demographic_group,a.time_minute,\nmost_current_us_audience_avg_proj_000 as mc_us_aa000,\nabsolute_set_off_off_air,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\n b.switch_percent_rank as switch_percent_rank,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n    'bi_dbt_user_prd'                                   AS etl_insert_user_id,\n    CURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\n from __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  A \nleft  join __dbt__CTE__intermediate_nl_ranking  b\n on a.broadcast_Date = b.broadcast_Date and\n a.src_broadcast_network_name = b.src_broadcast_network_name and\n a.src_demographic_group = b.src_demographic_group and \n a.time_minute = b.time_minute"}, "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings": {"raw_sql": "{{\r\n  config({\r\n\t\t'schema': 'fds_nl',\r\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_daily_wwe_program_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_program_viewership_ratings)\"],\r\n\t    \"materialized\": 'incremental',\"tags\": 'Phase4B'\r\n  })\r\n}}\r\n\r\nselect a.broadcast_date_id, a.broadcast_date, d.cal_year_week_begin_date as broadcast_cal_week_begin_date, \r\nd.cal_year_week_end_date as broadcast_cal_week_end_date, d.cal_year_week_num as broadcast_cal_week_num, \r\nd.cal_mth_num as broadcast_cal_month_num, d.mth_abbr_nm as broadcast_cal_month_nm, \r\nsubstring(d.cal_year_qtr_desc, 5, 2) as broadcast_cal_quarter, d.cal_year as broadcast_cal_year,\r\ne.fin_year_week_begin_date as broadcast_fin_week_begin_date, e.fin_year_week_end_date as broadcast_fin_week_end_date,\r\ne.financial_year_week_number as broadcast_fin_week_num,e.financial_month_number as broadcast_fin_month_num, \r\ne.financial_month_name as broadcast_fin_month_nm, e.financial_quarter as broadcast_fin_quarter, e.financial_year as broadcast_fin_year,\r\na.src_broadcast_network_id, f.broadcast_network_name, a.src_playback_period_cd, a.src_demographic_group, a.src_program_id,a.src_series_name, a.src_daypart_cd,\r\ng.src_daypart_name, a.program_telecast_rpt_starttime, a.program_telecast_rpt_endtime, a.src_total_duration, a.avg_audience_proj_000, \r\na.avg_audience_pct, a.avg_audience_pct_nw_cvg_area, a.avg_viewing_hours_units as viewing_minutes_units,\r\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \r\ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\r\nfrom\r\n(\r\n--RAW telecasts broken down are to be rolled up as one with start time as min(start time), end time as max(end time) and all the metrics except --VH are rolled up as time-duration based avg - ( metric 1 * duration 1 + metric 2* duration* 2 + metric 3 * duration 3) /(duration 1 + duration --2 + duration 3) here..\r\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \r\nsrc_demographic_group, src_program_id,src_series_name, dim_nl_daypart_id, src_daypart_cd,\r\nmin(program_telecast_rpt_starttime) as program_telecast_rpt_starttime, max(program_telecast_rpt_endtime) as program_telecast_rpt_endtime,\r\nsum(src_total_duration) as src_total_duration,\r\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(avg_viewing_hours_units) as avg_viewing_hours_units\r\nfrom {{source('fds_nl','fact_nl_program_viewership_ratings')}} b\r\njoin (select dim_nl_series_id,src_series_name from {{source('fds_nl','dim_nl_series')}} where wwe_series_qualifier = 'WWE') c\r\non b.dim_nl_series_id = c.dim_nl_series_id\r\nwhere src_program_id = 296881 and src_program_attributes <> '(R)'\r\n{% if is_incremental() %}\r\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \r\n{% endif %}\r\ngroup by 1,2,3,4,5,6,7,8,9,10\r\nunion\r\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \r\nsrc_demographic_group, src_program_id ,src_series_name, dim_nl_daypart_id, src_daypart_cd, program_telecast_rpt_starttime, program_telecast_rpt_endtime,\r\nsrc_total_duration, avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, avg_viewing_hours_units\r\nfrom {{source('fds_nl','fact_nl_program_viewership_ratings')}} b\r\njoin (select dim_nl_series_id,src_series_name from {{source('fds_nl','dim_nl_series')}} where wwe_series_qualifier = 'WWE') c\r\non b.dim_nl_series_id = c.dim_nl_series_id\r\nwhere src_program_id <> 296881 and src_program_attributes <> '(R)'\r\n{% if is_incremental() %}\r\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \r\n{% endif %}\r\n)a\r\nleft join {{source('cdm','dim_date')}} d on a.broadcast_date_id = d.dim_date_id\r\nleft join \r\n(select h.dim_date_id, trunc(financial_year_week_begin_date) as fin_year_week_begin_date, \r\ntrunc(financial_year_week_end_date) as fin_year_week_end_date, financial_year_week_number, financial_month_number, \r\nmth_abbr_nm as financial_month_name, financial_quarter, financial_year\r\nfrom {{source('udl_nl','nielsen_finance_yearly_calendar')}} h\r\njoin (select distinct cal_mth_num, mth_abbr_nm from {{source('cdm','dim_date')}}) i on h.financial_month_number = i.cal_mth_num\r\nwhere dim_date_id >= 20140101) e on a.broadcast_date_id = e.dim_date_id\r\nleft join {{source('fds_nl','dim_nl_broadcast_network')}} f on a.dim_nl_broadcast_network_id = f.dim_nl_broadcast_network_id\r\nleft join {{source('fds_nl','dim_nl_daypart')}} g on a.dim_nl_daypart_id = g.dim_nl_daypart_id", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_daily_wwe_program_ratings"], "unique_id": "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate/rpt_nl_daily_wwe_program_ratings.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_daily_wwe_program_ratings.sql", "name": "rpt_nl_daily_wwe_program_ratings", "resource_type": "model", "alias": "rpt_nl_daily_wwe_program_ratings", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_daily_wwe_program_ratings where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_program_viewership_ratings)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_program_viewership_ratings"], ["fds_nl", "dim_nl_series"], ["fds_nl", "fact_nl_program_viewership_ratings"], ["fds_nl", "dim_nl_series"], ["cdm", "dim_date"], ["udl_nl", "nielsen_finance_yearly_calendar"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings", "source.analytics_engineering_marts.fds_nl.dim_nl_series", "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings", "source.analytics_engineering_marts.fds_nl.dim_nl_series", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.udl_nl.nielsen_finance_yearly_calendar", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "## Implementation Detail\n*   Date        : 07/21/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_wwe_program_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from Program Viewership Daily fact table on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 02:00 A.M EST (Wed-Mon) & 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_program_viewership_ratings_daily_slot2_abac ; 12144 (Wed-Mon) & t_di_nielsen_fact_nl_program_viewership_ratings_abac ; 12121 (Tue)\n\n## Maintenance Log\n* Date : 07/21/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID Field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "Derived dates based on the viewing period; before 6 am morning hours is the preious date broadcast hour", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_week_begin_date": {"name": "broadcast_cal_week_begin_date", "description": "Calendar Year Week Begin Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_week_end_date": {"name": "broadcast_cal_week_end_date", "description": "Calendar Year Week End Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_week_num": {"name": "broadcast_cal_week_num", "description": "Calendar Year Week Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_month_num": {"name": "broadcast_cal_month_num", "description": "Calendar Year Month Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_month_nm": {"name": "broadcast_cal_month_nm", "description": "Broadcast Calendar Month Name based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_quarter": {"name": "broadcast_cal_quarter", "description": "Calendar year quarter number based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_cal_year": {"name": "broadcast_cal_year", "description": "Calendar year based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_week_begin_date": {"name": "broadcast_fin_week_begin_date", "description": "Financial Year Week Begin Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_week_end_date": {"name": "broadcast_fin_week_end_date", "description": "Financial Year Week End Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_week_num": {"name": "broadcast_fin_week_num", "description": "Financial Year Week Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_month_num": {"name": "broadcast_fin_month_num", "description": "Financial Month Number based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_month_nm": {"name": "broadcast_fin_month_nm", "description": "Financial Month Name based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_quarter": {"name": "broadcast_fin_quarter", "description": "Financial year quarter number based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Financial Year based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program nam.", "meta": {}, "data_type": null, "tags": []}, "src_daypart_cd": {"name": "src_daypart_cd", "description": "A unique character identifier for an individual daypart", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_starttime": {"name": "program_telecast_rpt_starttime", "description": "The start time of the program telecast (HH:MM).", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_endtime": {"name": "program_telecast_rpt_endtime", "description": "The end time of the program telecast (HH:MM).", "meta": {}, "data_type": null, "tags": []}, "src_total_duration": {"name": "src_total_duration", "description": "The duration of the program/telecast airing (minutes).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "viewing_minutes_units": {"name": "viewing_minutes_units", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_daily_wwe_program_ratings.sql", "compiled": true, "compiled_sql": "\n\nselect a.broadcast_date_id, a.broadcast_date, d.cal_year_week_begin_date as broadcast_cal_week_begin_date, \nd.cal_year_week_end_date as broadcast_cal_week_end_date, d.cal_year_week_num as broadcast_cal_week_num, \nd.cal_mth_num as broadcast_cal_month_num, d.mth_abbr_nm as broadcast_cal_month_nm, \nsubstring(d.cal_year_qtr_desc, 5, 2) as broadcast_cal_quarter, d.cal_year as broadcast_cal_year,\ne.fin_year_week_begin_date as broadcast_fin_week_begin_date, e.fin_year_week_end_date as broadcast_fin_week_end_date,\ne.financial_year_week_number as broadcast_fin_week_num,e.financial_month_number as broadcast_fin_month_num, \ne.financial_month_name as broadcast_fin_month_nm, e.financial_quarter as broadcast_fin_quarter, e.financial_year as broadcast_fin_year,\na.src_broadcast_network_id, f.broadcast_network_name, a.src_playback_period_cd, a.src_demographic_group, a.src_program_id,a.src_series_name, a.src_daypart_cd,\ng.src_daypart_name, a.program_telecast_rpt_starttime, a.program_telecast_rpt_endtime, a.src_total_duration, a.avg_audience_proj_000, \na.avg_audience_pct, a.avg_audience_pct_nw_cvg_area, a.avg_viewing_hours_units as viewing_minutes_units,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(\n--RAW telecasts broken down are to be rolled up as one with start time as min(start time), end time as max(end time) and all the metrics except --VH are rolled up as time-duration based avg - ( metric 1 * duration 1 + metric 2* duration* 2 + metric 3 * duration 3) /(duration 1 + duration --2 + duration 3) here..\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id,src_series_name, dim_nl_daypart_id, src_daypart_cd,\nmin(program_telecast_rpt_starttime) as program_telecast_rpt_starttime, max(program_telecast_rpt_endtime) as program_telecast_rpt_endtime,\nsum(src_total_duration) as src_total_duration,\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(avg_viewing_hours_units) as avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id = 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\ngroup by 1,2,3,4,5,6,7,8,9,10\nunion\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id ,src_series_name, dim_nl_daypart_id, src_daypart_cd, program_telecast_rpt_starttime, program_telecast_rpt_endtime,\nsrc_total_duration, avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id <> 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\n)a\nleft join \"entdwdb\".\"cdm\".\"dim_date\" d on a.broadcast_date_id = d.dim_date_id\nleft join \n(select h.dim_date_id, trunc(financial_year_week_begin_date) as fin_year_week_begin_date, \ntrunc(financial_year_week_end_date) as fin_year_week_end_date, financial_year_week_number, financial_month_number, \nmth_abbr_nm as financial_month_name, financial_quarter, financial_year\nfrom \"entdwdb\".\"udl_nl\".\"nielsen_finance_yearly_calendar\" h\njoin (select distinct cal_mth_num, mth_abbr_nm from \"entdwdb\".\"cdm\".\"dim_date\") i on h.financial_month_number = i.cal_mth_num\nwhere dim_date_id >= 20140101) e on a.broadcast_date_id = e.dim_date_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\" f on a.dim_nl_broadcast_network_id = f.dim_nl_broadcast_network_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" g on a.dim_nl_daypart_id = g.dim_nl_daypart_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect a.broadcast_date_id, a.broadcast_date, d.cal_year_week_begin_date as broadcast_cal_week_begin_date, \nd.cal_year_week_end_date as broadcast_cal_week_end_date, d.cal_year_week_num as broadcast_cal_week_num, \nd.cal_mth_num as broadcast_cal_month_num, d.mth_abbr_nm as broadcast_cal_month_nm, \nsubstring(d.cal_year_qtr_desc, 5, 2) as broadcast_cal_quarter, d.cal_year as broadcast_cal_year,\ne.fin_year_week_begin_date as broadcast_fin_week_begin_date, e.fin_year_week_end_date as broadcast_fin_week_end_date,\ne.financial_year_week_number as broadcast_fin_week_num,e.financial_month_number as broadcast_fin_month_num, \ne.financial_month_name as broadcast_fin_month_nm, e.financial_quarter as broadcast_fin_quarter, e.financial_year as broadcast_fin_year,\na.src_broadcast_network_id, f.broadcast_network_name, a.src_playback_period_cd, a.src_demographic_group, a.src_program_id,a.src_series_name, a.src_daypart_cd,\ng.src_daypart_name, a.program_telecast_rpt_starttime, a.program_telecast_rpt_endtime, a.src_total_duration, a.avg_audience_proj_000, \na.avg_audience_pct, a.avg_audience_pct_nw_cvg_area, a.avg_viewing_hours_units as viewing_minutes_units,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(\n--RAW telecasts broken down are to be rolled up as one with start time as min(start time), end time as max(end time) and all the metrics except --VH are rolled up as time-duration based avg - ( metric 1 * duration 1 + metric 2* duration* 2 + metric 3 * duration 3) /(duration 1 + duration --2 + duration 3) here..\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id,src_series_name, dim_nl_daypart_id, src_daypart_cd,\nmin(program_telecast_rpt_starttime) as program_telecast_rpt_starttime, max(program_telecast_rpt_endtime) as program_telecast_rpt_endtime,\nsum(src_total_duration) as src_total_duration,\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(avg_viewing_hours_units) as avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id = 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\ngroup by 1,2,3,4,5,6,7,8,9,10\nunion\nselect broadcast_date_id, broadcast_date, dim_nl_broadcast_network_id, src_broadcast_network_id, src_playback_period_cd, \nsrc_demographic_group, src_program_id ,src_series_name, dim_nl_daypart_id, src_daypart_cd, program_telecast_rpt_starttime, program_telecast_rpt_endtime,\nsrc_total_duration, avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, avg_viewing_hours_units\nfrom \"entdwdb\".\"fds_nl\".\"fact_nl_program_viewership_ratings\" b\njoin (select dim_nl_series_id,src_series_name from \"entdwdb\".\"fds_nl\".\"dim_nl_series\" where wwe_series_qualifier = 'WWE') c\non b.dim_nl_series_id = c.dim_nl_series_id\nwhere src_program_id <> 296881 and src_program_attributes <> '(R)'\n\n\tand b.etl_insert_rec_dttm  >  coalesce((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"), '1900-01-01 00:00:00') \n\n)a\nleft join \"entdwdb\".\"cdm\".\"dim_date\" d on a.broadcast_date_id = d.dim_date_id\nleft join \n(select h.dim_date_id, trunc(financial_year_week_begin_date) as fin_year_week_begin_date, \ntrunc(financial_year_week_end_date) as fin_year_week_end_date, financial_year_week_number, financial_month_number, \nmth_abbr_nm as financial_month_name, financial_quarter, financial_year\nfrom \"entdwdb\".\"udl_nl\".\"nielsen_finance_yearly_calendar\" h\njoin (select distinct cal_mth_num, mth_abbr_nm from \"entdwdb\".\"cdm\".\"dim_date\") i on h.financial_month_number = i.cal_mth_num\nwhere dim_date_id >= 20140101) e on a.broadcast_date_id = e.dim_date_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\" f on a.dim_nl_broadcast_network_id = f.dim_nl_broadcast_network_id\nleft join \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" g on a.dim_nl_daypart_id = g.dim_nl_daypart_id"}, "model.analytics_engineering_marts.rpt_nl_weekly_overlap_derived_4_way_oob": {"raw_sql": "/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/19/2020\r\n   Version     : 1.0\r\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \r\n********\r\n*/\r\n\r\n\t\t/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/19/2020\r\n   Version     : 1.0\r\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \r\n********\r\n*/\r\n\r\n{{\r\n  config({\r\n\t\t'schema': 'fds_nl',\r\n\t\t\"pre-hook\": [\"delete from fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_weekly_overlap_4_way_oob)\"],\r\n\t     \"materialized\": 'incremental','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\r\n  })\r\n}}\r\n\r\n{% set descript = [(\"AB\",\"Total Combined SmackDown and/or Raw\"),(\"BC\",\"Total Combined Raw and/or NXT\"),(\"CA\",\"Total Combined NXT and/or SmackDown\"),\r\n(\"AD\",\"Total Combined SmackDown and/or AEW\"),(\"BD\",\"Total Combined Raw and/or AEW\"),(\"CD\",\"Total Combined NXT and/or AEW\"),\r\n(\"ABC\",\"Total Watched ANY WWE (Total Combined SmackDown and/or Raw and/or NXT)\"),\r\n(\"ABD\",\"Total Combined SmackDown and/or Raw and/or AEW\"),(\"BCD\",\"Total Combined Raw and/or NXT and/or AEW\"),(\"ACD\",\"Total Combined SmackDown and/or NXT and/or AEW\"),\r\n(\"ABCD\",\"Total Watched ANY Wrestling (SmackDown and/or Raw and/or NXT and/or AEW)\")] %}\r\n\r\n{% set schedule_formulas = [(\"(A+B-AB)\",\"Both A&B\",\"Derived\",\"Total Combined SmackDown and Raw\"),\r\n(\"(A+C-CA)\",\"Both A&C\",\"Derived\",\"Total Combined SmackDown and NXT\"),\r\n(\"(A+D-AD)\",\"Both A&D\",\"Derived\",\"Total Combined SmackDown and AEW\"),\r\n(\"(B+D-BD)\",\"Both B&D\",\"Derived\",\"Total Combined Raw and AEW\"),\r\n(\"(B+C-BC)\",\"Both B&C\",\"Derived\",\"Total Combined Raw and NXT\"),\r\n(\"(C+D-CD)\",\"Both C&D\",\"Derived\",\"Total Combined AEW and NXT\"),\r\n(\"((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC)\",\"A and B and C\",\"Derived\",\"Watched ALL WWE Total Combined SmackDown and Raw and NXT (includes AEW overlap)\"),\r\n(\"((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD)\",\"B and C and D\",\"Derived\",\"Total Combined Raw and NXT and AEW (includes SmackDown overlap)\"),\r\n(\"((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)\",\"A and C and D\",\"Derived\",\"Total Combined SmackDown and NXT and AEW (includes Raw overlap)\"),\r\n(\"((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD)\",\"A and B and D\",\"Derived\",\"Total Combined SmackDown and Raw and AEW (includes NXT overlap)\"),\r\n(\"((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B and C and D\",\"4-Way O/O/O/O/B Results\",\"Watched ALL Wrestling (SmackDown AND Raw AND NXT AND AEW)\"),\r\n(\"(((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B and C Only\",\"4-Way O/O/O/O/B Results\",\"Watched ALL WWE ONLY (SmackDown AND Raw AND NXT ONLY, no AEW)\"),\r\n(\"(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"B and C and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw AND NXT AND AEW ONLY (no SmackDown)\"),\r\n(\"((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"C and D and A Only\",\"4-Way O/O/O/O/B Results\",\"Watched NXT AND AEW AND SmackDown ONLY (no Raw)\"),\r\n(\"(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND Raw AND AEW ONLY (no NXT)\"),\r\n(\"(A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and B Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND Raw ONLY (no NXT or AEW)\"),\r\n(\"(B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"B and C Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw AND NXT ONLY (no SmackDown or AEW)\"),\r\n(\"(C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"C and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched NXT AND AEW ONLY (no Raw or SmackDown)\"),\r\n(\"(A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND AEW ONLY (no Raw or NXT)\"),\r\n(\"(B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"B and D Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw AND AEW ONLY (no SmackDown or NXT)\"),\r\n(\"(A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))\",\"A and C Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown AND NXT ONLY (no Raw or AEW)\"),\r\n(\"A-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\r\n)\",\"A Only\",\"4-Way O/O/O/O/B Results\",\"Watched SmackDown ONLY (no overlap)\"),\r\n(\"B-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))))\",\"B Only\",\"4-Way O/O/O/O/B Results\",\"Watched Raw ONLY (no overlap)\"),\r\n(\"C-(((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\",\"C Only\",\"4-Way O/O/O/O/B Results\",\"Watched NXT ONLY (no overlap)\"),\r\n(\"D-(((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\r\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\r\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\r\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))))\",\"D Only\",\"4-Way O/O/O/O/B Results\",\"Watched AEW ONLY (no ovelap)\")] %}\r\n\r\nwith first_15_schedules as \r\n(select dim_date_id,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,\r\nsum(case when schedule_name like '%A | SmackDown (FOX)%' then aa_reach_proj000 end) A,\r\nsum(case when schedule_name like '%B | Raw (USA)%' then aa_reach_proj000 end) B,\r\nsum(case when schedule_name like '%C | NXT (USA)%' then aa_reach_proj000 end) C,\r\nsum(case when schedule_name like '%D | AEW (TNT)%' then aa_reach_proj000 end) D,\r\n{% for schedule_name,j in descript %}\r\nsum(case when schedule_name = '{{schedule_name}}' then aa_reach_proj000 end) {{schedule_name}},\r\n{% endfor %}\r\nmax(aa_reach_proj000) as Max_AA_Reac_Proj_000 \r\nFROM   fds_nl.fact_nl_weekly_overlap_4_way_oob a\r\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00') \r\n--where dim_date_id='20200302'\r\nGROUP BY 1,2,3,4,5),\r\n total_schedules as \r\n({% for schedule_formula,schedule_name,input_type,overlap_description in schedule_formulas %}\r\nselect dim_date_id,'{{input_type}}' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'{{schedule_name}}' as schedule_name ,\r\n{{schedule_formula}} as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'{{overlap_description}}' as overlap_description  from first_15_schedules\r\nunion all\r\n{% endfor %}\r\nSELECT a.dim_date_id,\r\n       'Straight Nielsen Run' as input_type,\r\n       a.coverage_area,\r\n       a.src_market_break,\r\n       a.src_demographic_group,\r\n       a.src_playback_period_cd,\r\n       a.schedule_name,\r\n       sum(a.aa_reach_proj000) as AA_Reac_Proj_000,\r\n       cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(b.Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,\r\n\t   case when schedule_name like '%A | SmackDown (FOX)%' then 'Total Unique SmackDown'\r\n\t\t\twhen schedule_name like '%B | Raw (USA)%' then 'Total Unique Raw'\r\n\t\t\twhen schedule_name like '%C | NXT (USA)%' then 'Total Unique NXT'\r\n\t\t\twhen schedule_name like '%D | AEW (TNT)%' then 'Total Unique AEW'\r\n\t\t\t{% for schedule_nm,description in descript %}\r\n\t\t\twhen schedule_name='{{schedule_nm}}' then '{{description}}'\r\n\t\t\t{% endfor %} end as Overlap_Description\r\nFROM     fds_nl.fact_nl_weekly_overlap_4_way_oob a join first_15_schedules b on a.dim_date_id=b.dim_date_id\r\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from {{this}}), '1900-01-01 00:00:00')\r\n--where a.dim_date_id='20200302'\r\nGROUP BY 1,2,3,4,5,6,7,b.Max_AA_Reac_Proj_000)\r\nselect dim_date_id week_starting_date,\r\ninput_type,\r\ncoverage_area,\r\nsrc_market_break market_break,\r\nsrc_demographic_group demographic_group,\r\nsrc_playback_period_cd playback_period_cd,\r\nschedule_name program_combination,\r\naa_reac_proj_000 p2_total_unique_reach_proj,\r\np2_total_unique_reach_percent,\r\noverlap_description,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\r\n'bi_dbt_user_prd'                                   AS etl_insert_user_id,\r\nCURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\r\nNULL                                                AS etl_update_user_id,\r\nCAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from total_schedules a", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate", "rpt_nl_weekly_overlap_derived_4_way_oob"], "unique_id": "model.analytics_engineering_marts.rpt_nl_weekly_overlap_derived_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate/rpt_nl_weekly_overlap_derived_4_way_oob.sql", "original_file_path": "models/fds_nl/aggregate/rpt_nl_weekly_overlap_derived_4_way_oob.sql", "name": "rpt_nl_weekly_overlap_derived_4_way_oob", "resource_type": "model", "alias": "rpt_nl_weekly_overlap_derived_4_way_oob", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob where etl_insert_rec_dttm > (select max(etl_insert_rec_dttm) from fds_nl.fact_nl_weekly_overlap_4_way_oob)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate/rpt_nl_weekly_overlap_derived_4_way_oob.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\t\t/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\n\n\n\n\n\nwith first_15_schedules as \n(select dim_date_id,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,\nsum(case when schedule_name like '%A | SmackDown (FOX)%' then aa_reach_proj000 end) A,\nsum(case when schedule_name like '%B | Raw (USA)%' then aa_reach_proj000 end) B,\nsum(case when schedule_name like '%C | NXT (USA)%' then aa_reach_proj000 end) C,\nsum(case when schedule_name like '%D | AEW (TNT)%' then aa_reach_proj000 end) D,\n\nsum(case when schedule_name = 'AB' then aa_reach_proj000 end) AB,\n\nsum(case when schedule_name = 'BC' then aa_reach_proj000 end) BC,\n\nsum(case when schedule_name = 'CA' then aa_reach_proj000 end) CA,\n\nsum(case when schedule_name = 'AD' then aa_reach_proj000 end) AD,\n\nsum(case when schedule_name = 'BD' then aa_reach_proj000 end) BD,\n\nsum(case when schedule_name = 'CD' then aa_reach_proj000 end) CD,\n\nsum(case when schedule_name = 'ABC' then aa_reach_proj000 end) ABC,\n\nsum(case when schedule_name = 'ABD' then aa_reach_proj000 end) ABD,\n\nsum(case when schedule_name = 'BCD' then aa_reach_proj000 end) BCD,\n\nsum(case when schedule_name = 'ACD' then aa_reach_proj000 end) ACD,\n\nsum(case when schedule_name = 'ABCD' then aa_reach_proj000 end) ABCD,\n\nmax(aa_reach_proj000) as Max_AA_Reac_Proj_000 \nFROM   fds_nl.fact_nl_weekly_overlap_4_way_oob a\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00') \n--where dim_date_id='20200302'\nGROUP BY 1,2,3,4,5),\n total_schedules as \n(\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&B' as schedule_name ,\n(A+B-AB) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&C' as schedule_name ,\n(A+C-CA) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&D' as schedule_name ,\n(A+D-AD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&D' as schedule_name ,\n(B+D-BD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&C' as schedule_name ,\n(B+C-BC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both C&D' as schedule_name ,\n(C+D-CD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined AEW and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C' as schedule_name ,\n((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE Total Combined SmackDown and Raw and NXT (includes AEW overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D' as schedule_name ,\n((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT and AEW (includes SmackDown overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C and D' as schedule_name ,\n((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT and AEW (includes Raw overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D' as schedule_name ,\n((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw and AEW (includes NXT overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C and D' as schedule_name ,\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL Wrestling (SmackDown AND Raw AND NXT AND AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C Only' as schedule_name ,\n(((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE ONLY (SmackDown AND Raw AND NXT ONLY, no AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D Only' as schedule_name ,\n(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT AND AEW ONLY (no SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D and A Only' as schedule_name ,\n((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW AND SmackDown ONLY (no Raw)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D Only' as schedule_name ,\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw AND AEW ONLY (no NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B Only' as schedule_name ,\n(A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw ONLY (no NXT or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C Only' as schedule_name ,\n(B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT ONLY (no SmackDown or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D Only' as schedule_name ,\n(C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW ONLY (no Raw or SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and D Only' as schedule_name ,\n(A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND AEW ONLY (no Raw or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and D Only' as schedule_name ,\n(B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND AEW ONLY (no SmackDown or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C Only' as schedule_name ,\n(A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND NXT ONLY (no Raw or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A Only' as schedule_name ,\nA-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\n) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B Only' as schedule_name ,\nB-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C Only' as schedule_name ,\nC-(((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'D Only' as schedule_name ,\nD-(((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched AEW ONLY (no ovelap)' as overlap_description  from first_15_schedules\nunion all\n\nSELECT a.dim_date_id,\n       'Straight Nielsen Run' as input_type,\n       a.coverage_area,\n       a.src_market_break,\n       a.src_demographic_group,\n       a.src_playback_period_cd,\n       a.schedule_name,\n       sum(a.aa_reach_proj000) as AA_Reac_Proj_000,\n       cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(b.Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,\n\t   case when schedule_name like '%A | SmackDown (FOX)%' then 'Total Unique SmackDown'\n\t\t\twhen schedule_name like '%B | Raw (USA)%' then 'Total Unique Raw'\n\t\t\twhen schedule_name like '%C | NXT (USA)%' then 'Total Unique NXT'\n\t\t\twhen schedule_name like '%D | AEW (TNT)%' then 'Total Unique AEW'\n\t\t\t\n\t\t\twhen schedule_name='AB' then 'Total Combined SmackDown and/or Raw'\n\t\t\t\n\t\t\twhen schedule_name='BC' then 'Total Combined Raw and/or NXT'\n\t\t\t\n\t\t\twhen schedule_name='CA' then 'Total Combined NXT and/or SmackDown'\n\t\t\t\n\t\t\twhen schedule_name='AD' then 'Total Combined SmackDown and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BD' then 'Total Combined Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='CD' then 'Total Combined NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABC' then 'Total Watched ANY WWE (Total Combined SmackDown and/or Raw and/or NXT)'\n\t\t\t\n\t\t\twhen schedule_name='ABD' then 'Total Combined SmackDown and/or Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BCD' then 'Total Combined Raw and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ACD' then 'Total Combined SmackDown and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABCD' then 'Total Watched ANY Wrestling (SmackDown and/or Raw and/or NXT and/or AEW)'\n\t\t\t end as Overlap_Description\nFROM     fds_nl.fact_nl_weekly_overlap_4_way_oob a join first_15_schedules b on a.dim_date_id=b.dim_date_id\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00')\n--where a.dim_date_id='20200302'\nGROUP BY 1,2,3,4,5,6,7,b.Max_AA_Reac_Proj_000)\nselect dim_date_id week_starting_date,\ninput_type,\ncoverage_area,\nsrc_market_break market_break,\nsrc_demographic_group demographic_group,\nsrc_playback_period_cd playback_period_cd,\nschedule_name program_combination,\naa_reac_proj_000 p2_total_unique_reach_proj,\np2_total_unique_reach_percent,\noverlap_description,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n'bi_dbt_user_prd'                                   AS etl_insert_user_id,\nCURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\nNULL                                                AS etl_update_user_id,\nCAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from total_schedules a", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\t\t/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n********\n*/\n\n\n\n\n\n\n\nwith first_15_schedules as \n(select dim_date_id,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,\nsum(case when schedule_name like '%A | SmackDown (FOX)%' then aa_reach_proj000 end) A,\nsum(case when schedule_name like '%B | Raw (USA)%' then aa_reach_proj000 end) B,\nsum(case when schedule_name like '%C | NXT (USA)%' then aa_reach_proj000 end) C,\nsum(case when schedule_name like '%D | AEW (TNT)%' then aa_reach_proj000 end) D,\n\nsum(case when schedule_name = 'AB' then aa_reach_proj000 end) AB,\n\nsum(case when schedule_name = 'BC' then aa_reach_proj000 end) BC,\n\nsum(case when schedule_name = 'CA' then aa_reach_proj000 end) CA,\n\nsum(case when schedule_name = 'AD' then aa_reach_proj000 end) AD,\n\nsum(case when schedule_name = 'BD' then aa_reach_proj000 end) BD,\n\nsum(case when schedule_name = 'CD' then aa_reach_proj000 end) CD,\n\nsum(case when schedule_name = 'ABC' then aa_reach_proj000 end) ABC,\n\nsum(case when schedule_name = 'ABD' then aa_reach_proj000 end) ABD,\n\nsum(case when schedule_name = 'BCD' then aa_reach_proj000 end) BCD,\n\nsum(case when schedule_name = 'ACD' then aa_reach_proj000 end) ACD,\n\nsum(case when schedule_name = 'ABCD' then aa_reach_proj000 end) ABCD,\n\nmax(aa_reach_proj000) as Max_AA_Reac_Proj_000 \nFROM   fds_nl.fact_nl_weekly_overlap_4_way_oob a\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00') \n--where dim_date_id='20200302'\nGROUP BY 1,2,3,4,5),\n total_schedules as \n(\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&B' as schedule_name ,\n(A+B-AB) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&C' as schedule_name ,\n(A+C-CA) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both A&D' as schedule_name ,\n(A+D-AD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&D' as schedule_name ,\n(B+D-BD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and AEW' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both B&C' as schedule_name ,\n(B+C-BC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'Both C&D' as schedule_name ,\n(C+D-CD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined AEW and NXT' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C' as schedule_name ,\n((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE Total Combined SmackDown and Raw and NXT (includes AEW overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D' as schedule_name ,\n((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined Raw and NXT and AEW (includes SmackDown overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C and D' as schedule_name ,\n((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and NXT and AEW (includes Raw overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'Derived' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D' as schedule_name ,\n((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Total Combined SmackDown and Raw and AEW (includes NXT overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C and D' as schedule_name ,\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL Wrestling (SmackDown AND Raw AND NXT AND AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and C Only' as schedule_name ,\n(((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched ALL WWE ONLY (SmackDown AND Raw AND NXT ONLY, no AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C and D Only' as schedule_name ,\n(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT AND AEW ONLY (no SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D and A Only' as schedule_name ,\n((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW AND SmackDown ONLY (no Raw)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B and D Only' as schedule_name ,\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw AND AEW ONLY (no NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and B Only' as schedule_name ,\n(A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND Raw ONLY (no NXT or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and C Only' as schedule_name ,\n(B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND NXT ONLY (no SmackDown or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C and D Only' as schedule_name ,\n(C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT AND AEW ONLY (no Raw or SmackDown)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and D Only' as schedule_name ,\n(A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND AEW ONLY (no Raw or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B and D Only' as schedule_name ,\n(B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw AND AEW ONLY (no SmackDown or NXT)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A and C Only' as schedule_name ,\n(A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown AND NXT ONLY (no Raw or AEW)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'A Only' as schedule_name ,\nA-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))\n) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched SmackDown ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'B Only' as schedule_name ,\nB-(((A+B-AB)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched Raw ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'C Only' as schedule_name ,\nC-(((B+C-BC)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+C-CA)-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD)))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched NXT ONLY (no overlap)' as overlap_description  from first_15_schedules\nunion all\n\nselect dim_date_id,'4-Way O/O/O/O/B Results' as input_type,coverage_area,src_market_break,src_demographic_group,src_playback_period_cd,'D Only' as schedule_name ,\nD-(((C+D-CD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((A+D-AD)-(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((B+D-BD)-((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))-\n((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD)))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n((((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))+\n(((((A+B-AB)+(A+C-CA)+(B+C-BC))-(A+B+C-ABC))+(((B+D-BD)+(C+D-CD)+(B+C-BC))-(B+C+D-BCD))+(((A+D-AD)+(C+D-CD)+(A+C-CA))-(A+C+D-ACD))+\n(((A+D-AD)+(B+D-BD)+(A+B-AB))-(A+B+D-ABD))-(((A+B-AB)+(A+C-CA)+(A+D-AD)+(B+C-BC)+(B+D-BD)+(C+D-CD))-((A+B+C+D)-ABCD))))) as AA_Reac_Proj_000,cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,'Watched AEW ONLY (no ovelap)' as overlap_description  from first_15_schedules\nunion all\n\nSELECT a.dim_date_id,\n       'Straight Nielsen Run' as input_type,\n       a.coverage_area,\n       a.src_market_break,\n       a.src_demographic_group,\n       a.src_playback_period_cd,\n       a.schedule_name,\n       sum(a.aa_reach_proj000) as AA_Reac_Proj_000,\n       cast( Round(( cast(AA_Reac_Proj_000 as decimal(18,2))/nullif(cast(b.Max_AA_Reac_Proj_000 as decimal(18,2)),0))*100) as varchar)+'%' as P2_Total_Unique_Reach_Percent,\n\t   case when schedule_name like '%A | SmackDown (FOX)%' then 'Total Unique SmackDown'\n\t\t\twhen schedule_name like '%B | Raw (USA)%' then 'Total Unique Raw'\n\t\t\twhen schedule_name like '%C | NXT (USA)%' then 'Total Unique NXT'\n\t\t\twhen schedule_name like '%D | AEW (TNT)%' then 'Total Unique AEW'\n\t\t\t\n\t\t\twhen schedule_name='AB' then 'Total Combined SmackDown and/or Raw'\n\t\t\t\n\t\t\twhen schedule_name='BC' then 'Total Combined Raw and/or NXT'\n\t\t\t\n\t\t\twhen schedule_name='CA' then 'Total Combined NXT and/or SmackDown'\n\t\t\t\n\t\t\twhen schedule_name='AD' then 'Total Combined SmackDown and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BD' then 'Total Combined Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='CD' then 'Total Combined NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABC' then 'Total Watched ANY WWE (Total Combined SmackDown and/or Raw and/or NXT)'\n\t\t\t\n\t\t\twhen schedule_name='ABD' then 'Total Combined SmackDown and/or Raw and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='BCD' then 'Total Combined Raw and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ACD' then 'Total Combined SmackDown and/or NXT and/or AEW'\n\t\t\t\n\t\t\twhen schedule_name='ABCD' then 'Total Watched ANY Wrestling (SmackDown and/or Raw and/or NXT and/or AEW)'\n\t\t\t end as Overlap_Description\nFROM     fds_nl.fact_nl_weekly_overlap_4_way_oob a join first_15_schedules b on a.dim_date_id=b.dim_date_id\nwhere a.etl_insert_rec_dttm  >  coalesce ((select max(etl_insert_rec_dttm) from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"), '1900-01-01 00:00:00')\n--where a.dim_date_id='20200302'\nGROUP BY 1,2,3,4,5,6,7,b.Max_AA_Reac_Proj_000)\nselect dim_date_id week_starting_date,\ninput_type,\ncoverage_area,\nsrc_market_break market_break,\nsrc_demographic_group demographic_group,\nsrc_playback_period_cd playback_period_cd,\nschedule_name program_combination,\naa_reac_proj_000 p2_total_unique_reach_proj,\np2_total_unique_reach_percent,\noverlap_description,'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' AS etl_batch_id,\n'bi_dbt_user_prd'                                   AS etl_insert_user_id,\nCURRENT_TIMESTAMP                                   AS etl_insert_rec_dttm,\nNULL                                                AS etl_update_user_id,\nCAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from total_schedules a"}, "model.analytics_engineering_marts.intermediate_nl_ranking": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\n\n\n select a.broadcast_Date,a.src_broadcast_network_name,a.src_demographic_group,\n a.time_minute,\n dense_rank() over(partition by src_broadcast_network_name,broadcast_Date,src_demographic_group  order by \nswitch_percent desc NULLS LAST)\nas switch_percent_rank\nfrom {{ref('intermediate_nl_absolute_switch_stay_detail')}}  a\nwhere ((lower(a.source_name) in ('nxt','smackdown') and time_minute  between '20:05:00'\nand '21:54:00') or (lower(a.source_name) in ('raw') and time_minute  between '20:05:00'\nand '22:54:00')  or \n( lower(a.source_name)  in ('aew'))) and  comment is null", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intermediate_nl_ranking"], "unique_id": "model.analytics_engineering_marts.intermediate_nl_ranking", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intermediate_nl_ranking.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intermediate_nl_ranking.sql", "name": "intermediate_nl_ranking", "resource_type": "model", "alias": "intermediate_nl_ranking", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intermediate_nl_absolute_switch_stay_detail"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intermediate_nl_ranking.sql", "compiled": true, "compiled_sql": "\n\n\n\n select a.broadcast_Date,a.src_broadcast_network_name,a.src_demographic_group,\n a.time_minute,\n dense_rank() over(partition by src_broadcast_network_name,broadcast_Date,src_demographic_group  order by \nswitch_percent desc NULLS LAST)\nas switch_percent_rank\nfrom __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  a\nwhere ((lower(a.source_name) in ('nxt','smackdown') and time_minute  between '20:05:00'\nand '21:54:00') or (lower(a.source_name) in ('raw') and time_minute  between '20:05:00'\nand '22:54:00')  or \n( lower(a.source_name)  in ('aew'))) and  comment is null", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "sql": " __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "sql": " __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "sql": " __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_lite_log_est", "sql": " __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "sql": " __dbt__CTE__intermediate_nl_absolute_switch_stay_detail as (\n\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint\n)"}], "injected_sql": "\n\n\n\n with __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n),  __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n),  __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n),  __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n),  __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n),  __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n),  __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n),  __dbt__CTE__intermediate_nl_absolute_switch_stay_detail as (\n\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint\n)select a.broadcast_Date,a.src_broadcast_network_name,a.src_demographic_group,\n a.time_minute,\n dense_rank() over(partition by src_broadcast_network_name,broadcast_Date,src_demographic_group  order by \nswitch_percent desc NULLS LAST)\nas switch_percent_rank\nfrom __dbt__CTE__intermediate_nl_absolute_switch_stay_detail  a\nwhere ((lower(a.source_name) in ('nxt','smackdown') and time_minute  between '20:05:00'\nand '21:54:00') or (lower(a.source_name) in ('raw') and time_minute  between '20:05:00'\nand '22:54:00')  or \n( lower(a.source_name)  in ('aew'))) and  comment is null"}, "model.analytics_engineering_marts.intm_nl_est_time_diff": {"raw_sql": "{{\n  config({\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom {{source('udl_nplus','raw_lite_log')}}\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin {{source('udl_nplus','raw_lite_log')}} b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin {{source('udl_emm','emm_weekly_log_reference')}} d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intm_nl_est_time_diff"], "unique_id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intm_nl_est_time_diff.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intm_nl_est_time_diff.sql", "name": "intm_nl_est_time_diff", "resource_type": "model", "alias": "intm_nl_est_time_diff", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["udl_nplus", "raw_lite_log"], ["udl_nplus", "raw_lite_log"], ["udl_emm", "emm_weekly_log_reference"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.udl_nplus.raw_lite_log", "source.analytics_engineering_marts.udl_nplus.raw_lite_log", "source.analytics_engineering_marts.udl_emm.emm_weekly_log_reference"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intm_nl_est_time_diff.sql", "compiled": true, "compiled_sql": "\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')"}, "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from {{ref('intermediate_nl_switching_absolute_network_num')}} a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intermediate_nl_absolute_usa_fox_tnt_stay"], "unique_id": "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intermediate_nl_absolute_usa_fox_tnt_stay.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intermediate_nl_absolute_usa_fox_tnt_stay.sql", "name": "intermediate_nl_absolute_usa_fox_tnt_stay", "resource_type": "model", "alias": "intermediate_nl_absolute_usa_fox_tnt_stay", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intermediate_nl_switching_absolute_network_num"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intermediate_nl_absolute_usa_fox_tnt_stay.sql", "compiled": true, "compiled_sql": "\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)"}], "injected_sql": "\n\n with __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n),  __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))"}, "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  {{source('fds_nl','fact_nl_minxmin_ratings')}} \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intermediate_nl_minxmin_ratings"], "unique_id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intermediate_nl_minxmin_ratings.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intermediate_nl_minxmin_ratings.sql", "name": "intermediate_nl_minxmin_ratings", "resource_type": "model", "alias": "intermediate_nl_minxmin_ratings", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_minxmin_ratings"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intermediate_nl_minxmin_ratings.sql", "compiled": true, "compiled_sql": "\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')"}, "model.analytics_engineering_marts.intm_nl_lite_log_est": {"raw_sql": "{{\n  config({\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM {{source('udl_nplus','raw_lite_log')}} a \njoin {{ref('intm_nl_est_time_diff')}}  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intm_nl_lite_log_est"], "unique_id": "model.analytics_engineering_marts.intm_nl_lite_log_est", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intm_nl_lite_log_est.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intm_nl_lite_log_est.sql", "name": "intm_nl_lite_log_est", "resource_type": "model", "alias": "intm_nl_lite_log_est", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intm_nl_est_time_diff"]], "sources": [["udl_nplus", "raw_lite_log"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.udl_nplus.raw_lite_log", "model.analytics_engineering_marts.intm_nl_est_time_diff"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intm_nl_lite_log_est.sql", "compiled": true, "compiled_sql": "\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "sql": " __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)"}], "injected_sql": "\n\nwith __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)select a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '"}, "model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM {{ref('intermediate_nl_absolute_network_total_num')}} a  LEFT JOIN {{ref('intermediate_nl_absolute_usa_fox_tnt_stay')}}  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join {{ref('intermediate_nl_set_off_air_absolute_network_num')}}   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from {{ref('intm_nl_lite_log_est')}}\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intermediate_nl_absolute_switch_stay_detail"], "unique_id": "model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intermediate_nl_absolute_switch_stay_detail.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intermediate_nl_absolute_switch_stay_detail.sql", "name": "intermediate_nl_absolute_switch_stay_detail", "resource_type": "model", "alias": "intermediate_nl_absolute_switch_stay_detail", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intermediate_nl_absolute_network_total_num"], ["intermediate_nl_absolute_usa_fox_tnt_stay"], ["intermediate_nl_set_off_air_absolute_network_num"], ["intm_nl_lite_log_est"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num", "model.analytics_engineering_marts.intm_nl_lite_log_est"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intermediate_nl_absolute_switch_stay_detail.sql", "compiled": true, "compiled_sql": "\n\nselect a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "sql": " __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "sql": " __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_est_time_diff", "sql": " __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n)"}, {"id": "model.analytics_engineering_marts.intm_nl_lite_log_est", "sql": " __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)"}], "injected_sql": "\n\nwith __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n),  __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n),  __dbt__CTE__intermediate_nl_absolute_network_total_num as (\n\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8\n),  __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay as (\n\n\n select  a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,absolute_network_number,\n round((a.absolute_network_number/nullif(a.most_current_us_audience_avg_proj_000,0))*100 ,5)\n as stay_percent from __dbt__CTE__intermediate_nl_switching_absolute_network_num a\n where  (src_broadcast_network_name,switching_behavior_dist_cd)\nin (('USA','usa'),('FOX Affiliates','fox_affiliates'),('TNT','tnt'))\n),  __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num as (\n\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')\n),  __dbt__CTE__intm_nl_est_time_diff as (\n\nselect distinct c.showdbid, datediff(sec, (c.airdate || ' ' || substring(trim(c.min_inpoint), 1, 8))::timestamp, \n(d.air_date || ' ' || substring(trim(d.start_time_eastern), 1, 8))::timestamp) as est_time_diff \nfrom\n(select distinct a.showdbid, a.min_inpoint, b.airdate, b.logname\nfrom\n(select showdbid, min(inpoint) as min_inpoint\nfrom \"entdwdb\".\"udl_nplus\".\"raw_lite_log\"\nwhere lower(trim(title)) in ('nxt','raw','smackdown') and \nshowdbid is not null and showdbid <> 0 and inpoint is not null \nand inpoint <> ' ' and segmenttype is not null \ngroup by 1) a\njoin \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" b\non a.showdbid = b.showdbid and a.min_inpoint = b.inpoint) c\njoin \"entdwdb\".\"udl_emm\".\"emm_weekly_log_reference\" d on c.airdate = d.air_date and\nlower(trim(c.logname)) = lower(trim(d.logname))\nwhere d.start_time_eastern is not null and d.start_time_eastern not in ('0', ' ')\n),  __dbt__CTE__intm_nl_lite_log_est as (\n\n\nselect a.showdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, \n(dateadd(hr, 12, (dateadd(sec, b.est_time_diff, (airdate || ' ' || substring(trim(inpoint), 1, 8))::timestamp)))) as inpoint_24hr_est, \n((substring((dateadd(sec, 30, inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_inpoint,\n((substring((dateadd(sec, (((substring(duration, 1, 2))::int * 60 * 60) + ((substring(duration, 4, 2))::int * 60) \n+ ((substring(duration, 7, 2))::int) + 30), inpoint_24hr_est)), 1, 17) || '00')::timestamp) as modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, announcers, \nmatchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name \nFROM \"entdwdb\".\"udl_nplus\".\"raw_lite_log\" a \njoin __dbt__CTE__intm_nl_est_time_diff  b on a.showdbid = b.showdbid\nwhere airdate is not null and inpoint is not null and duration is not null\nand inpoint <> ' ' and duration <> ' '\n)select a.coverage_area,a.src_market_break,a.src_demographic_group,\na.broadcast_Date,a.src_broadcast_network_name,a.time_minute,a.source_name,d.comment ,\na.most_current_us_audience_avg_proj_000,\na.absolute_network_number,\nc.absolute_network_number as absolute_set_off_off_air,\nb.absolute_network_number as absolute_stay,\n b.stay_percent , \n (a.absolute_network_number-b.absolute_network_number-c.absolute_network_number) as absolute_switch ,\n round((((a.absolute_network_number-b.absolute_network_number)-c.absolute_network_number)/nullif(a.most_current_us_audience_avg_proj_000,0))*100,5) as switch_percent\nFROM __dbt__CTE__intermediate_nl_absolute_network_total_num a  LEFT JOIN __dbt__CTE__intermediate_nl_absolute_usa_fox_tnt_stay  B\nON a.src_demographic_group = b.src_demographic_group and \na.broadcast_Date = b.broadcast_Date and\na.src_broadcast_network_name = b.src_broadcast_network_name and\na.time_minute = b. time_minute\nleft join __dbt__CTE__intermediate_nl_set_off_air_absolute_network_num   c\nON a.src_demographic_group = c.src_demographic_group and \na.broadcast_Date = c.broadcast_Date and\na.src_broadcast_network_name = c.src_broadcast_network_name and\na.time_minute = c. time_minute\nleft join (select distinct airdate,title,modified_inpoint,modified_outpoint,comment from __dbt__CTE__intm_nl_lite_log_est\n where  lower(comment) in ('commercial break'))  d \n on trunc(a.broadcast_date) = d.airdate\nand lower(trim(a.source_name)) = lower(trim(d.title)) \nand ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp)\n>= d.modified_inpoint and ( (trunc(a.broadcast_date) || ' ' || trim(a.time_minute))::timestamp) < d.modified_outpoint"}, "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom {{ref('intermediate_nl_switching_absolute_network_num')}}  a \ngroup by 1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intermediate_nl_absolute_network_total_num"], "unique_id": "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intermediate_nl_absolute_network_total_num.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intermediate_nl_absolute_network_total_num.sql", "name": "intermediate_nl_absolute_network_total_num", "resource_type": "model", "alias": "intermediate_nl_absolute_network_total_num", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intermediate_nl_switching_absolute_network_num"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intermediate_nl_absolute_network_total_num.sql", "compiled": true, "compiled_sql": "\n\nselect a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)"}], "injected_sql": "\n\nwith __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n),  __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)select a.broadcast_Date,a.coverage_area,a.src_market_break,a.src_broadcast_network_name,a.src_demographic_group,\na.time_minute,a.source_name,\nmost_current_us_audience_avg_proj_000,\nsum(absolute_network_number) as absolute_network_number\nfrom __dbt__CTE__intermediate_nl_switching_absolute_network_num  a \ngroup by 1,2,3,4,5,6,7,8"}, "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num": {"raw_sql": "{{\r\n  config({\r\n\t\t'schema': 'fds_nl',\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\n\r\n\r\n select * from {{ref('intermediate_nl_switching_absolute_network_num')}}\r\n where   switching_behavior_dist_cd in ('set_off_off_air')", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intermediate_nl_set_off_air_absolute_network_num"], "unique_id": "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intermediate_nl_set_off_air_absolute_network_num.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intermediate_nl_set_off_air_absolute_network_num.sql", "name": "intermediate_nl_set_off_air_absolute_network_num", "resource_type": "model", "alias": "intermediate_nl_set_off_air_absolute_network_num", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intermediate_nl_switching_absolute_network_num"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intermediate_nl_set_off_air_absolute_network_num.sql", "compiled": true, "compiled_sql": "\n\n\n select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}, {"id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "sql": " __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)"}], "injected_sql": "\n\n\n with __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n),  __dbt__CTE__intermediate_nl_switching_absolute_network_num as (\n\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute\n)select * from __dbt__CTE__intermediate_nl_switching_absolute_network_num\n where   switching_behavior_dist_cd in ('set_off_off_air')"}, "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from {{source('fds_nl','fact_nl_weekly_live_switching_behavior_destination_dist')}}  a\njoin  {{ref('intermediate_nl_minxmin_ratings')}} b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "aggregate_intermediate", "intermediate_nl_switching_absolute_network_num"], "unique_id": "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/aggregate_intermediate/intermediate_nl_switching_absolute_network_num.sql", "original_file_path": "models/fds_nl/aggregate_intermediate/intermediate_nl_switching_absolute_network_num.sql", "name": "intermediate_nl_switching_absolute_network_num", "resource_type": "model", "alias": "intermediate_nl_switching_absolute_network_num", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intermediate_nl_minxmin_ratings"]], "sources": [["fds_nl", "fact_nl_weekly_live_switching_behavior_destination_dist"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_weekly_live_switching_behavior_destination_dist", "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/aggregate_intermediate/intermediate_nl_switching_absolute_network_num.sql", "compiled": true, "compiled_sql": "\n\nselect distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "sql": " __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)"}], "injected_sql": "\n\nwith __dbt__CTE__intermediate_nl_minxmin_ratings as (\n\n\nselect  src_market_break,src_demographic_group,broadcast_date,mxm_source,\ncase when upper(src_broadcast_network_name)= 'FOX' then 'FOX Affiliates' \nwhen upper(src_broadcast_network_name) = 'TURNER NETWORK TELEVISION' then 'TNT'\nWHEN  upper(src_broadcast_network_name) = 'USA NETWORK' THEN 'USA' END AS src_broadcast_network_name,\n((split_part(program_telecast_rpt_starttime, ':', 1) :: int *60*60 +\n split_part(program_telecast_rpt_starttime, ':', 2) :: int*60 +\n  (split_part(program_telecast_rpt_starttime, ':', 3) :: int  ))\n + (min_of_pgm_value - 1)*60) AS TIME_MINUTE ,\nmost_current_us_audience_avg_proj_000,etl_insert_rec_dttm\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_minxmin_ratings\" \nwhere src_playback_period_cd in ('Live | TV with Digital | Linear with VOD')\n)select distinct a.coverage_area,a.src_market_break,a.src_demographic_group,a.broadcast_date,a.src_broadcast_network_name,\na.switching_behavior_dist_cd,a.source_name,\na.time_minute ,b.most_current_us_audience_avg_proj_000,a.switching_behavior_dist_Cd_Value,\n((switching_behavior_dist_Cd_Value/100 ) * most_current_us_audience_avg_proj_000 ) as absolute_network_number \n from \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_live_switching_behavior_destination_dist\"  a\njoin  __dbt__CTE__intermediate_nl_minxmin_ratings b\n on (a.src_market_break)= (b.src_market_break)\nand (a.src_demographic_group) = (b.src_demographic_group)\n and a.broadcast_date=b.broadcast_date\nand (a.src_broadcast_network_name)= (b.src_broadcast_network_name) and \nupper(a.source_name) = upper(b.mxm_source) and\n(split_part(a.time_minute, ':', 1) :: int *60*60 +\n split_part(a.time_minute, ':', 2) :: int*60 +\n  (split_part(a.time_minute, ':', 3) :: int)) = b.time_minute"}, "model.analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data": {"raw_sql": "-- Hulu wwe viewing hour aggregate view \r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/19/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_monthly_hulu_wwe_vh_data\r\n   Schema\t   : fds_nl\r\n   Contributor : Hima Dasan\r\n   Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu.\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n{{\r\n  config({\r\n\t\t'schema': 'fds_nl',\r\n\t\t\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n  })\r\n}}\r\n\r\n\r\nselect  \r\nb.mth_abbr_nm as flight_month,\r\n datepart(YEAR,dateadd(day,adjusted_day_of_flight,flight_start_date)) as flight_year,\r\na.src_Series_id as src_Series_id,\r\nsum((mc_us_aa_proj000*TOTAL_DURATION*1000.00)  /60.00 ) as tot_viewing_hours\r\n from   {{source('fds_nl','fact_nl_weekly_hulu_data')}} a\r\n join {{source('cdm','dim_date')}}  b on \r\n  date(dateadd(day,a.adjusted_day_of_flight,a.flight_start_date)) = b.full_date\r\ngroup by 1,2,3", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_hulu_wwe_vh_data"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_monthly_hulu_wwe_vh_data.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_hulu_wwe_vh_data.sql", "name": "vw_aggr_nl_monthly_hulu_wwe_vh_data", "resource_type": "model", "alias": "vw_aggr_nl_monthly_hulu_wwe_vh_data", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_weekly_hulu_data"], ["cdm", "dim_date"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_weekly_hulu_data", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_nl_monthly_hulu_wwe_vh_data\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu. \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"flight_Month": {"name": "flight_Month", "description": "Month of program airing", "meta": {}, "data_type": null, "tags": []}, "flight_Year": {"name": "flight_Year", "description": "Year of program airing", "meta": {}, "data_type": null, "tags": []}, "src_Series_id": {"name": "src_Series_id", "description": "Program name the channel has broadcasted", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_hours": {"name": "tot_viewing_hours", "description": "Derived viewing hours", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_hulu_wwe_vh_data.sql", "compiled": true, "compiled_sql": "-- Hulu wwe viewing hour aggregate view \n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_hulu_wwe_vh_data\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu.\n*************************************************************************************************************************************************\n*/\n\n\n\n\nselect  \nb.mth_abbr_nm as flight_month,\n datepart(YEAR,dateadd(day,adjusted_day_of_flight,flight_start_date)) as flight_year,\na.src_Series_id as src_Series_id,\nsum((mc_us_aa_proj000*TOTAL_DURATION*1000.00)  /60.00 ) as tot_viewing_hours\n from   \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_hulu_data\" a\n join \"entdwdb\".\"cdm\".\"dim_date\"  b on \n  date(dateadd(day,a.adjusted_day_of_flight,a.flight_start_date)) = b.full_date\ngroup by 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Hulu wwe viewing hour aggregate view \n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_hulu_wwe_vh_data\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu.\n*************************************************************************************************************************************************\n*/\n\n\n\n\nselect  \nb.mth_abbr_nm as flight_month,\n datepart(YEAR,dateadd(day,adjusted_day_of_flight,flight_start_date)) as flight_year,\na.src_Series_id as src_Series_id,\nsum((mc_us_aa_proj000*TOTAL_DURATION*1000.00)  /60.00 ) as tot_viewing_hours\n from   \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_hulu_data\" a\n join \"entdwdb\".\"cdm\".\"dim_date\"  b on \n  date(dateadd(day,a.adjusted_day_of_flight,a.flight_start_date)) = b.full_date\ngroup by 1,2,3"}, "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_commercial_ratings": {"raw_sql": "--Commercial ratings for WWE program(quarterly)\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_quarterly_wwe_live_commercial_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Rahul Chandran\r\n   Description : WWE Live Commercial Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on quarterly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_quarter IS 'Broadcast Quarter name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS  'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';\r\n\t\t\t\t\t\"]\r\n\t})\r\n}}\r\n\r\n\r\nselect  broadcast_quarter_nm as broadcast_quarter, broadcast_year, \r\nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\r\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\r\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\r\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\r\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\r\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\r\nfrom  {{ref('rpt_nl_daily_wwe_live_commercial_ratings')}}\r\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_quarterly_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_commercial_ratings.sql", "name": "vw_aggr_nl_quarterly_wwe_live_commercial_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_quarter IS 'Broadcast Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS  'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';\n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "A view to display various dimensions and metrics for quarterly Commercial ratings", "columns": {"broadcast_quarter": {"name": "broadcast_quarter", "description": "Broadcast Calendar Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "--Commercial ratings for WWE program(quarterly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\n\nselect  broadcast_quarter_nm as broadcast_quarter, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Commercial ratings for WWE program(quarterly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\n\nselect  broadcast_quarter_nm as broadcast_quarter, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_program_ratings": {"raw_sql": "/*\r\n*************************************************************************************************************************************************\r\n   Date        : 07/21/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_yearly_wwe_live_program_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : WWE Live Program Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n{{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\n\r\nSELECT broadcast_cal_year as broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\r\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\r\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\r\nFROM {{ref('rpt_nl_daily_wwe_program_ratings')}}\r\nWHERE (src_broadcast_network_id, src_program_id)\r\n  IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\r\nGROUP BY 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_yearly_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_yearly_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on yearly-basis", "columns": {"broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airing", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT broadcast_cal_year as broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n  IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nSELECT broadcast_cal_year as broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n  IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings": {"raw_sql": "{{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_month_nm IS 'Reporting month abbr name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_year IS 'Reporting year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';\r\n\t\t\t\"]\r\n\t})\r\n}}\r\n\r\n--Timeperiod program ratings (monthly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_monthly_timeperiod_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : Timeperiod Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on monthly-basis.\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\nSELECT  b.mth_abbr_nm as rpt_month_nm,\r\n        b.cal_year    as rpt_year, \r\n        c.broadcast_network_name as broadcast_network_name,\r\n        d.src_daypart_name as src_daypart_name,\r\n        src_playback_period_cd,\r\n        src_demographic_group,\r\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\r\n        avg(avg_audience_pct) as avg_audience_pct,\r\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\r\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\r\n\t\t\r\nFROM       {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\r\nLEFT JOIN {{source('cdm','dim_date')}}  b on a.rpt_startdate_id = b.dim_date_id\r\nLEFT JOIN {{source('fds_nl','dim_nl_broadcast_network')}}  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\r\nLEFT JOIN {{source('fds_nl','dim_nl_daypart')}}   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\r\nGROUP BY  1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_timeperiod_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_monthly_timeperiod_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_timeperiod_ratings.sql", "name": "vw_aggr_nl_monthly_timeperiod_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_timeperiod_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_month_nm IS 'Reporting month abbr name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';\n\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for monthly timeperiod ratings", "columns": {"billing_month": {"name": "billing_month", "description": "Original Billing Month", "meta": {}, "data_type": null, "tags": []}, "rpt_month_nm": {"name": "rpt_month_nm", "description": "Reporting month abbr name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Reporting year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast network Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_timeperiod_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Timeperiod program ratings (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT  b.mth_abbr_nm as rpt_month_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\n\t\t\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Timeperiod program ratings (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT  b.mth_abbr_nm as rpt_month_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\n\t\t\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings": {"raw_sql": "/*\r\n*************************************************************************************************************************************************\r\n   Date        : 07/21/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_monthly_wwe_live_program_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : WWE Live Program Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n{{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\n\r\nSELECT broadcast_cal_month_nm as broadcast_month, broadcast_cal_year as broadcast_year, \r\nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\r\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\r\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\r\nFROM {{ref('rpt_nl_daily_wwe_program_ratings')}}\r\nWHERE (src_broadcast_network_id, src_program_id)\r\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\r\nGROUP BY 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_monthly_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_monthly_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live program ratings on monthly-basis", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "Broadcast Calendar Month", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calendar Year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airings", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\nSELECT broadcast_cal_month_nm as broadcast_month, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\nSELECT broadcast_cal_month_nm as broadcast_month, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings": {"raw_sql": "--QH ratings for WWE program (monthly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_monthly_wwe_live_quarterhour_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Sudhakar Andugula\r\n   Description : WWE Live Quarter Hour Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on monthly-basis\r\n**************************************************************************************************************************************************\r\n*/\r\n \r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_month IS 'Broadcast Month name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\r\n\t\t\t\"]\r\n\t})\r\n}}\r\n\r\nSELECT broadcast_month_nm broadcast_month, \r\n       broadcast_year, \r\n       src_broadcast_network_id,\r\n       src_playback_period_cd,\r\n       src_demographic_group,\r\n       src_program_id,\r\n       interval_starttime,\r\n       interval_endtime,\r\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\r\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \r\nsum(avg_viewing_hours_units) as tot_viewing_minutes\r\nFROM {{ref('rpt_nl_daily_wwe_live_quarterhour_ratings')}}\r\nGROUP BY  1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.sql", "name": "vw_aggr_nl_monthly_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_month IS 'Broadcast Month name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "A view to display various dimensions and metrics for wwe live quarterhour ratings", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "Broadcast Month name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast  year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be profided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be profided", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--QH ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on monthly-basis\n**************************************************************************************************************************************************\n*/\n \n \n\nSELECT broadcast_month_nm broadcast_month, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--QH ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on monthly-basis\n**************************************************************************************************************************************************\n*/\n \n \n\nSELECT broadcast_month_nm broadcast_month, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8"}, "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_commercial_ratings": {"raw_sql": "{{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_month IS 'Broadcast Month name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast  year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';\"]\r\n\t})\r\n}}\r\n\r\n--Commercial ratings for WWE program (monthly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_monthly_wwe_live_commercial_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Rahul Chandran\r\n   Description : WWE Live Commercial Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on monthly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\nselect broadcast_month_nm as broadcast_month, broadcast_year, \r\nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\r\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\r\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\r\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\r\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\r\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\r\nfrom  {{ref('rpt_nl_daily_wwe_live_commercial_ratings')}}\r\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_monthly_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_commercial_ratings.sql", "name": "vw_aggr_nl_monthly_wwe_live_commercial_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_month IS 'Broadcast Month name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes ';", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "A view to display various dimensions and metrics for live commercial ratings", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "Broadcast Month name", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast  year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name.", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Commercial ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect broadcast_month_nm as broadcast_month, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Commercial ratings for WWE program (monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect broadcast_month_nm as broadcast_month, broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch": {"raw_sql": "-- Switch behavior absolute value ranking view\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'view','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nselect broadcast_Date,coverage_area,src_market_break,src_demographic_group\n,src_broadcast_network_name,time_minute,mc_us_aa000,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\nswitch_percent_rank\n from {{ref('rpt_nl_weekly_channel_switch')}}  A", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_weekly_channel_switch"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_rpt_nl_weekly_channel_switch.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_weekly_channel_switch.sql", "name": "vw_rpt_nl_weekly_channel_switch", "resource_type": "model", "alias": "vw_rpt_nl_weekly_channel_switch", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_weekly_channel_switch"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_weekly_channel_switch"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* TableName   : vw_rpt_nl_weekly_channel_switch\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"coverage_area": {"name": "coverage_area", "description": "NPOWER- Coverage Area", "meta": {}, "data_type": null, "tags": []}, "src_market_break": {"name": "src_market_break", "description": "Identified Marcket break category by the broadcast nework", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "broadcast_Date": {"name": "broadcast_Date", "description": "Broadcast date for the given channel", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Viewing source of the network channel", "meta": {}, "data_type": null, "tags": []}, "time_minute": {"name": "time_minute", "description": "minute of measurement the intervel of switching beahiour is measured", "meta": {}, "data_type": null, "tags": []}, "mc_us_aa000": {"name": "mc_us_aa000", "description": "Metrics for most current US audience average projection in thousants", "meta": {}, "data_type": null, "tags": []}, "absolute_stay": {"name": "absolute_stay", "description": "unique viewers who stayed in the same network", "meta": {}, "data_type": null, "tags": []}, "stay_percent": {"name": "stay_percent", "description": "percentage value of viewers stayed in same network", "meta": {}, "data_type": null, "tags": []}, "absolute_switch": {"name": "absolute_switch", "description": "unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent": {"name": "switch_percent", "description": "percentage value of unique viewers who swicthed to different network", "meta": {}, "data_type": null, "tags": []}, "switch_percent_rank": {"name": "switch_percent_rank", "description": "ranking based on percentage switch", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_weekly_channel_switch.sql", "compiled": true, "compiled_sql": "-- Switch behavior absolute value ranking view\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_Date,coverage_area,src_market_break,src_demographic_group\n,src_broadcast_network_name,time_minute,mc_us_aa000,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\nswitch_percent_rank\n from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_channel_switch\"  A", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Switch behavior absolute value ranking view\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_channel_switch\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_Date,coverage_area,src_market_break,src_demographic_group\n,src_broadcast_network_name,time_minute,mc_us_aa000,\nabsolute_stay,stay_percent,absolute_switch,switch_percent,\nswitch_percent_rank\n from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_channel_switch\"  A"}, "model.analytics_engineering_marts.vw_aggr_nl_monthly_fin_wwe_live_program_ratings": {"raw_sql": "/*\r\n*************************************************************************************************************************************************\r\n   Date        : 07/21/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_monthly_fin_wwe_live_program_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Hima Dasan\r\n   Description : WWE Live Program Rating Monthly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n{{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\n\r\nselect broadcast_fin_month_nm as broadcast_fin_month, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\r\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\r\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\r\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}\r\nwhere broadcast_fin_month is not null and broadcast_fin_year is not null and\r\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\r\ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_fin_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_fin_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_monthly_fin_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_fin_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_monthly_fin_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_fin_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on financial month-basis", "columns": {"broadcast_fin_month": {"name": "broadcast_fin_month", "description": "Broadcast Financial Month", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Broadcast Financial Year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24)", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "(Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airings", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_fin_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Monthly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_month_nm as broadcast_fin_month, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_month is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Monthly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_month_nm as broadcast_fin_month, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_month is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings": {"raw_sql": "--QH ratings for WWE program(quarterly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Sudhakar Andugula\r\n   Description : WWE Live Quarter Hour Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on quarterly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN  fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_quarter IS 'Broadcast Quarter Name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided' ;\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\r\n\t\t\t\t\t\"]\r\n\t})\r\n}}\r\nSELECT broadcast_quarter_nm broadcast_quarter, \r\n       broadcast_year, \r\n       src_broadcast_network_id,\r\n       src_playback_period_cd,\r\n       src_demographic_group,\r\n       src_program_id,\r\n       interval_starttime,\r\n       interval_endtime,\r\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\r\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \r\nsum(avg_viewing_hours_units) as tot_viewing_minutes\r\nFROM {{ref('rpt_nl_daily_wwe_live_quarterhour_ratings')}}\r\nGROUP BY  1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.sql", "name": "vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN  fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_quarter IS 'Broadcast Quarter Name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided' ;\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "A view to display various dimensions and metrics for quarterly wwe live Quarter hour ratings", "columns": {"broadcast_quarter": {"name": "broadcast_quarter", "description": "Broadcast Calendar Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be provided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be provided", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--QH ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \nSELECT broadcast_quarter_nm broadcast_quarter, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--QH ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \nSELECT broadcast_quarter_nm broadcast_quarter, \n       broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7,8"}, "model.analytics_engineering_marts.vw_rpt_nl_daily_wwe_program_ratings": {"raw_sql": "/*\r\n*************************************************************************************************************************************************\r\n   Date        : 07/21/2020\r\n   Version     : 1.0\r\n   TableName   : vw_rpt_nl_daily_wwe_live_program_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Rahul Chandran\r\n   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from WWE Program Ratings Daily Report table\r\n*************************************************************************************************************************************************\r\n*/\r\n{{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\n\r\nselect broadcast_date, broadcast_cal_week_begin_date, broadcast_cal_week_end_date, broadcast_cal_week_num, broadcast_cal_month_nm, broadcast_cal_quarter, broadcast_cal_year, broadcast_fin_week_begin_date, broadcast_fin_week_end_date, broadcast_fin_week_num, \r\nbroadcast_fin_month_nm, broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, broadcast_network_name, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name, src_daypart_cd, src_daypart_name, program_telecast_rpt_starttime, program_telecast_rpt_endtime,avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, viewing_minutes_units\r\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_daily_wwe_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_daily_wwe_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_rpt_nl_daily_wwe_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_daily_wwe_program_ratings.sql", "name": "vw_rpt_nl_daily_wwe_program_ratings", "resource_type": "model", "alias": "vw_rpt_nl_daily_wwe_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_daily_wwe_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_daily_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from WWE Program Ratings Daily Report table\n*************************************************************************************************************************************************\n*/\n\n\nselect broadcast_date, broadcast_cal_week_begin_date, broadcast_cal_week_end_date, broadcast_cal_week_num, broadcast_cal_month_nm, broadcast_cal_quarter, broadcast_cal_year, broadcast_fin_week_begin_date, broadcast_fin_week_end_date, broadcast_fin_week_num, \nbroadcast_fin_month_nm, broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, broadcast_network_name, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name, src_daypart_cd, src_daypart_name, program_telecast_rpt_starttime, program_telecast_rpt_endtime,avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, viewing_minutes_units\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_daily_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from WWE Program Ratings Daily Report table\n*************************************************************************************************************************************************\n*/\n\n\nselect broadcast_date, broadcast_cal_week_begin_date, broadcast_cal_week_end_date, broadcast_cal_week_num, broadcast_cal_month_nm, broadcast_cal_quarter, broadcast_cal_year, broadcast_fin_week_begin_date, broadcast_fin_week_end_date, broadcast_fin_week_num, \nbroadcast_fin_month_nm, broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, broadcast_network_name, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name, src_daypart_cd, src_daypart_name, program_telecast_rpt_starttime, program_telecast_rpt_endtime,avg_audience_proj_000, avg_audience_pct, avg_audience_pct_nw_cvg_area, viewing_minutes_units\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\""}, "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings": {"raw_sql": "--Timeperiod program ratings (quarterly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_quarterly_timeperiod_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : Timeperiod Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on quarterly-basis.\r\n*************************************************************************************************************************************************\r\n*/\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_year IS 'Reporting year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_pct_nw_cvg_area IS'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)'; \r\n \"]\r\n\t})\r\n}}\r\n\r\nSELECT  substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\r\n        b.cal_year    as rpt_year, \r\n        c.broadcast_network_name as broadcast_network_name,\r\n        d.src_daypart_name as src_daypart_name,\r\n        src_playback_period_cd,\r\n        src_demographic_group,\r\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\r\n        avg(avg_audience_pct) as avg_audience_pct,\r\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\r\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\r\nFROM       {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\r\nLEFT JOIN  {{source('cdm','dim_date')}}   b on a.rpt_startdate_id = b.dim_date_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_broadcast_network')}}   c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\r\nGROUP BY  1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_timeperiod_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_quarterly_timeperiod_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_timeperiod_ratings.sql", "name": "vw_aggr_nl_quarterly_timeperiod_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_timeperiod_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_timeperiod_ratings.avg_pct_nw_cvg_area IS'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)'; \n ", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for  quarterly timeperiod ratings", "columns": {"rpt_quarter_nm": {"name": "rpt_quarter_nm", "description": "Quarter Name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Calender year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_timeperiod_ratings.sql", "compiled": true, "compiled_sql": "--Timeperiod program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n \n\nSELECT  substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"   b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"   c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Timeperiod program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n \n\nSELECT  substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n        b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"   b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"   c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_nl_yearly_fin_wwe_live_program_ratings": {"raw_sql": "/*\r\n*************************************************************************************************************************************************\r\n   Date        : 07/21/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_yearly_fin_wwe_live_program_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Hima Dasan\r\n   Description : WWE Live Program Rating Yearly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n{{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\n\r\nselect broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\r\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\r\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\r\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}\r\nwhere broadcast_fin_year is not null and\r\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\r\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_fin_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_fin_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_yearly_fin_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_fin_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_yearly_fin_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_fin_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on financial year-basis", "columns": {"broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Broadcast Financial year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airing", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_fin_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Yearly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Yearly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_commercial_ratings": {"raw_sql": "--Commercial ratings for WWE program(quarterly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_yearly_wwe_live_commercial_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Rahul Chandran\r\n   Description : WWE Live Commercial Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on yearly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in munites ';\"]\r\n\t})\r\n}}\r\n\r\nselect  broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\r\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\r\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\r\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\r\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\r\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\r\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\r\nfrom  {{ref('rpt_nl_daily_wwe_live_commercial_ratings')}}\r\ngroup by 1,2,3,4,5", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_wwe_live_commercial_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_yearly_wwe_live_commercial_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_commercial_ratings.sql", "name": "vw_aggr_nl_yearly_wwe_live_commercial_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_wwe_live_commercial_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.broadcast_year IS 'Broadcast year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.src_program_id IS 'A unique numerical identifier for an individual program name. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_000 IS 'National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_avg_audience_proj_pct IS 'National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.natl_comm_clockmts_cvg_area_avg_audience_proj_pct IS 'National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_commercial_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in munites ';", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "A view to display various dimensions and metrics for yearly Commercial ratings", "columns": {"broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_000": {"name": "natl_comm_clockmts_avg_audience_proj_000", "description": "National Commercial Clock Minute Average Audience Projection (000) (The projected number of households tuned or persons viewing the average qualified commercial minute of the selected program within the total U.S., expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_avg_audience_proj_pct": {"name": "natl_comm_clockmts_avg_audience_proj_pct", "description": "National Commercial Clock Minute Average Audience Percentage (The percentage of the target demographic viewing the average qualified commercial minute of the selected program within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "natl_comm_clockmts_cvg_area_avg_audience_proj_pct": {"name": "natl_comm_clockmts_cvg_area_avg_audience_proj_pct", "description": "National Commercial Clock Minute Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average qualified commercial minute of a selected program within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_commercial_ratings.sql", "compiled": true, "compiled_sql": "--Commercial ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nselect  broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Commercial ratings for WWE program(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_commercial_ratings\n   Schema\t   : fds_nl\n   Contributor : Rahul Chandran\n   Description : WWE Live Commercial Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Commercial Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nselect  broadcast_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,\n--Duration Weighted Averages are taking for natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_avg_audience_proj_pct and --natl_comm_clockmts_cvg_area_avg_audience_proj_pct here..\n(sum(natl_comm_clockmts_avg_audience_proj_000 * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_000, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_000,\n(sum(natl_comm_clockmts_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0)) as natl_comm_clockmts_avg_audience_proj_pct,\n(sum(natl_comm_clockmts_cvg_area_avg_audience_proj_pct * natl_comm_clockmts_duration)/\nnullif(sum(nvl2(natl_comm_clockmts_cvg_area_avg_audience_proj_pct, natl_comm_clockmts_duration, null)), 0))\nas natl_comm_clockmts_cvg_area_avg_audience_proj_pct, sum(avg_viewing_hours_units) as tot_viewing_minutes\nfrom  \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\ngroup by 1,2,3,4,5"}, "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_program_ratings": {"raw_sql": "--WWE LIVE program ratings (quarterly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 07/21/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_quarterly_wwe_live_program_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : WWE Live Program Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\n\r\nSELECT broadcast_cal_quarter as broadcast_quarter, broadcast_cal_year as broadcast_year, \r\nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\r\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\r\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\r\nFROM {{ref('rpt_nl_daily_wwe_program_ratings')}}\r\nWHERE (src_broadcast_network_id, src_program_id)\r\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\r\nGROUP BY 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_quarterly_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_quarterly_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on quarterly-basis", "columns": {"broadcast_quarter": {"name": "broadcast_quarter", "description": "Broadcast Calendar Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airing", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "--WWE LIVE program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_cal_quarter as broadcast_quarter, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--WWE LIVE program ratings (quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : WWE Live Program Rating Quarterly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_cal_quarter as broadcast_quarter, broadcast_cal_year as broadcast_year, \nsrc_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nWHERE (src_broadcast_network_id, src_program_id)\n   IN ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\nGROUP BY 1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/26/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_chart\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n*************************************************************************************************************************************************\n*/\n\n\n{{\n  config({\n\t\t 'schema': 'fds_nl',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nSELECT\n    as_on_date,\n    primary_schedule_name             AS primary_schedule,\n    secondary_schedule_name           AS secondary_schedule,\n    src_market_break                  AS market_break,\n    src_demographic_group             AS demographic_group,\n    src_playback_period_cd            AS playback_period,\n    primary_reach_proj000             AS Primary_Reach_Proj_000,\n    combined_reach_proj000       \t  AS Combined_Reach_Proj_000,\n    primary_only_reach_proj000        AS Primary_Only_Reach_Proj_000,\n    secondary_only_reach_proj000      AS secondary_only_reach_proj000,\n    both_reach_proj000                AS both_reach_proj000,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Primary_Show ,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(combined_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(T.max_combined_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Wrestling,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN CAST(primary_only_reach_proj000 AS DECIMAL)\n        ELSE CAST(both_reach_proj000 AS DECIMAL)\n    END AS Overlap_Reach_Proj000\nFROM {{source('fds_nl','fact_nl_weekly_overlap_chart')}} a\n  \nINNER JOIN\n    (\n        SELECT\n            dim_date_id,\n            MAX(CAST(combined_reach_proj000 AS DECIMAL)) AS max_combined_reach_proj000\n        FROM  {{source('fds_nl','fact_nl_weekly_overlap_chart')}}\n           \n        GROUP BY\n            dim_date_id )T\nON\n    a.as_on_date=T.dim_date_id\n    order by as_on_date", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_weekly_overlap_chart"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_rpt_nl_weekly_overlap_chart.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_weekly_overlap_chart.sql", "name": "vw_rpt_nl_weekly_overlap_chart", "resource_type": "model", "alias": "vw_rpt_nl_weekly_overlap_chart", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "fact_nl_weekly_overlap_chart"], ["fds_nl", "fact_nl_weekly_overlap_chart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart", "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_nl_weekly_overlap_chart\n* Schema\t  : fds_nl\n* Contributor : Remya K Nair\n* Description :vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"as_on_date": {"name": "as_on_date", "description": "Record as-on date", "meta": {}, "data_type": null, "tags": []}, "primary_schedule": {"name": "primary_schedule", "description": "identifier for primary program/daypart selection as input within Nielsen report", "meta": {}, "data_type": null, "tags": []}, "secondary_schedule": {"name": "secondary_schedule", "description": "identifier for secondary program/daypart selection as input within Nielsen report.", "meta": {}, "data_type": null, "tags": []}, "market_break": {"name": "market_break", "description": "Identified Market break category by the broadcast nework", "meta": {}, "data_type": null, "tags": []}, "demographic_group": {"name": "demographic_group", "description": "A comma separated list of demographic group", "meta": {}, "data_type": null, "tags": []}, "playback_period": {"name": "playback_period", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load. Live (Live - Includes viewing that occurred during the live airing). Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing). Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing). Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "Primary_Reach_Proj_000": {"name": "Primary_Reach_Proj_000", "description": "unique viewers who watched primary program/daypart (whether or not they watched secondary program/daypart)", "meta": {}, "data_type": null, "tags": []}, "Combined_Reach_Proj_000": {"name": "Combined_Reach_Proj_000", "description": "unique viewers who watched either the primary program/daypart or secondary program/daypart, regarless of whether they watched both", "meta": {}, "data_type": null, "tags": []}, "Primary_Only_Reach_Proj_000": {"name": "Primary_Only_Reach_Proj_000", "description": "unique viewers who only watched primary program/daypart and did not watch secondary program/daypart", "meta": {}, "data_type": null, "tags": []}, "secondary_only_reach_proj000": {"name": "secondary_only_reach_proj000", "description": "unique viewers who only watched secondary program/daypart and did not watch primary program/daypart", "meta": {}, "data_type": null, "tags": []}, "both_reach_proj000": {"name": "both_reach_proj000", "description": "unique viewers who watched both the primary program/daypart and secondary program/daypart", "meta": {}, "data_type": null, "tags": []}, "Percent_of_Primary_Show": {"name": "Percent_of_Primary_Show", "description": "percentage of primary show  will be calculated  based on Secondary schedule name", "meta": {}, "data_type": null, "tags": []}, "Percent_of_Wrestling": {"name": "Percent_of_Wrestling", "description": "percentage of Wrestling will be calculated  based on Secondary schedule name", "meta": {}, "data_type": null, "tags": []}, "Overlap_Reach_Proj000": {"name": "Overlap_Reach_Proj000", "description": "Overlap reach  will be calculated  based on Secondary schedule name", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_weekly_overlap_chart.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/26/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_chart\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    as_on_date,\n    primary_schedule_name             AS primary_schedule,\n    secondary_schedule_name           AS secondary_schedule,\n    src_market_break                  AS market_break,\n    src_demographic_group             AS demographic_group,\n    src_playback_period_cd            AS playback_period,\n    primary_reach_proj000             AS Primary_Reach_Proj_000,\n    combined_reach_proj000       \t  AS Combined_Reach_Proj_000,\n    primary_only_reach_proj000        AS Primary_Only_Reach_Proj_000,\n    secondary_only_reach_proj000      AS secondary_only_reach_proj000,\n    both_reach_proj000                AS both_reach_proj000,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Primary_Show ,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(combined_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(T.max_combined_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Wrestling,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN CAST(primary_only_reach_proj000 AS DECIMAL)\n        ELSE CAST(both_reach_proj000 AS DECIMAL)\n    END AS Overlap_Reach_Proj000\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\" a\n  \nINNER JOIN\n    (\n        SELECT\n            dim_date_id,\n            MAX(CAST(combined_reach_proj000 AS DECIMAL)) AS max_combined_reach_proj000\n        FROM  \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\"\n           \n        GROUP BY\n            dim_date_id )T\nON\n    a.as_on_date=T.dim_date_id\n    order by as_on_date", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/26/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_chart\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n*************************************************************************************************************************************************\n*/\n\n\n\n\nSELECT\n    as_on_date,\n    primary_schedule_name             AS primary_schedule,\n    secondary_schedule_name           AS secondary_schedule,\n    src_market_break                  AS market_break,\n    src_demographic_group             AS demographic_group,\n    src_playback_period_cd            AS playback_period,\n    primary_reach_proj000             AS Primary_Reach_Proj_000,\n    combined_reach_proj000       \t  AS Combined_Reach_Proj_000,\n    primary_only_reach_proj000        AS Primary_Only_Reach_Proj_000,\n    secondary_only_reach_proj000      AS secondary_only_reach_proj000,\n    both_reach_proj000                AS both_reach_proj000,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(primary_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Primary_Show ,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN (primary_only_reach_proj000*1.0000)/(NULLIF(combined_reach_proj000*1.0000,0))*100\n        ELSE (both_reach_proj000*1.0000)/(NULLIF(T.max_combined_reach_proj000*1.0000,0))*100\n    END AS Percent_of_Wrestling,\n    CASE\n        WHEN secondary_schedule IN ('All but SD',\n                                    'All but Raw',\n                                    'All but NXT',\n                                    'All but AEW',\n                                    'All but WWE')\n        THEN CAST(primary_only_reach_proj000 AS DECIMAL)\n        ELSE CAST(both_reach_proj000 AS DECIMAL)\n    END AS Overlap_Reach_Proj000\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\" a\n  \nINNER JOIN\n    (\n        SELECT\n            dim_date_id,\n            MAX(CAST(combined_reach_proj000 AS DECIMAL)) AS max_combined_reach_proj000\n        FROM  \"entdwdb\".\"fds_nl\".\"fact_nl_weekly_overlap_chart\"\n           \n        GROUP BY\n            dim_date_id )T\nON\n    a.as_on_date=T.dim_date_id\n    order by as_on_date"}, "model.analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings": {"raw_sql": "{{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, src_playback_period_cd, \r\nsrc_demographic_group, program_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \r\nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct,\r\nshowdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, modified_inpoint, modified_outpoint,\r\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, \r\nannouncers, matchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \r\nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name\r\nfrom {{ref('rpt_nl_daily_minxmin_lite_log_ratings')}}", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_daily_minxmin_lite_log_ratings"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_rpt_nl_daily_minxmin_lite_log_ratings.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_daily_minxmin_lite_log_ratings.sql", "name": "vw_rpt_nl_daily_minxmin_lite_log_ratings", "resource_type": "model", "alias": "vw_rpt_nl_daily_minxmin_lite_log_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "## Implementation Detail\n*   Date        : 08/17/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_nl_daily_minxmin_lite_log_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : Minute By Minture Ratings joining with Lite Log Report View consist of ratings of segments along with its details referencing from Minute By Minute Ratings joining with Lite Log daily table\n\n## Maintenance Log\n* Date : 08/17/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"broadcast_date_id": {"name": "broadcast_date_id", "description": "Broadcast Date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the program is broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_name": {"name": "src_broadcast_network_name", "description": "Broadcast Network Channel Name", "meta": {}, "data_type": null, "tags": []}, "src_program_name": {"name": "src_program_name", "description": "Name of the Program", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_starttime": {"name": "program_telecast_rpt_starttime", "description": "Program Telecast Report Start Time", "meta": {}, "data_type": null, "tags": []}, "program_telecast_rpt_endtime": {"name": "program_telecast_rpt_endtime", "description": "Program Telecast Report End Time", "meta": {}, "data_type": null, "tags": []}, "min_of_pgm_value": {"name": "min_of_pgm_value", "description": "Metrics for Minute of program value", "meta": {}, "data_type": null, "tags": []}, "most_current_audience_avg_pct": {"name": "most_current_audience_avg_pct", "description": "Metrics for most current audience average percentage value", "meta": {}, "data_type": null, "tags": []}, "most_current_us_audience_avg_proj_000": {"name": "most_current_us_audience_avg_proj_000", "description": "Metrics for most current US audience average projection in thousands", "meta": {}, "data_type": null, "tags": []}, "most_current_nw_cvg_area_avg_pct": {"name": "most_current_nw_cvg_area_avg_pct", "description": "Metrics for most current network coverage areas average percentage", "meta": {}, "data_type": null, "tags": []}, "showdbid": {"name": "showdbid", "description": "Show DB ID to uniquely identify the lite log of the program telecasted at a time", "meta": {}, "data_type": null, "tags": []}, "title": {"name": "title", "description": "Title of the Program like NXT, RAW, SmackDown, etc.", "meta": {}, "data_type": null, "tags": []}, "subtitle": {"name": "subtitle", "description": "Subtitle of the program", "meta": {}, "data_type": null, "tags": []}, "episodenumber": {"name": "episodenumber", "description": "Episode Number", "meta": {}, "data_type": null, "tags": []}, "airdate": {"name": "airdate", "description": "The date on when the program aired", "meta": {}, "data_type": null, "tags": []}, "inpoint": {"name": "inpoint", "description": "The starting time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "outpoint": {"name": "outpoint", "description": "The end time of the particular segment", "meta": {}, "data_type": null, "tags": []}, "modified_inpoint": {"name": "modified_inpoint", "description": "Modified starting time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "modified_outpoint": {"name": "modified_outpoint", "description": "Modified end time of the particular segment by round it off to closest minute", "meta": {}, "data_type": null, "tags": []}, "segmenttype": {"name": "segmenttype", "description": "Type of Segment", "meta": {}, "data_type": null, "tags": []}, "comment": {"name": "comment", "description": "The comment about the segment", "meta": {}, "data_type": null, "tags": []}, "matchtype": {"name": "matchtype", "description": "Type of the Match", "meta": {}, "data_type": null, "tags": []}, "talentactions": {"name": "talentactions", "description": "Describing the actions of talents", "meta": {}, "data_type": null, "tags": []}, "move": {"name": "move", "description": "Describing the move", "meta": {}, "data_type": null, "tags": []}, "finishtype": {"name": "finishtype", "description": "The type of finish", "meta": {}, "data_type": null, "tags": []}, "recorddate": {"name": "recorddate", "description": "The date on when the program recorded", "meta": {}, "data_type": null, "tags": []}, "fileid": {"name": "fileid", "description": "The File ID field", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "Duration of the Segment", "meta": {}, "data_type": null, "tags": []}, "additionaltalent": {"name": "additionaltalent", "description": "gives the details of additional talents", "meta": {}, "data_type": null, "tags": []}, "announcers": {"name": "announcers", "description": "Announcers of the program", "meta": {}, "data_type": null, "tags": []}, "matchtitle": {"name": "matchtitle", "description": "Title of the match", "meta": {}, "data_type": null, "tags": []}, "venuelocation": {"name": "venuelocation", "description": "Venue Location of the Program", "meta": {}, "data_type": null, "tags": []}, "venuename": {"name": "venuename", "description": "Venue Name of the Program", "meta": {}, "data_type": null, "tags": []}, "issegmentmarker": {"name": "issegmentmarker", "description": "Segment Marker", "meta": {}, "data_type": null, "tags": []}, "logentrydbid": {"name": "logentrydbid", "description": "Log Entry DB ID Field", "meta": {}, "data_type": null, "tags": []}, "logentryguid": {"name": "logentryguid", "description": "Log Entry Guide", "meta": {}, "data_type": null, "tags": []}, "loggername": {"name": "loggername", "description": "Name of the Logger", "meta": {}, "data_type": null, "tags": []}, "logname": {"name": "logname", "description": "Log Name", "meta": {}, "data_type": null, "tags": []}, "masterclipid": {"name": "masterclipid", "description": "Master Clip ID", "meta": {}, "data_type": null, "tags": []}, "modifieddatetime": {"name": "modifieddatetime", "description": "Modified Date Time", "meta": {}, "data_type": null, "tags": []}, "networkassetid": {"name": "networkassetid", "description": "Network Asset ID", "meta": {}, "data_type": null, "tags": []}, "sponsors": {"name": "sponsors", "description": "Sponsors of the Program", "meta": {}, "data_type": null, "tags": []}, "weapon": {"name": "weapon", "description": "Weapons used", "meta": {}, "data_type": null, "tags": []}, "season": {"name": "season", "description": "Season details", "meta": {}, "data_type": null, "tags": []}, "source_ffed_name": {"name": "source_ffed_name", "description": "source_ffed_name", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_daily_minxmin_lite_log_ratings.sql", "compiled": true, "compiled_sql": "\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, src_playback_period_cd, \nsrc_demographic_group, program_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct,\nshowdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, modified_inpoint, modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, \nannouncers, matchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect broadcast_date_id, broadcast_date, src_broadcast_network_name, src_program_name, src_playback_period_cd, \nsrc_demographic_group, program_telecast_rpt_starttime, program_telecast_rpt_endtime, min_of_pgm_value, \nmost_current_audience_avg_pct, most_current_us_audience_avg_proj_000, most_current_nw_cvg_area_avg_pct,\nshowdbid, title, subtitle, episodenumber, airdate, inpoint, outpoint, modified_inpoint, modified_outpoint,\nsegmenttype, comment, matchtype, talentactions, move, finishtype, recorddate, fileid, duration, additionaltalent, \nannouncers, matchtitle, venuelocation, venuename, issegmentmarker, logentrydbid, logentryguid, loggername, logname, \nmasterclipid, modifieddatetime, networkassetid, sponsors, weapon, season, source_ffed_name\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\""}, "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_derived_4_way_oob": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n*************************************************************************************************************************************************\n*/\n\n{{\n  config({\n\t\t'schema': 'fds_nl',\n\t\t\"materialized\": 'view','tags': \"Phase4B\", \"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\n\nselect * from {{source('fds_nl','rpt_nl_weekly_overlap_derived_4_way_oob')}}  A", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_rpt_nl_weekly_overlap_derived_4_way_oob"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_derived_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_rpt_nl_weekly_overlap_derived_4_way_oob.sql", "original_file_path": "models/fds_nl/view/vw_rpt_nl_weekly_overlap_derived_4_way_oob.sql", "name": "vw_rpt_nl_weekly_overlap_derived_4_way_oob", "resource_type": "model", "alias": "vw_rpt_nl_weekly_overlap_derived_4_way_oob", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_nl", "rpt_nl_weekly_overlap_derived_4_way_oob"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_rpt_nl_weekly_overlap_derived_4_way_oob.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n*************************************************************************************************************************************************\n*/\n\n\n\nselect * from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"  A", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 06/19/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nl_weekly_overlap_derived_4_way_oob\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : vw_rpt_nl_weekly_overlap_derived_4_way_oob view consists of weekly  overlap program schedules and unique reach for each time period \n*************************************************************************************************************************************************\n*/\n\n\n\nselect * from \"entdwdb\".\"fds_nl\".\"rpt_nl_weekly_overlap_derived_4_way_oob\"  A"}, "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings": {"raw_sql": "--Timeperiod program ratings (yearly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_yearly_timeperiod_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Remya K Nair\r\n   Description : Timeperiod Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on yearly-basis.\r\n*************************************************************************************************************************************************\r\n*/\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.rpt_year IS 'Reporting year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \r\n\t\t\t\t  \"]\r\n\t})\r\n}}\r\nSELECT  b.cal_year    as rpt_year, \r\n        c.broadcast_network_name as broadcast_network_name,\r\n        d.src_daypart_name as src_daypart_name,\r\n        src_playback_period_cd,\r\n        src_demographic_group,\r\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\r\n        avg(avg_audience_pct) as avg_audience_pct,\r\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\r\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units       \r\nFROM       {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\r\nLEFT JOIN  {{source('cdm','dim_date')}}  b on a.rpt_startdate_id = b.dim_date_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_broadcast_network')}}  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\r\nGROUP BY  1,2,3,4,5", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_timeperiod_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_yearly_timeperiod_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_timeperiod_ratings.sql", "name": "vw_aggr_nl_yearly_timeperiod_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_timeperiod_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_timeperiod_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t  ", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for yearly time period ratings", "columns": {"rpt_year": {"name": "rpt_year", "description": "Calender year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_timeperiod_ratings.sql", "compiled": true, "compiled_sql": "--Timeperiod program ratings (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on yearly-basis.\n*************************************************************************************************************************************************\n*/\n \nSELECT  b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units       \nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Timeperiod program ratings (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_timeperiod_ratings\n   Schema\t   : fds_nl\n   Contributor : Remya K Nair\n   Description : Timeperiod Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table on yearly-basis.\n*************************************************************************************************************************************************\n*/\n \nSELECT  b.cal_year    as rpt_year, \n        c.broadcast_network_name as broadcast_network_name,\n        d.src_daypart_name as src_daypart_name,\n        src_playback_period_cd,\n        src_demographic_group,\n        avg(avg_audience_proj_000) as avg_audience_proj_000,\n        avg(avg_audience_pct) as avg_audience_pct,\n        avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n        --sum(avg_viewing_hours_units) as avg_viewing_hours_units       \nFROM       \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nLEFT JOIN  \"entdwdb\".\"cdm\".\"dim_date\"  b on a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c on a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d on a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY  1,2,3,4,5"}, "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings": {"raw_sql": "{{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_year IS 'Reporting year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \"]\r\n\t})\r\n}}\r\n\r\n--Primetime program ratings for non WWE program airing days(quarterly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_quarterly_primetime_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Hima Dasan\r\n   Description : Primetime Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on quarterly-basis.\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\nSELECT substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\r\n       b.cal_year as rpt_year,\r\n       c.broadcast_network_name as broadcast_network_name, \r\n       d.src_daypart_name as src_daypart_name, \r\n       src_playback_period_cd,\r\n       src_demographic_group,\r\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \r\n       avg(avg_audience_pct) as avg_audience_pct, \r\n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\r\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units  \r\nFROM  {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\r\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \r\n        FROM {{source('cdm','dim_date')}}\r\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\r\n     ) b\r\nON a.rpt_startdate_id = b.dim_date_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_broadcast_network')}}  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}  d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\r\nGROUP BY 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_primetime_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_quarterly_primetime_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_primetime_ratings.sql", "name": "vw_aggr_nl_quarterly_primetime_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_primetime_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_quarter_nm IS 'Reporting Quarter name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_quarterly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  ", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for quarterly primetime ratings", "columns": {"rpt_quarter_nm": {"name": "rpt_quarter_nm", "description": "Reporting Quarter name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Reporting year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast network Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_primetime_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Primetime program ratings for non WWE program airing days(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units  \nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"  d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Primetime program ratings for non WWE program airing days(quarterly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Quarterly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on quarterly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT substring(b.cal_year_qtr_desc, 5, 2) as rpt_quarter_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units  \nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"  d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_nl_quarterly_fin_wwe_live_program_ratings": {"raw_sql": "/*\r\n*************************************************************************************************************************************************\r\n   Date        : 07/21/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_quarterly_fin_wwe_live_program_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Hima Dasan\r\n   Description : WWE Live Program Rating Quarterly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n{{\r\n  config({\r\n\t'schema': 'fds_nl',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\n\r\nselect broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\r\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\r\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\r\nfrom {{ref('rpt_nl_daily_wwe_program_ratings')}}\r\nwhere broadcast_fin_quarter is not null and broadcast_fin_year is not null and\r\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\r\ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_quarterly_fin_wwe_live_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_quarterly_fin_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_quarterly_fin_wwe_live_program_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_quarterly_fin_wwe_live_program_ratings.sql", "name": "vw_aggr_nl_quarterly_fin_wwe_live_program_ratings", "resource_type": "model", "alias": "vw_aggr_nl_quarterly_fin_wwe_live_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "A view to display various dimensions and metrics of wwe live programs on financial quarter-basis", "columns": {"broadcast_fin_quarter": {"name": "broadcast_fin_quarter", "description": "Broadcast Financial Quarter", "meta": {}, "data_type": null, "tags": []}, "broadcast_fin_year": {"name": "broadcast_fin_year", "description": "Broadcast Financial Year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.\u2022 Live (Live - Includes viewing that occurred during the live airing).\u2022 Live+SD (Live + Same Day -Includes all playback that occurred within the same day of the liveairing).\u2022 Live+3 (Live + 3 Days - Includes all playback that occurred within three days of the live airing).\u2022 Live+7 (Live + 7 Days - Includes all playback that occurred within seven days of the live airing).", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program nam.", "meta": {}, "data_type": null, "tags": []}, "src_series_name": {"name": "src_series_name", "description": "Series name or program name provided by the source", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct_nw_cvg_area": {"name": "avg_audience_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in minutes", "meta": {}, "data_type": null, "tags": []}, "number_of_airings": {"name": "number_of_airings", "description": "Number of airings", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_quarterly_fin_wwe_live_program_ratings.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Quarterly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_quarter is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_quarterly_fin_wwe_live_program_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE Live Program Rating Quarterly Finance Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\n\n\nselect broadcast_fin_quarter, broadcast_fin_year, src_broadcast_network_id, src_playback_period_cd, src_demographic_group, src_program_id,src_series_name,\n--Duration Weighted Averages are taking here for avg_audience_proj_000, avg_audience_pct and avg_audience_pct_nw_cvg_area..\n(sum(avg_audience_proj_000 * src_total_duration)/nullif(sum(nvl2(avg_audience_proj_000, src_total_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * src_total_duration)/nullif(sum(nvl2(avg_audience_pct, src_total_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_audience_pct_nw_cvg_area * src_total_duration)/nullif(sum(nvl2(avg_audience_pct_nw_cvg_area, src_total_duration, null)), 0)) as avg_audience_pct_nw_cvg_area, sum(viewing_minutes_units) as tot_viewing_minutes, count(*) as number_of_airings\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_fin_quarter is not null and broadcast_fin_year is not null and\n(src_broadcast_network_id, src_program_id) in ((5, 296881), (5, 339681), (5, 436999), (81, 898521), (10433, 1000131))\ngroup by 1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings": {"raw_sql": "--QH ratings for WWE program(yearly)\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_yearly_wwe_live_quarterhour_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Sudhakar Andugula\r\n   Description : WWE Live Quarter Hour Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on yearly-basis\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u00e2\u20ac\u0153programId\u00e2\u20ac?. '; \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u00e2\u20ac\u2122s coverage area.)';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\r\n\t\t\t\t\t\"]\r\n\t})\r\n}}\r\n\r\nSELECT broadcast_year, \r\n       src_broadcast_network_id,\r\n       src_playback_period_cd,\r\n       src_demographic_group,\r\n       src_program_id,\r\n       interval_starttime,\r\n       interval_endtime,\r\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\r\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\r\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\r\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \r\nsum(avg_viewing_hours_units) as tot_viewing_minutes\r\nFROM {{ref('rpt_nl_daily_wwe_live_quarterhour_ratings')}}\r\nGROUP BY  1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_wwe_live_quarterhour_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.sql", "name": "vw_aggr_nl_yearly_wwe_live_quarterhour_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_wwe_live_quarterhour_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.broadcast_year IS 'Broadcast  year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_broadcast_network_id IS 'A unique numerical identifier for an individual programming originator.';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).'; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.src_program_id IS 'A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u00e2\u20ac\u0153programId\u00e2\u20ac?. '; \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_starttime IS 'calcuated interval start time if it is quarter hour , every quarter start time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.interval_endtime IS 'calcuated interval end time if it is quarter hour , every quarter end time will be profided';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u00e2\u20ac\u2122s coverage area.)';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.tot_viewing_minutes IS 'Derived Average Viewing Hours in minutes';\n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "A view to display various dimensions and metrics for yearly wwe live Quarter hour ratings", "columns": {"broadcast_year": {"name": "broadcast_year", "description": "Broadcast Calender year", "meta": {}, "data_type": null, "tags": []}, "src_broadcast_network_id": {"name": "src_broadcast_network_id", "description": "A unique numerical identifier for an individual programming originator; sourced from the Originators API, response field \u201coriginatorId\u201d.", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "src_program_id": {"name": "src_program_id", "description": "A unique numerical identifier for an individual program name; sourced from the Programs API, response field \u201cprogramId\u201d.", "meta": {}, "data_type": null, "tags": []}, "interval_starttime": {"name": "interval_starttime", "description": "calcuated interval start time if it is quarter hour , every quarter start time will be provided", "meta": {}, "data_type": null, "tags": []}, "interval_endtime": {"name": "interval_endtime", "description": "calcuated interval end time if it is quarter hour , every quarter end time will be provided", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}, "tot_viewing_minutes": {"name": "tot_viewing_minutes", "description": "Derived Average Viewing Hours in munites", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_wwe_live_quarterhour_ratings.sql", "compiled": true, "compiled_sql": "--QH ratings for WWE program(yearly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--QH ratings for WWE program(yearly)\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_wwe_live_quarterhour_ratings\n   Schema\t   : fds_nl\n   Contributor : Sudhakar Andugula\n   Description : WWE Live Quarter Hour Rating Yearly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Live Quarter Hour Ratings Daily Report Table on yearly-basis\n*************************************************************************************************************************************************\n*/\n\n \n\nSELECT broadcast_year, \n       src_broadcast_network_id,\n       src_playback_period_cd,\n       src_demographic_group,\n       src_program_id,\n       interval_starttime,\n       interval_endtime,\n--Duration Weighted Averages are taking for avg_audience_proj_000, avg_audience_pct and avg_pct_nw_cvg_area here..\n(sum(avg_audience_proj_000 * interval_duration)/nullif(sum(nvl2(avg_audience_proj_000, interval_duration, null)), 0)) as avg_audience_proj_000,\n(sum(avg_audience_pct * interval_duration)/nullif(sum(nvl2(avg_audience_pct, interval_duration, null)), 0)) as avg_audience_pct,\n(sum(avg_pct_nw_cvg_area * interval_duration)/nullif(sum(nvl2(avg_pct_nw_cvg_area, interval_duration, null)), 0)) as avg_pct_nw_cvg_area, \nsum(avg_viewing_hours_units) as tot_viewing_minutes\nFROM \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nGROUP BY  1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings": {"raw_sql": "{{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_month_nm IS 'Reporting month abbr name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_year IS 'Reporting year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \r\n\t\t\t\t\t\"]\r\n\t})\r\n}}\r\n\r\n--Primetime program ratings for non WWE program airing days(monthly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_monthly_primetime_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Hima Dasan\r\n   Description : Primetime Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on monthly-basis.\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\nSELECT b.mth_abbr_nm as rpt_month_nm,\r\n       b.cal_year as rpt_year,\r\n       c.broadcast_network_name as broadcast_network_name, \r\n       d.src_daypart_name as src_daypart_name, \r\n       src_playback_period_cd,\r\n       src_demographic_group,\r\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \r\n       avg(avg_audience_pct) as avg_audience_pct, \r\n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\r\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\r\nFROM {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\r\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \r\n       FROM {{source('cdm','dim_date')}}\r\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\r\n     ) b\r\nON a.rpt_startdate_id = b.dim_date_id\r\nLEFT JOIN {{source('fds_nl','dim_nl_broadcast_network')}}  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}}   d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\r\nGROUP BY 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_monthly_primetime_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_monthly_primetime_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_monthly_primetime_ratings.sql", "name": "vw_aggr_nl_monthly_primetime_ratings", "resource_type": "model", "alias": "vw_aggr_nl_monthly_primetime_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_month_nm IS 'Reporting month abbr name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.broadcast_network_name IS 'Broadcast network Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_monthly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for monthly primetime ratings", "columns": {"rpt_month_nm": {"name": "rpt_month_nm", "description": "Reporting month abbr name", "meta": {}, "data_type": null, "tags": []}, "rpt_year": {"name": "rpt_year", "description": "Reporting year';", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast network Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_monthly_primetime_ratings.sql", "compiled": true, "compiled_sql": "\n\n--Primetime program ratings for non WWE program airing days(monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT b.mth_abbr_nm as rpt_month_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n       FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--Primetime program ratings for non WWE program airing days(monthly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_monthly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Monthly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on monthly-basis.\n*************************************************************************************************************************************************\n*/\n\nSELECT b.mth_abbr_nm as rpt_month_nm,\n       b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n       FROM \"entdwdb\".\"cdm\".\"dim_date\"\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\"   d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings": {"raw_sql": "--Primetime program ratings for non WWE program airing days (yearly)\r\n\r\n/*\r\n*************************************************************************************************************************************************\r\n   Date        : 06/12/2020\r\n   Version     : 1.0\r\n   TableName   : vw_aggr_nl_yearly_primetime_ratings\r\n   Schema\t   : fds_nl\r\n   Contributor : Hima Dasan\r\n   Description : Primetime Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on yearly-basis.\r\n*************************************************************************************************************************************************\r\n*/\r\n\r\n {{\r\n  config({\r\n\t'schema': 'fds_nl',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.rpt_year IS 'Reporting year';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \r\n\t\t\t\t\t\"]\r\n\t})\r\n}}\r\nSELECT b.cal_year as rpt_year,\r\n       c.broadcast_network_name as broadcast_network_name, \r\n       d.src_daypart_name as src_daypart_name, \r\n       src_playback_period_cd,\r\n       src_demographic_group,\r\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \r\n       avg(avg_audience_pct) as avg_audience_pct, \r\n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\r\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\r\nFROM  {{source('fds_nl','fact_nl_timeperiod_viewership_ratings')}} a\r\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \r\n        FROM {{source('cdm','dim_date')}} \r\n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\r\n     ) b\r\nON a.rpt_startdate_id = b.dim_date_id\r\nLEFT JOIN {{source('fds_nl','dim_nl_broadcast_network')}}  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\r\nLEFT JOIN  {{source('fds_nl','dim_nl_daypart')}} d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\r\nGROUP BY 1,2,3,4,5", "database": "entdwdb", "schema": "fds_nl", "fqn": ["analytics_engineering_marts", "fds_nl", "view", "vw_aggr_nl_yearly_primetime_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nl/view/vw_aggr_nl_yearly_primetime_ratings.sql", "original_file_path": "models/fds_nl/view/vw_aggr_nl_yearly_primetime_ratings.sql", "name": "vw_aggr_nl_yearly_primetime_ratings", "resource_type": "model", "alias": "vw_aggr_nl_yearly_primetime_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.rpt_year IS 'Reporting year';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.broadcast_network_name IS 'Broadcast netowrk Name or the channel name or view source name';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_daypart_name IS 'A unique character identifier for an individual daypart description ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_playback_period_cd IS 'A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.src_demographic_group IS 'A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_proj_000 IS 'Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_audience_pct IS 'Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nl.vw_aggr_nl_yearly_primetime_ratings.avg_pct_nw_cvg_area IS 'Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)';  \n\t\t\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nl", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nl", "fact_nl_timeperiod_viewership_ratings"], ["cdm", "dim_date"], ["fds_nl", "dim_nl_broadcast_network"], ["fds_nl", "dim_nl_daypart"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart"]}, "description": "A view to display various dimensions and metrics for yearly  prime time period ratings", "columns": {"rpt_year": {"name": "rpt_year", "description": "Calender year", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_name": {"name": "broadcast_network_name", "description": "Broadcast netowrk Name or the channel name or view source name", "meta": {}, "data_type": null, "tags": []}, "src_daypart_name": {"name": "src_daypart_name", "description": "A unique character identifier for an individual daypart description", "meta": {}, "data_type": null, "tags": []}, "src_playback_period_cd": {"name": "src_playback_period_cd", "description": "A comma separated list of data streams. Time-shifted viewing from DVR Playback or On-demand content with the same commercial load.", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "A comma separated list of demographic groups (e.g. Females 18 to 49 and Males 18 - 24 input as F18-49,M18-24).", "meta": {}, "data_type": null, "tags": []}, "avg_audience_proj_000": {"name": "avg_audience_proj_000", "description": "Total U.S. Average Audience Projection (000) (The projected number of households tuned or persons viewing a program/originator/daypart during the average minute, expressed in thousands.)", "meta": {}, "data_type": null, "tags": []}, "avg_audience_pct": {"name": "avg_audience_pct", "description": "Total U.S. Average Audience Percentage (The percentage of the target demographic viewing the average minute of the selected program or time period within the total U.S.)", "meta": {}, "data_type": null, "tags": []}, "avg_pct_nw_cvg_area": {"name": "avg_pct_nw_cvg_area", "description": "Coverage Area Average Audience Percent (The percentage of the target demographic viewing the average minute of a selected program or time period within a network\u2019s coverage area.)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nl/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/view/vw_aggr_nl_yearly_primetime_ratings.sql", "compiled": true, "compiled_sql": "--Primetime program ratings for non WWE program airing days (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on yearly-basis.\n*************************************************************************************************************************************************\n*/\n\n \nSELECT b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\" \n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--Primetime program ratings for non WWE program airing days (yearly)\n\n/*\n*************************************************************************************************************************************************\n   Date        : 06/12/2020\n   Version     : 1.0\n   TableName   : vw_aggr_nl_yearly_primetime_ratings\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : Primetime Rating Yearly Aggregate View consist of rating details of all channels and programs to be rolled up from Timeperiod \t Viewership Ratings table for Tuesday, Thursday, Saturday and Sunday on yearly-basis.\n*************************************************************************************************************************************************\n*/\n\n \nSELECT b.cal_year as rpt_year,\n       c.broadcast_network_name as broadcast_network_name, \n       d.src_daypart_name as src_daypart_name, \n       src_playback_period_cd,\n       src_demographic_group,\n       avg(avg_audience_proj_000) as avg_audience_proj_000, \n       avg(avg_audience_pct) as avg_audience_pct, \n       avg(avg_pct_nw_cvg_area) as avg_pct_nw_cvg_area\n      --sum(avg_viewing_hours_units) as avg_viewing_hours_units\nFROM  \"entdwdb\".\"fds_nl\".\"fact_nl_timeperiod_viewership_ratings\" a\nJOIN (SELECT dim_date_id, mth_abbr_nm, cal_year_qtr_desc, cal_year \n        FROM \"entdwdb\".\"cdm\".\"dim_date\" \n       WHERE day_of_week_abbr_nm IN ('tue','thu','sat','sun')\n     ) b\nON a.rpt_startdate_id = b.dim_date_id\nLEFT JOIN \"entdwdb\".\"fds_nl\".\"dim_nl_broadcast_network\"  c ON a.dim_nl_broadcast_network_id = c.dim_nl_broadcast_network_id\nLEFT JOIN  \"entdwdb\".\"fds_nl\".\"dim_nl_daypart\" d ON a.dim_nl_daypart_id = d.dim_nl_daypart_id\nGROUP BY 1,2,3,4,5"}, "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_le',\t\r\n\t\"materialized\": 'incremental',\r\n\t\"pre-hook\": ['delete from fds_le.rpt_le_weekly_consolidated_kpi;',\r\n\t\"drop table if exists #dim_dates;\r\ncreate table #dim_dates as\r\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \r\ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\r\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) \r\nand cal_year_mon_week_end_date < date_trunc('week',getdate());\r\n\r\n--create live events weekly dataset\r\ndrop table if exists #dp_wkly;\r\ncreate table #dp_wkly as\r\nselect b.*,a.no_of_total_events_wk::decimal(15,1),\r\na.no_of_house_events_wk::decimal(15,1),\r\na.no_of_raw_house_events_wk::decimal(15,1),\r\na.no_of_smackdown_house_events_wk::decimal(15,1),\r\na.no_of_combined_house_events_wk::decimal(15,1),\r\na.no_of_tv_events_wk::decimal(15,1),\r\na.no_of_raw_tv_events_wk::decimal(15,1),\r\na.no_of_smackdown_tv_events_wk::decimal(15,1),\r\na.no_of_combined_tv_events_wk::decimal(15,1),\r\na.no_of_ppv_events_wk::decimal(15,1),\r\na.total_paid_attendance_wk::decimal(15,1),\r\na.total_paid_utilization_wk::decimal(15,1),\r\na.avg_total_attendance_wk::decimal(15,1),\r\na.avg_house_event_attendance_wk::decimal(15,1),\r\na.avg_raw_house_event_attendance_wk::decimal(15,1),\r\na.avg_smackdown_house_event_attendance_wk::decimal(15,1),\r\na.avg_cmb_house_event_attendance_wk::decimal(15,1),\r\na.avg_tv_event_attendance_wk::decimal(15,1),\r\na.avg_raw_tv_event_attendance_wk::decimal(15,1),\r\na.avg_smackdown_tv_event_attendance_wk::decimal(15,1),\r\na.avg_cmb_tv_event_attendance_wk::decimal(15,1),\r\na.avg_ppv_event_attendance_wk::decimal(15,1),\r\n'Live Events' as platform\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\nselect date_trunc('week',event_dttm) as monday_date,\r\ncount(dim_event_id) as no_of_total_events_wk,\r\ncount(case when event_type_cd = 'LE' then dim_event_id else null end) as no_of_house_events_wk,\r\ncount(case when event_type_cd = 'LE' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_house_events_wk,\r\ncount(case when event_type_cd = 'LE' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_house_events_wk,\r\ncount(case when event_type_cd = 'LE' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_house_events_wk,\r\ncount(case when event_type_cd = 'TV' then dim_event_id else null end) as no_of_tv_events_wk,\r\ncount(case when event_type_cd = 'TV' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_tv_events_wk,\r\ncount(case when event_type_cd = 'TV' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_tv_events_wk,\r\ncount(case when event_type_cd = 'TV' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_tv_events_wk,\r\ncount(case when event_type_cd = 'PPV' then dim_event_id else null end) as no_of_ppv_events_wk,\r\nsum(paid_ticket_count) as total_paid_attendance_wk,\r\nsum(paid_ticket_count)::decimal(15,1)/sum(capacity)::decimal(15,1) as total_paid_utilization_wk,\r\navg(paid_ticket_count+comp_ticket_count) as  avg_total_attendance_wk,\r\navg(case when event_type_cd = 'LE' then paid_ticket_count+comp_ticket_count else null end) as avg_house_event_attendance_wk,\r\navg(case when event_type_cd = 'LE' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_house_event_attendance_wk,\r\navg(case when event_type_cd = 'LE' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_house_event_attendance_wk,\r\navg(case when event_type_cd = 'LE' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_house_event_attendance_wk,\r\navg(case when event_type_cd = 'TV' then paid_ticket_count+comp_ticket_count else null end) as avg_tv_event_attendance_wk,\r\navg(case when event_type_cd = 'TV' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_tv_event_attendance_wk,\r\navg(case when event_type_cd = 'TV' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_tv_event_attendance_wk,\r\navg(case when event_type_cd = 'TV' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_tv_event_attendance_wk,\r\navg(case when event_type_cd = 'PPV' then paid_ticket_count+comp_ticket_count else null end) as avg_ppv_event_attendance_wk\r\nfrom fds_le.aggr_event_metrics_summary \r\nwhere trunc(event_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\ngroup by 1\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\r\n\r\ndrop table if exists #dp_wkly1;\r\ncreate table #dp_wkly1 as\r\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\r\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\r\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\r\n\r\ncoalesce(b.no_of_total_events_wk,0) as prev_no_of_total_events_wk, \r\ncoalesce(b.no_of_house_events_wk,0) as prev_no_of_house_events_wk,\r\ncoalesce(b.no_of_raw_house_events_wk,0) as prev_no_of_raw_house_events_wk,\r\ncoalesce(b.no_of_smackdown_house_events_wk,0) as prev_no_of_smackdown_house_events_wk,\r\ncoalesce(b.no_of_combined_house_events_wk,0) as prev_no_of_combined_house_events_wk,\r\ncoalesce(b.no_of_tv_events_wk,0) as prev_no_of_tv_events_wk,\r\ncoalesce(b.no_of_raw_tv_events_wk,0) as prev_no_of_raw_tv_events_wk,\r\ncoalesce(b.no_of_smackdown_tv_events_wk,0) as prev_no_of_smackdown_tv_events_wk,\r\ncoalesce(b.no_of_combined_tv_events_wk,0) as prev_no_of_combined_tv_events_wk,\r\ncoalesce(b.no_of_ppv_events_wk,0) as prev_no_of_ppv_events_wk,\r\ncoalesce(b.total_paid_attendance_wk,0) as prev_total_paid_attendance_wk,\r\ncoalesce(b.total_paid_utilization_wk,0) as prev_total_paid_utilization_wk,\r\ncoalesce(b.avg_total_attendance_wk,0) as prev_avg_total_attendance_wk,\r\ncoalesce(b.avg_house_event_attendance_wk,0) as prev_avg_house_event_attendance_wk,\r\ncoalesce(b.avg_raw_house_event_attendance_wk,0) as prev_avg_raw_house_event_attendance_wk, \r\ncoalesce(b.avg_smackdown_house_event_attendance_wk,0) as prev_avg_smackdown_house_event_attendance_wk,\r\ncoalesce(b.avg_cmb_house_event_attendance_wk,0) as prev_avg_cmb_house_event_attendance_wk,\r\ncoalesce(b.avg_tv_event_attendance_wk,0) as prev_avg_tv_event_attendance_wk,\r\ncoalesce(b.avg_raw_tv_event_attendance_wk,0) as prev_avg_raw_tv_event_attendance_wk,\r\ncoalesce(b.avg_smackdown_tv_event_attendance_wk,0) as prev_avg_smackdown_tv_event_attendance_wk,\r\ncoalesce(b.avg_cmb_tv_event_attendance_wk,0) as prev_avg_cmb_tv_event_attendance_wk,\r\ncoalesce(b.avg_ppv_event_attendance_wk,0) as prev_avg_ppv_event_attendance_wk\r\nfrom \r\n#dp_wkly a\r\nleft join \r\n#dp_wkly b\r\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon;\r\n\r\n--create monthly dataset\r\ndrop table if exists #dp_mthly;\r\ncreate table #dp_mthly as\r\nselect a.platform, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\r\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \r\na.prev_cal_year, a.prev_cal_year_week_num_mon,\r\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\r\n\r\nsum(b.no_of_total_events_wk) as no_of_total_events_mtd, \r\nsum(b.no_of_house_events_wk) as no_of_house_events_mtd,\r\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_mtd,\r\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_mtd,\r\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_mtd,\r\nsum(b.no_of_tv_events_wk) as no_of_tv_events_mtd,\r\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_mtd,\r\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_mtd,\r\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_mtd,\r\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_mtd,\r\nsum(b.total_paid_attendance_wk) as total_paid_attendance_mtd,\r\nsum(b.total_paid_utilization_wk) as total_paid_utilization_mtd,\r\nsum(b.avg_total_attendance_wk) as avg_total_attendance_mtd,\r\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_mtd,\r\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_mtd, \r\nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_mtd,\r\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_mtd,\r\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_mtd,\r\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_mtd,\r\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_mtd,\r\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_mtd,\r\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_mtd,\r\n\r\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_mtd, \r\nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_mtd,\r\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_mtd,\r\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_mtd,\r\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_mtd,\r\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_mtd,\r\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_mtd,\r\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_mtd,\r\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_mtd,\r\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_mtd,\r\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_mtd,\r\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_mtd,\r\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_mtd,\r\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_mtd,\r\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_mtd, \r\nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_mtd,\r\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_mtd,\r\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_mtd,\r\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_mtd,\r\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_mtd,\r\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_mtd,\r\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_mtd\r\nfrom #dp_wkly1 a\r\nleft join #dp_wkly1 b\r\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \r\ngroup by 1,2,3,4,5,6,7,8,9,10,11;\r\n\r\n--create yearly dataset\r\ndrop table if exists #dp_yrly;\r\ncreate table #dp_yrly as\r\nselect a.platform,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\r\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\r\na.prev_cal_year, a.prev_cal_year_week_num_mon,\r\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\r\n\r\nsum(b.no_of_total_events_wk) as no_of_total_events_ytd, \r\nsum(b.no_of_house_events_wk) as no_of_house_events_ytd,\r\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_ytd,\r\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_ytd,\r\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_ytd,\r\nsum(b.no_of_tv_events_wk) as no_of_tv_events_ytd,\r\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_ytd,\r\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_ytd,\r\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_ytd,\r\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_ytd,\r\nsum(b.total_paid_attendance_wk) as total_paid_attendance_ytd,\r\nsum(b.total_paid_utilization_wk) as total_paid_utilization_ytd,\r\nsum(b.avg_total_attendance_wk) as avg_total_attendance_ytd,\r\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_ytd,\r\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_ytd, \r\nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_ytd,\r\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_ytd,\r\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_ytd,\r\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_ytd,\r\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_ytd,\r\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_ytd,\r\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_ytd,\r\n\r\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_ytd, \r\nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_ytd,\r\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_ytd,\r\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_ytd,\r\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_ytd,\r\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_ytd,\r\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_ytd,\r\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_ytd,\r\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_ytd,\r\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_ytd,\r\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_ytd,\r\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_ytd,\r\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_ytd,\r\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_ytd,\r\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_ytd, \r\nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_ytd,\r\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_ytd,\r\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_ytd,\r\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_ytd,\r\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_ytd,\r\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_ytd,\r\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_ytd\r\nfrom #dp_wkly1 a\r\nleft join #dp_wkly1 b\r\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \r\ngroup by 1,2,3,4,5,6,7,8,9,10,11;\r\n\r\n--pivot weekly dataset\r\ndrop table if exists #dp_wkly_pivot;\r\ncreate table #dp_wkly_pivot as\r\nselect * from\r\n(\r\nselect 'Weekly' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_wk as prev_year_value\r\nfrom #dp_wkly1\r\n);\r\n\r\n--pivot monthly dataset\r\ndrop table if exists #dp_mthly_pivot;\r\ncreate table #dp_mthly_pivot as\r\nselect * from\r\n(\r\nselect 'MTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_mtd as prev_year_value\r\nfrom #dp_mthly\r\n);\r\n\r\n--pivot yearly dataset\r\ndrop table if exists #dp_yrly_pivot;\r\ncreate table #dp_yrly_pivot as\r\nselect * from\r\n(\r\nselect 'YTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_ytd as prev_year_value\r\nfrom #dp_yrly\r\n);\r\n\r\ndrop table if exists #final_dp;\r\ncreate table #final_dp as\r\nselect \r\na.granularity, a.platform, a.platform as type, a.metric, a.cal_year as year,\r\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\r\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\r\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\r\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\r\nfrom \r\n(select * from #dp_wkly_pivot union all\r\n select * from #dp_mthly_pivot union all\r\n select * from #dp_yrly_pivot) a;\r\n\"]})}}\r\nselect granularity, platform, type, metric, a.year, a.month, week, \r\ncase when granularity = 'MTD' then b.start_date \r\n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\r\nend_date, value, prev_year, prev_year_week, \r\ncase when granularity = 'MTD' then b.prev_year_start_date \r\n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \r\nprev_year_end_date, prev_year_value,\r\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\r\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\r\n    cast (NULL as varchar)                                                AS etl_update_user_id,\r\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\t\r\nfrom #final_dp a\r\nleft join\r\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1,2) b\r\non a.year = b.year\r\nand a.month = b.month\r\nleft join\r\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1 ) c\r\non a.year = c.year\r\norder by platform, granularity, metric, year, week", "database": "entdwdb", "schema": "fds_le", "fqn": ["analytics_engineering_marts", "fds_le", "aggregate", "rpt_le_weekly_consolidated_kpi"], "unique_id": "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_le/aggregate/rpt_le_weekly_consolidated_kpi.sql", "original_file_path": "models/fds_le/aggregate/rpt_le_weekly_consolidated_kpi.sql", "name": "rpt_le_weekly_consolidated_kpi", "resource_type": "model", "alias": "rpt_le_weekly_consolidated_kpi", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_le.rpt_le_weekly_consolidated_kpi;", "transaction": true, "index": null}, {"sql": "drop table if exists #dim_dates;\ncreate table #dim_dates as\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) \nand cal_year_mon_week_end_date < date_trunc('week',getdate());\n\n--create live events weekly dataset\ndrop table if exists #dp_wkly;\ncreate table #dp_wkly as\nselect b.*,a.no_of_total_events_wk::decimal(15,1),\na.no_of_house_events_wk::decimal(15,1),\na.no_of_raw_house_events_wk::decimal(15,1),\na.no_of_smackdown_house_events_wk::decimal(15,1),\na.no_of_combined_house_events_wk::decimal(15,1),\na.no_of_tv_events_wk::decimal(15,1),\na.no_of_raw_tv_events_wk::decimal(15,1),\na.no_of_smackdown_tv_events_wk::decimal(15,1),\na.no_of_combined_tv_events_wk::decimal(15,1),\na.no_of_ppv_events_wk::decimal(15,1),\na.total_paid_attendance_wk::decimal(15,1),\na.total_paid_utilization_wk::decimal(15,1),\na.avg_total_attendance_wk::decimal(15,1),\na.avg_house_event_attendance_wk::decimal(15,1),\na.avg_raw_house_event_attendance_wk::decimal(15,1),\na.avg_smackdown_house_event_attendance_wk::decimal(15,1),\na.avg_cmb_house_event_attendance_wk::decimal(15,1),\na.avg_tv_event_attendance_wk::decimal(15,1),\na.avg_raw_tv_event_attendance_wk::decimal(15,1),\na.avg_smackdown_tv_event_attendance_wk::decimal(15,1),\na.avg_cmb_tv_event_attendance_wk::decimal(15,1),\na.avg_ppv_event_attendance_wk::decimal(15,1),\n'Live Events' as platform\nfrom \n#dim_dates b\nleft join \n(       \nselect date_trunc('week',event_dttm) as monday_date,\ncount(dim_event_id) as no_of_total_events_wk,\ncount(case when event_type_cd = 'LE' then dim_event_id else null end) as no_of_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_house_events_wk,\ncount(case when event_type_cd = 'LE' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_house_events_wk,\ncount(case when event_type_cd = 'TV' then dim_event_id else null end) as no_of_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'RAW' then dim_event_id else null end) as no_of_raw_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'SMD' then dim_event_id else null end) as no_of_smackdown_tv_events_wk,\ncount(case when event_type_cd = 'TV' and brand_name = 'CMB' then dim_event_id else null end) as no_of_combined_tv_events_wk,\ncount(case when event_type_cd = 'PPV' then dim_event_id else null end) as no_of_ppv_events_wk,\nsum(paid_ticket_count) as total_paid_attendance_wk,\nsum(paid_ticket_count)::decimal(15,1)/sum(capacity)::decimal(15,1) as total_paid_utilization_wk,\navg(paid_ticket_count+comp_ticket_count) as  avg_total_attendance_wk,\navg(case when event_type_cd = 'LE' then paid_ticket_count+comp_ticket_count else null end) as avg_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_house_event_attendance_wk,\navg(case when event_type_cd = 'LE' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_house_event_attendance_wk,\navg(case when event_type_cd = 'TV' then paid_ticket_count+comp_ticket_count else null end) as avg_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'RAW' then paid_ticket_count+comp_ticket_count else null end) as avg_raw_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'SMD' then paid_ticket_count+comp_ticket_count else null end) as avg_smackdown_tv_event_attendance_wk,\navg(case when event_type_cd = 'TV' and brand_name = 'CMB' then paid_ticket_count+comp_ticket_count else null end) as avg_cmb_tv_event_attendance_wk,\navg(case when event_type_cd = 'PPV' then paid_ticket_count+comp_ticket_count else null end) as avg_ppv_event_attendance_wk\nfrom fds_le.aggr_event_metrics_summary \nwhere trunc(event_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\ndrop table if exists #dp_wkly1;\ncreate table #dp_wkly1 as\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\n\ncoalesce(b.no_of_total_events_wk,0) as prev_no_of_total_events_wk, \ncoalesce(b.no_of_house_events_wk,0) as prev_no_of_house_events_wk,\ncoalesce(b.no_of_raw_house_events_wk,0) as prev_no_of_raw_house_events_wk,\ncoalesce(b.no_of_smackdown_house_events_wk,0) as prev_no_of_smackdown_house_events_wk,\ncoalesce(b.no_of_combined_house_events_wk,0) as prev_no_of_combined_house_events_wk,\ncoalesce(b.no_of_tv_events_wk,0) as prev_no_of_tv_events_wk,\ncoalesce(b.no_of_raw_tv_events_wk,0) as prev_no_of_raw_tv_events_wk,\ncoalesce(b.no_of_smackdown_tv_events_wk,0) as prev_no_of_smackdown_tv_events_wk,\ncoalesce(b.no_of_combined_tv_events_wk,0) as prev_no_of_combined_tv_events_wk,\ncoalesce(b.no_of_ppv_events_wk,0) as prev_no_of_ppv_events_wk,\ncoalesce(b.total_paid_attendance_wk,0) as prev_total_paid_attendance_wk,\ncoalesce(b.total_paid_utilization_wk,0) as prev_total_paid_utilization_wk,\ncoalesce(b.avg_total_attendance_wk,0) as prev_avg_total_attendance_wk,\ncoalesce(b.avg_house_event_attendance_wk,0) as prev_avg_house_event_attendance_wk,\ncoalesce(b.avg_raw_house_event_attendance_wk,0) as prev_avg_raw_house_event_attendance_wk, \ncoalesce(b.avg_smackdown_house_event_attendance_wk,0) as prev_avg_smackdown_house_event_attendance_wk,\ncoalesce(b.avg_cmb_house_event_attendance_wk,0) as prev_avg_cmb_house_event_attendance_wk,\ncoalesce(b.avg_tv_event_attendance_wk,0) as prev_avg_tv_event_attendance_wk,\ncoalesce(b.avg_raw_tv_event_attendance_wk,0) as prev_avg_raw_tv_event_attendance_wk,\ncoalesce(b.avg_smackdown_tv_event_attendance_wk,0) as prev_avg_smackdown_tv_event_attendance_wk,\ncoalesce(b.avg_cmb_tv_event_attendance_wk,0) as prev_avg_cmb_tv_event_attendance_wk,\ncoalesce(b.avg_ppv_event_attendance_wk,0) as prev_avg_ppv_event_attendance_wk\nfrom \n#dp_wkly a\nleft join \n#dp_wkly b\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon;\n\n--create monthly dataset\ndrop table if exists #dp_mthly;\ncreate table #dp_mthly as\nselect a.platform, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\n\nsum(b.no_of_total_events_wk) as no_of_total_events_mtd, \nsum(b.no_of_house_events_wk) as no_of_house_events_mtd,\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_mtd,\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_mtd,\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_mtd,\nsum(b.no_of_tv_events_wk) as no_of_tv_events_mtd,\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_mtd,\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_mtd,\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_mtd,\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_mtd,\nsum(b.total_paid_attendance_wk) as total_paid_attendance_mtd,\nsum(b.total_paid_utilization_wk) as total_paid_utilization_mtd,\nsum(b.avg_total_attendance_wk) as avg_total_attendance_mtd,\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_mtd,\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_mtd, \nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_mtd,\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_mtd,\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_mtd,\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_mtd,\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_mtd,\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_mtd,\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_mtd,\n\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_mtd, \nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_mtd,\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_mtd,\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_mtd,\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_mtd,\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_mtd,\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_mtd,\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_mtd,\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_mtd,\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_mtd,\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_mtd,\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_mtd,\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_mtd,\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_mtd,\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_mtd, \nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_mtd,\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_mtd,\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_mtd,\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_mtd,\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_mtd,\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_mtd,\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_mtd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \ngroup by 1,2,3,4,5,6,7,8,9,10,11;\n\n--create yearly dataset\ndrop table if exists #dp_yrly;\ncreate table #dp_yrly as\nselect a.platform,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\n\nsum(b.no_of_total_events_wk) as no_of_total_events_ytd, \nsum(b.no_of_house_events_wk) as no_of_house_events_ytd,\nsum(b.no_of_raw_house_events_wk) as no_of_raw_house_events_ytd,\nsum(b.no_of_smackdown_house_events_wk) as no_of_smackdown_house_events_ytd,\nsum(b.no_of_combined_house_events_wk) as no_of_combined_house_events_ytd,\nsum(b.no_of_tv_events_wk) as no_of_tv_events_ytd,\nsum(b.no_of_raw_tv_events_wk) as no_of_raw_tv_events_ytd,\nsum(b.no_of_smackdown_tv_events_wk) as no_of_smackdown_tv_events_ytd,\nsum(b.no_of_combined_tv_events_wk) as no_of_combined_tv_events_ytd,\nsum(b.no_of_ppv_events_wk) as no_of_ppv_events_ytd,\nsum(b.total_paid_attendance_wk) as total_paid_attendance_ytd,\nsum(b.total_paid_utilization_wk) as total_paid_utilization_ytd,\nsum(b.avg_total_attendance_wk) as avg_total_attendance_ytd,\nsum(b.avg_house_event_attendance_wk) as avg_house_event_attendance_ytd,\nsum(b.avg_raw_house_event_attendance_wk) as avg_raw_house_event_attendance_ytd, \nsum(b.avg_smackdown_house_event_attendance_wk) as avg_smackdown_house_event_attendance_ytd,\nsum(b.avg_cmb_house_event_attendance_wk) as avg_cmb_house_event_attendance_ytd,\nsum(b.avg_tv_event_attendance_wk) as avg_tv_event_attendance_ytd,\nsum(b.avg_raw_tv_event_attendance_wk) as avg_raw_tv_event_attendance_ytd,\nsum(b.avg_smackdown_tv_event_attendance_wk) as avg_smackdown_tv_event_attendance_ytd,\nsum(b.avg_cmb_tv_event_attendance_wk) as avg_cmb_tv_event_attendance_ytd,\nsum(b.avg_ppv_event_attendance_wk) as avg_ppv_event_attendance_ytd,\n\nsum(b.prev_no_of_total_events_wk) as prev_no_of_total_events_ytd, \nsum(b.prev_no_of_house_events_wk) as prev_no_of_house_events_ytd,\nsum(b.prev_no_of_raw_house_events_wk) as prev_no_of_raw_house_events_ytd,\nsum(b.prev_no_of_smackdown_house_events_wk) as prev_no_of_smackdown_house_events_ytd,\nsum(b.prev_no_of_combined_house_events_wk) as prev_no_of_combined_house_events_ytd,\nsum(b.prev_no_of_tv_events_wk) as prev_no_of_tv_events_ytd,\nsum(b.prev_no_of_raw_tv_events_wk) as prev_no_of_raw_tv_events_ytd,\nsum(b.prev_no_of_smackdown_tv_events_wk) as prev_no_of_smackdown_tv_events_ytd,\nsum(b.prev_no_of_combined_tv_events_wk) as prev_no_of_combined_tv_events_ytd,\nsum(b.prev_no_of_ppv_events_wk) as prev_no_of_ppv_events_ytd,\nsum(b.prev_total_paid_attendance_wk) as prev_total_paid_attendance_ytd,\nsum(b.prev_total_paid_utilization_wk) as prev_total_paid_utilization_ytd,\nsum(b.prev_avg_total_attendance_wk) as prev_avg_total_attendance_ytd,\nsum(b.prev_avg_house_event_attendance_wk) as prev_avg_house_event_attendance_ytd,\nsum(b.prev_avg_raw_house_event_attendance_wk) as prev_avg_raw_house_event_attendance_ytd, \nsum(b.prev_avg_smackdown_house_event_attendance_wk) as prev_avg_smackdown_house_event_attendance_ytd,\nsum(b.prev_avg_cmb_house_event_attendance_wk) as prev_avg_cmb_house_event_attendance_ytd,\nsum(b.prev_avg_tv_event_attendance_wk) as prev_avg_tv_event_attendance_ytd,\nsum(b.prev_avg_raw_tv_event_attendance_wk) as prev_avg_raw_tv_event_attendance_ytd,\nsum(b.prev_avg_smackdown_tv_event_attendance_wk) as prev_avg_smackdown_tv_event_attendance_ytd,\nsum(b.prev_avg_cmb_tv_event_attendance_wk) as prev_avg_cmb_tv_event_attendance_ytd,\nsum(b.prev_avg_ppv_event_attendance_wk) as prev_avg_ppv_event_attendance_ytd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon \ngroup by 1,2,3,4,5,6,7,8,9,10,11;\n\n--pivot weekly dataset\ndrop table if exists #dp_wkly_pivot;\ncreate table #dp_wkly_pivot as\nselect * from\n(\nselect 'Weekly' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_wk as prev_year_value\nfrom #dp_wkly1\n);\n\n--pivot monthly dataset\ndrop table if exists #dp_mthly_pivot;\ncreate table #dp_mthly_pivot as\nselect * from\n(\nselect 'MTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_mtd as prev_year_value\nfrom #dp_mthly\n);\n\n--pivot yearly dataset\ndrop table if exists #dp_yrly_pivot;\ncreate table #dp_yrly_pivot as\nselect * from\n(\nselect 'YTD' as granularity, platform, 'Number of Total Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_total_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_total_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Raw House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Smackdown House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Combined House Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_house_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_house_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Raw TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_raw_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_raw_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Smackdown TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_smackdown_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_smackdown_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of Combined TV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_combined_tv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_combined_tv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Number of PPV Events' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, no_of_ppv_events_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_no_of_ppv_events_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Total Paid Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Total Paid Utilization' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, total_paid_utilization_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_total_paid_utilization_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Total Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_total_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_total_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Raw House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Smackdown House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average CMB House Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_house_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_house_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Raw TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_raw_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_raw_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average Smackdown TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_smackdown_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_smackdown_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average CMB TV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_cmb_tv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_cmb_tv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, 'Average PPV Event Attendance' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, avg_ppv_event_attendance_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_avg_ppv_event_attendance_ytd as prev_year_value\nfrom #dp_yrly\n);\n\ndrop table if exists #final_dp;\ncreate table #final_dp as\nselect \na.granularity, a.platform, a.platform as type, a.metric, a.cal_year as year,\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\nfrom \n(select * from #dp_wkly_pivot union all\n select * from #dp_mthly_pivot union all\n select * from #dp_yrly_pivot) a;\n", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_le", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_le/aggregate/rpt_le_weekly_consolidated_kpi.sql", "compiled": true, "compiled_sql": "\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\t\nfrom #final_dp a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\t\nfrom #final_dp a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #final_dp group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week"}, "model.analytics_engineering_marts.aggr_cpg_daily_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t'schema': 'fds_cpg',\r\n\t\t\"pre-hook\": [\"delete from fds_cpg.aggr_cpg_daily_sales\"],\r\n\t\t\"materialized\": 'incremental','tags': \"Phase 5B\"\r\n  })\r\n}}\r\n\r\nwith #fact_aggregate_sales_temp1 as\r\n(select * from(\r\nselect   \r\ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n        ,dim_order_method_id  \r\n        ,src_order_type  \r\n        ,Date as Date_Key  \r\n        ,dim_item_id  \r\n      ,0 as Other_Amount\r\n        ,Avg(src_unit_cost) as src_unit_cost  \r\n        ,Avg(src_current_retail_price) as src_current_retail_price  \r\n        ,Sum(src_units_ordered) as src_units_ordered  \r\n        ,sum(src_units_shipped) as src_units_shipped  \r\n        ,sum(Units_Returned) as Units_Returned  \r\n        ,sum(Net_Units_Sold) as Net_Units_Sold  \r\n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n        ,sum(\"Return$\") as \"Return$\"  \r\n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \r\n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n        --  ,current_date as create_timestamp\r\n        --,'ETL' as created_by\r\n        --,null as update_timestamp\r\n        --,null as updated_by\r\n        --,null as venue_key\r\n        --,null as venue_flag \r\n            from   \r\n    (       \r\n  --sub1 select  \r\n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n        ,dim_order_method_id  \r\n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \r\n        ,Date  \r\n        ,dim_item_id  \r\n         ,Avg(src_unit_cost) as src_unit_cost  \r\n        ,Avg(src_current_retail_price) as src_current_retail_price  \r\n        ,Sum(src_units_ordered) as src_units_ordered  \r\n        ,sum(src_units_shipped) as src_units_shipped  \r\n        ,sum(Units_Returned) as Units_Returned  \r\n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n        , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n        , sum(\"Return$\") as \"Return$\"  \r\n        , sum(\"Net_sales_$\") as \"Net_sales_$\"  \r\n        , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n        , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n         ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n    FROM  \r\n  (  \r\n  /*Retrieving Demand sales for Regular Items*/  \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                     ,dim_order_method_id  \r\n                                       ,src_order_type         \r\n               ,Date  \r\n                                       ,dim_item_id  \r\n               ,Avg(src_unit_cost) as src_unit_cost  \r\n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                       ,Avg(src_selling_price) as src_selling_price  \r\n                                       ,sum(src_units_ordered) as src_units_ordered  \r\n                                       ,SUM(src_units_shipped) as src_units_shipped  \r\n                                       ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \r\n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                           ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n        ,sum(\"Return$\") as \"Return$\"  \r\n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \r\n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n         ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                       ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                       ,src_order_type         \r\n               ,order_date_id as Date  \r\n                                       ,dim_item_id  \r\n               ,Avg(src_unit_cost) as src_unit_cost  \r\n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                       ,Avg(src_selling_price) as src_selling_price  \r\n                                       ,sum(src_units_ordered) as src_units_ordered  \r\n                                       ,0 as src_units_shipped  \r\n                                       ,0 as Units_Returned  \r\n       ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n        ,0 as \"Shipped_Cogs$\"  \r\n        ,0 as \"Returned_Cogs$\"  \r\n        ,0 as \"Net_Cogs$\"  \r\n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n        ,0 as \"Shipped_Retail$\"  \r\n        ,0 as \"Net_Retail$\"  \r\n                          ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \r\n        ,0 as \"Shipped_Sales$\"  \r\n        ,0 as \"Return$\"  \r\n        ,0 as \"Net_Sales_$\"  \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)\r\n   left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \r\n                  (order_date_id>19000101 or ship_date_id>19000101) and   \r\n                  dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \r\n                   dim_item_id not in \r\n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id )\r\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_original_ref_order_number))='0')   \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \r\n              UNION all  \r\n/*Retrieving Shipped sales for Regular Items*/           \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                     ,src_order_type         \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     , SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,sum(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                     ,src_order_type  \r\n                                     ,ship_date_id as Date  \r\n                                     ,dim_item_id                      \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,0 as src_units_ordered  \r\n                                     ,sum(src_units_shipped) as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                     ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                     ,0 as \"Demand_Sales$\"  \r\n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n            FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)\r\n left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\r\n      where  \r\n(order_date_id>19000101 or ship_date_id>19000101) and   \r\n dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n      src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \r\n                        dim_item_id not in \r\n\t\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id )\r\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n                        and src_order_status='IN'  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n            UNION ALL  \r\n/*Retrieving Return sales for Regular Items*/             \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \r\n             , Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                      ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                    ,b.dim_order_method_id as dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \r\n                                    ,order_date_id as Date  \r\n                                    ,dim_item_id                      \r\n            ,Avg(src_unit_cost) as src_unit_cost  \r\n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                    ,Avg(src_selling_price) as src_selling_price  \r\n                                    ,0 as src_units_ordered  \r\n                                    ,0 as src_units_shipped  \r\n                                    ,sum(src_units_ordered) as Units_Returned  \r\n                                    ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                    ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\nFrom  \r\n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \r\n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \r\n            dim_item_id,  \r\n            src_order_number,  \r\n            src_unit_cost,  \r\n            src_selling_price,  \r\n            src_current_retail_price,  \r\n            src_units_ordered,  \r\n            order_date_id    \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)\r\n left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where   \r\n   (order_date_id>19000101 or ship_date_id>19000101) and   \r\n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n    src_channel_id='R' and src_order_status='IN'  \r\n   and dim_item_id not in \r\n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id )\r\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n   ) as A       \r\nleft outer join  \r\n            (select B.src_order_number as src_order_number,  \r\n            A.dim_order_method_id as dim_order_method_id   \r\n            from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) A  \r\n            inner join                         \r\n                                    (select src_order_number,src_original_ref_order_number from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)\r\n left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\r\n                                                            where src_channel_id='R' ) B                                                              \r\n                                                            on A.src_order_number=B.src_order_number   ) B  \r\n            on  A.src_order_number=B.src_order_number  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n--sub1 select end  \r\n--Kit into Components---  \r\nUnion All  \r\n--sub2 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \r\n      ,Date  \r\n      ,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \r\n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      , sum(\"Return$\") as \"Return$\"  \r\n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\nFROM  \r\n/*Retrieving Demand sales for KIT Items*/  \r\n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t\t,dim_order_method_id  \r\n                                     ,src_order_type       \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (   \r\n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \r\n                                     ,src_order_type         \r\n             ,order_date_id as Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove  \r\n                                     ,sum(src_kit_units_ordered ) as src_units_ordered  \r\n                                     ,0 as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                     ,sum(src_required_quantity) as src_required_quantity  \r\n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_Sales_$\"  \r\n                FROM   \r\n               {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)\r\n\t\t\t   left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\r\n                                    where   \r\n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \r\n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \r\n                                  src_order_number not in   \r\n          (  \r\n          SELECT  distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n           FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)\r\n            where   \r\n            ltrim(rtrim(src_order_origin_code))='GR' or   \r\n            ltrim(rtrim(src_prepay_code))='F')  \r\n            and src_order_number  in (  \r\n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n            FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)\r\n            where   \r\n            ltrim(rtrim(src_original_ref_order_number))='0')   \r\n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \r\n              UNION all  \r\n/*Retrieving Shipped sales for Kit Items*/      \r\n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                     ,src_order_type        \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \r\n                                     ,src_order_type         \r\n             ,ship_date_id as Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \r\n                                     ,0 as src_units_ordered  \r\n                                     ,sum(src_kit_units_shipped ) as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                     ,sum(src_required_quantity) as src_required_quantity  \r\n                                     ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                    ,0 as \"Demand_Sales$\"  \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \r\n                FROM   \r\n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)\r\n left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\r\n                                    where   \r\n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \r\n                                    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R'   \r\n                                    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                                    FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n                                    and src_order_status='IN'   \r\n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \r\n            UNION ALL  \r\n/*Retrieving Return sales for Kit Items*/        \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                     ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \r\n             ,order_date_id as Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \r\n                                     ,0 as src_units_ordered  \r\n                                     ,0 as src_units_shipped  \r\n                                     ,sum(src_kit_units_ordered ) as Units_Returned  \r\n                                     ,sum(src_required_quantity) as src_required_quantity  \r\n                       ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                     ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \r\n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \r\n                FROM   \r\n{{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock) \r\n left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \r\n   (order_date_id>19000101 or ship_date_id>19000101) and   \r\n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n    src_channel_id='R' and src_order_status='IN'  \r\n   and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n   FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,\r\n            src_order_type,  \r\n            dim_item_id,  \r\n            src_order_number,  \r\n            src_unit_cost,  \r\n            src_kit_selling_price,  \r\n            src_current_retail_price,  \r\n            src_kit_units_ordered,  \r\n            order_date_id   \r\n   ) Tab_Kit_Items  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\r\n--[SP_Aggregate_Gratis_Orders]\r\n#fact_aggregate_sales_temp2 as\r\n(select * from(\r\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type  \r\n      ,Date as Date_Key  \r\n      ,dim_item_id  \r\n      ,0 as Other_Amount\r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(Net_Units_Sold) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n       --  ,current_date as create_timestamp\r\n       -- ,'ETL' as created_by\r\n       -- ,null as update_timestamp\r\n       -- ,null as updated_by\r\n       -- ,null as venue_key\r\n       -- ,null as venue_flag\r\n      from   \r\n  (       \r\n--sub1 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \r\n      ,Date  \r\n      ,dim_item_id  \r\n       ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      , sum(\"Return$\") as \"Return$\"  \r\n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\nFROM  \r\n(  \r\n/*Retrieving Demand sales for Gratis Items*/  \r\n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                     ,src_order_type         \r\n             ,order_date_id as Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     ,0 as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_Sales_$\"  \r\n                FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock)\r\nleft join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \r\n   \r\n                        (order_date_id>19000101 or ship_date_id>19000101) and   \r\n                        dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n                        src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \r\n                        dim_item_id not in\r\n\t\t\t\t\t\t\r\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id )\r\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \r\n              UNION all  \r\n/*Retrieving Shipped sales for Gratis Items*/           \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     , SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,sum(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                       ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                     ,src_order_type  \r\n                                     ,ship_date_id as Date  \r\n                                     ,dim_item_id                      \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,0 as src_units_ordered  \r\n                                     ,sum(src_units_shipped) as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                     ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                     ,0 as \"Demand_Sales$\"  \r\n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n      FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)  \r\n      left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\r\n      where  \r\n      (order_date_id>19000101 or ship_date_id>19000101) and   \r\n       dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \r\n       dim_item_id not in\r\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id )\r\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \r\n                        and src_order_status='IN'  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n            UNION ALL  \r\n/*Retrieving Return sales for Gratis Items*/             \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \r\n             , Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                      ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n           ,b.dim_order_method_id as dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \r\n                                    ,order_date_id as Date  \r\n                                    ,dim_item_id                      \r\n            ,Avg(src_unit_cost) as src_unit_cost  \r\n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                    ,Avg(src_selling_price) as src_selling_price  \r\n                                    ,0 as src_units_ordered  \r\n                                    ,0 as src_units_shipped  \r\n                                    ,sum(src_units_ordered) as Units_Returned  \r\n                                    ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                    ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\nFrom  \r\n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \r\n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \r\n            dim_item_id,  \r\n            src_order_number,  \r\n            src_unit_cost,  \r\n            src_selling_price,  \r\n            src_current_retail_price,  \r\n            src_units_ordered,  \r\n            order_date_id    \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock) left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \r\n   where   \r\n   (order_date_id>19000101 or ship_date_id>19000101) and   \r\n    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n   src_channel_id='R' and src_order_status='IN'  \r\n   and  \r\n            dim_item_id not in\r\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id ) \r\n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \r\n   ) as A      \r\nleft outer join  \r\n            (select B.src_order_number as src_order_number,  \r\n            A.dim_order_method_id as dim_order_method_id   \r\n            from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) A  \r\n            inner join                         \r\n                                    (select src_order_number,src_original_ref_order_number from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)  \r\nleft join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\r\n                                                            where src_channel_id='R' ) B                                                              \r\n                                                            on A.src_order_number=B.src_order_number   ) B  \r\n            on  A.src_order_number=B.src_order_number  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n--sub1 select end  \r\n--Kit into Components---  \r\nUnion All  \r\n--sub2 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id    \r\n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \r\n      ,Date    \r\n      ,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Sum(src_units_ordered) as src_units_ordered    \r\n      ,sum(src_units_shipped) as src_units_shipped    \r\n      ,sum(Units_Returned) as Units_Returned    \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      , sum(\"Return$\") as \"Return$\"    \r\n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \r\n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \r\nFROM    \r\n/*Retrieving Demand sales for KIT Items*/    \r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n         ,dim_order_method_id    \r\n                                     ,src_order_type         \r\n             ,Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(src_selling_price) as src_selling_price    \r\n                                     ,sum(src_units_ordered) as src_units_ordered    \r\n                                     ,SUM(src_units_shipped) as src_units_shipped    \r\n                                     ,SUM(Units_Returned) as Units_Returned    \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n            from (     \r\n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n                                     ,src_order_type           \r\n             ,order_date_id as Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove    \r\n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \r\n                                     ,0 as src_units_shipped    \r\n                                     ,0 as Units_Returned    \r\n                                     ,sum(src_required_quantity) as src_required_quantity    \r\n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,0 as \"Net_Cogs$\"    \r\n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,0 as \"Net_Retail$\"    \r\n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,0 as \"Net_Sales_$\"    \r\n                FROM     \r\n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)    \r\n                                  left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\r\n                                     where     \r\n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \r\n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \r\n                                   src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR')     \r\n            and src_order_number  in (    \r\n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \r\n            FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)    \r\n            where     \r\n            ltrim(rtrim(src_original_ref_order_number))='0')     \r\n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \r\n              UNION all    \r\n/*Retrieving Shipped sales for Kit Items*/        \r\n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,dim_order_method_id    \r\n                                     ,src_order_type          \r\n             ,Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(src_selling_price) as src_selling_price    \r\n                                     ,sum(src_units_ordered) as src_units_ordered    \r\n                                     ,SUM(src_units_shipped) as src_units_shipped    \r\n                                     ,SUM(Units_Returned) as Units_Returned    \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n            from (    \r\n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n                                     ,src_order_type           \r\n             ,ship_date_id as Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \r\n                                     ,0 as src_units_ordered    \r\n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \r\n                                     ,0 as Units_Returned    \r\n                                     ,sum(src_required_quantity) as src_required_quantity    \r\n                                     ,0 as \"Demand_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n                                    ,0 as \"Demand_Sales$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n                FROM     \r\n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)\r\nleft join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\r\n    where     \r\n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \r\n                                    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \r\n                                   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \r\n                                    and src_order_status='IN'     \r\n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \r\n            UNION ALL    \r\n/*Retrieving Return sales for Kit Items*/          \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,dim_order_method_id    \r\n                                     ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \r\n             ,Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(src_selling_price) as src_selling_price    \r\n                                     ,sum(src_units_ordered) as src_units_ordered    \r\n                                     ,SUM(src_units_shipped) as src_units_shipped    \r\n                                     ,SUM(Units_Returned) as Units_Returned    \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n            from (    \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \r\n             ,order_date_id as Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \r\n                                     ,0 as src_units_ordered    \r\n                                     ,0 as src_units_shipped    \r\n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \r\n                                     ,sum(src_required_quantity) as src_required_quantity    \r\n                       ,0 as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n                                     ,0 as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \r\n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n                FROM     \r\n{{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)  left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \r\n         \r\n   (order_date_id>19000101 or ship_date_id>19000101) and     \r\n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n    src_channel_id='R' and src_order_status='IN'     \r\n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \r\n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \r\n            src_order_type,    \r\n            dim_item_id,    \r\n            src_order_number,    \r\n            src_unit_cost,    \r\n            src_kit_selling_price,    \r\n            src_current_retail_price,    \r\n            src_kit_units_ordered,    \r\n            order_date_id     \r\n   ) Tab_Kit_Items    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\r\n--[SP_Aggregate_Free_Orders]\r\n#fact_aggregate_sales_temp3 as \r\n(select * from(\r\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type  \r\n      ,Date as Date_Key  \r\n      ,dim_item_id  \r\n      ,0 as Other_amount\r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(Net_Units_Sold) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n         --,current_date as create_timestamp\r\n        --,'ETL' as created_by\r\n        --,null as update_timestamp\r\n        --,null as updated_by\r\n        --,null as venue_key\r\n        --,null as venue_flag\r\n      from   \r\n  (       \r\n--sub1 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \r\n      ,Date  \r\n      ,dim_item_id  \r\n       ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      , sum(\"Return$\") as \"Return$\"  \r\n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\nFROM  \r\n(  \r\n/*Retrieving Demand sales for Regular Items*/  \r\n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                     ,src_order_type         \r\n             ,order_date_id as Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     ,0 as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_Sales_$\"  \r\n                FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock)  \r\n                        left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where    \r\n                        (order_date_id>19000101 or ship_date_id>19000101) and   \r\n                        dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n                        src_order_type='I' and src_channel_id<>'R' and  \r\n                        dim_item_id not in\r\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id )\r\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \r\n              UNION all  \r\n/*Retrieving Shipped sales for Regular Items*/           \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \r\n             ,Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                     , SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,sum(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                     ,src_order_type  \r\n                                     ,ship_date_id as Date  \r\n                                     ,dim_item_id                      \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,0 as src_units_ordered  \r\n                                     ,sum(src_units_shipped) as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                     ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                     ,0 as \"Demand_Sales$\"  \r\n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n      FROM {{source('fds_cpg','fact_cpg_sales_detail')}}(nolock)  \r\n      left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\r\n      where  \r\n      (order_date_id>19000101 or ship_date_id>19000101) and   \r\n      dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \r\n                        dim_item_id not in\r\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id )\r\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n                        and src_order_status='IN'  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n            UNION ALL  \r\n/*Retrieving Return sales for Regular Items*/             \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \r\n             , Date  \r\n                                     ,dim_item_id  \r\n             ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,sum(src_units_ordered) as src_units_ordered  \r\n                                      ,SUM(src_units_shipped) as src_units_shipped  \r\n                                     ,SUM(Units_Returned) as Units_Returned  \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                    ,b.dim_order_method_id as dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \r\n                                    ,order_date_id as Date  \r\n                                    ,dim_item_id                      \r\n            ,Avg(src_unit_cost) as src_unit_cost  \r\n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                    ,Avg(src_selling_price) as src_selling_price  \r\n                                    ,0 as src_units_ordered  \r\n                                    ,0 as src_units_shipped  \r\n                                    ,sum(src_units_ordered) as Units_Returned  \r\n                                    ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n                                    ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\nFrom  \r\n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \r\n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \r\n            dim_item_id,  \r\n            src_order_number,  \r\n            src_unit_cost,  \r\n            src_selling_price,  \r\n            src_current_retail_price,  \r\n            src_units_ordered,  \r\n            order_date_id    \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}} (nolock) left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where      \r\n   (order_date_id>19000101 or ship_date_id>19000101) and   \r\n    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n    src_channel_id='R' and src_order_status='IN'  \r\n   and dim_item_id not in\r\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}}(nolock) A \r\ninner join {{source('fds_cpg','dim_cpg_item')}} (nolock) B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}}(NoLock) B \r\nwhere A.kit_id=B.dim_item_id ) \r\n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n   ) as A      \r\nleft outer join  \r\n            (select B.src_order_number as src_order_number,  \r\n            A.dim_order_method_id as dim_order_method_id   \r\n            from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) A  \r\n            inner join                         \r\n                                    (select src_order_number,src_original_ref_order_number from {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)  \r\n                                                            left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\r\nwhere src_channel_id='R' ) B                                                              \r\n                                                            on A.src_order_number=B.src_order_number   ) B  \r\n            on  A.src_order_number=B.src_order_number  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n--sub1 select end  \r\n--Kit into Components---  \r\nUnion All  \r\n--sub2 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id    \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \r\n      ,Date    \r\n      ,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Sum(src_units_ordered) as src_units_ordered    \r\n      ,sum(src_units_shipped) as src_units_shipped    \r\n      ,sum(Units_Returned) as Units_Returned    \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      , sum(\"Return$\") as \"Return$\"    \r\n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \r\n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \r\nFROM    \r\n/*Retrieving Demand sales for KIT Items*/    \r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n         ,dim_order_method_id    \r\n                                     ,src_order_type         \r\n             ,Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(src_selling_price) as src_selling_price    \r\n                                     ,sum(src_units_ordered) as src_units_ordered    \r\n                                     ,SUM(src_units_shipped) as src_units_shipped    \r\n                                     ,SUM(Units_Returned) as Units_Returned    \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n            from (     \r\n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n                                     ,src_order_type           \r\n             ,order_date_id as Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price  --Has to Remove    \r\n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \r\n                                     ,0 as src_units_shipped    \r\n                                     ,0 as Units_Returned    \r\n                                     ,sum(src_required_quantity) as src_required_quantity    \r\n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,0 as \"Net_Cogs$\"    \r\n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,0 as \"Net_Retail$\"    \r\n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,0 as \"Net_Sales_$\"    \r\n                FROM     \r\n               {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)    \r\n                                   left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\r\n                                     where     \r\n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \r\n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \r\n                                  src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \r\n            and src_order_number  in (    \r\n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \r\n            FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock)    \r\n            where     \r\n            ltrim(rtrim(src_original_ref_order_number))='0')     \r\n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \r\n              UNION all    \r\n/*Retrieving Shipped sales for Kit Items*/        \r\n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,dim_order_method_id    \r\n                                     ,src_order_type          \r\n             ,Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(src_selling_price) as src_selling_price    \r\n                                     ,sum(src_units_ordered) as src_units_ordered    \r\n                                     ,SUM(src_units_shipped) as src_units_shipped    \r\n                                     ,SUM(Units_Returned) as Units_Returned    \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n            from (    \r\n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n                                     ,src_order_type           \r\n             ,ship_date_id as Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \r\n                                     ,0 as src_units_ordered    \r\n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \r\n                                     ,0 as Units_Returned    \r\n                                     ,sum(src_required_quantity) as src_required_quantity    \r\n                                     ,0 as \"Demand_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n                                    ,0 as \"Demand_Sales$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n                FROM     \r\n                {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)    \r\n                                   left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\r\n                                     where     \r\n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \r\n                                    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \r\n                                    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n                                    and src_order_status='IN'     \r\n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \r\n            UNION ALL    \r\n/*Retrieving Return sales for Kit Items*/          \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,dim_order_method_id    \r\n                                     ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \r\n             ,Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(src_selling_price) as src_selling_price    \r\n                                     ,sum(src_units_ordered) as src_units_ordered    \r\n                                     ,SUM(src_units_shipped) as src_units_shipped    \r\n                                     ,SUM(Units_Returned) as Units_Returned    \r\n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n            from (    \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \r\n             ,order_date_id as Date    \r\n                                     ,dim_item_id    \r\n             ,Avg(src_unit_cost) as src_unit_cost    \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \r\n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \r\n                                     ,0 as src_units_ordered    \r\n                                     ,0 as src_units_shipped    \r\n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \r\n                                     ,sum(src_required_quantity) as src_required_quantity    \r\n                       ,0 as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n                                     ,0 as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \r\n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n                FROM     \r\n{{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}(nolock)  left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \r\n         \r\n   (order_date_id>19000101 or ship_date_id>19000101) and     \r\n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n    src_channel_id='R' and src_order_status='IN' \r\n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}}(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \r\n            src_order_type,    \r\n            dim_item_id,    \r\n            src_order_number,    \r\n            src_unit_cost,    \r\n            src_kit_selling_price,    \r\n            src_current_retail_price,    \r\n            src_kit_units_ordered,    \r\n            order_date_id     \r\n   ) Tab_Kit_Items    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id )),\r\n--[SP_Aggregate_Header]\r\n#fact_aggregate_sales_temp4 as \r\n(select *  from(\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type   \r\n      ,Date_Key  \r\n     ,dim_item_id \r\n     ,sum(Other_Amount) as Other_Amount \r\n     ,0 as src_unit_cost  \r\n      ,0 as src_current_retail_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as Net_Units_Sold  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_sales_$\"  \r\n      ,0 as \"Demand_Selling_Margin$\"  \r\n      ,0 as \"Shipped_Selling_Margin$\"  \r\n      ,0 as \"Net_Selling_Margin$\" \r\n      -- ,current_date as create_timestamp\r\n       -- ,'ETL' as created_by\r\n        --,null as update_timestamp\r\n        --,null as updated_by\r\n        --,null as venue_key\r\n        --,null as venue_flag\r\n            from       \r\n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and isnull(src_order_origin_code,'AA')='GR'  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n    left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere\r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_channel_id='R'   \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n    ) Tab_Tax  \r\ngroup by  \r\n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type    \r\n      ,Date_Key,  \r\n      dim_item_id   \r\nUnion All  \r\n---Spceial Charges-----  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type   \r\n      ,Date_Key  \r\n      ,dim_item_id  \r\n      ,sum(Other_Amount) as Other_Amount  \r\n       ,0 as src_unit_cost  \r\n      ,0 as src_current_retail_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as Net_Units_Sold  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_sales_$\"  \r\n      ,0 as \"Demand_Selling_Margin$\"  \r\n      ,0 as \"Shipped_Selling_Margin$\"  \r\n      ,0 as \"Net_Selling_Margin$\" \r\n       --,current_date as create_timestamp\r\n       -- ,'ETL' as created_by\r\n       -- ,null as update_timestamp\r\n       -- ,null as updated_by\r\n        --,null as venue_key\r\n        --,null as venue_flag\r\n           from       \r\n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n    ,SUM(src_special_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \r\n     ,order_date_id as Date_Key  \r\n    ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n    ,SUM(src_special_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and isnull(src_order_origin_code,'AA')='GR'  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n    ,SUM(src_special_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n    ,SUM(src_special_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_channel_id='R'   \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n    ) Tab_Tax  \r\ngroup by  \r\n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type    \r\n      ,Date_Key,  \r\n      dim_item_id   \r\nUnion All  \r\n---- Freight ----------  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type   \r\n      ,Date_Key  \r\n      ,dim_item_id  \r\n      ,sum(Other_Amount) as Other_Amount\r\n       ,0 as src_unit_cost  \r\n      ,0 as src_current_retail_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as Net_Units_Sold  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_sales_$\"  \r\n      ,0 as \"Demand_Selling_Margin$\"  \r\n      ,0 as \"Shipped_Selling_Margin$\"  \r\n      ,0 as \"Net_Selling_Margin$\"   \r\n      -- ,current_date as create_timestamp\r\n      --  ,'ETL' as created_by\r\n      --  ,null as update_timestamp\r\n      --  ,null as updated_by\r\n      --  ,null as venue_key\r\n      --  ,null as venue_flag\r\n           from       \r\n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} left join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\t\r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \r\n     ,order_date_id as Date_Key  \r\n    ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n    ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'  \r\n    and isnull(src_order_origin_code,'AA')='GR'  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n    ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_order_type='I' and src_channel_id<>'R'   \r\n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n    ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  \r\n    order_date_id>19000101 and  \r\n    src_channel_id='R'   \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n    ) Tab_Tax  \r\ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  ,src_order_type    ,Date_Key,  dim_item_id  )),\r\n\r\n #fact_aggregate_sales as\r\n(select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\r\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\r\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\r\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\r\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\r\n,net_selling_margin$ net_selling_margin_$\r\n from\r\n(\r\n select * from #fact_aggregate_sales_temp1 \r\n\t\tunion all\r\n\t\tselect * from #fact_aggregate_sales_temp2\r\n\t\tunion all\r\n\t\tselect * from #fact_aggregate_sales_temp3\r\n\t\tunion all\r\n\t\tselect * from #fact_aggregate_sales_temp4\r\n))\r\n\r\nselect dim_business_unit_id,\r\ndim_order_method_id,\r\ndate_key,\r\nsrc_order_type,\r\ndim_item_id,\r\nsrc_unit_cost,\r\nsrc_current_retail_price,\r\nsrc_units_ordered,\r\nsrc_units_shipped,\r\nunits_returned,\r\nnet_units_sold,\r\ndemand_cogs_$,\r\nshipped_cogs_$,\r\nreturned_cogs_$,\r\nnet_cogs_$,\r\ndemand_retail_$,\r\nshipped_retail_$,\r\nnet_retail_$,\r\ndemand_sales_$,\r\nshipped_sales_$,\r\nreturns_$,\r\nnet_sales_$,\r\ndemand_selling_margin_$,\r\nshipped_selling_margin_$,\r\nnet_selling_margin_$,\r\nother_amount,\r\ncurrent_timestamp as create_timestamp,\r\n'ETL' as created_by,\r\nnull as update_timestamp,\r\nnull as updated_by,\r\n(src_unit_cost/nullif(conversion_rate_to_local,0)) as unit_cost_local,\r\n(src_current_retail_price/nullif(conversion_rate_to_local,0)) as current_retail_price_local,\r\n(demand_cogs_$/nullif(conversion_rate_to_local,0)) as demand_cogs_local,\r\n(shipped_cogs_$/nullif(conversion_rate_to_local,0)) as shipped_cogs_local,\r\n(returned_cogs_$/nullif(conversion_rate_to_local,0)) as returned_cogs_local,\r\n(net_cogs_$/nullif(conversion_rate_to_local,0)) as net_cogs_local,\r\n(demand_retail_$/nullif(conversion_rate_to_local,0)) as demand_retail_local,\r\n(shipped_retail_$/nullif(conversion_rate_to_local,0)) as shipped_retail_local,\r\n(net_retail_$/nullif(conversion_rate_to_local,0)) as net_retail_local,\r\n(demand_sales_$/nullif(conversion_rate_to_local,0)) as demand_sales_local,\r\n(shipped_sales_$/nullif(conversion_rate_to_local,0)) as shipped_sales_local,\r\n(returns_$/nullif(conversion_rate_to_local,0)) as returns_local,\r\n(net_sales_$/nullif(conversion_rate_to_local,0)) as net_sales_local,\r\n(demand_selling_margin_$/nullif(conversion_rate_to_local,0)) as demand_selling_margin_local,\r\n(shipped_selling_margin_$/nullif(conversion_rate_to_local,0)) as shipped_selling_margin_local,\r\n(net_selling_margin_$/nullif(conversion_rate_to_local,0)) as net_selling_margin_local,\r\n(other_amount/nullif(conversion_rate_to_local,0)) as other_amount_local,\r\nsrc_currency_code_from,\r\ndim_shop_site_id,\r\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \r\ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\r\nfrom \r\n(\r\n\tselect src.*,\r\n\tcoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\r\n\tfrom #fact_aggregate_sales src\r\n\t--left outer join public.dim_Date dt on  dt.datekey=src.date_key\r\n\tleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\r\n\ton cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\r\n)", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate", "aggr_cpg_daily_sales"], "unique_id": "model.analytics_engineering_marts.aggr_cpg_daily_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate/aggr_cpg_daily_sales.sql", "original_file_path": "models/fds_cpg/aggregate/aggr_cpg_daily_sales.sql", "name": "aggr_cpg_daily_sales", "resource_type": "model", "alias": "aggr_cpg_daily_sales", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cpg.aggr_cpg_daily_sales", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"], "analytics_engineering_marts": null}, "tags": ["Phase 5B"], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Sales Table consist of Sales details of WWE products on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 08:00 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_cpg_fact_cpg_sales_detail_radial_abac ; 30230,            t_di_cpg_fact_cpg_sales_detail_cb_abac ; 30231, t_di_cpg_fact_cpg_sales_detail_amazon_abac ; 30232, t_di_cpg_fact_cpg_sales_detail_kit_component_radial_abac ; 30233, t_di_cpg_fact_cpg_sales_header_radial_abac ; 30234, t_di_cpg_fact_cpg_sales_header_cb_abac ; 30235 & t_di_cpg_fact_cpg_sales_header_amazon_abac ; 30236\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "type of order", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id from dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "cost per unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Return COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency Code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id from dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate/aggr_cpg_daily_sales.sql", "compiled": true, "compiled_sql": "\n\nwith #fact_aggregate_sales_temp1 as\n(select * from(\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n      ,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n        --  ,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        , sum(\"Return$\") as \"Return$\"  \n        , sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n         ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,dim_order_method_id  \n                                       ,src_order_type         \n               ,Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,SUM(src_units_shipped) as src_units_shipped  \n                                       ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                           ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n         ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n               ,order_date_id as Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n       ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n                          ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>19000101 or ship_date_id>19000101) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>19000101 or ship_date_id>19000101) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n      src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in \n\t\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t\t,dim_order_method_id  \n                                     ,src_order_type       \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (   \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove  \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM   \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n\t\t\t   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n                                  src_order_number not in   \n          (  \n          SELECT  distinct ltrim(rtrim(src_order_number)) As src_order_number  \n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n              UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type        \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,ship_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R'   \n                                    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                                    and src_order_status='IN'   \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,sum(src_kit_units_ordered ) as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                       ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock) \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,\n            src_order_type,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_kit_selling_price,  \n            src_current_retail_price,  \n            src_kit_units_ordered,  \n            order_date_id   \n   ) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Gratis_Orders]\n#fact_aggregate_sales_temp2 as\n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n       --  ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n       -- ,null as venue_key\n       -- ,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n   \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n                        dim_item_id not in\n\t\t\t\t\t\t\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n           ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n   where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and  \n            dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                   src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')     \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n    where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN'     \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Free_Orders]\n#fact_aggregate_sales_temp3 as \n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n         --,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Regular Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)  \n                        left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where    \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n      dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where      \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \n                                                            left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\nwhere src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                  src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN' \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id )),\n--[SP_Aggregate_Header]\n#fact_aggregate_sales_temp4 as \n(select *  from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n     ,dim_item_id \n     ,sum(Other_Amount) as Other_Amount \n     ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n      -- ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n            from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere\n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n       --,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \n      -- ,current_date as create_timestamp\n      --  ,'ETL' as created_by\n      --  ,null as update_timestamp\n      --  ,null as updated_by\n      --  ,null as venue_key\n      --  ,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\t\n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'   \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  ,src_order_type    ,Date_Key,  dim_item_id  )),\n\n #fact_aggregate_sales as\n(select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\n,net_selling_margin$ net_selling_margin_$\n from\n(\n select * from #fact_aggregate_sales_temp1 \n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp2\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp3\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp4\n))\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\nother_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n(src_unit_cost/nullif(conversion_rate_to_local,0)) as unit_cost_local,\n(src_current_retail_price/nullif(conversion_rate_to_local,0)) as current_retail_price_local,\n(demand_cogs_$/nullif(conversion_rate_to_local,0)) as demand_cogs_local,\n(shipped_cogs_$/nullif(conversion_rate_to_local,0)) as shipped_cogs_local,\n(returned_cogs_$/nullif(conversion_rate_to_local,0)) as returned_cogs_local,\n(net_cogs_$/nullif(conversion_rate_to_local,0)) as net_cogs_local,\n(demand_retail_$/nullif(conversion_rate_to_local,0)) as demand_retail_local,\n(shipped_retail_$/nullif(conversion_rate_to_local,0)) as shipped_retail_local,\n(net_retail_$/nullif(conversion_rate_to_local,0)) as net_retail_local,\n(demand_sales_$/nullif(conversion_rate_to_local,0)) as demand_sales_local,\n(shipped_sales_$/nullif(conversion_rate_to_local,0)) as shipped_sales_local,\n(returns_$/nullif(conversion_rate_to_local,0)) as returns_local,\n(net_sales_$/nullif(conversion_rate_to_local,0)) as net_sales_local,\n(demand_selling_margin_$/nullif(conversion_rate_to_local,0)) as demand_selling_margin_local,\n(shipped_selling_margin_$/nullif(conversion_rate_to_local,0)) as shipped_selling_margin_local,\n(net_selling_margin_$/nullif(conversion_rate_to_local,0)) as net_selling_margin_local,\n(other_amount/nullif(conversion_rate_to_local,0)) as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\n\tselect src.*,\n\tcoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\n\tfrom #fact_aggregate_sales src\n\t--left outer join public.dim_Date dt on  dt.datekey=src.date_key\n\tleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\n\ton cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith #fact_aggregate_sales_temp1 as\n(select * from(\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n      ,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n        --  ,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        , sum(\"Return$\") as \"Return$\"  \n        , sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n         ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,dim_order_method_id  \n                                       ,src_order_type         \n               ,Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,SUM(src_units_shipped) as src_units_shipped  \n                                       ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                           ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n         ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n               ,order_date_id as Date  \n                                       ,dim_item_id  \n               ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n       ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n                          ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>19000101 or ship_date_id>19000101) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>19000101 or ship_date_id>19000101) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n      src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in \n\t\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t\t,dim_order_method_id  \n                                     ,src_order_type       \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (   \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove  \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM   \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n\t\t\t   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n                                  src_order_number not in   \n          (  \n          SELECT  distinct ltrim(rtrim(src_order_number)) As src_order_number  \n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)\n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n              UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,src_order_type        \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                     ,src_order_type         \n             ,ship_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                    where   \n                                    (order_date_id>19000101 or ship_date_id>19000101) and   \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R'   \n                                    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                                    and src_order_status='IN'   \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,sum(src_kit_units_ordered ) as Units_Returned  \n                                     ,sum(src_required_quantity) as src_required_quantity  \n                       ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n                FROM   \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock) \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,\n            src_order_type,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_kit_selling_price,  \n            src_current_retail_price,  \n            src_kit_units_ordered,  \n            order_date_id   \n   ) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Gratis_Orders]\n#fact_aggregate_sales_temp2 as\n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n       --  ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n       -- ,null as venue_key\n       -- ,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n   \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n                        dim_item_id not in\n\t\t\t\t\t\t\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n           ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n   where   \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and  \n            dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n                                                            where src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                   src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR')     \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)\nleft join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n    where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN'     \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id)),\n--[SP_Aggregate_Free_Orders]\n#fact_aggregate_sales_temp3 as \n(select * from(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n         --,current_date as create_timestamp\n        --,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n       ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      , sum(\"Return$\") as \"Return$\"  \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n       ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Regular Items*/  \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type         \n             ,order_date_id as Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     ,0 as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                    ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n                        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n                FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock)  \n                        left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where    \n                        (order_date_id>19000101 or ship_date_id>19000101) and   \n                        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                        src_order_type='I' and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                     ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n             ,Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                     , SUM(src_units_shipped) as src_units_shipped  \n                                     ,sum(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                     ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n      FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"(nolock)  \n      left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n      (order_date_id>19000101 or ship_date_id>19000101) and   \n      dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                        dim_item_id not in\n (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id )\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n             , Date  \n                                     ,dim_item_id  \n             ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,sum(src_units_ordered) as src_units_ordered  \n                                      ,SUM(src_units_shipped) as src_units_shipped  \n                                     ,SUM(Units_Returned) as Units_Returned  \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n                         ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \nSELECT                        dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n            ,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n                                    ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \nFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" (nolock) left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id    where      \n   (order_date_id>19000101 or ship_date_id>19000101) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\"(nolock) A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" (nolock) B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"(NoLock) B \nwhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   ) as A      \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) A  \n            inner join                         \n                                    (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)  \n                                                            left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\nwhere src_channel_id='R' ) B                                                              \n                                                            on A.src_order_number=B.src_order_number   ) B  \n            on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      , sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      , sum(\"Return$\") as \"Return$\"    \n      , sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n         ,dim_order_method_id    \n                                     ,src_order_type         \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n     ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (     \n            SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price  --Has to Remove    \n                                     ,sum(src_kit_units_ordered ) as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n                FROM     \n               \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n                                  src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (    \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock)    \n            where     \n            ltrim(rtrim(src_original_ref_order_number))='0')     \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n              UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \n             SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,src_order_type          \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n            ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                     ,src_order_type           \n             ,ship_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,sum(src_kit_units_shipped ) as src_units_shipped    \n                                     ,0 as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                                     ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                    ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)    \n                                   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n                                     where     \n                                    (order_date_id>19000101 or ship_date_id>19000101) and     \n                                    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                                    src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                                    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                                    and src_order_status='IN'     \n                                    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n            UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,dim_order_method_id    \n                                     ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n             ,Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(src_selling_price) as src_selling_price    \n                                     ,sum(src_units_ordered) as src_units_ordered    \n                                     ,SUM(src_units_shipped) as src_units_shipped    \n                                     ,SUM(Units_Returned) as Units_Returned    \n                                     ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n             ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n       ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n            from (    \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n                                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n                                    ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n             ,order_date_id as Date    \n                                     ,dim_item_id    \n             ,Avg(src_unit_cost) as src_unit_cost    \n                                     ,Avg(src_current_retail_price) as src_current_retail_price    \n                                     ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n                                     ,0 as src_units_ordered    \n                                     ,0 as src_units_shipped    \n                                     ,sum(src_kit_units_ordered ) as Units_Returned    \n                                     ,sum(src_required_quantity) as src_required_quantity    \n                       ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n                                     ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n                FROM     \n\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"(nolock)  left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id where    \n         \n   (order_date_id>19000101 or ship_date_id>19000101) and     \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and    \n    src_channel_id='R' and src_order_status='IN' \n   and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"(nolock) where ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n            src_order_type,    \n            dim_item_id,    \n            src_order_number,    \n            src_unit_cost,    \n            src_kit_selling_price,    \n            src_current_retail_price,    \n            src_kit_units_ordered,    \n            order_date_id     \n   ) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id )),\n--[SP_Aggregate_Header]\n#fact_aggregate_sales_temp4 as \n(select *  from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n     ,dim_item_id \n     ,sum(Other_Amount) as Other_Amount \n     ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n      -- ,current_date as create_timestamp\n       -- ,'ETL' as created_by\n        --,null as update_timestamp\n        --,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n            from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere\n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \n       --,current_date as create_timestamp\n       -- ,'ETL' as created_by\n       -- ,null as update_timestamp\n       -- ,null as updated_by\n        --,null as venue_key\n        --,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  \n  dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type    \n      ,Date_Key,  \n      dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n       ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \n      -- ,current_date as create_timestamp\n      --  ,'ETL' as created_by\n      --  ,null as update_timestamp\n      --  ,null as updated_by\n      --  ,null as venue_key\n      --  ,null as venue_flag\n           from       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" left join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\t\n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'  \n    and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_order_type='I' and src_channel_id<>'R'   \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\nleft join (select src_channel_id,dim_order_method_id as dm_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  \n    order_date_id>19000101 and  \n    src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  ,src_order_type    ,Date_Key,  dim_item_id  )),\n\n #fact_aggregate_sales as\n(select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\n,net_selling_margin$ net_selling_margin_$\n from\n(\n select * from #fact_aggregate_sales_temp1 \n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp2\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp3\n\t\tunion all\n\t\tselect * from #fact_aggregate_sales_temp4\n))\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\nother_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n(src_unit_cost/nullif(conversion_rate_to_local,0)) as unit_cost_local,\n(src_current_retail_price/nullif(conversion_rate_to_local,0)) as current_retail_price_local,\n(demand_cogs_$/nullif(conversion_rate_to_local,0)) as demand_cogs_local,\n(shipped_cogs_$/nullif(conversion_rate_to_local,0)) as shipped_cogs_local,\n(returned_cogs_$/nullif(conversion_rate_to_local,0)) as returned_cogs_local,\n(net_cogs_$/nullif(conversion_rate_to_local,0)) as net_cogs_local,\n(demand_retail_$/nullif(conversion_rate_to_local,0)) as demand_retail_local,\n(shipped_retail_$/nullif(conversion_rate_to_local,0)) as shipped_retail_local,\n(net_retail_$/nullif(conversion_rate_to_local,0)) as net_retail_local,\n(demand_sales_$/nullif(conversion_rate_to_local,0)) as demand_sales_local,\n(shipped_sales_$/nullif(conversion_rate_to_local,0)) as shipped_sales_local,\n(returns_$/nullif(conversion_rate_to_local,0)) as returns_local,\n(net_sales_$/nullif(conversion_rate_to_local,0)) as net_sales_local,\n(demand_selling_margin_$/nullif(conversion_rate_to_local,0)) as demand_selling_margin_local,\n(shipped_selling_margin_$/nullif(conversion_rate_to_local,0)) as shipped_selling_margin_local,\n(net_selling_margin_$/nullif(conversion_rate_to_local,0)) as net_selling_margin_local,\n(other_amount/nullif(conversion_rate_to_local,0)) as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\n\tselect src.*,\n\tcoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\n\tfrom #fact_aggregate_sales src\n\t--left outer join public.dim_Date dt on  dt.datekey=src.date_key\n\tleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\n\ton cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)"}, "model.analytics_engineering_marts.aggr_cpg_daily_venue_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t'schema': 'fds_cpg',\r\n\t\t\"pre-hook\": [\"\r\n\t\tDROP TABLE IF EXISTS #TEMP_V;\r\n\t\tDROP TABLE IF EXISTS #TEMP_C;\r\n\t\tDROP TABLE IF EXISTS #TEMP_R;\r\n\t\tSELECT DISTINCT \r\n\t\tA.time_key,\r\n\t\tA.Item_key,\r\n\t\tA.event_key,\r\n\t\tA.venue_key,\r\n\t\tSUM(A.quantity_shipped) AS quantity_shipped,\r\n\t\tSUM(A.quantity_adjustment) AS quantity_adjustment  ,\r\n\t\tSUM(A.quantity_returned) AS quantity_returned,\r\n\t\tSUM(A.compelements) AS compelements ,\r\n\t    SUM(A.net_units_sold) AS net_units_sold ,\r\n\t    SUM(A.selling_price) AS Selling_price,\r\n\t    SUM(total_revenue) AS total_revenue,\r\n        SUM(A.complement_revenue) AS complement_revenue,\r\n\t\t'V' as Flag\r\n\t\tINTO #TEMP_V\r\n\t\tFROM (\r\n\t\tSELECT\r\n        CAST(to_char(event_dttm,'YYYYMMDD')as bigint) time_key,\r\n        upper(ltrim(rtrim(di.src_item_id))) as Item_key,\r\n        de.dim_event_id event_key,\r\n        v.dim_venue_id as venue_key,  \r\n        f552.wwe_quantity_shipped_qd_qshp     AS quantity_shipped,\r\n\t\tf552.wwe_quantity_adjusted_qd_qadj    AS quantity_adjustment,\r\n\t\tf552.wwe_quantity_returned_qd_qret    AS quantity_returned,\r\n\t\tf552.wwe_quantity_comp_qd_qcmp        AS compelements,\r\n\t\t(((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) - f552.wwe_quantity_returned_qd_qret) - f552.wwe_quantity_comp_qd_qcmp)       AS net_units_sold,\r\n\t\t(((((((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) - f552.wwe_quantity_returned_qd_qret) - f552.wwe_quantity_comp_qd_qcmp))::NUMERIC)::NUMERIC\r\n\t\t(9,2) / (\r\n        CASE\r\n            WHEN ((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) = 0)\r\n            THEN NULL\r\n            ELSE (f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj)\r\n            END)::NUMERIC))::NUMERIC(9,2)      AS selling_ratio,\r\n            (((cast(f552.amount_price_per_unit_qduprc as  NUMERIC(28,6))/ 10000))::NUMERIC)::NUMERIC(9,2) AS Selling_price,\r\n            (((((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) - f552.wwe_quantity_returned_qd_qret) - f552.wwe_quantity_comp_qd_qcmp))::NUMERIC * ((\r\n\t\t(cast(f552.amount_price_per_unit_qduprc as  NUMERIC(28,6))/ 10000))::NUMERIC)::NUMERIC(9,2)) AS total_revenue,\r\n\t\t((f552.wwe_quantity_comp_qd_qcmp)::NUMERIC * (((cast(f552.amount_price_per_unit_qduprc  as NUMERIC(28,6)) / 10000))::NUMERIC)::NUMERIC(9,2))  AS complement_revenue   \r\n\t\tFROM\r\n\t\t(((((((udl_cpg.jde_daily_merch_settlement_detail_f55m002 f552\r\n\t\tJOIN\r\n\t\tudl_cpg.jde_daily_merch_settlement_header_f55m001 f551\r\n\t\tON\r\n\t\t((upper(ltrim(RTRIM((f551.costcenter_qamcu)))) = upper(ltrim(RTRIM((f552.cost_center_qdmcu)))))) and \r\n\t\tf552.as_on_date = current_date and f551.as_on_date = current_date\r\n\t\t)\r\n\t\tJOIN\r\n\t\tudl_cpg.jde_daily_business_unit_master_f0006 f6\r\n\t\tON\r\n\t\t((upper(ltrim(RTRIM((f6.costcenter_mcmcu)))) = upper(ltrim(RTRIM((f552.cost_center_qdmcu)))))) and \r\n\t\tf552.as_on_date = current_date and f6.as_on_date = current_date\r\n\t\t)\r\n\t\tJOIN\r\n\t\tudl_cpg.jde_daily_item_cost_f4105 f45\r\n\t\tON\r\n\t\t((((upper(RTRIM(ltrim((f45.cost_center_comcu)))) = upper(ltrim(RTRIM((f552.cost_center_qdmcu)))))\r\n        AND ((f45.identifier_2nd_item_colitm) = (f552.identifier_2nd_item_qdlitm))) AND ((f45.cost_method_coledg) = '07'))) \r\n\t\tand f552.as_on_date = current_date and f45.as_on_date = current_date\r\n        )\r\n\t\tJOIN\r\n\t\tudl_cpg.jde_daily_item_master_f4101 f41\r\n\t\tON\r\n\t\t(((f41.identifier_2nd_item_imlitm) = (f552.identifier_2nd_item_qdlitm))) and \r\n\t\tf552.as_on_date = current_date and f41.as_on_date = current_date\r\n\t\t)\r\n\t\tJOIN\r\n\t\thive_udl_pii.restricted_jde_daily_address_by_date_f0116 f16\r\n\t\tON\r\n\t\t((f16.address_number_alan8 = f6.addressnumber_mcan8)) and \r\n\t\tf16.as_on_date = current_date and f6.as_on_date = current_date\r\n\t\t)\r\n\t\tJOIN\r\n\t\tudl_cpg.jde_daily_user_defined_codes_f0005 f5\r\n\t\tON\r\n\t\t((((ltrim(RTRIM((f5.user_defined_code_drky))) = substring((f552.identifier_2nd_item_qdlitm), 1, 3))\r\n\t\tAND ((f5.product_code_drsy) = '41')) AND ((f5.user_defined_codes_drrt) = 'S1'))) and \r\n\t\tf552.as_on_date = current_date and f5.as_on_date = current_date\r\n\t\t)\r\n\t\tJOIN\r\n\t\tudl_cpg.jde_daily_user_defined_codes_f0005 f15\r\n\t\tON\r\n\t\t((((ltrim(RTRIM((f15.user_defined_code_drky))) = (f41.sales_category_code_2_imsrp2)) \r\n\t\tAND ((f15.product_code_drsy) = '41')) AND ((f15.user_defined_codes_drrt) = 'S2'))) and \r\n\t\tf15.as_on_date = current_date and f41.as_on_date = current_date\r\n\t\t)\r\n\t\tJOIN (select * from fds_cpg.dim_cpg_item where dim_business_unit_id in \r\n\t\t(select dim_business_unit_id from fds_cpg.dim_cpg_business_unit\r\n\t\twhere src_business_unit_id='W03')) di\r\n\t\tON di.src_item_id = upper(LTRIM(RTRIM(f41.identifier_2nd_item_imlitm))) and upper(di.active_flag) = 'Y'\r\n\t\tJOIN cdm.dim_event de  \r\n\t\tON upper(LTRIM(RTRIM(de.event_src_sys_id))) = upper(LTRIM(RTRIM(f6.costcenter_mcmcu)))\r\n\t\tinner join\r\n\t\tfds_le.brdg_live_event_venue v on v.dim_event_id = de.dim_event_id\r\n\t\t) A\r\n\t\tGROUP BY \r\n        A.time_key,\r\n\t\tA.Item_key,\r\n\t\tA.event_key,\r\n\t\tA.venue_key ;\r\n\t\tSELECT DISTINCT   CAST(to_char(de.event_dttm,'YYYYMMDD')as bigint) time_key,\r\n        upper(ltrim(rtrim(di.src_item_id))) as Item_key,\r\n        de.dim_event_id event_key,\r\n        v.dim_venue_id as venue_key,  \r\n\t\t0 AS quantity_shipped ,\r\n\t\t0 as quantity_adjustment,\r\n\t\t0 AS quantity_returned, \r\n\t\t0 AS Compelements ,\r\n\t\tSUM(tab1.Qty_Sold) as net_units_sold, \r\n\t\tSUM(Tab1.Selling_price) as selling_price,\r\n\t\tSUM(tab1.amount) as total_revenue ,\r\n\t\t0 as complement_revenue ,\r\n\t\t'C' as flag\r\n\t\tINTO #TEMP_C\r\n\t\tFROM \r\n\t\t(Select cost_center_header_sdemcu Event, \r\n\t\tcast(cast(price_per_unit_amount_sduprc as  NUMERIC(28,6))/10000 as dec(13,4)) Selling_price, \r\n\t\tshipped_units_quantity_sdsoqs Qty_Sold, item_number_2nd_sdlitm Item, description_line_1_sddsc1 Item_Description, cast(cast(extended_price_amount_sdaexp as NUMERIC(28,6))/100 as dec(13,2)) Amount \r\n\t\tfrom udl_cpg.jde_daily_sales_order_history_f42119 \r\n\t\twhere status_code_last_sdlttr < '980' \r\n\t\tand trim(cost_center_header_sdemcu) in \r\n\t\t(select trim(costcenter_mcmcu) \r\n\t\tfrom udl_cpg.jde_daily_business_unit_master_f0006 \r\n\t\twhere costcentertype_mcstyl = 'EV' and as_on_date = current_date\r\n\t\t)\r\n\t\tand item_number_2nd_sdlitm in \r\n\t\t(select identifier_2nd_item_imlitm \r\n\t\tfrom udl_cpg.jde_daily_item_master_f4101 \r\n\t\twhere description_line_1_imdsc1 like '%Cup%' or description_line_1_imdsc1 like '%CUP%' \r\n\t\tand as_on_date = current_date\r\n\t\t)\r\n\t\tAND as_on_date = current_date\r\n\t\t)Tab1\r\n\t\tINNER JOIN\r\n\t\t(select * from fds_cpg.dim_cpg_item \r\n\t\twhere dim_business_unit_id in \r\n\t\t(select dim_business_unit_id \r\n\t\tfrom fds_cpg.dim_cpg_business_unit\r\n\t\twhere src_business_unit_id='W03')) di\r\n\t\tON upper(ltrim(rtrim(di.src_item_id))) = upper(ltrim(rtrim(tab1.item)))\r\n\t\tand upper(di.active_flag) = 'Y'\r\n\t\tJOIN cdm.dim_event de  \r\n\t\tON upper(ltrim(rtrim(tab1.event))) = upper(ltrim(rtrim(de.event_src_sys_id)))\r\n\t\tinner join\r\n\t\tfds_le.brdg_live_event_venue v on v.dim_event_id=de.dim_event_id\r\n\t\tGROUP BY de.event_dttm,di.src_item_id,de.dim_event_id,v.dim_venue_id,quantity_shipped,\r\n\t\tquantity_adjustment,quantity_returned,Compelements,complement_revenue ;\r\n\t\tDELETE FROM #TEMP_V WHERE (Event_key,Item_key) in (SELECT EVENT_KEY,ITEM_KEY FROM #TEMP_C )  ;\r\n\t\tSELECT * INTO #TEMP_R FROM \r\n\t\t(\r\n\t\tSELECT  \r\n\t\ttime_key,\r\n        Item_key,\r\n        event_key,\r\n        venue_key,\r\n\t    quantity_shipped,\r\n\t    quantity_adjustment  ,\r\n\t    quantity_returned,\r\n\t    compelements ,\r\n\t    net_units_sold ,\r\n\t    Selling_price,\r\n\t    total_revenue,\r\n\t\tcomplement_revenue \r\n\t\tFROM #TEMP_V\r\n\t\tUNION ALL\r\n\t\tSELECT  \r\n\t\ttime_key,\r\n        Item_key,\r\n        event_key,\r\n        venue_key,\r\n\t    quantity_shipped,\r\n\t    quantity_adjustment  ,\r\n\t    quantity_returned,\r\n\t    compelements ,\r\n\t    net_units_sold ,\r\n\t    Selling_price,\r\n\t    total_revenue,\r\n\t\tcomplement_revenue \r\n\t\tFROM #TEMP_C ) ;\r\n\t\tdrop table if exists AGG_SALES;\r\n\t\tcreate TEMP table AGG_SALES AS (\r\n\t\tSELECT DISTINCT  \r\n\t\ttime_key as date_id,\r\n        Item_key as src_item_id,\r\n        event_key as dim_event_id,\r\n        venue_key as dim_venue_id,\r\n\t    cast(quantity_shipped as integer) quantity_shipped ,\r\n\t    cast(quantity_adjustment as integer)  quantity_adjustment,\r\n\t    cast(quantity_returned as integer) quantity_returned ,\r\n\t    cast(compelements as integer) compelements,\r\n\t    cast(net_units_sold as integer) net_units_sold,\r\n\t    cast(Selling_price as NUMERIC(28,6))  Selling_price,\r\n\t    round(total_revenue) total_revenue,\r\n\t\tcomplement_revenue FROM  #TEMP_R\r\n\t\tEXCEPT \r\n\t\tSELECT \r\n\t\tdate_id,\r\n\t\tupper(ltrim(rtrim(b.src_item_id))) as src_item_id,\r\n\t\tdim_event_id,\r\n\t\tdim_venue_id,\r\n\t\tquantity_shipped,\r\n\t\tquantity_adjustment,\r\n\t\tquantity_returned,\r\n\t\tcompelements,\r\n\t\tnet_units_sold,\r\n\t\tcast(Selling_price as NUMERIC(28,6))  selling_price,\r\n\t\tround(total_revenue) total_revenue,\r\n\t\tcomplement_revenue\r\n\t\tFROM\r\n\t\tfds_cpg.aggr_cpg_daily_venue_sales a left join\r\n\t\tfds_cpg.dim_cpg_item b on a.dim_item_id=b.dim_item_id where lower(a.active_flag)='y') ;\r\n\t\tdrop table if exists #stg_fact_cpg_aggregated_venue_sales;\r\n\t\tcreate table #stg_fact_cpg_aggregated_venue_sales as \r\n\t\tselect *,case when dim_agg_sales_id is null then 'i' else 'u' end as ins_upd_flag\r\n\t\tfrom (\r\n\t\tSELECT  \r\n\t\tT.date_id as date_id,\r\n        I.dim_item_id as dim_item_id,\r\n        T.dim_event_id as dim_event_id,\r\n        T.dim_venue_id as dim_venue_id,\r\n        T.quantity_shipped,\r\n        T.quantity_adjustment,\r\n        T.quantity_returned,\r\n        T.compelements,\r\n        T.net_units_sold,\r\n        T.selling_price,\r\n        T.total_revenue,\r\n        T.complement_revenue,\r\n        FT.dim_agg_sales_id,\r\n\t\t'' as selling_ratio\r\n        FROM AGG_SALES T\r\n\t\tLEFT OUTER JOIN \r\n\t\t(select upper(ltrim(rtrim(b.src_item_id))) src_item_id,a.* \r\n\t\tfrom \r\n\t\tfds_cpg.aggr_cpg_daily_venue_sales a left join\r\n\t\tfds_cpg.dim_cpg_item b on a.dim_item_id=b.dim_item_id \r\n\t\twhere lower(a.active_flag)='y') FT\r\n\t\tON FT.src_item_id = T.src_item_id AND FT.dim_event_id = T.dim_event_id\r\n\t\tAND FT.dim_venue_id = T.dim_venue_id and  FT.date_id = T.date_id \r\n\t\tLEFT OUTER JOIN \r\n\t\t(select * from fds_cpg.dim_cpg_item where dim_business_unit_id in \r\n\t\t(select dim_business_unit_id from fds_cpg.dim_cpg_business_unit\r\n\t\twhere src_business_unit_id='W03')  and upper(active_flag) = 'Y') I\r\n\t\tON upper(ltrim(rtrim(I.src_item_id))) = upper(ltrim(rtrim(T.src_item_id))))  ;\r\n\t\tUPDATE fds_cpg.aggr_cpg_daily_venue_sales\r\n\t\tSET active_flag = 'N',\r\n\t\teffective_end_datetime = current_timestamp,\r\n\t\tetl_update_rec_dttm = current_timestamp,\r\n\t\tetl_update_user_id = 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B'\r\n\t\tFROM \r\n\t\tfds_cpg.aggr_cpg_daily_venue_sales df\r\n\t\tINNER JOIN \r\n\t\t#stg_fact_cpg_aggregated_venue_sales sf\r\n\t\ton sf.dim_agg_sales_id = df.dim_agg_sales_id and lower(df.active_flag) = 'y'  ;\r\n\t\t\"],\r\n\t\t\"materialized\": 'incremental','tags': \"Phase 5B\"\r\n  })\r\n}}\r\nSELECT\r\n    (select max(dim_agg_sales_id) from {{this}}) + row_number() OVER () as dim_agg_sales_id,\r\n    date_id,\r\n    dim_item_id,\r\n    dim_event_id,\r\n    dim_venue_id,\r\n    quantity_shipped,\r\n    quantity_adjustment,\r\n    quantity_returned,\r\n    compelements,\r\n    net_units_sold,\r\n    selling_price,\r\n    total_revenue,\r\n    complement_revenue,\r\n    'Y' as active_flag,\r\n\tcurrent_timestamp as effective_start_datetime,\r\n    cast('2050-12-31 00:00:00' as timestamp) as effective_end_datetime,\r\n\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_5B' as etl_batch_id, \r\n\t'bi_dbt_user_prd' as etl_insert_user_id, \r\n\tcurrent_timestamp as etl_insert_rec_dttm, \r\n\tnull as etl_update_user_id, \r\n\tcast(null as timestamp) as etl_update_rec_dttm\r\nFROM\r\n\t(select distinct date_id,dim_item_id,dim_event_id,dim_venue_id,\r\n\tquantity_shipped,quantity_adjustment,quantity_returned,compelements,\r\n\tnet_units_sold,selling_price,total_revenue,complement_revenue,\r\n\tselling_ratio,ins_upd_flag \r\n\tfrom #stg_fact_cpg_aggregated_venue_sales\r\n\tWHERE lower(ins_upd_flag) in  ('i','u'))", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate", "aggr_cpg_daily_venue_sales"], "unique_id": "model.analytics_engineering_marts.aggr_cpg_daily_venue_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate/aggr_cpg_daily_venue_sales.sql", "original_file_path": "models/fds_cpg/aggregate/aggr_cpg_daily_venue_sales.sql", "name": "aggr_cpg_daily_venue_sales", "resource_type": "model", "alias": "aggr_cpg_daily_venue_sales", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "\n\t\tDROP TABLE IF EXISTS #TEMP_V;\n\t\tDROP TABLE IF EXISTS #TEMP_C;\n\t\tDROP TABLE IF EXISTS #TEMP_R;\n\t\tSELECT DISTINCT \n\t\tA.time_key,\n\t\tA.Item_key,\n\t\tA.event_key,\n\t\tA.venue_key,\n\t\tSUM(A.quantity_shipped) AS quantity_shipped,\n\t\tSUM(A.quantity_adjustment) AS quantity_adjustment  ,\n\t\tSUM(A.quantity_returned) AS quantity_returned,\n\t\tSUM(A.compelements) AS compelements ,\n\t    SUM(A.net_units_sold) AS net_units_sold ,\n\t    SUM(A.selling_price) AS Selling_price,\n\t    SUM(total_revenue) AS total_revenue,\n        SUM(A.complement_revenue) AS complement_revenue,\n\t\t'V' as Flag\n\t\tINTO #TEMP_V\n\t\tFROM (\n\t\tSELECT\n        CAST(to_char(event_dttm,'YYYYMMDD')as bigint) time_key,\n        upper(ltrim(rtrim(di.src_item_id))) as Item_key,\n        de.dim_event_id event_key,\n        v.dim_venue_id as venue_key,  \n        f552.wwe_quantity_shipped_qd_qshp     AS quantity_shipped,\n\t\tf552.wwe_quantity_adjusted_qd_qadj    AS quantity_adjustment,\n\t\tf552.wwe_quantity_returned_qd_qret    AS quantity_returned,\n\t\tf552.wwe_quantity_comp_qd_qcmp        AS compelements,\n\t\t(((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) - f552.wwe_quantity_returned_qd_qret) - f552.wwe_quantity_comp_qd_qcmp)       AS net_units_sold,\n\t\t(((((((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) - f552.wwe_quantity_returned_qd_qret) - f552.wwe_quantity_comp_qd_qcmp))::NUMERIC)::NUMERIC\n\t\t(9,2) / (\n        CASE\n            WHEN ((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) = 0)\n            THEN NULL\n            ELSE (f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj)\n            END)::NUMERIC))::NUMERIC(9,2)      AS selling_ratio,\n            (((cast(f552.amount_price_per_unit_qduprc as  NUMERIC(28,6))/ 10000))::NUMERIC)::NUMERIC(9,2) AS Selling_price,\n            (((((f552.wwe_quantity_shipped_qd_qshp + f552.wwe_quantity_adjusted_qd_qadj) - f552.wwe_quantity_returned_qd_qret) - f552.wwe_quantity_comp_qd_qcmp))::NUMERIC * ((\n\t\t(cast(f552.amount_price_per_unit_qduprc as  NUMERIC(28,6))/ 10000))::NUMERIC)::NUMERIC(9,2)) AS total_revenue,\n\t\t((f552.wwe_quantity_comp_qd_qcmp)::NUMERIC * (((cast(f552.amount_price_per_unit_qduprc  as NUMERIC(28,6)) / 10000))::NUMERIC)::NUMERIC(9,2))  AS complement_revenue   \n\t\tFROM\n\t\t(((((((udl_cpg.jde_daily_merch_settlement_detail_f55m002 f552\n\t\tJOIN\n\t\tudl_cpg.jde_daily_merch_settlement_header_f55m001 f551\n\t\tON\n\t\t((upper(ltrim(RTRIM((f551.costcenter_qamcu)))) = upper(ltrim(RTRIM((f552.cost_center_qdmcu)))))) and \n\t\tf552.as_on_date = current_date and f551.as_on_date = current_date\n\t\t)\n\t\tJOIN\n\t\tudl_cpg.jde_daily_business_unit_master_f0006 f6\n\t\tON\n\t\t((upper(ltrim(RTRIM((f6.costcenter_mcmcu)))) = upper(ltrim(RTRIM((f552.cost_center_qdmcu)))))) and \n\t\tf552.as_on_date = current_date and f6.as_on_date = current_date\n\t\t)\n\t\tJOIN\n\t\tudl_cpg.jde_daily_item_cost_f4105 f45\n\t\tON\n\t\t((((upper(RTRIM(ltrim((f45.cost_center_comcu)))) = upper(ltrim(RTRIM((f552.cost_center_qdmcu)))))\n        AND ((f45.identifier_2nd_item_colitm) = (f552.identifier_2nd_item_qdlitm))) AND ((f45.cost_method_coledg) = '07'))) \n\t\tand f552.as_on_date = current_date and f45.as_on_date = current_date\n        )\n\t\tJOIN\n\t\tudl_cpg.jde_daily_item_master_f4101 f41\n\t\tON\n\t\t(((f41.identifier_2nd_item_imlitm) = (f552.identifier_2nd_item_qdlitm))) and \n\t\tf552.as_on_date = current_date and f41.as_on_date = current_date\n\t\t)\n\t\tJOIN\n\t\thive_udl_pii.restricted_jde_daily_address_by_date_f0116 f16\n\t\tON\n\t\t((f16.address_number_alan8 = f6.addressnumber_mcan8)) and \n\t\tf16.as_on_date = current_date and f6.as_on_date = current_date\n\t\t)\n\t\tJOIN\n\t\tudl_cpg.jde_daily_user_defined_codes_f0005 f5\n\t\tON\n\t\t((((ltrim(RTRIM((f5.user_defined_code_drky))) = substring((f552.identifier_2nd_item_qdlitm), 1, 3))\n\t\tAND ((f5.product_code_drsy) = '41')) AND ((f5.user_defined_codes_drrt) = 'S1'))) and \n\t\tf552.as_on_date = current_date and f5.as_on_date = current_date\n\t\t)\n\t\tJOIN\n\t\tudl_cpg.jde_daily_user_defined_codes_f0005 f15\n\t\tON\n\t\t((((ltrim(RTRIM((f15.user_defined_code_drky))) = (f41.sales_category_code_2_imsrp2)) \n\t\tAND ((f15.product_code_drsy) = '41')) AND ((f15.user_defined_codes_drrt) = 'S2'))) and \n\t\tf15.as_on_date = current_date and f41.as_on_date = current_date\n\t\t)\n\t\tJOIN (select * from fds_cpg.dim_cpg_item where dim_business_unit_id in \n\t\t(select dim_business_unit_id from fds_cpg.dim_cpg_business_unit\n\t\twhere src_business_unit_id='W03')) di\n\t\tON di.src_item_id = upper(LTRIM(RTRIM(f41.identifier_2nd_item_imlitm))) and upper(di.active_flag) = 'Y'\n\t\tJOIN cdm.dim_event de  \n\t\tON upper(LTRIM(RTRIM(de.event_src_sys_id))) = upper(LTRIM(RTRIM(f6.costcenter_mcmcu)))\n\t\tinner join\n\t\tfds_le.brdg_live_event_venue v on v.dim_event_id = de.dim_event_id\n\t\t) A\n\t\tGROUP BY \n        A.time_key,\n\t\tA.Item_key,\n\t\tA.event_key,\n\t\tA.venue_key ;\n\t\tSELECT DISTINCT   CAST(to_char(de.event_dttm,'YYYYMMDD')as bigint) time_key,\n        upper(ltrim(rtrim(di.src_item_id))) as Item_key,\n        de.dim_event_id event_key,\n        v.dim_venue_id as venue_key,  \n\t\t0 AS quantity_shipped ,\n\t\t0 as quantity_adjustment,\n\t\t0 AS quantity_returned, \n\t\t0 AS Compelements ,\n\t\tSUM(tab1.Qty_Sold) as net_units_sold, \n\t\tSUM(Tab1.Selling_price) as selling_price,\n\t\tSUM(tab1.amount) as total_revenue ,\n\t\t0 as complement_revenue ,\n\t\t'C' as flag\n\t\tINTO #TEMP_C\n\t\tFROM \n\t\t(Select cost_center_header_sdemcu Event, \n\t\tcast(cast(price_per_unit_amount_sduprc as  NUMERIC(28,6))/10000 as dec(13,4)) Selling_price, \n\t\tshipped_units_quantity_sdsoqs Qty_Sold, item_number_2nd_sdlitm Item, description_line_1_sddsc1 Item_Description, cast(cast(extended_price_amount_sdaexp as NUMERIC(28,6))/100 as dec(13,2)) Amount \n\t\tfrom udl_cpg.jde_daily_sales_order_history_f42119 \n\t\twhere status_code_last_sdlttr < '980' \n\t\tand trim(cost_center_header_sdemcu) in \n\t\t(select trim(costcenter_mcmcu) \n\t\tfrom udl_cpg.jde_daily_business_unit_master_f0006 \n\t\twhere costcentertype_mcstyl = 'EV' and as_on_date = current_date\n\t\t)\n\t\tand item_number_2nd_sdlitm in \n\t\t(select identifier_2nd_item_imlitm \n\t\tfrom udl_cpg.jde_daily_item_master_f4101 \n\t\twhere description_line_1_imdsc1 like '%Cup%' or description_line_1_imdsc1 like '%CUP%' \n\t\tand as_on_date = current_date\n\t\t)\n\t\tAND as_on_date = current_date\n\t\t)Tab1\n\t\tINNER JOIN\n\t\t(select * from fds_cpg.dim_cpg_item \n\t\twhere dim_business_unit_id in \n\t\t(select dim_business_unit_id \n\t\tfrom fds_cpg.dim_cpg_business_unit\n\t\twhere src_business_unit_id='W03')) di\n\t\tON upper(ltrim(rtrim(di.src_item_id))) = upper(ltrim(rtrim(tab1.item)))\n\t\tand upper(di.active_flag) = 'Y'\n\t\tJOIN cdm.dim_event de  \n\t\tON upper(ltrim(rtrim(tab1.event))) = upper(ltrim(rtrim(de.event_src_sys_id)))\n\t\tinner join\n\t\tfds_le.brdg_live_event_venue v on v.dim_event_id=de.dim_event_id\n\t\tGROUP BY de.event_dttm,di.src_item_id,de.dim_event_id,v.dim_venue_id,quantity_shipped,\n\t\tquantity_adjustment,quantity_returned,Compelements,complement_revenue ;\n\t\tDELETE FROM #TEMP_V WHERE (Event_key,Item_key) in (SELECT EVENT_KEY,ITEM_KEY FROM #TEMP_C )  ;\n\t\tSELECT * INTO #TEMP_R FROM \n\t\t(\n\t\tSELECT  \n\t\ttime_key,\n        Item_key,\n        event_key,\n        venue_key,\n\t    quantity_shipped,\n\t    quantity_adjustment  ,\n\t    quantity_returned,\n\t    compelements ,\n\t    net_units_sold ,\n\t    Selling_price,\n\t    total_revenue,\n\t\tcomplement_revenue \n\t\tFROM #TEMP_V\n\t\tUNION ALL\n\t\tSELECT  \n\t\ttime_key,\n        Item_key,\n        event_key,\n        venue_key,\n\t    quantity_shipped,\n\t    quantity_adjustment  ,\n\t    quantity_returned,\n\t    compelements ,\n\t    net_units_sold ,\n\t    Selling_price,\n\t    total_revenue,\n\t\tcomplement_revenue \n\t\tFROM #TEMP_C ) ;\n\t\tdrop table if exists AGG_SALES;\n\t\tcreate TEMP table AGG_SALES AS (\n\t\tSELECT DISTINCT  \n\t\ttime_key as date_id,\n        Item_key as src_item_id,\n        event_key as dim_event_id,\n        venue_key as dim_venue_id,\n\t    cast(quantity_shipped as integer) quantity_shipped ,\n\t    cast(quantity_adjustment as integer)  quantity_adjustment,\n\t    cast(quantity_returned as integer) quantity_returned ,\n\t    cast(compelements as integer) compelements,\n\t    cast(net_units_sold as integer) net_units_sold,\n\t    cast(Selling_price as NUMERIC(28,6))  Selling_price,\n\t    round(total_revenue) total_revenue,\n\t\tcomplement_revenue FROM  #TEMP_R\n\t\tEXCEPT \n\t\tSELECT \n\t\tdate_id,\n\t\tupper(ltrim(rtrim(b.src_item_id))) as src_item_id,\n\t\tdim_event_id,\n\t\tdim_venue_id,\n\t\tquantity_shipped,\n\t\tquantity_adjustment,\n\t\tquantity_returned,\n\t\tcompelements,\n\t\tnet_units_sold,\n\t\tcast(Selling_price as NUMERIC(28,6))  selling_price,\n\t\tround(total_revenue) total_revenue,\n\t\tcomplement_revenue\n\t\tFROM\n\t\tfds_cpg.aggr_cpg_daily_venue_sales a left join\n\t\tfds_cpg.dim_cpg_item b on a.dim_item_id=b.dim_item_id where lower(a.active_flag)='y') ;\n\t\tdrop table if exists #stg_fact_cpg_aggregated_venue_sales;\n\t\tcreate table #stg_fact_cpg_aggregated_venue_sales as \n\t\tselect *,case when dim_agg_sales_id is null then 'i' else 'u' end as ins_upd_flag\n\t\tfrom (\n\t\tSELECT  \n\t\tT.date_id as date_id,\n        I.dim_item_id as dim_item_id,\n        T.dim_event_id as dim_event_id,\n        T.dim_venue_id as dim_venue_id,\n        T.quantity_shipped,\n        T.quantity_adjustment,\n        T.quantity_returned,\n        T.compelements,\n        T.net_units_sold,\n        T.selling_price,\n        T.total_revenue,\n        T.complement_revenue,\n        FT.dim_agg_sales_id,\n\t\t'' as selling_ratio\n        FROM AGG_SALES T\n\t\tLEFT OUTER JOIN \n\t\t(select upper(ltrim(rtrim(b.src_item_id))) src_item_id,a.* \n\t\tfrom \n\t\tfds_cpg.aggr_cpg_daily_venue_sales a left join\n\t\tfds_cpg.dim_cpg_item b on a.dim_item_id=b.dim_item_id \n\t\twhere lower(a.active_flag)='y') FT\n\t\tON FT.src_item_id = T.src_item_id AND FT.dim_event_id = T.dim_event_id\n\t\tAND FT.dim_venue_id = T.dim_venue_id and  FT.date_id = T.date_id \n\t\tLEFT OUTER JOIN \n\t\t(select * from fds_cpg.dim_cpg_item where dim_business_unit_id in \n\t\t(select dim_business_unit_id from fds_cpg.dim_cpg_business_unit\n\t\twhere src_business_unit_id='W03')  and upper(active_flag) = 'Y') I\n\t\tON upper(ltrim(rtrim(I.src_item_id))) = upper(ltrim(rtrim(T.src_item_id))))  ;\n\t\tUPDATE fds_cpg.aggr_cpg_daily_venue_sales\n\t\tSET active_flag = 'N',\n\t\teffective_end_datetime = current_timestamp,\n\t\tetl_update_rec_dttm = current_timestamp,\n\t\tetl_update_user_id = 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B'\n\t\tFROM \n\t\tfds_cpg.aggr_cpg_daily_venue_sales df\n\t\tINNER JOIN \n\t\t#stg_fact_cpg_aggregated_venue_sales sf\n\t\ton sf.dim_agg_sales_id = df.dim_agg_sales_id and lower(df.active_flag) = 'y'  ;\n\t\t", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"], "analytics_engineering_marts": null}, "tags": ["Phase 5B"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "## Implementation Detail\n*   Date        : 09/23/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_venue_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Venue Sales Table consist of Sales details of WWE products on venue & event - basis\n\n## Schedule Details\n* Frequency : Daily ; 10:30 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_5a_le_udl_to_fds_mstr_load_dim_event_le_venue_event_info ; 9301,            t_di_5a_le_udl_to_fds_mstr_load_brdg_live_event_venue ; 9303\n\n## Maintenance Log\n* Date : 09/23/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_agg_sales_id": {"name": "dim_agg_sales_id", "description": "Auto generated id to uniquely identify a sale", "meta": {}, "data_type": null, "tags": []}, "date_id": {"name": "date_id", "description": "Order Date", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id from dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "dim_event_id": {"name": "dim_event_id", "description": "References dim_event_id from cdm.dim_event table", "meta": {}, "data_type": null, "tags": []}, "dim_venue_id": {"name": "dim_venue_id", "description": "References dim_venue_id from fds_le.brdg_live_event_venue table", "meta": {}, "data_type": null, "tags": []}, "quantity_shipped": {"name": "quantity_shipped", "description": "Shipped Quantity", "meta": {}, "data_type": null, "tags": []}, "quantity_adjustment": {"name": "quantity_adjustment", "description": "Adjusted Quantity", "meta": {}, "data_type": null, "tags": []}, "quantity_returned": {"name": "quantity_returned", "description": "Returned Quantity", "meta": {}, "data_type": null, "tags": []}, "compelements": {"name": "compelements", "description": "Complements", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "selling_price": {"name": "selling_price", "description": "Selling Price", "meta": {}, "data_type": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "Total revenue", "meta": {}, "data_type": null, "tags": []}, "complement_revenue": {"name": "complement_revenue", "description": "Complement revenue", "meta": {}, "data_type": null, "tags": []}, "active_flag": {"name": "active_flag", "description": "To indicate whether its active or not", "meta": {}, "data_type": null, "tags": []}, "effective_start_datetime": {"name": "effective_start_datetime", "description": "effective start date time", "meta": {}, "data_type": null, "tags": []}, "effective_end_datetime": {"name": "effective_end_datetime", "description": "effective end date time", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate/aggr_cpg_daily_venue_sales.sql", "compiled": true, "compiled_sql": "\nSELECT\n    (select max(dim_agg_sales_id) from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_venue_sales\") + row_number() OVER () as dim_agg_sales_id,\n    date_id,\n    dim_item_id,\n    dim_event_id,\n    dim_venue_id,\n    quantity_shipped,\n    quantity_adjustment,\n    quantity_returned,\n    compelements,\n    net_units_sold,\n    selling_price,\n    total_revenue,\n    complement_revenue,\n    'Y' as active_flag,\n\tcurrent_timestamp as effective_start_datetime,\n    cast('2050-12-31 00:00:00' as timestamp) as effective_end_datetime,\n\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_5B' as etl_batch_id, \n\t'bi_dbt_user_prd' as etl_insert_user_id, \n\tcurrent_timestamp as etl_insert_rec_dttm, \n\tnull as etl_update_user_id, \n\tcast(null as timestamp) as etl_update_rec_dttm\nFROM\n\t(select distinct date_id,dim_item_id,dim_event_id,dim_venue_id,\n\tquantity_shipped,quantity_adjustment,quantity_returned,compelements,\n\tnet_units_sold,selling_price,total_revenue,complement_revenue,\n\tselling_ratio,ins_upd_flag \n\tfrom #stg_fact_cpg_aggregated_venue_sales\n\tWHERE lower(ins_upd_flag) in  ('i','u'))", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nSELECT\n    (select max(dim_agg_sales_id) from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_venue_sales\") + row_number() OVER () as dim_agg_sales_id,\n    date_id,\n    dim_item_id,\n    dim_event_id,\n    dim_venue_id,\n    quantity_shipped,\n    quantity_adjustment,\n    quantity_returned,\n    compelements,\n    net_units_sold,\n    selling_price,\n    total_revenue,\n    complement_revenue,\n    'Y' as active_flag,\n\tcurrent_timestamp as effective_start_datetime,\n    cast('2050-12-31 00:00:00' as timestamp) as effective_end_datetime,\n\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_5B' as etl_batch_id, \n\t'bi_dbt_user_prd' as etl_insert_user_id, \n\tcurrent_timestamp as etl_insert_rec_dttm, \n\tnull as etl_update_user_id, \n\tcast(null as timestamp) as etl_update_rec_dttm\nFROM\n\t(select distinct date_id,dim_item_id,dim_event_id,dim_venue_id,\n\tquantity_shipped,quantity_adjustment,quantity_returned,compelements,\n\tnet_units_sold,selling_price,total_revenue,complement_revenue,\n\tselling_ratio,ins_upd_flag \n\tfrom #stg_fact_cpg_aggregated_venue_sales\n\tWHERE lower(ins_upd_flag) in  ('i','u'))"}, "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t'schema': 'fds_cpg',\r\n\t\t\"pre-hook\": [\"delete from fds_cpg.aggr_cpg_daily_kit_sales\"],\r\n\t\t\"materialized\": 'incremental','tags': \"Phase 5B\"\r\n  })\r\n}}\r\nwith #fact_aggregated_kit_sales_temp1 as \r\n(select * from (\r\n--Kit into Components for Regular Items---\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id\r\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \r\n  ,Date as  Date_Key\r\n  ,dim_item_id\r\n  ,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Sum(src_units_ordered) as src_units_ordered\r\n  ,sum(src_units_shipped) as src_units_shipped\r\n  ,sum(Units_Returned) as Units_Returned\r\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  , sum(\"Return$\") as \"Return$\"\r\n  , sum(\"Net$\") as \"Net$\"\r\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\r\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\r\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\r\n,current_date as create_timestamp\r\n\t,'ETL' as created_by\r\n\t,current_date as update_timestamp\r\n\t,'ETL' as updated_by\r\nFROM\r\n--Demand--\r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,src_order_type     \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\r\n\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom ( \r\n\t\tSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id ,--component\r\n    A.dim_item_id AS dim_src_kit_item_id,--kit\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n    src_selling_price --Has to Remove\r\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\r\n    0                                                                       AS src_units_shipped ,\r\n    0                                                                       AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\r\n    0                                                                           AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    0                                                                               AS \"Net_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\r\n         \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    0                                                                             AS \"Net_Retail$\" ,\r\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Demand_Sales$\" ,\r\n    0 AS \"Shipped_Sales$\" ,\r\n    0 AS \"Return$\" ,\r\n    0 AS \"Net$\"\r\nFROM\r\n    (\r\n             SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            order_date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,--kit item\r\n            -- i.src_item_id as kit_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n LEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t\t/*left join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\r\n        WHERE\r\n            src_order_type='I'\r\n        AND --ISNULL(dim_order_method_id,0)<>5\r\nISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n                            (\r\n                            SELECT DISTINCT\r\n                                 A.dim_src_kit_item_id\r\n                            FROM\r\n                                {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                                {{source('fds_cpg','dim_cpg_item')}} B\r\n                            WHERE\r\n                                A.dim_src_kit_item_id=B.dim_item_id )\r\n        AND src_order_number NOT IN\r\n                                     (\r\n                                     SELECT DISTINCT\r\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                     FROM\r\n                                         {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                     WHERE\r\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\r\n                                     OR  ltrim(RTRIM(src_prepay_code))='F')\r\n        AND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n           k.dim_src_kit_item_id,\r\n     c.dim_item_id,\r\n    --src_kit_id,\r\n    --src_component_item_number,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                   dim_src_kit_item_id,\r\n    src_kit_id,\r\n    a.dim_item_id,\r\n   -- src_component_item_number,\r\n    --,b.dim_business_unit_id\r\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n    (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n            k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n             k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id \r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n   B.dim_item_id,\r\n     A.dim_item_id) Tab4\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \r\n\t\t  UNION all\r\n/*Retrieving Shipped sales for Kit Items*/    \r\n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,src_order_type      \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom (        SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            dim_order_method_id ,\r\n            src_order_type ,\r\n            DATE ,\r\n            B.dim_item_id AS dim_item_id ,--component\r\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\r\n            AVG(src_unit_cost)            AS src_unit_cost ,\r\n            AVG(src_current_retail_price) AS src_current_retail_price ,\r\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity))\r\n                                                         AS src_selling_price ,\r\n            0                                            AS src_units_ordered ,\r\n            SUM(src_units_shipped*src_required_quantity)                      AS src_units_shipped ,\r\n            0                                                                    AS Units_Returned ,\r\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\r\n            0                                                                    AS \"Demand_Cogs$\" ,\r\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\r\n                                                                                   \"Shipped_Cogs$\" ,\r\n            0                                                                  AS \"Returned_Cogs$\" ,\r\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\r\n            ,\r\n            0                                                                  AS \"Demand_Retail$\" ,\r\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\r\n            \"Shipped_Retail$\" ,\r\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\r\n              AS \"Net_Retail$\" ,\r\n            0 AS \"Demand_Sales$\" ,\r\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\r\n            )) AS \"Shipped_Sales$\" ,\r\n            0  AS \"Return$\" ,\r\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\r\n            )) AS \"Net$\"\r\n        FROM\r\n            (\r\n                SELECT DISTINCT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    fact_cpg_sales_detail.dim_order_method_id ,\r\n                    src_order_type ,\r\n                    Ship_Date_id AS DATE ,\r\n                    fact_cpg_sales_detail.dim_item_id ,\r\n -- i.src_item_id as kit_item_id ,\r\n                    src_selling_price ,\r\n                    SUM(src_units_shipped) AS src_units_shipped\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\nLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t\t/*left join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\r\n                WHERE\r\n                    src_order_type='I'\r\n                AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\r\n                AND --ISNULL(dim_order_method_id,0)<>5\r\nISNULL(src_channel_id,'0')<>'R'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                              A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                        A.dim_src_kit_item_id=B.dim_item_id )\r\n                AND src_order_number NOT IN\r\n                                             (\r\n                                             SELECT DISTINCT\r\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                             FROM\r\n                                                 {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                             WHERE\r\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\r\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\r\n                AND src_Order_Status='IN'\r\n                GROUP BY\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    fact_cpg_sales_detail.dim_order_method_id,\r\n                    src_order_type ,\r\n                    Ship_Date_id,\r\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\r\n                    src_selling_price) AS A\r\n        LEFT OUTER JOIN\r\n           (\r\n        SELECT\r\n         k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n    --src_kit_id,\r\n    --src_component_item_number,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                  dim_src_kit_item_id,\r\n    src_kit_id,\r\n    a.dim_item_id,\r\n    --src_component_item_number, \r\n    --,b.dim_business_unit_id\r\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n    (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                  a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n              k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n           k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n   A.dim_item_id=B.dim_src_kit_item_id\r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            dim_order_method_id,\r\n            src_order_type,\r\n            DATE,\r\n            B.dim_item_id,\r\n            A.dim_item_id) Tab5\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\r\n\t\tUNION ALL\r\n/*Retrieving Return sales for Kit Items*/      \r\n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom (\r\n\r\nSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    CASE src_order_type\r\n        WHEN 'C'\r\n        THEN 'I'\r\n        ELSE 'I'\r\n    END AS src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id \r\n   ,A.dim_item_id AS dim_src_kit_item_id---kit\r\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    0                                              AS src_units_shipped ,\r\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                      AS \"Demand_Cogs$\" ,\r\n    0                                                                      AS \"Shipped_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    0                                                                          AS \"Shipped_Sales$\" ,\r\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\r\n    \"Return$\" ,\r\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id AS dim_order_method_id ,\r\n            CASE src_order_type\r\n                WHEN 'C'\r\n                THEN 'I'\r\n                ELSE 'I'\r\n            END           AS src_order_type ,\r\n            order_date_id AS DATE ,\r\n            dim_item_id ,--kit_item_id,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            (\r\n                SELECT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    CASE src_order_type\r\n                        WHEN 'C'\r\n                        THEN 'I'\r\n                        ELSE 'I'\r\n                    END AS src_order_type ,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n--i.src_item_id as kit_item_id ,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\nLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t\t/*left join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\r\n\r\n                WHERE\r\n                    --dim_order_method_id=5\r\nISNULL(src_channel_id,'0')='R'\r\n                AND src_Order_Status='IN'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                            A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                           A.dim_src_kit_item_id=B.dim_item_id )\r\n                AND src_order_number NOT IN\r\n                                             (\r\n                                             SELECT DISTINCT\r\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                             FROM\r\n                                                {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                             WHERE\r\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\r\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\r\n                GROUP BY\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    src_order_type,\r\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id ) AS A\r\n        LEFT OUTER JOIN\r\n            (\r\n                SELECT\r\n                    B.src_order_number    AS src_order_number,\r\n                    A.dim_order_method_id AS dim_order_method_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\r\n                INNER JOIN\r\n                    (\r\n                        SELECT\r\n                            src_order_number,\r\n                            src_original_ref_order_number\r\n                        FROM\r\n                            {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                        WHERE\r\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\r\n                ON\r\n                    A.src_order_number=B.src_order_number ) B\r\n        ON\r\n            A.src_order_number=B.src_order_number\r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            dim_item_id,--kit_item_id,\r\n            src_selling_price ) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n             k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n    --src_kit_id,\r\n    --src_component_item_number,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT    dim_src_kit_item_id,\r\n   a.dim_item_id,\r\n   \r\n                    src_required_quantity ,\r\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\r\n                FROM\r\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id\r\n                GROUP BY\r\n                    dim_src_kit_item_id,\r\n   a.dim_item_id,\r\n  \r\n                    src_required_quantity) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n              k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n                k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n   A.dim_item_id=B.dim_src_kit_item_id \r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab_Kit_Items\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\r\n)),\r\n--********************************** Query 2*************************************\r\n#fact_aggregated_kit_sales_temp2 as \r\n(select * from(\r\n--Kit into Components for Gratis Orders--\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id\r\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \r\n  ,Date as Date_Key\r\n  ,dim_item_id\r\n  ,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Sum(src_units_ordered) as src_units_ordered\r\n  ,sum(src_units_shipped) as src_units_shipped\r\n  ,sum(Units_Returned) as Units_Returned\r\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  , sum(\"Return$\") as \"Return$\"\r\n  , sum(\"Net$\") as \"Net$\"\r\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\r\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\r\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\r\n,current_date as create_timestamp\r\n\t,'ETL' as created_by\r\n\t,current_date as update_timestamp\r\n\t,'ETL' as updated_by\r\nFROM\r\n/*Retrieving Demand sales for KIT Items*/\r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom ( \r\n\t\tSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id ,--component\r\n    A.dim_item_id AS dim_src_kit_item_id,--kit\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n    src_selling_price --Has to Remove\r\n    ,\r\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\r\n    0                                                                   AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\r\n    0                                                                           AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    0                                                                               AS \"Net_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\r\n         \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    0                                                                             AS \"Net_Retail$\" ,\r\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Demand_Sales$\" ,\r\n    0 AS \"Shipped_Sales$\" ,\r\n    0 AS \"Return$\" ,\r\n    0 AS \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n           fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            order_date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,\r\n-- i.src_item_id as kit_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\nLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t/*\tleft join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\r\n        WHERE\r\n            src_order_type='I'\r\n        AND ---ISNULL(dim_order_method_id,0)<>5\r\nISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n            (\r\n                SELECT DISTINCT\r\n                   A.dim_src_kit_item_id\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                WHERE\r\n                    A.dim_src_kit_item_id=B.dim_item_id)\r\n        AND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n    --src_kit_id,\r\n    --src_component_item_number, \r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                   dim_src_kit_item_id,\r\n    src_kit_id,\r\n    a.dim_item_id,\r\n    --src_component_item_number, \r\n                    src_required_quantity ,\r\n                    src_component_percent_of_price AS src_component_percent_of_price\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n           k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n             k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n      A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab4\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id              \r\n\t\t  UNION all\r\n/*Retrieving Shipped sales for Kit Items*/    \r\n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom (SELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n   B.dim_item_id AS dim_item_id ,--component\r\n        A.dim_item_id AS dim_src_kit_item_id ,--kit\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                       AS \"Demand_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\r\n    \"Shipped_Retail$\" ,\r\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Shipped_Sales$\" ,\r\n    0                                                                                 AS \"Return$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            Ship_Date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,\r\n --i.src_item_id as kit_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_shipped) AS src_units_shipped\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\nLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t/*\tleft join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\r\n        WHERE\r\n            src_order_type='I'\r\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\r\n        AND --ISNULL(dim_order_method_id,0)<>5\r\nISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n            (\r\n                SELECT DISTINCT\r\n\t\t\t\tA.dim_src_kit_item_id\r\n                  --  B.dim_item_id\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                WHERE\r\n                   -- A.src_kit_id=B.src_item_id\r\nA.dim_src_kit_item_id=B.dim_item_id\t\t\t\t   )\r\n        AND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\r\n        AND src_Order_Status='IN'\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            Ship_Date_id,\r\n                    fact_cpg_sales_detail.dim_item_id--,i.src_item_id\r\n,\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n              k.dim_item_id,\r\n    dim_src_kit_item_id,                        \r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                       dim_src_kit_item_id,\r\n    \r\n    a.dim_item_id,\r\n    \r\n                    src_required_quantity ,\r\n                    src_component_percent_of_price AS src_component_percent_of_price\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n           k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n             dim_src_kit_item_id,\r\n    \r\n    k.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n   A.dim_item_id) Tab5\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\r\n\t\tUNION ALL\r\n/*Retrieving Return sales for Kit Items*/      \r\n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom (\r\nSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    CASE src_order_type\r\n        WHEN 'C'\r\n        THEN 'GR'\r\n        ELSE 'GR'\r\n    END AS src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id \r\n   ,A.dim_item_id AS dim_src_kit_item_id---kit\r\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    0                                              AS src_units_shipped ,\r\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                      AS \"Demand_Cogs$\" ,\r\n    0                                                                      AS \"Shipped_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    0                                                                          AS \"Shipped_Sales$\" ,\r\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\r\n    \"Return$\" ,\r\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id AS dim_order_method_id ,\r\n            CASE src_order_type\r\n                WHEN 'C'\r\n                THEN 'GR'\r\n                ELSE 'GR'\r\n            END           AS src_order_type ,\r\n            order_date_id AS DATE ,\r\n            dim_item_id , --kit_item_id,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            (\r\n                SELECT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    CASE src_order_type\r\n                        WHEN 'C'\r\n                        THEN 'GR'\r\n                        ELSE 'GR'\r\n                    END AS src_order_type ,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n--i.src_item_id as kit_item_id ,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\nLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t/*\tleft join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\r\n\r\n                WHERE\r\n                    --dim_order_method_id=5\r\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                                A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                              A.dim_src_kit_item_id=B.dim_item_id)\r\n                AND src_order_number IN\r\n                                         (\r\n                                         SELECT DISTINCT\r\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                         FROM\r\n                                             {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                         WHERE\r\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\r\n                GROUP BY\r\n                      fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    src_order_type,\r\n                 fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\r\n                    src_order_number,\r\n                      fact_cpg_sales_detail.src_unit_cost,\r\n                      fact_cpg_sales_detail.src_selling_price,\r\n                      fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id ) AS A\r\n        LEFT OUTER JOIN\r\n            (\r\n                SELECT\r\n                    B.src_order_number    AS src_order_number,\r\n                    A.dim_order_method_id AS dim_order_method_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\r\n                INNER JOIN\r\n                    (\r\n                        SELECT\r\n                            src_order_number,\r\n                            src_original_ref_order_number\r\n                        FROM\r\n                            {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                        WHERE\r\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\r\n                ON\r\n                    A.src_order_number=B.src_order_number ) B\r\n        ON\r\n            A.src_order_number=B.src_order_number\r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            dim_item_id,--kit_item_id,\r\n            src_selling_price ) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n             k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n  --  src_kit_id,\r\n  --  src_component_item_number,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT   \r\ndim_src_kit_item_id,\r\n    \r\n    a.dim_item_id,\r\n                    src_required_quantity ,\r\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\r\n                FROM\r\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                  a.dim_src_kit_item_id=b.dim_item_id\r\n                GROUP BY\r\n                    dim_src_kit_item_id,\r\n    \r\n    a.dim_item_id,\r\n                    src_required_quantity) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n            k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n               k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id \r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab_Kit_Items\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\r\n)),\r\n--********************************** Query 3*************************************\r\n#fact_aggregated_kit_sales_temp3 as \r\n(select * from(\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id\r\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \r\n  ,Date as Date_Key\r\n  ,dim_item_id\r\n ,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Sum(src_units_ordered) as src_units_ordered\r\n  ,sum(src_units_shipped) as src_units_shipped\r\n  ,sum(Units_Returned) as Units_Returned\r\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  , sum(\"Return$\") as \"Return$\"\r\n  , sum(\"Net$\") as \"Net$\"\r\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\r\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\r\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\r\n,current_date as create_timestamp\r\n\t,'ETL' as created_by\r\n\t,current_date as update_timestamp\r\n\t,'ETL' as updated_by\r\nFROM\r\n/*Retrieving Demand sales for KIT Items*/\r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom ( \r\n\t\tSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id ,--component\r\n    A.dim_item_id AS dim_src_kit_item_id,--kit\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n    src_selling_price --Has to Remove\r\n    ,\r\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\r\n    0                                                                   AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\r\n    0                                                                           AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    0                                                                               AS \"Net_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\r\n         \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    0                                                                             AS \"Net_Retail$\" ,\r\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Demand_Sales$\" ,\r\n    0 AS \"Shipped_Sales$\" ,\r\n    0 AS \"Return$\" ,\r\n    0 AS \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            order_date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,\r\n --i.src_item_id as kit_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n LEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t/*\tleft join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\r\n\r\n        WHERE\r\n            src_order_type='I'\r\n        AND --ISNULL(dim_order_method_id,0)<>5\r\nISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n            (\r\n                SELECT DISTINCT\r\n                    A.dim_src_kit_item_id\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                WHERE\r\n                  A.dim_src_kit_item_id=B.dim_item_id)\r\n        AND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_prepay_code))='F'\r\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n    --src_kit_id,\r\n    --src_component_item_number,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                     dim_src_kit_item_id,\r\n    src_kit_id,\r\n    a.dim_item_id,\r\n    --src_component_item_number,\r\n   \r\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n    (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                    a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n           k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n           k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n     A.dim_item_id) Tab4\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item_id              \r\n\t\t  UNION all\r\n/*Retrieving Shipped sales for Kit Items*/    \r\n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom (SELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n     B.dim_item_id AS dim_item_id ,--component\r\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                       AS \"Demand_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\r\n    \"Shipped_Retail$\" ,\r\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Shipped_Sales$\" ,\r\n    0                                                                                 AS \"Return$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            Ship_Date_id AS DATE ,\r\n                    fact_cpg_sales_detail.dim_item_id ,\r\n  --i.src_item_id as kit_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_shipped) AS src_units_shipped\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\nLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t/*\tleft join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\r\n\r\n        WHERE\r\n            src_order_type='I'\r\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\r\n        AND --ISNULL(dim_order_method_id,0)<>5\r\nISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                            A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                       A.dim_src_kit_item_id=B.dim_item_id )\r\n        AND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_prepay_code))='F'\r\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\r\n        AND src_order_Status='IN'\r\n        GROUP BY\r\n          fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    fact_cpg_sales_detail.dim_order_method_id,\r\n                    src_order_type ,\r\n                    Ship_Date_id,\r\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\r\n                    src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n    --src_kit_id,\r\n    --src_component_item_number,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                  SELECT\r\n                    dim_src_kit_item_id,\r\n    src_kit_id,\r\n    a.dim_item_id,\r\n    --src_component_item_number,\r\n    --,b.dim_business_unit_id\r\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n    (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                  a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n             k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n             k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id \r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            dim_order_method_id,\r\n            src_order_type,\r\n            DATE,\r\n            B.dim_item_id,\r\n            A.dim_item_id) Tab5\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\r\n\t\tUNION ALL\r\n/*Retrieving Return sales for Kit Items*/      \r\n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \r\n\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom (\r\nSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    CASE src_order_type\r\n        WHEN 'C'\r\n        THEN 'F'\r\n        ELSE 'F'\r\n    END AS src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id \r\n    ,A.dim_item_id AS dim_src_kit_item_id---kit\r\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    0                                              AS src_units_shipped ,\r\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                      AS \"Demand_Cogs$\" ,\r\n    0                                                                      AS \"Shipped_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    0                                                                          AS \"Shipped_Sales$\" ,\r\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\r\n    \"Return$\" ,\r\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id AS dim_order_method_id ,\r\n            CASE src_order_type\r\n                WHEN 'C'\r\n                THEN 'F'\r\n                ELSE 'F'\r\n            END           AS src_order_type ,\r\n            order_date_id AS DATE ,\r\n              dim_item_id ,--kit_item_id,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            (\r\n                SELECT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    CASE src_order_type\r\n                        WHEN 'C'\r\n                        THEN 'F'\r\n                        ELSE 'F'\r\n                    END AS src_order_type ,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n--i.src_item_id as kit_item_id ,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\nLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n\t\t/*left join \r\n\t\t\tfds_cpg.dim_cpg_item i \r\n\t\ton \r\n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\r\n*/\r\n                WHERE\r\n                    --dim_order_method_id=5\r\n                ISNULL(src_channel_id,'0')='R'\r\nAND src_Order_Status='IN'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                                A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                             A.dim_src_kit_item_id=B.dim_item_id)\r\n                AND src_order_number IN\r\n                                         (\r\n                                         SELECT DISTINCT\r\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                         FROM\r\n                                             {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                         WHERE\r\n                                             ltrim(RTRIM(src_prepay_code))='F'\r\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\r\n                                         )\r\n                GROUP BY\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    src_order_type,\r\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id  ) AS A\r\n        LEFT OUTER JOIN\r\n            (\r\n                SELECT\r\n                    B.src_order_number    AS src_order_number,\r\n                    A.dim_order_method_id AS dim_order_method_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\r\n                INNER JOIN\r\n                    (\r\n                        SELECT\r\n                            src_order_number,\r\n                            src_original_ref_order_number\r\n                        FROM\r\n                            fds_cpg.fact_cpg_sales_header\r\n                        WHERE\r\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\r\n                ON\r\n                    A.src_order_number=B.src_order_number ) B\r\n        ON\r\n            A.src_order_number=B.src_order_number\r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            dim_item_id,--kit_item_id,\r\n            src_selling_price ) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n              k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n    --src_kit_id,\r\n    --src_component_item_number,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT  dim_src_kit_item_id,\r\n    a.dim_item_id,\r\n                    src_required_quantity ,\r\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\r\n                FROM\r\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\r\nINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id\r\n                GROUP BY\r\n                    dim_src_kit_item_id,\r\n    a.dim_item_id,src_required_quantity\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n          k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n                 k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n   A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab_Kit_Items\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\r\n)),\r\n#fact_aggregate_kit_sales as \r\n(\r\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\r\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\r\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\r\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\r\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\r\nnet_selling_margin$ net_selling_margin_$\r\nfrom\r\n(\r\n\tselect * from #fact_aggregated_kit_sales_temp1\r\n\tunion all\r\n\tselect * from #fact_aggregated_kit_sales_temp2\r\n\tunion all\r\n\tselect * from #fact_aggregated_kit_sales_temp3\r\n))\r\n--select * from fact_aggregate_kit_sales\r\n\r\nselect dim_business_unit_id,\r\ndim_order_method_id,\r\ndate_key,\r\nsrc_order_type,\r\ndim_src_kit_item_id as dim_kit_item_id,\r\ndim_item_id,\r\nsrc_unit_cost,\r\nsrc_current_retail_price,\r\nsrc_units_ordered,\r\nsrc_units_shipped,\r\nunits_returned,\r\nnet_units_sold,\r\ndemand_cogs_$,\r\nshipped_cogs_$,\r\nreturned_cogs_$,\r\nnet_cogs_$,\r\ndemand_retail_$,\r\nshipped_retail_$,\r\nnet_retail_$,\r\ndemand_sales_$,\r\nshipped_sales_$,\r\nreturns_$,\r\nnet_sales_$,\r\ndemand_selling_margin_$,\r\nshipped_selling_margin_$,\r\nnet_selling_margin_$,\r\n0 as other_amount,\r\ncurrent_timestamp as create_timestamp,\r\n'ETL' as created_by,\r\nnull as update_timestamp,\r\nnull as updated_by,\r\n0 as kit_units_sold,\r\n(src_unit_cost/conversion_rate_to_local) as unit_cost_local,\r\n(src_current_retail_price/conversion_rate_to_local) as current_retail_price_local,\r\n(demand_cogs_$/conversion_rate_to_local) as demand_cogs_local,\r\n(shipped_cogs_$/conversion_rate_to_local) as shipped_cogs_local,\r\n(returned_cogs_$/conversion_rate_to_local) as returned_cogs_local,\r\n(net_cogs_$/conversion_rate_to_local) as net_cogs_local,\r\n(demand_retail_$/conversion_rate_to_local) as demand_retail_local,\r\n(shipped_retail_$/conversion_rate_to_local) as shipped_retail_local,\r\n(net_retail_$/conversion_rate_to_local) as net_retail_local,\r\n(demand_sales_$/conversion_rate_to_local) as demand_sales_local,\r\n(shipped_sales_$/conversion_rate_to_local) as shipped_sales_local,\r\n(returns_$/conversion_rate_to_local) as returns_local,\r\n(net_sales_$/conversion_rate_to_local) as net_sales_local,\r\n(demand_selling_margin_$/conversion_rate_to_local) as demand_selling_margin_local,\r\n(shipped_selling_margin_$/conversion_rate_to_local) as shipped_selling_margin_local,\r\n(net_selling_margin_$/conversion_rate_to_local) as net_selling_margin_local,\r\n0 as other_amount_local,\r\nsrc_currency_code_from,\r\ndim_shop_site_id,\r\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \r\ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\r\nfrom \r\n(\r\nselect src.*, \r\ncoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\r\nfrom #fact_aggregate_kit_sales src\r\nleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\r\non cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\r\n)", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate", "aggr_cpg_daily_kit_sales"], "unique_id": "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate/aggr_cpg_daily_kit_sales.sql", "original_file_path": "models/fds_cpg/aggregate/aggr_cpg_daily_kit_sales.sql", "name": "aggr_cpg_daily_kit_sales", "resource_type": "model", "alias": "aggr_cpg_daily_kit_sales", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cpg.aggr_cpg_daily_kit_sales", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"], "analytics_engineering_marts": null}, "tags": ["Phase 5B"], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_kit_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Kit Sales Table consist of Sales details of WWE Kit products on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 08:00 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_cpg_fact_cpg_sales_detail_radial_abac ; 30230,            t_di_cpg_fact_cpg_sales_detail_cb_abac ; 30231, t_di_cpg_fact_cpg_sales_detail_amazon_abac ; 30232,      t_di_cpg_fact_cpg_sales_header_radial_abac ; 30234, t_di_cpg_fact_cpg_sales_header_cb_abac ; 30235 &     t_di_cpg_fact_cpg_sales_header_amazon_abac ; 30236\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "Order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "Type of Order", "meta": {}, "data_type": null, "tags": []}, "dim_kit_item_id": {"name": "dim_kit_item_id", "description": "dim_kit_item_id referencing from dim_cpg_kit_item table", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id of dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "Cost per Unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "Current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "kit_units_sold": {"name": "kit_units_sold", "description": "Number of Kit Units Sold", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Returned COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id of dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate/aggr_cpg_daily_kit_sales.sql", "compiled": true, "compiled_sql": "\nwith #fact_aggregated_kit_sales_temp1 as \n(select * from (\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n             SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,--kit item\n            -- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n                                     OR  ltrim(RTRIM(src_prepay_code))='F')\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n     c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n   -- src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n   B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity)                      AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n -- i.src_item_id as kit_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n                AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\n\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\nISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT    dim_src_kit_item_id,\n   a.dim_item_id,\n   \n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n   a.dim_item_id,\n  \n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 2*************************************\n#fact_aggregated_kit_sales_temp2 as \n(select * from(\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n           fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n-- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND ---ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number, \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n   B.dim_item_id AS dim_item_id ,--component\n        A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n\t\t\t\tA.dim_src_kit_item_id\n                  --  B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                   -- A.src_kit_id=B.src_item_id\nA.dim_src_kit_item_id=B.dim_item_id\t\t\t\t   )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id--,i.src_item_id\n,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_item_id,\n    dim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                       dim_src_kit_item_id,\n    \n    a.dim_item_id,\n    \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             dim_src_kit_item_id,\n    \n    k.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id , --kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                              A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                      fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                 fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                      fact_cpg_sales_detail.src_unit_cost,\n                      fact_cpg_sales_detail.src_selling_price,\n                      fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n  --  src_kit_id,\n  --  src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \ndim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 3*************************************\n#fact_aggregated_kit_sales_temp3 as \n(select * from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                  A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                     dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n   \n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n     B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n  --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                       A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n          fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\n*/\n                WHERE\n                    --dim_order_method_id=5\n                ISNULL(src_channel_id,'0')='R'\nAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            fds_cpg.fact_cpg_sales_header\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n#fact_aggregate_kit_sales as \n(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\nnet_selling_margin$ net_selling_margin_$\nfrom\n(\n\tselect * from #fact_aggregated_kit_sales_temp1\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp2\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp3\n))\n--select * from fact_aggregate_kit_sales\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_src_kit_item_id as dim_kit_item_id,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\n0 as other_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n0 as kit_units_sold,\n(src_unit_cost/conversion_rate_to_local) as unit_cost_local,\n(src_current_retail_price/conversion_rate_to_local) as current_retail_price_local,\n(demand_cogs_$/conversion_rate_to_local) as demand_cogs_local,\n(shipped_cogs_$/conversion_rate_to_local) as shipped_cogs_local,\n(returned_cogs_$/conversion_rate_to_local) as returned_cogs_local,\n(net_cogs_$/conversion_rate_to_local) as net_cogs_local,\n(demand_retail_$/conversion_rate_to_local) as demand_retail_local,\n(shipped_retail_$/conversion_rate_to_local) as shipped_retail_local,\n(net_retail_$/conversion_rate_to_local) as net_retail_local,\n(demand_sales_$/conversion_rate_to_local) as demand_sales_local,\n(shipped_sales_$/conversion_rate_to_local) as shipped_sales_local,\n(returns_$/conversion_rate_to_local) as returns_local,\n(net_sales_$/conversion_rate_to_local) as net_sales_local,\n(demand_selling_margin_$/conversion_rate_to_local) as demand_selling_margin_local,\n(shipped_selling_margin_$/conversion_rate_to_local) as shipped_selling_margin_local,\n(net_selling_margin_$/conversion_rate_to_local) as net_selling_margin_local,\n0 as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\nselect src.*, \ncoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\nfrom #fact_aggregate_kit_sales src\nleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\non cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith #fact_aggregated_kit_sales_temp1 as \n(select * from (\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n             SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,--kit item\n            -- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n                                     OR  ltrim(RTRIM(src_prepay_code))='F')\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n     c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n   -- src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n   B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity)                      AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n -- i.src_item_id as kit_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n                AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\n\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\nISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n                AND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT    dim_src_kit_item_id,\n   a.dim_item_id,\n   \n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n   a.dim_item_id,\n  \n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 2*************************************\n#fact_aggregated_kit_sales_temp2 as \n(select * from(\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n           fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n-- i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND ---ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number, \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n   B.dim_item_id AS dim_item_id ,--component\n        A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n\t\t\t\tA.dim_src_kit_item_id\n                  --  B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                   -- A.src_kit_id=B.src_item_id\nA.dim_src_kit_item_id=B.dim_item_id\t\t\t\t   )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id--,i.src_item_id\n,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_item_id,\n    dim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                       dim_src_kit_item_id,\n    \n    a.dim_item_id,\n    \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n             dim_src_kit_item_id,\n    \n    k.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id , --kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n                WHERE\n                    --dim_order_method_id=5\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                              A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                      fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                 fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                      fact_cpg_sales_detail.src_unit_cost,\n                      fact_cpg_sales_detail.src_selling_price,\n                      fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n    c.dim_item_id,\n  --  src_kit_id,\n  --  src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \ndim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    \n    a.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n--********************************** Query 3*************************************\n#fact_aggregated_kit_sales_temp3 as \n(select * from(\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  , sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  , sum(\"Return$\") as \"Return$\"\n  , sum(\"Net$\") as \"Net$\"\n  , sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  , sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\n,current_date as create_timestamp\n\t,'ETL' as created_by\n\t,current_date as update_timestamp\n\t,'ETL' as updated_by\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom ( \n\t\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,--component\n    A.dim_item_id AS dim_src_kit_item_id,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n    src_selling_price --Has to Remove\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n LEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\t*/\n\n        WHERE\n            src_order_type='I'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                  A.dim_src_kit_item_id=B.dim_item_id)\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                     dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n   \n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n     A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item_id              \n\t\t  UNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\t\t SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n     B.dim_item_id AS dim_item_id ,--component\n              A.dim_item_id AS dim_src_kit_item_id ,--kit\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n  --i.src_item_id as kit_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t/*\tleft join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id*/\n\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL and Ship_Date_id <>'19000101'\n        AND --ISNULL(dim_order_method_id,0)<>5\nISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                       A.dim_src_kit_item_id=B.dim_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n          fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n    src_kit_id,\n    a.dim_item_id,\n    --src_component_item_number,\n    --,b.dim_business_unit_id\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\t\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\t\t  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n\t\t ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n   ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id---kit\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/(B.src_required_quantity)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,--kit_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n--i.src_item_id as kit_item_id ,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\nLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n\t\t/*left join \n\t\t\tfds_cpg.dim_cpg_item i \n\t\ton \n\t\t\ti.dim_item_id=fact_cpg_sales_detail.dim_item_id\n*/\n                WHERE\n                    --dim_order_method_id=5\n                ISNULL(src_channel_id,'0')='R'\nAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n                AND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,--i.src_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            fds_cpg.fact_cpg_sales_header\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,--kit_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n    --src_kit_id,\n    --src_component_item_number,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n    a.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\nINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n    a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)),\n#fact_aggregate_kit_sales as \n(\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\nnet_selling_margin$ net_selling_margin_$\nfrom\n(\n\tselect * from #fact_aggregated_kit_sales_temp1\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp2\n\tunion all\n\tselect * from #fact_aggregated_kit_sales_temp3\n))\n--select * from fact_aggregate_kit_sales\n\nselect dim_business_unit_id,\ndim_order_method_id,\ndate_key,\nsrc_order_type,\ndim_src_kit_item_id as dim_kit_item_id,\ndim_item_id,\nsrc_unit_cost,\nsrc_current_retail_price,\nsrc_units_ordered,\nsrc_units_shipped,\nunits_returned,\nnet_units_sold,\ndemand_cogs_$,\nshipped_cogs_$,\nreturned_cogs_$,\nnet_cogs_$,\ndemand_retail_$,\nshipped_retail_$,\nnet_retail_$,\ndemand_sales_$,\nshipped_sales_$,\nreturns_$,\nnet_sales_$,\ndemand_selling_margin_$,\nshipped_selling_margin_$,\nnet_selling_margin_$,\n0 as other_amount,\ncurrent_timestamp as create_timestamp,\n'ETL' as created_by,\nnull as update_timestamp,\nnull as updated_by,\n0 as kit_units_sold,\n(src_unit_cost/conversion_rate_to_local) as unit_cost_local,\n(src_current_retail_price/conversion_rate_to_local) as current_retail_price_local,\n(demand_cogs_$/conversion_rate_to_local) as demand_cogs_local,\n(shipped_cogs_$/conversion_rate_to_local) as shipped_cogs_local,\n(returned_cogs_$/conversion_rate_to_local) as returned_cogs_local,\n(net_cogs_$/conversion_rate_to_local) as net_cogs_local,\n(demand_retail_$/conversion_rate_to_local) as demand_retail_local,\n(shipped_retail_$/conversion_rate_to_local) as shipped_retail_local,\n(net_retail_$/conversion_rate_to_local) as net_retail_local,\n(demand_sales_$/conversion_rate_to_local) as demand_sales_local,\n(shipped_sales_$/conversion_rate_to_local) as shipped_sales_local,\n(returns_$/conversion_rate_to_local) as returns_local,\n(net_sales_$/conversion_rate_to_local) as net_sales_local,\n(demand_selling_margin_$/conversion_rate_to_local) as demand_selling_margin_local,\n(shipped_selling_margin_$/conversion_rate_to_local) as shipped_selling_margin_local,\n(net_selling_margin_$/conversion_rate_to_local) as net_selling_margin_local,\n0 as other_amount_local,\nsrc_currency_code_from,\ndim_shop_site_id,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_FDS_CPG' as etl_batch_id, 'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom \n(\nselect src.*, \ncoalesce((case when src.src_currency_code_from='USD' then 1 else cc.currency_conversion_rate_spot_rate end),0) as conversion_rate_to_local\nfrom #fact_aggregate_kit_sales src\nleft outer join (select * from dt_stage.prestg_cpg_currency_exchange_rate ) cc\non cast(cast(src.date_key as varchar(20)) as date) =cc.as_on_date and src.src_currency_code_from=cc.currency_code_from and cc.currency_code_to='USD'\n)"}, "model.analytics_engineering_marts.intm_cpg_sales_others": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type   \r\n      ,Date_Key  \r\n      ,dim_item_id \r\n      ,sum(Other_Amount) as Other_Amount \r\n      ,0 as src_unit_cost  \r\n      ,0 as src_current_retail_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as Net_Units_Sold  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_sales_$\"  \r\n      ,0 as \"Demand_Selling_Margin$\"  \r\n      ,0 as \"Shipped_Selling_Margin$\"  \r\n      ,0 as \"Net_Selling_Margin$\" \r\nfrom \r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n\t ,src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\nFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\tleft join \r\n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \r\n\t\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\nUnion All  \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  \r\n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} \r\n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\nFROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\n\tleft join \r\n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \r\nUnion All  \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_item')}} where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\nFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n    left join \r\n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and (isnull(src_prepay_code,'A')='F' \r\n\t\t\tand isnull(src_order_origin_code,'AA')<>'GR')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \r\nUnion All  \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n     ,src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id \r\n\t from {{source('fds_cpg','dim_cpg_item')}} \r\n\t where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_sales_tax) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\nFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\tleft join \r\n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere  order_date_id>=0 and src_channel_id='R'   \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n    ) Tab_Tax  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \r\nUnion All  \r\n---Spceial Charges-----  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type   \r\n      ,Date_Key  \r\n      ,dim_item_id  \r\n      ,sum(Other_Amount) as Other_Amount  \r\n      ,0 as src_unit_cost  \r\n      ,0 as src_current_retail_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as Net_Units_Sold  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_sales_$\"  \r\n      ,0 as \"Demand_Selling_Margin$\"  \r\n      ,0 as \"Shipped_Selling_Margin$\"  \r\n      ,0 as \"Net_Selling_Margin$\" \r\nfrom       \r\n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n     ,src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id \r\n\t from {{source('fds_cpg','dim_cpg_item')}} \r\n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n     ,SUM(src_special_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\tleft join \r\n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \r\n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\nUnion All  \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \r\n     ,order_date_id as Date_Key  \r\n    ,(select dim_item_id \r\n\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\twhere src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n    ,SUM(src_special_charges) Other_Amount  \r\n    ,0 as SPECIALCHG  \r\nFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\tleft join \r\n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \r\nUnion All  \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id \r\n\t from {{source('fds_cpg','dim_cpg_item')}} \r\n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n    ,SUM(src_special_charges) Other_Amount  \r\n    ,0 as SPECIALCHG  \r\nFROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\n\tleft join \r\n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \r\n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \r\nUnion All  \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n     ,src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id \r\n\t from {{source('fds_cpg','dim_cpg_item')}} \r\n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \r\n    ,SUM(src_special_charges) Other_Amount  \r\n    ,0 as SPECIALCHG  \r\nFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\tleft join \r\n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\nwhere order_date_id>=0 and src_channel_id='R'   \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \r\nUnion All  \r\n---- Freight ----------  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type   \r\n      ,Date_Key  \r\n      ,dim_item_id  \r\n      ,sum(Other_Amount) as Other_Amount\r\n      ,0 as src_unit_cost  \r\n      ,0 as src_current_retail_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as Net_Units_Sold  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_sales_$\"  \r\n      ,0 as \"Demand_Selling_Margin$\"  \r\n      ,0 as \"Shipped_Selling_Margin$\"  \r\n      ,0 as \"Net_Selling_Margin$\"   \r\nfrom       \r\n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n     ,src_order_type         \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id from {{source('fds_cpg','dim_cpg_item')}} \r\n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\tleft join \r\n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \r\n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \r\n\tUnion All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \r\n    ,order_date_id as Date_Key  \r\n    ,(select dim_item_id \r\n\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n    ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n    ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\tleft join \r\n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \r\n\tUnion All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \r\n    ,order_date_id as Date_Key  \r\n    ,(select dim_item_id \r\n\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n    ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n    ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\tleft join \r\n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'   \r\n\t\tand (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \r\n   Union All  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n     ,dim_order_method_id  \r\n\t ,src_order_type  \r\n     ,order_date_id as Date_Key  \r\n     ,(select dim_item_id \r\n\t from {{source('fds_cpg','dim_cpg_item')}} \r\n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \r\n     ,Sum(src_carrier_shipping_charges) Other_Amount  \r\n     ,0 as SPECIALCHG  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\n\t\tleft join \r\n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \r\n\t\tfrom {{source('fds_cpg','dim_cpg_order_method')}}) dim_cpg_order_method\r\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \r\n\twhere order_date_id>=0 and src_channel_id='R'   \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \r\ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_sales_others"], "unique_id": "model.analytics_engineering_marts.intm_cpg_sales_others", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_sales_others.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_sales_others.sql", "name": "intm_cpg_sales_others", "resource_type": "model", "alias": "intm_cpg_sales_others", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_sales_others.sql", "compiled": true, "compiled_sql": "\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id \n      ,sum(Other_Amount) as Other_Amount \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and (isnull(src_prepay_code,'A')='F' \n\t\t\tand isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n     ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'   \n\t\tand (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id \n      ,sum(Other_Amount) as Other_Amount \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and (isnull(src_prepay_code,'A')='F' \n\t\t\tand isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n     ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'   \n\t\tand (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id"}, "model.analytics_engineering_marts.intm_cpg_sales_gratis": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type  \r\n      ,Date as Date_Key  \r\n      ,dim_item_id  \r\n      ,0 as Other_Amount\r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(Net_Units_Sold) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n      from   \r\n  (       \r\n--sub1 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \r\n      ,Date  \r\n      ,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\nFROM  \r\n(  \r\n/*Retrieving Demand sales for Gratis Items*/  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,fact_cpg_sales_detail.dim_order_method_id  \r\n      ,src_order_type,order_date_id as Date  \r\n      ,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_Sales_$\"  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \r\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \r\n           dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}}\r\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n           src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \r\n           dim_item_id not in\r\n\t\t\t\t\t\t(select distinct B.dim_item_id  from \r\n\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  on A.src_kit_id=B.src_item_id\r\n\t\t\t\t\t\t) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\r\n           and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')  \r\n   group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \r\n    UNION all  \r\n/*Retrieving Shipped sales for Gratis Items*/           \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,fact_cpg_sales_detail.dim_order_method_id  \r\n      ,src_order_type,ship_date_id as Date  \r\n      ,dim_item_id\r\n\t  ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,0 as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n\tFROM {{source('fds_cpg','fact_cpg_sales_detail')}}  \r\n      left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\r\n    where (order_date_id>=0 or ship_date_id>=0) and   \r\n       dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \r\n       dim_item_id not in\r\n\t\t\t\t(select distinct B.dim_item_id  from \r\n\t\t\t\t\t(select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  on A.src_kit_id=B.src_item_id\r\n\t\t\t\t\t) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\t\t\twhere A.kit_id=B.dim_item_id )\r\n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR')  \r\n        and src_order_status='IN'  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n    UNION ALL  \r\n/*Retrieving Return sales for Gratis Items*/             \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \r\n      ,Date  \r\n      ,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,b.dim_order_method_id as dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \r\n      ,order_date_id as Date  \r\n      ,dim_item_id                      \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,sum(src_units_ordered) as Units_Returned  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n\t\tFrom  \r\n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \r\n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \r\n            dim_item_id,  \r\n            src_order_number,  \r\n            src_unit_cost,  \r\n            src_selling_price,  \r\n            src_current_retail_price,  \r\n            src_units_ordered,  \r\n            order_date_id    \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}} \r\n   left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n   on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \r\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \r\n    dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n   src_channel_id='R' and src_order_status='IN'  \r\n   and dim_item_id not in\r\n\t\t(select distinct B.dim_item_id  from \r\n\t\t\t(select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  on A.src_kit_id=B.src_item_id\r\n\t\t\t) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\twhere A.kit_id=B.dim_item_id ) \r\n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')\r\n\t) as A      \r\n\t\tleft outer join  \r\n\t\t(select B.src_order_number as src_order_number,A.dim_order_method_id as dim_order_method_id   \r\n        from {{source('fds_cpg','fact_cpg_sales_header')}} A  \r\n\t\t\tinner join                         \r\n            (select src_order_number,src_original_ref_order_number \r\n\t\t\t\tfrom {{source('fds_cpg','fact_cpg_sales_header')}}  \r\n\t\t\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\r\n            where src_channel_id='R' ) B                                                              \r\n    on A.src_order_number=B.src_order_number   ) B  \r\n    on  A.src_order_number=B.src_order_number  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n--sub1 select end  \r\n--Kit into Components---  \r\nUnion All  \r\n--sub2 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id    \r\n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \r\n      ,Date    \r\n      ,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Sum(src_units_ordered) as src_units_ordered    \r\n      ,sum(src_units_shipped) as src_units_shipped    \r\n      ,sum(Units_Returned) as Units_Returned    \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \r\nFROM    \r\n/*Retrieving Demand sales for KIT Items*/    \r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(src_selling_price) as src_selling_price    \r\n      ,sum(src_units_ordered) as src_units_ordered    \r\n      ,SUM(src_units_shipped) as src_units_shipped    \r\n      ,SUM(Units_Returned) as Units_Returned    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n      ,src_order_type,order_date_id as Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \r\n      ,sum(src_kit_units_ordered ) as src_units_ordered    \r\n      ,0 as src_units_shipped    \r\n      ,0 as Units_Returned    \r\n      ,sum(src_required_quantity) as src_required_quantity    \r\n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,0 as \"Net_Cogs$\"    \r\n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,0 as \"Net_Retail$\"    \r\n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,0 as \"Net_Sales_$\"    \r\n        FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}   \r\n                left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\r\n        where (order_date_id>=0 or ship_date_id>=0) and     \r\n              src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \r\n              src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')     \r\n              and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \r\n\t\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}}    \r\n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \r\n    UNION all    \r\n/*Retrieving Shipped sales for Kit Items*/        \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(src_selling_price) as src_selling_price    \r\n      ,sum(src_units_ordered) as src_units_ordered    \r\n      ,SUM(src_units_shipped) as src_units_shipped    \r\n      ,SUM(Units_Returned) as Units_Returned    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n      ,src_order_type,ship_date_id as Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \r\n      ,0 as src_units_ordered    \r\n      ,sum(src_kit_units_shipped ) as src_units_shipped    \r\n      ,0 as Units_Returned    \r\n      ,sum(src_required_quantity) as src_required_quantity    \r\n      ,0 as \"Demand_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n      ,0 as \"Demand_Sales$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n        FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}\r\n\t\t\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\r\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \r\n        dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n        src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \r\n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t  FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \r\n        and src_order_status='IN'     \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \r\n    UNION ALL    \r\n/*Retrieving Return sales for Kit Items*/          \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \r\n      ,Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(src_selling_price) as src_selling_price    \r\n      ,sum(src_units_ordered) as src_units_ordered    \r\n      ,SUM(src_units_shipped) as src_units_shipped    \r\n      ,SUM(Units_Returned) as Units_Returned    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \r\n      ,order_date_id as Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \r\n      ,0 as src_units_ordered    \r\n      ,0 as src_units_shipped    \r\n      ,sum(src_kit_units_ordered ) as Units_Returned    \r\n      ,sum(src_required_quantity) as src_required_quantity    \r\n      ,0 as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n      ,0 as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \r\n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n        FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}  \r\n\t\t     left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \r\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \r\n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \r\n\t\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_item')}}\r\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n\t\t\t\tsrc_channel_id='R' and src_order_status='IN'     \r\n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\t\t  FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \r\n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \r\n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \r\n            order_date_id) Tab_Kit_Items    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_sales_gratis"], "unique_id": "model.analytics_engineering_marts.intm_cpg_sales_gratis", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_sales_gratis.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_sales_gratis.sql", "name": "intm_cpg_sales_gratis", "resource_type": "model", "alias": "intm_cpg_sales_gratis", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_sales_gratis.sql", "compiled": true, "compiled_sql": "\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n           dim_item_id not in\n\t\t\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n           and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')  \n   group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date  \n      ,dim_item_id\n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n      left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n    where (order_date_id>=0 or ship_date_id>=0) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\twhere A.kit_id=B.dim_item_id )\n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR')  \n        and src_order_status='IN'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n      ,order_date_id as Date  \n      ,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n   on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n\t\t(select distinct B.dim_item_id  from \n\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\twhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')\n\t) as A      \n\t\tleft outer join  \n\t\t(select B.src_order_number as src_order_number,A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n\t\t\tinner join                         \n            (select src_order_number,src_original_ref_order_number \n\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n            where src_channel_id='R' ) B                                                              \n    on A.src_order_number=B.src_order_number   ) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"   \n                left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n        where (order_date_id>=0 or ship_date_id>=0) and     \n              src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n              src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')     \n              and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"\n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n        src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n        and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN'     \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n            order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n           dim_item_id not in\n\t\t\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n           and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')  \n   group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date  \n      ,dim_item_id\n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n      left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n    where (order_date_id>=0 or ship_date_id>=0) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\twhere A.kit_id=B.dim_item_id )\n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR')  \n        and src_order_status='IN'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n      ,order_date_id as Date  \n      ,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n   on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n\t\t(select distinct B.dim_item_id  from \n\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\twhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')\n\t) as A      \n\t\tleft outer join  \n\t\t(select B.src_order_number as src_order_number,A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n\t\t\tinner join                         \n            (select src_order_number,src_original_ref_order_number \n\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n            where src_channel_id='R' ) B                                                              \n    on A.src_order_number=B.src_order_number   ) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"   \n                left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n        where (order_date_id>=0 or ship_date_id>=0) and     \n              src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n              src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')     \n              and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"\n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n        src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n        and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN'     \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n            order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id"}, "model.analytics_engineering_marts.intm_cpg_kit_sales_regular": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\n--Kit into Components for Regular Items---\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id\r\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \r\n  ,Date as  Date_Key\r\n  ,dim_item_id\r\n  ,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Sum(src_units_ordered) as src_units_ordered\r\n  ,sum(src_units_shipped) as src_units_shipped\r\n  ,sum(Units_Returned) as Units_Returned\r\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\r\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\r\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\r\nFROM\r\n--Demand--\r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Avg(src_selling_price) as src_selling_price\r\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n  ,SUM(src_units_shipped) as src_units_shipped\r\n  ,SUM(Units_Returned) as Units_Returned\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom ( \r\n\tSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id ,\r\n    A.dim_item_id AS dim_src_kit_item_id,\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n    src_selling_price\r\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\r\n    0                                                                       AS src_units_shipped ,\r\n    0                                                                       AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\r\n    0                                                                           AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    0                                                                               AS \"Net_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\r\n         \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    0                                                                             AS \"Net_Retail$\" ,\r\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Demand_Sales$\" ,\r\n    0 AS \"Shipped_Sales$\" ,\r\n    0 AS \"Return$\" ,\r\n    0 AS \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            order_date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\tLEFT JOIN\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n        WHERE\r\n            src_order_type='I'\r\n        AND ISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n                            (\r\n                            SELECT DISTINCT\r\n                                 A.dim_src_kit_item_id\r\n                            FROM\r\n                                {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                                {{source('fds_cpg','dim_cpg_item')}} B\r\n                            WHERE\r\n                                A.dim_src_kit_item_id=B.dim_item_id )\r\n\t\t\t\t\t\t\t\t\tAND src_order_number NOT IN\r\n                                     (\r\n                                     SELECT DISTINCT\r\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                     FROM\r\n                                         {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                     WHERE\r\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\r\n\t\t\t\t\t\t\t\t\t\tOR  ltrim(RTRIM(src_prepay_code))='F')\r\n\t\t\t\t\t\t\t\t\t\tAND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            fact_cpg_sales_detail.dim_item_id,\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n           k.dim_src_kit_item_id,\r\n\t\t   c.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                   dim_src_kit_item_id,\r\n\t\t\t\t   src_kit_id,\r\n\t\t\t\t   a.dim_item_id,\r\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n    (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n            k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n             k.dim_src_kit_item_id,\r\n    c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id \r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab4\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \r\n\tUNION all\r\n/*Retrieving Shipped sales for Kit Items*/    \r\n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,src_order_type      \r\n\t\t\t\t\t\t\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\t\tfrom (SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            dim_order_method_id ,\r\n            src_order_type ,\r\n            DATE ,\r\n            B.dim_item_id AS dim_item_id ,\r\n            A.dim_item_id AS dim_src_kit_item_id ,\r\n            AVG(src_unit_cost)            AS src_unit_cost ,\r\n            AVG(src_current_retail_price) AS src_current_retail_price ,\r\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0))\r\n                                                         AS src_selling_price ,\r\n            0                                            AS src_units_ordered ,\r\n            SUM(src_units_shipped*src_required_quantity) AS src_units_shipped ,\r\n            0                                                                    AS Units_Returned ,\r\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\r\n            0                                                                    AS \"Demand_Cogs$\" ,\r\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\r\n                                                                                   \"Shipped_Cogs$\" ,\r\n            0                                                                  AS \"Returned_Cogs$\" ,\r\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\r\n            ,\r\n            0                                                                  AS \"Demand_Retail$\" ,\r\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\r\n            \"Shipped_Retail$\" ,\r\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\r\n              AS \"Net_Retail$\" ,\r\n            0 AS \"Demand_Sales$\" ,\r\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\r\n            )) AS \"Shipped_Sales$\" ,\r\n            0  AS \"Return$\" ,\r\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\r\n            )) AS \"Net$\"\r\n        FROM\r\n            (\r\n                SELECT DISTINCT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    fact_cpg_sales_detail.dim_order_method_id ,\r\n                    src_order_type ,\r\n                    Ship_Date_id AS DATE ,\r\n                    fact_cpg_sales_detail.dim_item_id ,\r\n                    src_selling_price ,\r\n                    SUM(src_units_shipped) AS src_units_shipped\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\t\t\tLEFT JOIN\r\n\t\t\t\t\t{{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\t\tON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n                WHERE\r\n                    src_order_type='I'\r\n                AND Ship_Date_id IS NOT NULL\r\n                AND ISNULL(src_channel_id,'0')<>'R'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                              A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                        A.dim_src_kit_item_id=B.dim_item_id )\r\n\t\t\t\t\t\tAND src_order_number NOT IN\r\n                                             (\r\n                                             SELECT DISTINCT\r\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                             FROM\r\n                                                 {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                             WHERE\r\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\r\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\r\n                AND src_Order_Status='IN'\r\n                GROUP BY\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    fact_cpg_sales_detail.dim_order_method_id,\r\n                    src_order_type ,\r\n                    Ship_Date_id,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n                    src_selling_price) AS A\r\n        LEFT OUTER JOIN\r\n           (\r\n        SELECT\r\n         k.dim_src_kit_item_id,\r\n\t\t c.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                  dim_src_kit_item_id,\r\n\t\t\t\t  src_kit_id,\r\n\t\t\t\t  a.dim_item_id,\r\n\t\t\t\t (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n\t\t         (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                  a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n              k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n           k.dim_src_kit_item_id,c.dim_item_id) B\r\nON\r\n   A.dim_item_id=B.dim_src_kit_item_id\r\n    GROUP BY dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,DATE,B.dim_item_id,A.dim_item_id) Tab5\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\r\n\tUNION ALL\r\n/*Retrieving Return sales for Kit Items*/      \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id\r\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \r\n  ,Date,dim_item_id,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Avg(src_selling_price) as src_selling_price\r\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n  ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n  ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom (\r\nSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    CASE src_order_type\r\n        WHEN 'C'\r\n        THEN 'I'\r\n        ELSE 'I'\r\n    END AS src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id \r\n    ,A.dim_item_id AS dim_src_kit_item_id\r\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    0                                              AS src_units_shipped ,\r\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                      AS \"Demand_Cogs$\" ,\r\n    0                                                                      AS \"Shipped_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    0                                                                          AS \"Shipped_Sales$\" ,\r\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\r\n    \"Return$\" ,\r\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id AS dim_order_method_id ,\r\n            CASE src_order_type\r\n                WHEN 'C'\r\n                THEN 'I'\r\n                ELSE 'I'\r\n            END           AS src_order_type ,\r\n            order_date_id AS DATE ,\r\n            dim_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            (\r\n                SELECT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    CASE src_order_type\r\n                        WHEN 'C'\r\n                        THEN 'I'\r\n                        ELSE 'I'\r\n                    END AS src_order_type ,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\tLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n                WHERE\r\n\t\t\t\tISNULL(src_channel_id,'0')='R'\r\n                AND src_Order_Status='IN'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                            A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                           A.dim_src_kit_item_id=B.dim_item_id )\r\n\t\t\t\t\t\t\tAND src_order_number NOT IN\r\n                                             (\r\n                                             SELECT DISTINCT\r\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                             FROM\r\n                                                 {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                             WHERE\r\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\r\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\r\n                GROUP BY\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    src_order_type,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id ) AS A\r\n        LEFT OUTER JOIN\r\n            (\r\n                SELECT\r\n                    B.src_order_number    AS src_order_number,\r\n                    A.dim_order_method_id AS dim_order_method_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\r\n                INNER JOIN\r\n                    (\r\n                        SELECT\r\n                            src_order_number,\r\n                            src_original_ref_order_number\r\n                        FROM\r\n                            {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                        WHERE\r\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\r\n                ON\r\n                    A.src_order_number=B.src_order_number ) B\r\n        ON\r\n            A.src_order_number=B.src_order_number\r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            dim_item_id,\r\n            src_selling_price ) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n             k.dim_src_kit_item_id,\r\n\t\t\t c.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT dim_src_kit_item_id,\r\n\t\t\t\t\ta.dim_item_id,\r\n                    src_required_quantity ,\r\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\r\n                FROM\r\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id\r\n                GROUP BY\r\n                    dim_src_kit_item_id,\r\n\t\t\t\t\ta.dim_item_id,\r\n                    src_required_quantity) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n              k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n                k.dim_src_kit_item_id,\r\n\t\t\t\tc.dim_item_id) B\r\nON\r\n   A.dim_item_id=B.dim_src_kit_item_id \r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab_Kit_Items\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_kit_sales_regular"], "unique_id": "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_regular.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_regular.sql", "name": "intm_cpg_kit_sales_regular", "resource_type": "model", "alias": "intm_cpg_kit_sales_regular", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_regular.sql", "compiled": true, "compiled_sql": "\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped) as src_units_shipped\n  ,SUM(Units_Returned) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n\t\t\t\t\t\t\t\t\t\tOR  ltrim(RTRIM(src_prepay_code))='F')\n\t\t\t\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n\t\t   c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n\t\t\t\t   src_kit_id,\n\t\t\t\t   a.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,\n            A.dim_item_id AS dim_src_kit_item_id ,\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity) AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL\n                AND ISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n\t\t\t\t  src_kit_id,\n\t\t\t\t  a.dim_item_id,\n\t\t\t\t (src_component_percent_of_price)       AS src_component_percent_of_price ,\n\t\t         (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n    GROUP BY dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,DATE,B.dim_item_id,A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n  ,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n  ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n\t\t\t\tISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n\t\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n\t\t\t\tc.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped) as src_units_shipped\n  ,SUM(Units_Returned) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n\t\t\t\t\t\t\t\t\t\tOR  ltrim(RTRIM(src_prepay_code))='F')\n\t\t\t\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n\t\t   c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n\t\t\t\t   src_kit_id,\n\t\t\t\t   a.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,\n            A.dim_item_id AS dim_src_kit_item_id ,\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity) AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL\n                AND ISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n\t\t\t\t  src_kit_id,\n\t\t\t\t  a.dim_item_id,\n\t\t\t\t (src_component_percent_of_price)       AS src_component_percent_of_price ,\n\t\t         (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n    GROUP BY dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,DATE,B.dim_item_id,A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n  ,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n  ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n\t\t\t\tISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n\t\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n\t\t\t\tc.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id"}, "model.analytics_engineering_marts.intm_cpg_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,\r\ncast(src_order_type as varchar(1)) as src_order_type,\r\ndate_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\r\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\r\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\r\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\r\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\r\n,net_selling_margin$ net_selling_margin_$\r\n from\r\n(\r\n select * from {{ref('intm_cpg_sales_regular')}} \r\n\tunion all\r\n select * from {{ref('intm_cpg_sales_gratis')}}\r\n\tunion all\r\n select * from {{ref('intm_cpg_sales_free')}}\r\n\tunion all\r\n select * from {{ref('intm_cpg_sales_others')}}\r\n)", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_sales"], "unique_id": "model.analytics_engineering_marts.intm_cpg_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_sales.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_sales.sql", "name": "intm_cpg_sales", "resource_type": "model", "alias": "intm_cpg_sales", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intm_cpg_sales_regular"], ["intm_cpg_sales_gratis"], ["intm_cpg_sales_free"], ["intm_cpg_sales_others"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_others"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_sales.sql", "compiled": true, "compiled_sql": "\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,\ncast(src_order_type as varchar(1)) as src_order_type,\ndate_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\n,net_selling_margin$ net_selling_margin_$\n from\n(\n select * from __dbt__CTE__intm_cpg_sales_regular \n\tunion all\n select * from __dbt__CTE__intm_cpg_sales_gratis\n\tunion all\n select * from __dbt__CTE__intm_cpg_sales_free\n\tunion all\n select * from __dbt__CTE__intm_cpg_sales_others\n)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_cpg_sales_regular", "sql": " __dbt__CTE__intm_cpg_sales_regular as (\n\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n\t\t,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id,src_order_type,Date,dim_item_id  \n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Avg(src_selling_price) as src_selling_price  \n        ,sum(src_units_ordered) as src_units_ordered  \n        ,SUM(src_units_shipped) as src_units_shipped  \n        ,SUM(Units_Returned) as Units_Returned  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n        ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n\t\t\t\t\t\t\t\t\t   ,order_date_id as Date  \n                                       ,dim_item_id  \n\t\t\t\t\t\t\t\t\t   ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n\t\t,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>=0 or ship_date_id>=0) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>=0 or ship_date_id>=0) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in  \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id where   \n   (order_date_id>=0 or ship_date_id>=0) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n            inner join                         \n               (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\t\ton fact_cpg_sales_header.dim_order_method_id = dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n            where src_channel_id='R' ) B                                                              \non A.src_order_number=B.src_order_number   ) B  on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t  ,dim_order_method_id  \n      ,src_order_type       \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                        ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                        ,src_order_type,order_date_id as Date,dim_item_id  \n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n          src_order_number not in   \n          (SELECT  distinct ltrim(rtrim(src_order_number)) as src_order_number\n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n     UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n         from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type         \n\t\t\t\t\t ,ship_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_kit_units_shipped ) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t                          where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and \n\t\t   src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n           and src_order_status='IN'   \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n      ,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_kit_units_ordered ) as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\tdim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\tsrc_channel_id='R' and src_order_status='IN' and \n\t\tsrc_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id, \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,\n\t\t\tsrc_kit_units_ordered,order_date_id) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id\n)"}, {"id": "model.analytics_engineering_marts.intm_cpg_sales_gratis", "sql": " __dbt__CTE__intm_cpg_sales_gratis as (\n\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n           dim_item_id not in\n\t\t\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n           and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')  \n   group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date  \n      ,dim_item_id\n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n      left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n    where (order_date_id>=0 or ship_date_id>=0) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\twhere A.kit_id=B.dim_item_id )\n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR')  \n        and src_order_status='IN'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n      ,order_date_id as Date  \n      ,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n   on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n\t\t(select distinct B.dim_item_id  from \n\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\twhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')\n\t) as A      \n\t\tleft outer join  \n\t\t(select B.src_order_number as src_order_number,A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n\t\t\tinner join                         \n            (select src_order_number,src_original_ref_order_number \n\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n            where src_channel_id='R' ) B                                                              \n    on A.src_order_number=B.src_order_number   ) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"   \n                left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n        where (order_date_id>=0 or ship_date_id>=0) and     \n              src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n              src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')     \n              and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"\n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n        src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n        and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN'     \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n            order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id\n)"}, {"id": "model.analytics_engineering_marts.intm_cpg_sales_free", "sql": " __dbt__CTE__intm_cpg_sales_free as (\n\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n\tFROM  (  \n/*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n            dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n            src_order_type='I' and src_channel_id<>'R' and  \n            dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n\t\twhere  (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                dim_item_id not in (select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'  \n\tgroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n      ,order_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFrom (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id    \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\t\tsrc_channel_id='R' and src_order_status='IN'  \n\t\t\tand dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id ) \n\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\t) as A      \n\t\tleft outer join  \n        (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n        inner join                         \n        (select src_order_number,src_original_ref_order_number \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n\t\twhere src_channel_id='R' ) B                                                              \n        on A.src_order_number=B.src_order_number) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n\tfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price   \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and     \n            src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n            src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n\t  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n            left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n        where (order_date_id>=0 or ship_date_id>=0) and     \n                dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN' \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\tgroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n        order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id\n)"}, {"id": "model.analytics_engineering_marts.intm_cpg_sales_others", "sql": " __dbt__CTE__intm_cpg_sales_others as (\n\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id \n      ,sum(Other_Amount) as Other_Amount \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and (isnull(src_prepay_code,'A')='F' \n\t\t\tand isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n     ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'   \n\t\tand (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_cpg_sales_regular as (\n\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n\t\t,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id,src_order_type,Date,dim_item_id  \n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Avg(src_selling_price) as src_selling_price  \n        ,sum(src_units_ordered) as src_units_ordered  \n        ,SUM(src_units_shipped) as src_units_shipped  \n        ,SUM(Units_Returned) as Units_Returned  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n        ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n\t\t\t\t\t\t\t\t\t   ,order_date_id as Date  \n                                       ,dim_item_id  \n\t\t\t\t\t\t\t\t\t   ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n\t\t,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>=0 or ship_date_id>=0) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>=0 or ship_date_id>=0) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in  \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id where   \n   (order_date_id>=0 or ship_date_id>=0) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n            inner join                         \n               (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\t\ton fact_cpg_sales_header.dim_order_method_id = dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n            where src_channel_id='R' ) B                                                              \non A.src_order_number=B.src_order_number   ) B  on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t  ,dim_order_method_id  \n      ,src_order_type       \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                        ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                        ,src_order_type,order_date_id as Date,dim_item_id  \n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n          src_order_number not in   \n          (SELECT  distinct ltrim(rtrim(src_order_number)) as src_order_number\n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n     UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n         from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type         \n\t\t\t\t\t ,ship_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_kit_units_shipped ) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t                          where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and \n\t\t   src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n           and src_order_status='IN'   \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n      ,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_kit_units_ordered ) as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\tdim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\tsrc_channel_id='R' and src_order_status='IN' and \n\t\tsrc_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id, \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,\n\t\t\tsrc_kit_units_ordered,order_date_id) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id\n),  __dbt__CTE__intm_cpg_sales_gratis as (\n\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_Amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n(  \n/*Retrieving Demand sales for Gratis Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and isnull(src_channel_id,'0')<>'R' and  \n           dim_item_id not in\n\t\t\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n           and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')  \n   group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Gratis Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date  \n      ,dim_item_id\n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n      left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n    where (order_date_id>=0 or ship_date_id>=0) and   \n       dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n       src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and  \n       dim_item_id not in\n\t\t\t\t(select distinct B.dim_item_id  from \n\t\t\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\twhere A.kit_id=B.dim_item_id )\n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR')  \n        and src_order_status='IN'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Gratis Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type        \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n      ,order_date_id as Date  \n      ,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n   on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id       \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n    dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n   src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in\n\t\t(select distinct B.dim_item_id  from \n\t\t\t(select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\twhere A.kit_id=B.dim_item_id ) \n    and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')\n\t) as A      \n\t\tleft outer join  \n\t\t(select B.src_order_number as src_order_number,A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n\t\t\tinner join                         \n            (select src_order_number,src_original_ref_order_number \n\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n            where src_channel_id='R' ) B                                                              \n    on A.src_order_number=B.src_order_number   ) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"   \n                left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n        where (order_date_id>=0 or ship_date_id>=0) and     \n              src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n              src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR')     \n              and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"\n\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n        dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n        src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n        and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN'     \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t  FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t  where ltrim(rtrim(src_order_origin_code))='GR') \n   group by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n            order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id\n),  __dbt__CTE__intm_cpg_sales_free as (\n\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n\tFROM  (  \n/*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n            dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n            src_order_type='I' and src_channel_id<>'R' and  \n            dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n\t\twhere  (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                dim_item_id not in (select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'  \n\tgroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n      ,order_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFrom (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id    \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\t\tsrc_channel_id='R' and src_order_status='IN'  \n\t\t\tand dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id ) \n\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\t) as A      \n\t\tleft outer join  \n        (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n        inner join                         \n        (select src_order_number,src_original_ref_order_number \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n\t\twhere src_channel_id='R' ) B                                                              \n        on A.src_order_number=B.src_order_number) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n\tfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price   \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and     \n            src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n            src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n\t  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n            left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n        where (order_date_id>=0 or ship_date_id>=0) and     \n                dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN' \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\tgroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n        order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id\n),  __dbt__CTE__intm_cpg_sales_others as (\n\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id \n      ,sum(Other_Amount) as Other_Amount \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\twhere src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n    left join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and (isnull(src_prepay_code,'A')='F' \n\t\t\tand isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='TAX' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_sales_tax) Other_Amount  \n     ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere  order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n    ) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---Spceial Charges-----  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount  \n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\" \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n     ,SUM(src_special_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n     ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n    and (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \nUnion All  \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='SPECIALCHG' and active_flag='Y') AS dim_item_id  \n    ,SUM(src_special_charges) Other_Amount  \n    ,0 as SPECIALCHG  \nFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\tleft join \n\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \nwhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id   \nUnion All  \n---- Freight ----------  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type   \n      ,Date_Key  \n      ,dim_item_id  \n      ,sum(Other_Amount) as Other_Amount\n      ,0 as src_unit_cost  \n      ,0 as src_current_retail_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as Net_Units_Sold  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_sales_$\"  \n      ,0 as \"Demand_Selling_Margin$\"  \n      ,0 as \"Shipped_Selling_Margin$\"  \n      ,0 as \"Net_Selling_Margin$\"   \nfrom       \n   (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n     ,src_order_type         \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'  \n\t\tand (isnull(src_order_origin_code,'AA')<>'GR' or isnull(src_prepay_code,'A')<>'F')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'G' else 'G' end src_order_type         \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R' and isnull(src_order_origin_code,'AA')='GR'  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'G' else 'G' end ,order_date_id  \n\tUnion All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n    ,case src_order_type when 'I'  then 'F' else 'F' end src_order_type  \n    ,order_date_id as Date_Key  \n    ,(select dim_item_id \n\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\twhere src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n    ,Sum(src_carrier_shipping_charges) Other_Amount  \n    ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_order_type='I' and src_channel_id<>'R'   \n\t\tand (isnull(src_prepay_code,'A')='F' and isnull(src_order_origin_code,'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, case src_order_type when 'I'  then 'F' else 'F' end ,order_date_id  \n   Union All  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n     ,dim_order_method_id  \n\t ,src_order_type  \n     ,order_date_id as Date_Key  \n     ,(select dim_item_id \n\t from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t where src_item_id='FREIGHT' and active_flag='Y') AS dim_item_id  \n     ,Sum(src_carrier_shipping_charges) Other_Amount  \n     ,0 as SPECIALCHG  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\tleft join \n\t\t(select src_channel_id,dim_order_method_id as dm_order_method_id \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\") dim_cpg_order_method\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dm_order_method_id \n\twhere order_date_id>=0 and src_channel_id='R'   \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,order_date_id) Tab_Tax  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date_Key,dim_item_id\n)select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,\ncast(src_order_type as varchar(1)) as src_order_type,\ndate_key,dim_item_id,other_amount,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$ shipped_cogs_$,\nreturned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$\n,net_selling_margin$ net_selling_margin_$\n from\n(\n select * from __dbt__CTE__intm_cpg_sales_regular \n\tunion all\n select * from __dbt__CTE__intm_cpg_sales_gratis\n\tunion all\n select * from __dbt__CTE__intm_cpg_sales_free\n\tunion all\n select * from __dbt__CTE__intm_cpg_sales_others\n)"}, "model.analytics_engineering_marts.intm_cpg_kit_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\r\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\r\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\r\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\r\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\r\nnet_selling_margin$ net_selling_margin_$\r\nfrom\r\n(\r\n\tselect * from {{ref('intm_cpg_kit_sales_regular')}}\r\n\tunion all\r\n\tselect * from {{ref('intm_cpg_kit_sales_gratis')}}\r\n\tunion all\r\n\tselect * from {{ref('intm_cpg_kit_sales_free')}}\r\n)", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_kit_sales"], "unique_id": "model.analytics_engineering_marts.intm_cpg_kit_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_kit_sales.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales.sql", "name": "intm_cpg_kit_sales", "resource_type": "model", "alias": "intm_cpg_kit_sales", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intm_cpg_kit_sales_regular"], ["intm_cpg_kit_sales_gratis"], ["intm_cpg_kit_sales_free"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_free"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales.sql", "compiled": true, "compiled_sql": "\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\nnet_selling_margin$ net_selling_margin_$\nfrom\n(\n\tselect * from __dbt__CTE__intm_cpg_kit_sales_regular\n\tunion all\n\tselect * from __dbt__CTE__intm_cpg_kit_sales_gratis\n\tunion all\n\tselect * from __dbt__CTE__intm_cpg_kit_sales_free\n)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "sql": " __dbt__CTE__intm_cpg_kit_sales_regular as (\n\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped) as src_units_shipped\n  ,SUM(Units_Returned) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n\t\t\t\t\t\t\t\t\t\tOR  ltrim(RTRIM(src_prepay_code))='F')\n\t\t\t\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n\t\t   c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n\t\t\t\t   src_kit_id,\n\t\t\t\t   a.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,\n            A.dim_item_id AS dim_src_kit_item_id ,\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity) AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL\n                AND ISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n\t\t\t\t  src_kit_id,\n\t\t\t\t  a.dim_item_id,\n\t\t\t\t (src_component_percent_of_price)       AS src_component_percent_of_price ,\n\t\t         (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n    GROUP BY dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,DATE,B.dim_item_id,A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n  ,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n  ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n\t\t\t\tISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n\t\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n\t\t\t\tc.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)"}, {"id": "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "sql": " __dbt__CTE__intm_cpg_kit_sales_gratis as (\n\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id       \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id ,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.src_kit_id=B.src_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_item_id,\n\t\t\tdim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id, \n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            dim_src_kit_item_id,   \n\t\t\tk.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                            A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n\t\t\t\t\tfact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n\t\t\t   c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)"}, {"id": "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "sql": " __dbt__CTE__intm_cpg_kit_sales_free as (\n\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t,dim_order_method_id\n\t\t\t\t\t\t\t\t,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t\t\t\t\t\t\t,Date\n\t\t\t\t\t\t\t\t,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n        src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item         \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0') <> 'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n\t\t\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n\t\t\t\t\tfact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                ISNULL(src_channel_id,'0')='R'\n\t\t\t\tAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_cpg_kit_sales_regular as (\n\n--Kit into Components for Regular Items---\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n  ,Date as  Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n--Demand--\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped) as src_units_shipped\n  ,SUM(Units_Returned) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,SUM(src_units_ordered*src_required_quantity)                            AS src_units_ordered ,\n    0                                                                       AS src_units_shipped ,\n    0                                                                       AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(src_units_ordered*B.src_required_quantity *ISNULL(src_unit_cost,0))      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                            (\n                            SELECT DISTINCT\n                                 A.dim_src_kit_item_id\n                            FROM\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                                \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                            WHERE\n                                A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                     (\n                                     SELECT DISTINCT\n                                         ltrim(RTRIM(src_order_number)) AS src_order_number\n                                     FROM\n                                         \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                     WHERE\n                                         ltrim(RTRIM(src_order_origin_code))='GR'\n\t\t\t\t\t\t\t\t\t\tOR  ltrim(RTRIM(src_prepay_code))='F')\n\t\t\t\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_original_ref_order_number))='0')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n           k.dim_src_kit_item_id,\n\t\t   c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                   dim_src_kit_item_id,\n\t\t\t\t   src_kit_id,\n\t\t\t\t   a.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,\n    c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id             \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\t\tfrom (SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id ,\n            src_order_type ,\n            DATE ,\n            B.dim_item_id AS dim_item_id ,\n            A.dim_item_id AS dim_src_kit_item_id ,\n            AVG(src_unit_cost)            AS src_unit_cost ,\n            AVG(src_current_retail_price) AS src_current_retail_price ,\n            AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0))\n                                                         AS src_selling_price ,\n            0                                            AS src_units_ordered ,\n            SUM(src_units_shipped*src_required_quantity) AS src_units_shipped ,\n            0                                                                    AS Units_Returned ,\n            SUM(B.src_required_quantity)                                  AS src_required_quantity ,\n            0                                                                    AS \"Demand_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS\n                                                                                   \"Shipped_Cogs$\" ,\n            0                                                                  AS \"Returned_Cogs$\" ,\n            SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0)) AS \"Net_Cogs$\"\n            ,\n            0                                                                  AS \"Demand_Retail$\" ,\n            SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n            \"Shipped_Retail$\" ,\n            SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0))\n              AS \"Net_Retail$\" ,\n            0 AS \"Demand_Sales$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Shipped_Sales$\" ,\n            0  AS \"Return$\" ,\n            SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100\n            )) AS \"Net$\"\n        FROM\n            (\n                SELECT DISTINCT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id ,\n                    src_order_type ,\n                    Ship_Date_id AS DATE ,\n                    fact_cpg_sales_detail.dim_item_id ,\n                    src_selling_price ,\n                    SUM(src_units_shipped) AS src_units_shipped\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                    src_order_type='I'\n                AND Ship_Date_id IS NOT NULL\n                AND ISNULL(src_channel_id,'0')<>'R'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                              A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                        A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                AND src_Order_Status='IN'\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\n        LEFT OUTER JOIN\n           (\n        SELECT\n         k.dim_src_kit_item_id,\n\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                  dim_src_kit_item_id,\n\t\t\t\t  src_kit_id,\n\t\t\t\t  a.dim_item_id,\n\t\t\t\t (src_component_percent_of_price)       AS src_component_percent_of_price ,\n\t\t         (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\n    GROUP BY dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,DATE,B.dim_item_id,A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n  ,Date,dim_item_id,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Avg(src_selling_price) as src_selling_price\n  ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n  ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n  ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'I'\n        ELSE 'I'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n    ,A.dim_item_id AS dim_src_kit_item_id\n    ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'I'\n                ELSE 'I'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'I'\n                        ELSE 'I'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n\t\t\t\tISNULL(src_channel_id,'0')='R'\n                AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                           A.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number NOT IN\n                                             (\n                                             SELECT DISTINCT\n                                                 ltrim(RTRIM(src_order_number)) AS src_order_number\n                                             FROM\n                                                 \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                             WHERE\n                                                 ltrim(RTRIM(src_order_origin_code))='GR'\n                                             OR  ltrim(RTRIM(src_prepay_code))='F')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n             k.dim_src_kit_item_id,\n\t\t\t c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n              k.dim_item_id=c.dim_item_id\n        GROUP BY\n                k.dim_src_kit_item_id,\n\t\t\t\tc.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Regular\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n),  __dbt__CTE__intm_cpg_kit_sales_gratis as (\n\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id       \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id ,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.src_kit_id=B.src_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_item_id,\n\t\t\tdim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id, \n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            dim_src_kit_item_id,   \n\t\t\tk.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                            A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n\t\t\t\t\tfact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n\t\t\t   c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n),  __dbt__CTE__intm_cpg_kit_sales_free as (\n\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t,dim_order_method_id\n\t\t\t\t\t\t\t\t,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t\t\t\t\t\t\t,Date\n\t\t\t\t\t\t\t\t,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n        src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item         \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0') <> 'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n\t\t\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n\t\t\t\t\tfact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                ISNULL(src_channel_id,'0')='R'\n\t\t\t\tAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id\n)select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,cast(src_order_type as varchar(1)) as src_order_type,date_key,dim_item_id,dim_src_kit_item_id,src_unit_cost,src_current_retail_price,\nsrc_units_ordered,src_units_shipped,units_returned,net_units_sold,demand_cogs$ demand_cogs_$,shipped_cogs$\nshipped_cogs_$,returned_cogs$ returned_cogs_$,net_cogs$ net_cogs_$,demand_retail$ demand_retail_$,shipped_retail$ shipped_retail_$,\nnet_retail$ net_retail_$,demand_sales$ demand_sales_$,shipped_sales$ shipped_sales_$,return$ returns_$,\nnet$ net_sales_$,demand_selling_margin$ demand_selling_margin_$,shipped_selling_margin$ shipped_selling_margin_$,\nnet_selling_margin$ net_selling_margin_$\nfrom\n(\n\tselect * from __dbt__CTE__intm_cpg_kit_sales_regular\n\tunion all\n\tselect * from __dbt__CTE__intm_cpg_kit_sales_gratis\n\tunion all\n\tselect * from __dbt__CTE__intm_cpg_kit_sales_free\n)"}, "model.analytics_engineering_marts.intm_cpg_sales_regular": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect   \r\ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n        ,dim_order_method_id  \r\n        ,src_order_type  \r\n        ,Date as Date_Key  \r\n        ,dim_item_id  \r\n\t\t,0 as Other_Amount\r\n        ,Avg(src_unit_cost) as src_unit_cost  \r\n        ,Avg(src_current_retail_price) as src_current_retail_price  \r\n        ,Sum(src_units_ordered) as src_units_ordered  \r\n        ,sum(src_units_shipped) as src_units_shipped  \r\n        ,sum(Units_Returned) as Units_Returned  \r\n        ,sum(Net_Units_Sold) as Net_Units_Sold  \r\n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n        ,sum(\"Return$\") as \"Return$\"  \r\n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \r\n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n            from   \r\n    (       \r\n  --sub1 select  \r\n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n        ,dim_order_method_id  \r\n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \r\n        ,Date  \r\n        ,dim_item_id  \r\n         ,Avg(src_unit_cost) as src_unit_cost  \r\n        ,Avg(src_current_retail_price) as src_current_retail_price  \r\n        ,Sum(src_units_ordered) as src_units_ordered  \r\n        ,sum(src_units_shipped) as src_units_shipped  \r\n        ,sum(Units_Returned) as Units_Returned  \r\n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n        ,sum(\"Return$\") as \"Return$\"  \r\n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \r\n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n    FROM  \r\n  (  \r\n  /*Retrieving Demand sales for Regular Items*/  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n        ,dim_order_method_id,src_order_type,Date,dim_item_id  \r\n        ,Avg(src_unit_cost) as src_unit_cost  \r\n        ,Avg(src_current_retail_price) as src_current_retail_price  \r\n        ,Avg(src_selling_price) as src_selling_price  \r\n        ,sum(src_units_ordered) as src_units_ordered  \r\n        ,SUM(src_units_shipped) as src_units_shipped  \r\n        ,SUM(Units_Returned) as Units_Returned  \r\n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \r\n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n        ,sum(\"Return$\") as \"Return$\"  \r\n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \r\n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n        ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                       ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                       ,src_order_type         \r\n\t\t\t\t\t\t\t\t\t   ,order_date_id as Date  \r\n                                       ,dim_item_id  \r\n\t\t\t\t\t\t\t\t\t   ,Avg(src_unit_cost) as src_unit_cost  \r\n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                       ,Avg(src_selling_price) as src_selling_price  \r\n                                       ,sum(src_units_ordered) as src_units_ordered  \r\n                                       ,0 as src_units_shipped  \r\n                                       ,0 as Units_Returned  \r\n\t\t,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n        ,0 as \"Shipped_Cogs$\"  \r\n        ,0 as \"Returned_Cogs$\"  \r\n        ,0 as \"Net_Cogs$\"  \r\n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n        ,0 as \"Shipped_Retail$\"  \r\n        ,0 as \"Net_Retail$\"  \r\n        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \r\n        ,0 as \"Shipped_Sales$\"  \r\n        ,0 as \"Return$\"  \r\n        ,0 as \"Net_Sales_$\"  \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}} \r\n   left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \r\n                  (order_date_id>=0 or ship_date_id>=0) and   \r\n                  dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \r\n                   dim_item_id not in \r\n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  on A.src_kit_id=B.src_item_id\r\n\t\t\t\t\t\t) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\r\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}} where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}} where ltrim(rtrim(src_original_ref_order_number))='0')   \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \r\n              UNION all  \r\n/*Retrieving Shipped sales for Regular Items*/           \r\n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  \r\n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                     ,fact_cpg_sales_detail.dim_order_method_id  \r\n                                     ,src_order_type  \r\n                                     ,ship_date_id as Date  \r\n                                     ,dim_item_id                      \r\n\t\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost  \r\n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                     ,Avg(src_selling_price) as src_selling_price  \r\n                                     ,0 as src_units_ordered  \r\n                                     ,sum(src_units_shipped) as src_units_shipped  \r\n                                     ,0 as Units_Returned  \r\n                                     ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n        FROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}}  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\r\n      where  \r\n(order_date_id>=0 or ship_date_id>=0) and   \r\n dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \r\n                        dim_item_id not in  \r\n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  on A.src_kit_id=B.src_item_id\r\n\t\t\t\t\t\t) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\r\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                        FROM {{source('fds_cpg','fact_cpg_sales_header')}} where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n                        and src_order_status='IN'  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \r\n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n            UNION ALL  \r\n/*Retrieving Return sales for Regular Items*/             \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                                    ,b.dim_order_method_id as dim_order_method_id  \r\n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \r\n                                    ,order_date_id as Date  \r\n                                    ,dim_item_id                      \r\n\t\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost  \r\n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \r\n                                    ,Avg(src_selling_price) as src_selling_price  \r\n                                    ,0 as src_units_ordered  \r\n                                    ,0 as src_units_shipped  \r\n                                    ,sum(src_units_ordered) as Units_Returned  \r\n                                    ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n\t\tFrom  \r\n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \r\n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \r\n            dim_item_id,  \r\n            src_order_number,  \r\n            src_unit_cost,  \r\n            src_selling_price,  \r\n            src_current_retail_price,  \r\n            src_units_ordered,  \r\n            order_date_id    \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n left join\r\n   {{source('fds_cpg','dim_cpg_order_method')}} on fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id where   \r\n   (order_date_id>=0 or ship_date_id>=0) and   \r\n   dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n    src_channel_id='R' and src_order_status='IN'  \r\n   and dim_item_id not in \r\n\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from {{source('fds_cpg','dim_cpg_kit_item')}} A \r\ninner join {{source('fds_cpg','dim_cpg_item')}}B  on A.src_kit_id=B.src_item_id\r\n) A, {{source('fds_cpg','dim_cpg_item')}} B \r\nwhere A.kit_id=B.dim_item_id )\r\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_header')}} where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n   ) as A       \r\nleft outer join  \r\n            (select B.src_order_number as src_order_number,  \r\n            A.dim_order_method_id as dim_order_method_id   \r\n            from {{source('fds_cpg','fact_cpg_sales_header')}} A  \r\n            inner join                         \r\n               (select src_order_number,src_original_ref_order_number from {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t\t\t\ton fact_cpg_sales_header.dim_order_method_id = dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\r\n            where src_channel_id='R' ) B                                                              \r\non A.src_order_number=B.src_order_number   ) B  on  A.src_order_number=B.src_order_number  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n--sub1 select end  \r\n--Kit into Components---  \r\nUnion All  \r\n--sub2 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\nFROM  \r\n/*Retrieving Demand sales for KIT Items*/  \r\n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t  ,dim_order_method_id  \r\n      ,src_order_type       \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                        ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \r\n                        ,src_order_type,order_date_id as Date,dim_item_id  \r\n\t  ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \r\n      ,sum(src_kit_units_ordered ) as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,sum(src_required_quantity) as src_required_quantity  \r\n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_Sales_$\"  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}  \r\n\t     left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\r\n    where (order_date_id>=0 or ship_date_id>=0) and src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \r\n          src_order_number not in   \r\n          (SELECT  distinct ltrim(rtrim(src_order_number)) as src_order_number\r\n           FROM {{source('fds_cpg','fact_cpg_sales_header')}}  \r\n            where   \r\n            ltrim(rtrim(src_order_origin_code))='GR' or   \r\n            ltrim(rtrim(src_prepay_code))='F')  \r\n            and src_order_number  in (  \r\n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n            FROM {{source('fds_cpg','fact_cpg_sales_header')}}  \r\n            where   \r\n            ltrim(rtrim(src_original_ref_order_number))='0')   \r\n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \r\n     UNION all  \r\n/*Retrieving Shipped sales for Kit Items*/      \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n         from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type         \r\n\t\t\t\t\t ,ship_date_id as Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \r\n      ,0 as src_units_ordered  \r\n      ,sum(src_kit_units_shipped ) as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,sum(src_required_quantity) as src_required_quantity  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}} \r\n\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\r\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \r\n           dim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t                          where src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n           src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and \r\n\t\t   src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n                                    FROM {{source('fds_cpg','fact_cpg_sales_header')}} where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\n           and src_order_status='IN'   \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id  \r\n            UNION ALL  \r\n/*Retrieving Return sales for Kit Items*/        \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \r\n      ,order_date_id as Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,sum(src_kit_units_ordered ) as Units_Returned  \r\n      ,sum(src_required_quantity) as src_required_quantity  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \r\n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \r\n        FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}} \r\n\t\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \r\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and   \r\n\t\tdim_item_id  not in (select distinct dim_item_id from {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n\t\tsrc_channel_id='R' and src_order_status='IN' and \r\n\t\tsrc_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \r\ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id, \r\n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,\r\n\t\t\tsrc_kit_units_ordered,order_date_id) Tab_Kit_Items  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_sales_regular"], "unique_id": "model.analytics_engineering_marts.intm_cpg_sales_regular", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_sales_regular.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_sales_regular.sql", "name": "intm_cpg_sales_regular", "resource_type": "model", "alias": "intm_cpg_sales_regular", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_sales_regular.sql", "compiled": true, "compiled_sql": "\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n\t\t,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id,src_order_type,Date,dim_item_id  \n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Avg(src_selling_price) as src_selling_price  \n        ,sum(src_units_ordered) as src_units_ordered  \n        ,SUM(src_units_shipped) as src_units_shipped  \n        ,SUM(Units_Returned) as Units_Returned  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n        ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n\t\t\t\t\t\t\t\t\t   ,order_date_id as Date  \n                                       ,dim_item_id  \n\t\t\t\t\t\t\t\t\t   ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n\t\t,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>=0 or ship_date_id>=0) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>=0 or ship_date_id>=0) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in  \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id where   \n   (order_date_id>=0 or ship_date_id>=0) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n            inner join                         \n               (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\t\ton fact_cpg_sales_header.dim_order_method_id = dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n            where src_channel_id='R' ) B                                                              \non A.src_order_number=B.src_order_number   ) B  on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t  ,dim_order_method_id  \n      ,src_order_type       \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                        ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                        ,src_order_type,order_date_id as Date,dim_item_id  \n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n          src_order_number not in   \n          (SELECT  distinct ltrim(rtrim(src_order_number)) as src_order_number\n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n     UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n         from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type         \n\t\t\t\t\t ,ship_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_kit_units_shipped ) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t                          where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and \n\t\t   src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n           and src_order_status='IN'   \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n      ,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_kit_units_ordered ) as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\tdim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\tsrc_channel_id='R' and src_order_status='IN' and \n\t\tsrc_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id, \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,\n\t\t\tsrc_kit_units_ordered,order_date_id) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect   \ndim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,src_order_type  \n        ,Date as Date_Key  \n        ,dim_item_id  \n\t\t,0 as Other_Amount\n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(Net_Units_Sold) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n            from   \n    (       \n  --sub1 select  \n  Select dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id  \n        ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type   \n        ,Date  \n        ,dim_item_id  \n         ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Sum(src_units_ordered) as src_units_ordered  \n        ,sum(src_units_shipped) as src_units_shipped  \n        ,sum(Units_Returned) as Units_Returned  \n        ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n        ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n        ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n    FROM  \n  (  \n  /*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n        ,dim_order_method_id,src_order_type,Date,dim_item_id  \n        ,Avg(src_unit_cost) as src_unit_cost  \n        ,Avg(src_current_retail_price) as src_current_retail_price  \n        ,Avg(src_selling_price) as src_selling_price  \n        ,sum(src_units_ordered) as src_units_ordered  \n        ,SUM(src_units_shipped) as src_units_shipped  \n        ,SUM(Units_Returned) as Units_Returned  \n        ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\" \n        ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n        ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n        ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n        ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n        ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n        ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n        ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n        ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n        ,sum(\"Return$\") as \"Return$\"  \n        ,sum(\"Net_sales_$\") as \"Net_sales_$\"  \n        ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n        ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n        ,sum(isnull(\"Net_sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n               from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                       ,fact_cpg_sales_detail.dim_order_method_id  \n                                       ,src_order_type         \n\t\t\t\t\t\t\t\t\t   ,order_date_id as Date  \n                                       ,dim_item_id  \n\t\t\t\t\t\t\t\t\t   ,Avg(src_unit_cost) as src_unit_cost  \n                                       ,Avg(src_current_retail_price) as src_current_retail_price  \n                                       ,Avg(src_selling_price) as src_selling_price  \n                                       ,sum(src_units_ordered) as src_units_ordered  \n                                       ,0 as src_units_shipped  \n                                       ,0 as Units_Returned  \n\t\t,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n        ,0 as \"Shipped_Cogs$\"  \n        ,0 as \"Returned_Cogs$\"  \n        ,0 as \"Net_Cogs$\"  \n        ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n        ,0 as \"Shipped_Retail$\"  \n        ,0 as \"Net_Retail$\"  \n        ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n        ,0 as \"Shipped_Sales$\"  \n        ,0 as \"Return$\"  \n        ,0 as \"Net_Sales_$\"  \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n   left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   where   \n                  (order_date_id>=0 or ship_date_id>=0) and   \n                  dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                  src_order_type='I' and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                   dim_item_id not in \n\t\t\t\t   (select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                  and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_original_ref_order_number))='0')   \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id               \n              UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \n SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  \n              SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                     ,fact_cpg_sales_detail.dim_order_method_id  \n                                     ,src_order_type  \n                                     ,ship_date_id as Date  \n                                     ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost  \n                                     ,Avg(src_current_retail_price) as src_current_retail_price  \n                                     ,Avg(src_selling_price) as src_selling_price  \n                                     ,0 as src_units_ordered  \n                                     ,sum(src_units_shipped) as src_units_shipped  \n                                     ,0 as Units_Returned  \n                                     ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"  on fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n      where  \n(order_date_id>=0 or ship_date_id>=0) and   \n dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0') NOT IN ('R','VS') and  \n                        dim_item_id not in  \n\t\t\t\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  on A.src_kit_id=B.src_item_id\n\t\t\t\t\t\t) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                        and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n                        and src_order_status='IN'  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \n                        group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (  SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                                    ,b.dim_order_method_id as dim_order_method_id  \n                                    ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type  \n                                    ,order_date_id as Date  \n                                    ,dim_item_id                      \n\t\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost  \n                                    ,Avg(src_current_retail_price) as src_current_retail_price  \n                                    ,Avg(src_selling_price) as src_selling_price  \n                                    ,0 as src_units_ordered  \n                                    ,0 as src_units_shipped  \n                                    ,sum(src_units_ordered) as Units_Returned  \n                                    ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFrom  \n            (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'I' else 'I' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n left join\n   \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" on fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id where   \n   (order_date_id>=0 or ship_date_id>=0) and   \n   dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n    src_channel_id='R' and src_order_status='IN'  \n   and dim_item_id not in \n\t\t(select distinct B.dim_item_id  from (select distinct B.dim_item_id as kit_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \ninner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"B  on A.src_kit_id=B.src_item_id\n) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \nwhere A.kit_id=B.dim_item_id )\n    and src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n   ) as A       \nleft outer join  \n            (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n            from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n            inner join                         \n               (select src_order_number,src_original_ref_order_number from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\t\t\ton fact_cpg_sales_header.dim_order_method_id = dim_cpg_order_method.dim_order_method_id \t\t\t\t\t\t\t\t\t\n            where src_channel_id='R' ) B                                                              \non A.src_order_number=B.src_order_number   ) B  on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type    \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\" \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \nFROM  \n/*Retrieving Demand sales for KIT Items*/  \n(SELECT\tdim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t  ,dim_order_method_id  \n      ,src_order_type       \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\" \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n            from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                        ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n                        ,src_order_type,order_date_id as Date,dim_item_id  \n\t  ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,sum(src_kit_units_ordered ) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"  \n\t     left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t on fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and  \n          src_order_number not in   \n          (SELECT  distinct ltrim(rtrim(src_order_number)) as src_order_number\n           FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_order_origin_code))='GR' or   \n            ltrim(rtrim(src_prepay_code))='F')  \n            and src_order_number  in (  \n            SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n            FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n            where   \n            ltrim(rtrim(src_original_ref_order_number))='0')   \n         group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,order_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                 \n     UNION all  \n/*Retrieving Shipped sales for Kit Items*/      \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,src_order_type,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n         from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n                     ,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type         \n\t\t\t\t\t ,ship_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_kit_units_shipped ) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n           dim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t                          where src_item_id in ('990-000-002-0','990-000-003-0')) and  \n           src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' and \n\t\t   src_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n                                    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" where ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \n           and src_order_status='IN'   \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id,src_kit_selling_price) As A  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id  \n            UNION ALL  \n/*Retrieving Return sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id,case src_order_type when 'C' then 'I' else 'I' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id  \n      ,case src_order_type when 'C' then 'I' else 'I' end as src_order_type       \n      ,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(nullif(src_required_quantity,0))) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_kit_units_ordered ) as Units_Returned  \n      ,sum(src_required_quantity) as src_required_quantity  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"  \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"  \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\tdim_item_id  not in (select distinct dim_item_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\tsrc_channel_id='R' and src_order_status='IN' and \n\t\tsrc_order_number not in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_order_origin_code))='GR' or ltrim(rtrim(src_prepay_code))='F')  \ngroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id, \n\t\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,\n\t\t\tsrc_kit_units_ordered,order_date_id) Tab_Kit_Items  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Orders  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id"}, "model.analytics_engineering_marts.intm_cpg_kit_sales_free": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id\r\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \r\n  ,Date as Date_Key\r\n  ,dim_item_id\r\n  ,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Sum(src_units_ordered) as src_units_ordered\r\n  ,sum(src_units_shipped) as src_units_shipped\r\n  ,sum(Units_Returned) as Units_Returned\r\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\r\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\r\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\r\nFROM\r\n/*Retrieving Demand sales for KIT Items*/\r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t,dim_order_method_id\r\n\t\t\t\t\t\t\t\t,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \r\n\t\t\t\t\t\t\t\t,Date\r\n\t\t\t\t\t\t\t\t,dim_item_id\r\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom ( \r\n\tSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id ,\r\n    A.dim_item_id AS dim_src_kit_item_id,\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n    src_selling_price\r\n    ,\r\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\r\n    0                                                                   AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\r\n    0                                                                           AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    0                                                                               AS \"Net_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\r\n         \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    0                                                                             AS \"Net_Retail$\" ,\r\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Demand_Sales$\" ,\r\n    0 AS \"Shipped_Sales$\" ,\r\n    0 AS \"Return$\" ,\r\n    0 AS \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            order_date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\tLEFT JOIN\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n        WHERE\r\n        src_order_type='I'\r\n        AND ISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n            (\r\n                SELECT DISTINCT\r\n                    A.dim_src_kit_item_id\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                WHERE\r\n\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id)\r\n\t\t\t\t\tAND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_prepay_code))='F'\r\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            fact_cpg_sales_detail.dim_item_id,\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_src_kit_item_id,\r\n\t\t\tc.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                    dim_src_kit_item_id,\r\n\t\t\t\t\tsrc_kit_id,\r\n\t\t\t\t\ta.dim_item_id,\r\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n    (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} B\r\n                ON\r\n                    a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n           k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n           k.dim_src_kit_item_id,c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab4\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item         \r\n\tUNION all\r\n/*Retrieving Shipped sales for Kit Items*/    \r\n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \r\n\t\t\t\t\t\t\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom (SELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id,\r\n    A.dim_item_id AS dim_src_kit_item_id,\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                       AS \"Demand_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\r\n    \"Shipped_Retail$\" ,\r\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Shipped_Sales$\" ,\r\n    0                                                                                 AS \"Return$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            Ship_Date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_shipped) AS src_units_shipped\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\tLEFT JOIN\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n        WHERE\r\n            src_order_type='I'\r\n        AND Ship_Date_id IS NOT NULL\r\n        AND ISNULL(src_channel_id,'0') <> 'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                            A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n\t\t\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id )\r\n\t\t\t\t\t\t\tAND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_prepay_code))='F'\r\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\r\n        AND src_order_Status='IN'\r\n        GROUP BY\r\n\t\t\t\t\tfact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    fact_cpg_sales_detail.dim_order_method_id,\r\n                    src_order_type ,\r\n                    Ship_Date_id,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n                    src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_src_kit_item_id,\r\n\t\t\tc.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                  SELECT\r\n                    dim_src_kit_item_id,\r\n\t\t\t\t\tsrc_kit_id,\r\n\t\t\t\t\ta.dim_item_id,\r\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n    (src_required_quantity)                AS src_required_quantity\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                  a.dim_src_kit_item_id=b.dim_item_id\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n             k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n             k.dim_src_kit_item_id,c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id \r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            dim_order_method_id,\r\n            src_order_type,\r\n            DATE,\r\n            B.dim_item_id,\r\n            A.dim_item_id) Tab5\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\r\n\tUNION ALL\r\n/*Retrieving Return sales for Kit Items*/      \r\n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \r\n\t\t\t\t\t\t\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom (\r\nSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    CASE src_order_type\r\n        WHEN 'C'\r\n        THEN 'F'\r\n        ELSE 'F'\r\n    END AS src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id \r\n   ,A.dim_item_id AS dim_src_kit_item_id\r\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    0                                              AS src_units_shipped ,\r\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                      AS \"Demand_Cogs$\" ,\r\n    0                                                                      AS \"Shipped_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    0                                                                          AS \"Shipped_Sales$\" ,\r\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\r\n    \"Return$\" ,\r\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id AS dim_order_method_id ,\r\n            CASE src_order_type\r\n                WHEN 'C'\r\n                THEN 'F'\r\n                ELSE 'F'\r\n            END           AS src_order_type ,\r\n            order_date_id AS DATE ,\r\n              dim_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            (\r\n                SELECT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    CASE src_order_type\r\n                        WHEN 'C'\r\n                        THEN 'F'\r\n                        ELSE 'F'\r\n                    END AS src_order_type ,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\t\t\tLEFT JOIN\r\n\t\t\t\t\t{{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\t\tON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n                WHERE\r\n                ISNULL(src_channel_id,'0')='R'\r\n\t\t\t\tAND src_Order_Status='IN'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                                A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                             A.dim_src_kit_item_id=B.dim_item_id)\r\n\t\t\t\t\t\t\tAND src_order_number IN\r\n                                         (\r\n                                         SELECT DISTINCT\r\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                         FROM\r\n                                             {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                         WHERE\r\n                                             ltrim(RTRIM(src_prepay_code))='F'\r\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\r\n                                         )\r\n                GROUP BY\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    src_order_type,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id  ) AS A\r\n        LEFT OUTER JOIN\r\n            (\r\n                SELECT\r\n                    B.src_order_number    AS src_order_number,\r\n                    A.dim_order_method_id AS dim_order_method_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\r\n                INNER JOIN\r\n                    (\r\n                        SELECT\r\n                            src_order_number,\r\n                            src_original_ref_order_number\r\n                        FROM\r\n                            {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                        WHERE\r\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_item')}}\r\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\r\n                ON\r\n                    A.src_order_number=B.src_order_number ) B\r\n        ON\r\n            A.src_order_number=B.src_order_number\r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            dim_item_id,\r\n            src_selling_price ) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n              k.dim_src_kit_item_id,\r\n    c.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT  dim_src_kit_item_id,\r\n\t\t\t\t\ta.dim_item_id,\r\n                    src_required_quantity ,\r\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\r\n                FROM\r\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id\r\n                GROUP BY\r\n                    dim_src_kit_item_id,a.dim_item_id,src_required_quantity\r\n) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n          k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n                 k.dim_src_kit_item_id,c.dim_item_id) B\r\nON\r\n   A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab_Kit_Items\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_kit_sales_free"], "unique_id": "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_free.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_free.sql", "name": "intm_cpg_kit_sales_free", "resource_type": "model", "alias": "intm_cpg_kit_sales_free", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_free.sql", "compiled": true, "compiled_sql": "\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t,dim_order_method_id\n\t\t\t\t\t\t\t\t,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t\t\t\t\t\t\t,Date\n\t\t\t\t\t\t\t\t,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n        src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item         \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0') <> 'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n\t\t\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n\t\t\t\t\tfact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                ISNULL(src_channel_id,'0')='R'\n\t\t\t\tAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t,dim_order_method_id\n\t\t\t\t\t\t\t\t,case src_order_type when 'I' then 'F' else 'F' end as src_order_type     \n\t\t\t\t\t\t\t\t,Date\n\t\t\t\t\t\t\t\t,dim_item_id\n\t\t\t\t\t\t\t\t,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n        src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n           k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id ,dim_src_kit_item         \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0') <> 'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                            A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n\t\t\t\t\t\t\tA.dim_src_kit_item_id=B.dim_item_id )\n\t\t\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_prepay_code))='F'\n                                 AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR')\n        AND src_order_Status='IN'\n        GROUP BY\n\t\t\t\t\tfact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    fact_cpg_sales_detail.dim_order_method_id,\n                    src_order_type ,\n                    Ship_Date_id,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                  SELECT\n                    dim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id,\n    (src_component_percent_of_price)       AS src_component_percent_of_price ,\n    (src_required_quantity)                AS src_required_quantity\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n             k.dim_item_id=c.dim_item_id\n        GROUP BY\n             k.dim_src_kit_item_id,c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            dim_order_method_id,\n            src_order_type,\n            DATE,\n            B.dim_item_id,\n            A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'F'\n        ELSE 'F'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'F'\n                ELSE 'F'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n              dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'F'\n                        ELSE 'F'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n                ISNULL(src_channel_id,'0')='R'\n\t\t\t\tAND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                             A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_prepay_code))='F'\n                                         AND ISNULL(ltrim(RTRIM(src_order_origin_code)),'AA')<>'GR'\n                                         )\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id  ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R') ) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n              k.dim_src_kit_item_id,\n    c.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT  dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,a.dim_item_id,src_required_quantity\n) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n          k.dim_item_id=c.dim_item_id\n        GROUP BY\n                 k.dim_src_kit_item_id,c.dim_item_id) B\nON\n   A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Free_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from  ,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id"}, "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\n--Kit into Components for Gratis Orders--\r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n  ,dim_order_method_id\r\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \r\n  ,Date as Date_Key\r\n  ,dim_item_id\r\n  ,dim_src_kit_item_id\r\n  ,Avg(src_unit_cost) as src_unit_cost\r\n  ,Avg(src_current_retail_price) as src_current_retail_price\r\n  ,Sum(src_units_ordered) as src_units_ordered\r\n  ,sum(src_units_shipped) as src_units_shipped\r\n  ,sum(Units_Returned) as Units_Returned\r\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\r\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\r\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\r\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\r\nFROM\r\n/*Retrieving Demand sales for KIT Items*/\r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \r\n\t\t\t\t\t\t\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom ( \r\n\tSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id ,\r\n    A.dim_item_id AS dim_src_kit_item_id,\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n    src_selling_price\r\n    ,\r\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\r\n    0                                                                   AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\r\n    0                                                                           AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    0                                                                               AS \"Net_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\r\n         \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    0                                                                             AS \"Net_Retail$\" ,\r\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Demand_Sales$\" ,\r\n    0 AS \"Shipped_Sales$\" ,\r\n    0 AS \"Return$\" ,\r\n    0 AS \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            order_date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\tLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n        WHERE\r\n            src_order_type='I'\r\n        AND ISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n            (\r\n                SELECT DISTINCT\r\n                   A.dim_src_kit_item_id\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                WHERE\r\n                    A.dim_src_kit_item_id=B.dim_item_id)\r\n\t\t\t\t\tAND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            fact_cpg_sales_detail.dim_item_id,\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_src_kit_item_id,\r\n\t\t\tc.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n\t\t\t\t\tdim_src_kit_item_id,\r\n\t\t\t\t\tsrc_kit_id,\r\n\t\t\t\t\ta.dim_item_id, \r\n                    src_required_quantity ,\r\n                    src_component_percent_of_price AS src_component_percent_of_price\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                ON\r\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n           k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n            k.dim_src_kit_item_id,\r\n\t\t\tc.dim_item_id) B\r\nON\r\n      A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab4\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id       \r\n\tUNION all\r\n/*Retrieving Shipped sales for Kit Items*/    \r\n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \r\n\t\t\t\t\t\t\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom (SELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id ,\r\n    A.dim_item_id AS dim_src_kit_item_id ,\r\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\r\n    0                                                                      AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                       AS \"Demand_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\r\n    0                                                                          AS \"Returned_Cogs$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\r\n    \"Shipped_Retail$\" ,\r\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n         \"Shipped_Sales$\" ,\r\n    0                                                                                 AS \"Return$\" ,\r\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id ,\r\n            src_order_type ,\r\n            Ship_Date_id AS DATE ,\r\n            fact_cpg_sales_detail.dim_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_shipped) AS src_units_shipped\r\n        FROM\r\n            {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\tLEFT JOIN\r\n            {{source('fds_cpg','dim_cpg_order_method')}}\r\n        ON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n        WHERE\r\n            src_order_type='I'\r\n        AND Ship_Date_id IS NOT NULL\r\n        AND ISNULL(src_channel_id,'0')<>'R'\r\n        AND fact_cpg_sales_detail.dim_item_id IN\r\n            (\r\n                SELECT DISTINCT\r\n                    B.dim_item_id\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A,\r\n                    {{source('fds_cpg','dim_cpg_item')}} B\r\n                WHERE\r\n                    A.src_kit_id=B.src_item_id )\r\n        AND src_order_number IN\r\n                                 (\r\n                                 SELECT DISTINCT\r\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                 FROM\r\n                                     {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                 WHERE\r\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\r\n        AND src_Order_Status='IN'\r\n        GROUP BY\r\n            fact_cpg_sales_detail.dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            fact_cpg_sales_detail.dim_order_method_id,\r\n            src_order_type ,\r\n            Ship_Date_id,\r\n            fact_cpg_sales_detail.dim_item_id,\r\n            src_selling_price) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_item_id,\r\n\t\t\tdim_src_kit_item_id,                        \r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT\r\n                    dim_src_kit_item_id, \r\n\t\t\t\t\ta.dim_item_id,\r\n                    src_required_quantity ,\r\n                    src_component_percent_of_price AS src_component_percent_of_price\r\n                FROM\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} B\r\n                ON\r\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n           k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n            dim_src_kit_item_id,   \r\n\t\t\tk.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id\r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n   A.dim_item_id) Tab5\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\r\n\tUNION ALL\r\n/*Retrieving Return sales for Kit Items*/      \r\n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n\t\t\t\t\t\t\t\t ,dim_order_method_id\r\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \r\n\t\t\t\t\t\t\t\t ,Date\r\n\t\t\t\t\t\t\t\t ,dim_item_id\r\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\r\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\r\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\r\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\r\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\r\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\r\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\r\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\r\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\r\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\r\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\r\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\r\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\r\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\r\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\r\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\r\n  ,sum(\"Return$\") as \"Return$\"\r\n  ,sum(\"Net$\") as \"Net$\"\r\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\r\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\r\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\r\n\tfrom (\r\nSELECT DISTINCT\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id ,\r\n    CASE src_order_type\r\n        WHEN 'C'\r\n        THEN 'GR'\r\n        ELSE 'GR'\r\n    END AS src_order_type ,\r\n    DATE ,\r\n    B.dim_item_id AS dim_item_id \r\n   ,A.dim_item_id AS dim_src_kit_item_id\r\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\r\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\r\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\r\n         src_selling_price ,\r\n    0                                              AS src_units_ordered ,\r\n    0                                              AS src_units_shipped ,\r\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\r\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\r\n    0                                                                      AS \"Demand_Cogs$\" ,\r\n    0                                                                      AS \"Shipped_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\r\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\r\n    0                                                                          AS \"Demand_Retail$\" ,\r\n    0                                                                         AS \"Shipped_Retail$\" ,\r\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\r\n         \"Net_Retail$\" ,\r\n    0                                                                           AS \"Demand_Sales$\" ,\r\n    0                                                                          AS \"Shipped_Sales$\" ,\r\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\r\n    \"Return$\" ,\r\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\r\n    \"Net$\"\r\nFROM\r\n    (\r\n        SELECT DISTINCT\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id AS dim_order_method_id ,\r\n            CASE src_order_type\r\n                WHEN 'C'\r\n                THEN 'GR'\r\n                ELSE 'GR'\r\n            END           AS src_order_type ,\r\n            order_date_id AS DATE ,\r\n            dim_item_id ,\r\n            src_selling_price ,\r\n            SUM(src_units_ordered) AS src_units_ordered\r\n        FROM\r\n            (\r\n                SELECT\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    CASE src_order_type\r\n                        WHEN 'C'\r\n                        THEN 'GR'\r\n                        ELSE 'GR'\r\n                    END AS src_order_type ,\r\n                    fact_cpg_sales_detail.dim_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\t\t\tLEFT JOIN\r\n\t\t\t\t\t{{source('fds_cpg','fact_cpg_sales_detail')}}\r\n\t\t\t\tON\r\n            fact_cpg_sales_detail.dim_order_method_id=\r\n            dim_cpg_order_method.dim_order_method_id\r\n                WHERE\r\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\r\n                AND fact_cpg_sales_detail.dim_item_id IN\r\n                    (\r\n                        SELECT DISTINCT\r\n                                A.dim_src_kit_item_id\r\n                        FROM\r\n                            {{source('fds_cpg','fact_cpg_sales_detail')}} A,\r\n                            {{source('fds_cpg','dim_cpg_item')}} B\r\n                        WHERE\r\n                            A.dim_src_kit_item_id=B.dim_item_id)\r\n\t\t\t\t\t\t\tAND src_order_number IN\r\n                                         (\r\n                                         SELECT DISTINCT\r\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\r\n                                         FROM\r\n                                             {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                                         WHERE\r\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\r\n                GROUP BY\r\n                    fact_cpg_sales_detail.dim_business_unit_id,\r\n                    dim_shop_site_id,\r\n                    src_currency_code_from ,\r\n                    src_order_type,\r\n\t\t\t\t\tfact_cpg_sales_detail.dim_item_id,\r\n                    src_order_number,\r\n                    fact_cpg_sales_detail.src_unit_cost,\r\n                    fact_cpg_sales_detail.src_selling_price,\r\n                    fact_cpg_sales_detail.src_current_retail_price,\r\n                    src_units_ordered,\r\n                    order_date_id ) AS A\r\n        LEFT OUTER JOIN\r\n            (\r\n                SELECT\r\n                    B.src_order_number    AS src_order_number,\r\n                    A.dim_order_method_id AS dim_order_method_id\r\n                FROM\r\n                    {{source('fds_cpg','fact_cpg_sales_header')}} A\r\n                INNER JOIN\r\n                    (\r\n                        SELECT\r\n                            src_order_number,\r\n                            src_original_ref_order_number\r\n                        FROM\r\n                            {{source('fds_cpg','fact_cpg_sales_header')}}\r\n                        WHERE\r\n                            dim_order_method_id in (select dim_order_method_id from {{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\r\n                ON\r\n                    A.src_order_number=B.src_order_number ) B\r\n        ON\r\n            A.src_order_number=B.src_order_number\r\n        GROUP BY\r\n            dim_business_unit_id,\r\n            dim_shop_site_id,\r\n            src_currency_code_from ,\r\n            b.dim_order_method_id,\r\n            src_order_type ,\r\n            order_date_id,\r\n            dim_item_id,\r\n            src_selling_price ) AS A\r\nLEFT OUTER JOIN\r\n    (\r\n        SELECT\r\n            k.dim_src_kit_item_id,\r\n\t\t\tc.dim_item_id,\r\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\r\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\r\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\r\n            AVG(src_required_quantity)                AS src_required_quantity\r\n        FROM\r\n            (\r\n                SELECT   \r\n\t\t\t\t\tdim_src_kit_item_id,\r\n\t\t\t\t\ta.dim_item_id,\r\n                    src_required_quantity ,\r\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\r\n                FROM\r\n                      {{source('fds_cpg','dim_cpg_kit_item')}} A\r\n\t\t\t\tINNER JOIN\r\n                    {{source('fds_cpg','dim_cpg_kit_item')}} B\r\n                ON\r\n                  a.dim_src_kit_item_id=b.dim_item_id\r\n                GROUP BY\r\n                    dim_src_kit_item_id,\r\n\t\t\t\t\ta.dim_item_id,\r\n                    src_required_quantity) k\r\n        LEFT OUTER JOIN\r\n            {{source('fds_cpg','dim_cpg_item')}} c\r\n        ON\r\n            k.dim_item_id=c.dim_item_id\r\n        GROUP BY\r\n               k.dim_src_kit_item_id,\r\n\t\t\t   c.dim_item_id) B\r\nON\r\n    A.dim_item_id=B.dim_src_kit_item_id \r\nGROUP BY\r\n    dim_business_unit_id,\r\n    dim_shop_site_id,\r\n    src_currency_code_from ,\r\n    dim_order_method_id,\r\n    src_order_type,\r\n    DATE,\r\n    B.dim_item_id,\r\n    A.dim_item_id) Tab_Kit_Items\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_kit_sales_gratis"], "unique_id": "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_gratis.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_gratis.sql", "name": "intm_cpg_kit_sales_gratis", "resource_type": "model", "alias": "intm_cpg_kit_sales_gratis", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_kit_sales_gratis.sql", "compiled": true, "compiled_sql": "\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id       \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id ,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.src_kit_id=B.src_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_item_id,\n\t\t\tdim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id, \n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            dim_src_kit_item_id,   \n\t\t\tk.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                            A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n\t\t\t\t\tfact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n\t\t\t   c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n--Kit into Components for Gratis Orders--\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n  ,dim_order_method_id\n  ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type  \n  ,Date as Date_Key\n  ,dim_item_id\n  ,dim_src_kit_item_id\n  ,Avg(src_unit_cost) as src_unit_cost\n  ,Avg(src_current_retail_price) as src_current_retail_price\n  ,Sum(src_units_ordered) as src_units_ordered\n  ,sum(src_units_shipped) as src_units_shipped\n  ,sum(Units_Returned) as Units_Returned\n  ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold\n  ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"\n  ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"\n  ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"\nFROM\n/*Retrieving Demand sales for KIT Items*/\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type     \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom ( \n\tSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n    src_selling_price\n    ,\n    SUM(src_units_ordered)                                              AS src_units_ordered ,\n    0                                                                   AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    SUM(ISNULL(src_units_ordered,0)*B.src_required_quantity *src_unit_cost)      AS \"Demand_Cogs$\" ,\n    0                                                                           AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    0                                                                               AS \"Net_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity * ISNULL(src_current_retail_price,0)) AS\n         \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    0                                                                             AS \"Net_Retail$\" ,\n    SUM(src_units_ordered * ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Demand_Sales$\" ,\n    0 AS \"Shipped_Sales$\" ,\n    0 AS \"Return$\" ,\n    0 AS \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            order_date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                   A.dim_src_kit_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\tAND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\tsrc_kit_id,\n\t\t\t\t\ta.dim_item_id, \n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                ON\n                    a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id) B\nON\n      A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab4\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id       \n\tUNION all\n/*Retrieving Shipped sales for Kit Items*/    \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'I' then 'GR' else 'GR' end as src_order_type      \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (SELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id ,\n    A.dim_item_id AS dim_src_kit_item_id ,\n    AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    SUM(src_units_shipped)                                              AS src_units_shipped ,\n    0                                                                      AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                       AS \"Demand_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Shipped_Cogs$\" ,\n    0                                                                          AS \"Returned_Cogs$\" ,\n    SUM (src_units_shipped*B.src_required_quantity*ISNULL(src_unit_cost,0))         AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    SUM (src_units_shipped*B.src_required_quantity* ISNULL(src_current_retail_price,0)) AS\n    \"Shipped_Retail$\" ,\n    SUM ((src_units_shipped)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n         \"Shipped_Sales$\" ,\n    0                                                                                 AS \"Return$\" ,\n    SUM(src_units_shipped*((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id ,\n            src_order_type ,\n            Ship_Date_id AS DATE ,\n            fact_cpg_sales_detail.dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_shipped) AS src_units_shipped\n        FROM\n            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\tLEFT JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n        ON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n        WHERE\n            src_order_type='I'\n        AND Ship_Date_id IS NOT NULL\n        AND ISNULL(src_channel_id,'0')<>'R'\n        AND fact_cpg_sales_detail.dim_item_id IN\n            (\n                SELECT DISTINCT\n                    B.dim_item_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A,\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                WHERE\n                    A.src_kit_id=B.src_item_id )\n        AND src_order_number IN\n                                 (\n                                 SELECT DISTINCT\n                                     ltrim(RTRIM(src_order_number)) AS src_order_number\n                                 FROM\n                                     \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                 WHERE\n                                     ltrim(RTRIM(src_order_origin_code))='GR')\n        AND src_Order_Status='IN'\n        GROUP BY\n            fact_cpg_sales_detail.dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            fact_cpg_sales_detail.dim_order_method_id,\n            src_order_type ,\n            Ship_Date_id,\n            fact_cpg_sales_detail.dim_item_id,\n            src_selling_price) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_item_id,\n\t\t\tdim_src_kit_item_id,                        \n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT\n                    dim_src_kit_item_id, \n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    src_component_percent_of_price AS src_component_percent_of_price\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                   a.dim_src_kit_item_id=b.dim_item_id ) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n           k.dim_item_id=c.dim_item_id\n        GROUP BY\n            dim_src_kit_item_id,   \n\t\t\tk.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id\nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n   A.dim_item_id) Tab5\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id,dim_src_kit_item_id\n\tUNION ALL\n/*Retrieving Return sales for Kit Items*/      \n\tSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n\t\t\t\t\t\t\t\t ,dim_order_method_id\n\t\t\t\t\t\t\t\t ,case src_order_type when 'C' then 'GR' else 'GR' end as src_order_type       \n\t\t\t\t\t\t\t\t ,Date\n\t\t\t\t\t\t\t\t ,dim_item_id\n\t\t\t\t\t\t\t\t ,dim_src_kit_item_id\n\t\t\t\t\t\t\t\t ,Avg(src_unit_cost) as src_unit_cost\n\t\t\t\t\t\t\t\t ,Avg(src_current_retail_price) as src_current_retail_price\n\t\t\t\t\t\t\t\t ,Avg(src_selling_price) as src_selling_price\n\t\t\t\t\t\t\t\t ,sum(src_units_ordered*src_required_quantity) as src_units_ordered\n\t\t\t\t\t\t\t\t ,SUM(src_units_shipped*src_required_quantity) as src_units_shipped\n\t\t\t\t\t\t\t\t ,SUM(Units_Returned*src_required_quantity) as Units_Returned\n\t\t\t\t\t\t\t\t ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"\n  ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"\n  ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"\n  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"\n  ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"\n  ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"\n  ,sum (\"Net_Retail$\") as \"Net_Retail$\"\n  ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"\n  ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"\n  ,sum(\"Return$\") as \"Return$\"\n  ,sum(\"Net$\") as \"Net$\"\n  ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"\n  ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"\n  ,sum(isnull(\"Net$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"\n\tfrom (\nSELECT DISTINCT\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id ,\n    CASE src_order_type\n        WHEN 'C'\n        THEN 'GR'\n        ELSE 'GR'\n    END AS src_order_type ,\n    DATE ,\n    B.dim_item_id AS dim_item_id \n   ,A.dim_item_id AS dim_src_kit_item_id\n   ,AVG(src_unit_cost)                                                 AS src_unit_cost ,\n    AVG(src_current_retail_price)                                      AS src_current_retail_price ,\n    AVG(((src_selling_price*src_component_percent_of_price)/100)/nullif(B.src_required_quantity,0)) AS\n         src_selling_price ,\n    0                                              AS src_units_ordered ,\n    0                                              AS src_units_shipped ,\n    SUM(src_units_ordered)                                                 AS Units_Returned ,\n    SUM(B.src_required_quantity)                                          AS src_required_quantity ,\n    0                                                                      AS \"Demand_Cogs$\" ,\n    0                                                                      AS \"Shipped_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))     AS \"Returned_Cogs$\" ,\n    SUM(src_units_ordered*B.src_required_quantity*ISNULL(src_unit_cost,0))          AS \"Net_Cogs$\" ,\n    0                                                                          AS \"Demand_Retail$\" ,\n    0                                                                         AS \"Shipped_Retail$\" ,\n    SUM ((src_units_ordered)*B.src_required_quantity *ISNULL(src_current_retail_price,0)) AS\n         \"Net_Retail$\" ,\n    0                                                                           AS \"Demand_Sales$\" ,\n    0                                                                          AS \"Shipped_Sales$\" ,\n    SUM((src_units_ordered * ISNULL(src_selling_price,0)*src_component_percent_of_price)/100) AS\n    \"Return$\" ,\n    SUM(src_units_ordered* ((ISNULL(src_selling_price,0)*src_component_percent_of_price)/100)) AS\n    \"Net$\"\nFROM\n    (\n        SELECT DISTINCT\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id AS dim_order_method_id ,\n            CASE src_order_type\n                WHEN 'C'\n                THEN 'GR'\n                ELSE 'GR'\n            END           AS src_order_type ,\n            order_date_id AS DATE ,\n            dim_item_id ,\n            src_selling_price ,\n            SUM(src_units_ordered) AS src_units_ordered\n        FROM\n            (\n                SELECT\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    CASE src_order_type\n                        WHEN 'C'\n                        THEN 'GR'\n                        ELSE 'GR'\n                    END AS src_order_type ,\n                    fact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tLEFT JOIN\n\t\t\t\t\t\"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"\n\t\t\t\tON\n            fact_cpg_sales_detail.dim_order_method_id=\n            dim_cpg_order_method.dim_order_method_id\n                WHERE\n               ISNULL(src_channel_id,'0')='R' AND src_Order_Status='IN'\n                AND fact_cpg_sales_detail.dim_item_id IN\n                    (\n                        SELECT DISTINCT\n                                A.dim_src_kit_item_id\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" A,\n                            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B\n                        WHERE\n                            A.dim_src_kit_item_id=B.dim_item_id)\n\t\t\t\t\t\t\tAND src_order_number IN\n                                         (\n                                         SELECT DISTINCT\n                                             ltrim(RTRIM(src_order_number)) AS src_order_number\n                                         FROM\n                                             \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                                         WHERE\n                                             ltrim(RTRIM(src_order_origin_code))='GR')\n                GROUP BY\n                    fact_cpg_sales_detail.dim_business_unit_id,\n                    dim_shop_site_id,\n                    src_currency_code_from ,\n                    src_order_type,\n\t\t\t\t\tfact_cpg_sales_detail.dim_item_id,\n                    src_order_number,\n                    fact_cpg_sales_detail.src_unit_cost,\n                    fact_cpg_sales_detail.src_selling_price,\n                    fact_cpg_sales_detail.src_current_retail_price,\n                    src_units_ordered,\n                    order_date_id ) AS A\n        LEFT OUTER JOIN\n            (\n                SELECT\n                    B.src_order_number    AS src_order_number,\n                    A.dim_order_method_id AS dim_order_method_id\n                FROM\n                    \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A\n                INNER JOIN\n                    (\n                        SELECT\n                            src_order_number,\n                            src_original_ref_order_number\n                        FROM\n                            \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n                        WHERE\n                            dim_order_method_id in (select dim_order_method_id from \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\t\t\t\t\twhere ISNULL(src_channel_id,'0')='R')) B\n                ON\n                    A.src_order_number=B.src_order_number ) B\n        ON\n            A.src_order_number=B.src_order_number\n        GROUP BY\n            dim_business_unit_id,\n            dim_shop_site_id,\n            src_currency_code_from ,\n            b.dim_order_method_id,\n            src_order_type ,\n            order_date_id,\n            dim_item_id,\n            src_selling_price ) AS A\nLEFT OUTER JOIN\n    (\n        SELECT\n            k.dim_src_kit_item_id,\n\t\t\tc.dim_item_id,\n            AVG(ISNULL(C.src_unit_cost,0))            AS src_unit_cost ,\n            AVG(ISNULL(C.src_current_retail_price,0)) AS src_current_retail_price ,\n            AVG(src_component_percent_of_price)       AS src_component_percent_of_price ,\n            AVG(src_required_quantity)                AS src_required_quantity\n        FROM\n            (\n                SELECT   \n\t\t\t\t\tdim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity ,\n                    AVG(src_component_percent_of_price) AS src_component_percent_of_price\n                FROM\n                      \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A\n\t\t\t\tINNER JOIN\n                    \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" B\n                ON\n                  a.dim_src_kit_item_id=b.dim_item_id\n                GROUP BY\n                    dim_src_kit_item_id,\n\t\t\t\t\ta.dim_item_id,\n                    src_required_quantity) k\n        LEFT OUTER JOIN\n            \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" c\n        ON\n            k.dim_item_id=c.dim_item_id\n        GROUP BY\n               k.dim_src_kit_item_id,\n\t\t\t   c.dim_item_id) B\nON\n    A.dim_item_id=B.dim_src_kit_item_id \nGROUP BY\n    dim_business_unit_id,\n    dim_shop_site_id,\n    src_currency_code_from ,\n    dim_order_method_id,\n    src_order_type,\n    DATE,\n    B.dim_item_id,\n    A.dim_item_id) Tab_Kit_Items\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id) Tab_Kit_Gratis_Orders\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id,dim_src_kit_item_id"}, "model.analytics_engineering_marts.intm_cpg_sales_free": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,src_order_type  \r\n      ,Date as Date_Key  \r\n      ,dim_item_id  \r\n      ,0 as Other_amount\r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(Net_Units_Sold) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n      from   \r\n  (       \r\n--sub1 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \r\n      ,Date  \r\n      ,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Sum(src_units_ordered) as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \r\n\tFROM  (  \r\n/*Retrieving Demand sales for Regular Items*/  \r\n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,fact_cpg_sales_detail.dim_order_method_id  \r\n      ,src_order_type,order_date_id as Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,0 as \"Net_Cogs$\"  \r\n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,0 as \"Net_Retail$\"  \r\n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,0 as \"Net_Sales_$\"  \r\n    FROM {{source('fds_cpg','fact_cpg_sales_detail')}}  \r\n        left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \r\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \r\n            dim_item_id  not in (select distinct dim_item_id \r\n\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n            src_order_type='I' and src_channel_id<>'R' and  \r\n            dim_item_id not in (select distinct B.dim_item_id  \r\n\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \r\n\t\t\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\t\t\t\t\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  \r\n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\r\n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \r\n    UNION all  \r\n/*Retrieving Shipped sales for Regular Items*/           \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,sum(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,fact_cpg_sales_detail.dim_order_method_id  \r\n      ,src_order_type,ship_date_id as Date,dim_item_id                      \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,0 as src_units_ordered  \r\n      ,sum(src_units_shipped) as src_units_shipped  \r\n      ,0 as Units_Returned  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \r\n      ,0 as \"Returned_Cogs$\"  \r\n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \r\n      ,0 as \"Return$\"  \r\n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n\t\tFROM {{source('fds_cpg','fact_cpg_sales_detail')}}  \r\n\t\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}}\r\n\t\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\r\n\t\twhere  (order_date_id>=0 or ship_date_id>=0) and   \r\n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \r\n\t\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \r\n                dim_item_id not in (select distinct B.dim_item_id  from \r\n\t\t\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id \r\n\t\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\t\t\t\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  \r\n\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\r\n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n                and src_order_status='IN'  \r\n\tgroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n    UNION ALL  \r\n/*Retrieving Return sales for Regular Items*/             \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \r\n      ,Date,dim_item_id  \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,sum(src_units_ordered) as src_units_ordered  \r\n      ,SUM(src_units_shipped) as src_units_shipped  \r\n      ,SUM(Units_Returned) as Units_Returned  \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \r\n      ,sum(\"Return$\") as \"Return$\"  \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \r\n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \r\n      ,b.dim_order_method_id as dim_order_method_id  \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \r\n      ,order_date_id as Date,dim_item_id                      \r\n      ,Avg(src_unit_cost) as src_unit_cost  \r\n      ,Avg(src_current_retail_price) as src_current_retail_price  \r\n      ,Avg(src_selling_price) as src_selling_price  \r\n      ,0 as src_units_ordered  \r\n      ,0 as src_units_shipped  \r\n      ,sum(src_units_ordered) as Units_Returned  \r\n      ,0 as \"Demand_Cogs$\"  \r\n      ,0 as \"Shipped_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \r\n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \r\n      ,0 as \"Demand_Retail$\"  \r\n      ,0 as \"Shipped_Retail$\"  \r\n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \r\n      ,0 as \"Demand_Sales$\"  \r\n      ,0 as \"Shipped_Sales$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \r\n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \r\n\tFrom (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \r\n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \r\n            dim_item_id,  \r\n            src_order_number,  \r\n            src_unit_cost,  \r\n            src_selling_price,  \r\n            src_current_retail_price,  \r\n            src_units_ordered,  \r\n            order_date_id    \r\n   FROM {{source('fds_cpg','fact_cpg_sales_detail')}} \r\n\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\ton fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id    \r\n\twhere (order_date_id>=0 or ship_date_id>=0) and   \r\n\t\t\tdim_item_id  not in (select distinct dim_item_id \r\n\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_item')}}\r\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \r\n\t\t\tsrc_channel_id='R' and src_order_status='IN'  \r\n\t\t\tand dim_item_id not in (select distinct B.dim_item_id  \r\n\t\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \r\n\t\t\t\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_kit_item')}} A \r\n\t\t\t\t\t\t\t\t\t\t\tinner join {{source('fds_cpg','dim_cpg_item')}} B  \r\n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, {{source('fds_cpg','dim_cpg_item')}} B \r\n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id ) \r\n\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n\t) as A      \r\n\t\tleft outer join  \r\n        (select B.src_order_number as src_order_number,  \r\n            A.dim_order_method_id as dim_order_method_id   \r\n        from {{source('fds_cpg','fact_cpg_sales_header')}} A  \r\n        inner join                         \r\n        (select src_order_number,src_original_ref_order_number \r\n\t\tfrom {{source('fds_cpg','fact_cpg_sales_header')}}  \r\n        left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\r\n\t\twhere src_channel_id='R' ) B                                                              \r\n        on A.src_order_number=B.src_order_number) B  \r\n    on  A.src_order_number=B.src_order_number  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \r\n--sub1 select end  \r\n--Kit into Components---  \r\nUnion All  \r\n--sub2 select  \r\nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id    \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \r\n      ,Date    \r\n      ,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Sum(src_units_ordered) as src_units_ordered    \r\n      ,sum(src_units_shipped) as src_units_shipped    \r\n      ,sum(Units_Returned) as Units_Returned    \r\n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \r\n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \r\n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \r\nFROM    \r\n/*Retrieving Demand sales for KIT Items*/    \r\n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(src_selling_price) as src_selling_price    \r\n      ,sum(src_units_ordered) as src_units_ordered    \r\n      ,SUM(src_units_shipped) as src_units_shipped    \r\n      ,SUM(Units_Returned) as Units_Returned    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n\tfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n      ,src_order_type,order_date_id as Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price   \r\n      ,sum(src_kit_units_ordered ) as src_units_ordered    \r\n      ,0 as src_units_shipped    \r\n      ,0 as Units_Returned    \r\n      ,sum(src_required_quantity) as src_required_quantity    \r\n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,0 as \"Net_Cogs$\"    \r\n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,0 as \"Net_Retail$\"    \r\n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,0 as \"Net_Sales_$\"    \r\n    FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}    \r\n        left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\r\n    where (order_date_id>=0 or ship_date_id>=0) and     \r\n            src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \r\n            src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}}\r\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \r\n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \r\n\t\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}}    \r\n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \r\n    UNION all    \r\n/*Retrieving Shipped sales for Kit Items*/        \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id    \r\n      ,src_order_type,Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(src_selling_price) as src_selling_price    \r\n      ,sum(src_units_ordered) as src_units_ordered    \r\n      ,SUM(src_units_shipped) as src_units_shipped    \r\n      ,SUM(Units_Returned) as Units_Returned    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n\t  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n      ,src_order_type,ship_date_id as Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \r\n      ,0 as src_units_ordered    \r\n      ,sum(src_kit_units_shipped ) as src_units_shipped    \r\n      ,0 as Units_Returned    \r\n      ,sum(src_required_quantity) as src_required_quantity    \r\n      ,0 as \"Demand_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \r\n      ,0 as \"Returned_Cogs$\"    \r\n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n      ,0 as \"Demand_Sales$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \r\n      ,0 as \"Return$\"    \r\n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n\t\tFROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}}    \r\n            left join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\r\n        where (order_date_id>=0 or ship_date_id>=0) and     \r\n                dim_item_id  not in (select distinct dim_item_id \r\n\t\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n                src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \r\n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n                and src_order_status='IN'     \r\n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \r\n    UNION ALL    \r\n/*Retrieving Return sales for Kit Items*/          \r\nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,dim_order_method_id    \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \r\n      ,Date,dim_item_id    \r\n      ,Avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(src_selling_price) as src_selling_price    \r\n      ,sum(src_units_ordered) as src_units_ordered    \r\n      ,SUM(src_units_shipped) as src_units_shipped    \r\n      ,SUM(Units_Returned) as Units_Returned    \r\n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \r\n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \r\n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \r\n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \r\n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \r\n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \r\n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \r\n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \r\n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \r\n      ,sum(\"Return$\") as \"Return$\"    \r\n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \r\n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \r\n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \r\n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \r\nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \r\n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \r\n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \r\n      ,order_date_id as Date,dim_item_id    \r\n      ,avg(src_unit_cost) as src_unit_cost    \r\n      ,Avg(src_current_retail_price) as src_current_retail_price    \r\n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \r\n      ,0 as src_units_ordered    \r\n      ,0 as src_units_shipped    \r\n      ,sum(src_kit_units_ordered ) as Units_Returned    \r\n      ,sum(src_required_quantity) as src_required_quantity    \r\n      ,0 as \"Demand_Cogs$\"    \r\n      ,0 as \"Shipped_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \r\n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \r\n      ,0 as \"Demand_Retail$\"    \r\n      ,0 as \"Shipped_Retail$\"    \r\n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \r\n      ,0 as \"Demand_Sales$\"    \r\n      ,0 as \"Shipped_Sales$\"    \r\n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \r\n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \r\n        FROM {{source('fds_cpg','fact_cpg_sales_detail_kit_component')}} \r\n\t\t\tleft join {{source('fds_cpg','dim_cpg_order_method')}} \r\n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \r\n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \r\n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \r\n\t\t\t\t\t\t\t\t\tfrom {{source('fds_cpg','dim_cpg_item')}} \r\n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \r\n\t\t\t\tsrc_channel_id='R' and src_order_status='IN' \r\n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \r\n\t\t\t\t\t\t\t\t\t\t\tFROM {{source('fds_cpg','fact_cpg_sales_header')}} \r\n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \r\n\tgroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \r\n\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \r\n        order_date_id) Tab_Kit_Items    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \r\ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cpg", "aggregate_intermediate", "intm_cpg_sales_free"], "unique_id": "model.analytics_engineering_marts.intm_cpg_sales_free", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/aggregate_intermediate/intm_cpg_sales_free.sql", "original_file_path": "models/fds_cpg/aggregate_intermediate/intm_cpg_sales_free.sql", "name": "intm_cpg_sales_free", "resource_type": "model", "alias": "intm_cpg_sales_free", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_kit_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"], ["fds_cpg", "fact_cpg_sales_detail_kit_component"], ["fds_cpg", "dim_cpg_order_method"], ["fds_cpg", "dim_cpg_item"], ["fds_cpg", "fact_cpg_sales_header"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/aggregate_intermediate/intm_cpg_sales_free.sql", "compiled": true, "compiled_sql": "\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n\tFROM  (  \n/*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n            dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n            src_order_type='I' and src_channel_id<>'R' and  \n            dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n\t\twhere  (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                dim_item_id not in (select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'  \n\tgroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n      ,order_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFrom (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id    \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\t\tsrc_channel_id='R' and src_order_status='IN'  \n\t\t\tand dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id ) \n\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\t) as A      \n\t\tleft outer join  \n        (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n        inner join                         \n        (select src_order_number,src_original_ref_order_number \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n\t\twhere src_channel_id='R' ) B                                                              \n        on A.src_order_number=B.src_order_number) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n\tfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price   \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and     \n            src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n            src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n\t  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n            left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n        where (order_date_id>=0 or ship_date_id>=0) and     \n                dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN' \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\tgroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n        order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,src_order_type  \n      ,Date as Date_Key  \n      ,dim_item_id  \n      ,0 as Other_amount\n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(Net_Units_Sold) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n      from   \n  (       \n--sub1 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type   \n      ,Date  \n      ,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Sum(src_units_ordered) as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"  \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"  \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"  \n\tFROM  (  \n/*Retrieving Demand sales for Regular Items*/  \n    SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,order_date_id as Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,0 as Units_Returned  \n      ,sum(src_units_ordered *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,0 as \"Net_Cogs$\"  \n      ,sum(src_units_ordered * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,0 as \"Net_Retail$\"  \n      ,sum(src_units_ordered*isnull(src_selling_price,0)) as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,0 as \"Net_Sales_$\"  \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id   \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n            dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n            src_order_type='I' and src_channel_id<>'R' and  \n            dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id             \n    UNION all  \n/*Retrieving Shipped sales for Regular Items*/           \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'I' then 'F' else 'F' end as src_order_type         \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,sum(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,fact_cpg_sales_detail.dim_order_method_id  \n      ,src_order_type,ship_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,sum(src_units_shipped) as src_units_shipped  \n      ,0 as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,sum (src_units_shipped*isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"  \n      ,0 as \"Returned_Cogs$\"  \n      ,sum (src_units_shipped   *isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,sum (src_units_shipped* isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"  \n      ,sum ((src_units_shipped) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,sum (src_units_shipped*isnull(src_selling_price,0)) as \"Shipped_Sales$\"  \n      ,0 as \"Return$\"  \n      ,sum(src_units_shipped* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\"  \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\"\n\t\t\ton fact_cpg_sales_detail.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\t\t\n\t\twhere  (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n                src_order_type='I' and ship_date_id is not null and src_channel_id<>'R' and  \n                dim_item_id not in (select distinct B.dim_item_id  from \n\t\t\t\t\t\t\t\t\t(select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id )\n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'  \n\tgroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail.dim_order_method_id, src_order_type ,ship_date_id,dim_item_id) Tab2  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n    UNION ALL  \n/*Retrieving Return sales for Regular Items*/             \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type        \n      ,Date,dim_item_id  \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,sum(src_units_ordered) as src_units_ordered  \n      ,SUM(src_units_shipped) as src_units_shipped  \n      ,SUM(Units_Returned) as Units_Returned  \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"  \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"  \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"  \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"  \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"  \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"  \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"  \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"  \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"  \n      ,sum(\"Return$\") as \"Return$\"  \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"  \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"  \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"  \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"  \n        from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from  \n      ,b.dim_order_method_id as dim_order_method_id  \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type  \n      ,order_date_id as Date,dim_item_id                      \n      ,Avg(src_unit_cost) as src_unit_cost  \n      ,Avg(src_current_retail_price) as src_current_retail_price  \n      ,Avg(src_selling_price) as src_selling_price  \n      ,0 as src_units_ordered  \n      ,0 as src_units_shipped  \n      ,sum(src_units_ordered) as Units_Returned  \n      ,0 as \"Demand_Cogs$\"  \n      ,0 as \"Shipped_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Returned_Cogs$\"  \n      ,sum(src_units_ordered*isnull(src_unit_cost,0)) as \"Net_Cogs$\"  \n      ,0 as \"Demand_Retail$\"  \n      ,0 as \"Shipped_Retail$\"  \n      ,sum ((src_units_ordered) *isnull(src_current_retail_price,0)) as \"Net_Retail$\"  \n      ,0 as \"Demand_Sales$\"  \n      ,0 as \"Shipped_Sales$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Return$\"  \n      ,sum(-1* isnull(src_selling_price,0)) as \"Net_Sales_$\"  \n\tFrom (select dim_business_unit_id,dim_shop_site_id,src_currency_code_from,  \n            case src_order_type when 'C' then 'F' else 'F' end as src_order_type ,  \n            dim_item_id,  \n            src_order_number,  \n            src_unit_cost,  \n            src_selling_price,  \n            src_current_retail_price,  \n            src_units_ordered,  \n            order_date_id    \n   FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail\" \n\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail.dim_order_method_id = dim_cpg_order_method.dim_order_method_id    \n\twhere (order_date_id>=0 or ship_date_id>=0) and   \n\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\"\n\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and  \n\t\t\tsrc_channel_id='R' and src_order_status='IN'  \n\t\t\tand dim_item_id not in (select distinct B.dim_item_id  \n\t\t\t\t\t\t\t\t\tfrom (select distinct B.dim_item_id as kit_id \n\t\t\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_kit_item\" A \n\t\t\t\t\t\t\t\t\t\t\tinner join \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B  \n\t\t\t\t\t\t\t\t\t\t\ton A.src_kit_id=B.src_item_id) A, \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" B \n\t\t\t\t\t\t\t\t\twhere A.kit_id=B.dim_item_id ) \n\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\t) as A      \n\t\tleft outer join  \n        (select B.src_order_number as src_order_number,  \n            A.dim_order_method_id as dim_order_method_id   \n        from \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" A  \n        inner join                         \n        (select src_order_number,src_original_ref_order_number \n\t\tfrom \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"  \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_header.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \t\n\t\twhere src_channel_id='R' ) B                                                              \n        on A.src_order_number=B.src_order_number) B  \n    on  A.src_order_number=B.src_order_number  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,b.dim_order_method_id, src_order_type ,order_date_id,dim_item_id) Tab_Regular \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Regular1  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id  \n--sub1 select end  \n--Kit into Components---  \nUnion All  \n--sub2 select  \nSelect dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type      \n      ,Date    \n      ,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Sum(src_units_ordered) as src_units_ordered    \n      ,sum(src_units_shipped) as src_units_shipped    \n      ,sum(Units_Returned) as Units_Returned    \n      ,sum(src_units_shipped+ Units_Returned) as Net_Units_Sold    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(\"Demand_Selling_Margin$\") as \"Demand_Selling_Margin$\"    \n      ,sum(\"Shipped_Selling_Margin$\") as \"Shipped_Selling_Margin$\"    \n      ,sum(\"Net_Selling_Margin$\") as \"Net_Selling_Margin$\"    \nFROM    \n/*Retrieving Demand sales for KIT Items*/    \n(SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n\tfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,order_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price   \n      ,sum(src_kit_units_ordered ) as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,sum(src_kit_units_ordered  *isnull(src_unit_cost,0)) as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,0 as \"Net_Cogs$\"    \n      ,sum(src_kit_units_ordered  * isnull(src_current_retail_price,0)) as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,0 as \"Net_Retail$\"    \n\t  ,sum(src_kit_units_ordered * ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,0 as \"Net_Sales_$\"    \n    FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n        left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\n    where (order_date_id>=0 or ship_date_id>=0) and     \n            src_order_type='I'  and isnull(src_channel_id,'0')<>'R' and    \n            src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"\n\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')      \n            and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number    \n\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\"    \n\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_original_ref_order_number))='0')     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,order_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id                   \n    UNION all    \n/*Retrieving Shipped sales for Kit Items*/        \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,src_order_type,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n\t  ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum(\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \n    from (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,src_order_type,ship_date_id as Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,sum(src_kit_units_shipped ) as src_units_shipped    \n      ,0 as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Shipped_Cogs$\"    \n      ,0 as \"Returned_Cogs$\"    \n      ,sum (src_kit_units_shipped *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,sum (src_kit_units_shipped * isnull(src_current_retail_price,0)) as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_shipped)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Shipped_Sales$\"    \n      ,0 as \"Return$\"    \n      ,sum(src_kit_units_shipped*((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\"    \n            left join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id\t\t\t\t\n        where (order_date_id>=0 or ship_date_id>=0) and     \n                dim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n                src_order_type='I' and ship_date_id is not null and isnull(src_channel_id,'0')<>'R' \n                and src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n                and src_order_status='IN'     \n    group by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,fact_cpg_sales_detail_kit_component.dim_order_method_id,src_order_type,ship_date_id,dim_item_id,src_kit_selling_price) As A    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id,src_order_type,Date,dim_item_id    \n    UNION ALL    \n/*Retrieving Return sales for Kit Items*/          \nSELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type           \n      ,Date,dim_item_id    \n      ,Avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(src_selling_price) as src_selling_price    \n      ,sum(src_units_ordered) as src_units_ordered    \n      ,SUM(src_units_shipped) as src_units_shipped    \n      ,SUM(Units_Returned) as Units_Returned    \n      ,sum(\"Demand_Cogs$\") as \"Demand_Cogs$\"    \n      ,sum (\"Shipped_Cogs$\") as \"Shipped_Cogs$\"    \n      ,sum(\"Returned_Cogs$\") as \"Returned_Cogs$\"    \n      ,sum (\"Net_Cogs$\") as \"Net_Cogs$\"    \n      ,sum(\"Demand_Retail$\") as \"Demand_Retail$\"    \n      ,sum (\"Shipped_Retail$\") as \"Shipped_Retail$\"    \n      ,sum (\"Net_Retail$\") as \"Net_Retail$\"    \n      ,sum(\"Demand_Sales$\") as \"Demand_Sales$\"    \n      ,sum (\"Shipped_Sales$\") as \"Shipped_Sales$\"    \n      ,sum(\"Return$\") as \"Return$\"    \n      ,sum(\"Net_Sales_$\") as \"Net_Sales_$\"    \n      ,sum(isnull(\"Demand_Sales$\",0)-isnull(\"Demand_Cogs$\",0)) as \"Demand_Selling_Margin$\"    \n      ,sum(isnull(\"Shipped_Sales$\",0)-isnull(\"Shipped_Cogs$\",0)) as \"Shipped_Selling_Margin$\"    \n      ,sum(isnull(\"Net_Sales_$\",0)-isnull(\"Net_Cogs$\",0)) as \"Net_Selling_Margin$\"    \nfrom (SELECT dim_business_unit_id,dim_shop_site_id,src_currency_code_from    \n      ,fact_cpg_sales_detail_kit_component.dim_order_method_id    \n      ,case src_order_type when 'C' then 'F' else 'F' end as src_order_type         \n      ,order_date_id as Date,dim_item_id    \n      ,avg(src_unit_cost) as src_unit_cost    \n      ,Avg(src_current_retail_price) as src_current_retail_price    \n      ,Avg(((src_kit_selling_price*src_component_percent)/100)/(src_required_quantity)) as src_selling_price    \n      ,0 as src_units_ordered    \n      ,0 as src_units_shipped    \n      ,sum(src_kit_units_ordered ) as Units_Returned    \n      ,sum(src_required_quantity) as src_required_quantity    \n      ,0 as \"Demand_Cogs$\"    \n      ,0 as \"Shipped_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Returned_Cogs$\"    \n      ,sum(src_kit_units_ordered *isnull(src_unit_cost,0)) as \"Net_Cogs$\"    \n      ,0 as \"Demand_Retail$\"    \n      ,0 as \"Shipped_Retail$\"    \n      ,sum ((src_kit_units_ordered)  *isnull(src_current_retail_price,0)) as \"Net_Retail$\"    \n      ,0 as \"Demand_Sales$\"    \n      ,0 as \"Shipped_Sales$\"    \n      ,sum((src_kit_units_ordered * isnull(src_kit_selling_price,0)*src_component_percent)/100) as \"Return$\"    \n      ,sum(src_kit_units_ordered* ((isnull(src_kit_selling_price,0)*src_component_percent)/100)) as \"Net_Sales_$\"    \n        FROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_detail_kit_component\" \n\t\t\tleft join \"entdwdb\".\"fds_cpg\".\"dim_cpg_order_method\" \n\t\t\ton fact_cpg_sales_detail_kit_component.dim_order_method_id= dim_cpg_order_method.dim_order_method_id \n\t\twhere (order_date_id>=0 or ship_date_id>=0) and     \n\t\t\t\tdim_item_id  not in (select distinct dim_item_id \n\t\t\t\t\t\t\t\t\tfrom \"entdwdb\".\"fds_cpg\".\"dim_cpg_item\" \n\t\t\t\t\t\t\t\t\twhere src_item_id in ('990-000-002-0','990-000-003-0')) and    \n\t\t\t\tsrc_channel_id='R' and src_order_status='IN' \n\t\t\t\tand src_order_number  in (SELECT distinct ltrim(rtrim(src_order_number)) As src_order_number  \n\t\t\t\t\t\t\t\t\t\t\tFROM \"entdwdb\".\"fds_cpg\".\"fact_cpg_sales_header\" \n\t\t\t\t\t\t\t\t\t\t\twhere ltrim(rtrim(src_prepay_code))='F' and isnull(ltrim(rtrim(src_order_origin_code)),'AA')<>'GR')  \n\tgroup by  dim_business_unit_id,dim_shop_site_id,src_currency_code_from, fact_cpg_sales_detail_kit_component.dim_order_method_id,  \n\t\tsrc_order_type,dim_item_id,src_order_number,src_unit_cost,src_kit_selling_price,src_current_retail_price,src_kit_units_ordered,    \n        order_date_id) Tab_Kit_Items    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Tab_Kit_Regular_Order  \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id) Sub_Main    \ngroup by dim_business_unit_id,dim_shop_site_id,src_currency_code_from,dim_order_method_id, src_order_type ,Date,dim_item_id"}, "model.analytics_engineering_marts.vw_aggr_cpg_daily_venue_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t 'schema': 'fds_cpg',\t\r\n\t     \"materialized\": 'view',\"tags\": 'Phase 5B',\"persist_docs\": {'relation' : true, 'columns' : true}\r\n        })\r\n}}\r\nselect * from {{ref('aggr_cpg_daily_venue_sales')}}", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "view", "vw_aggr_cpg_daily_venue_sales"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cpg_daily_venue_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/view/vw_aggr_cpg_daily_venue_sales.sql", "original_file_path": "models/fds_cpg/view/vw_aggr_cpg_daily_venue_sales.sql", "name": "vw_aggr_cpg_daily_venue_sales", "resource_type": "model", "alias": "vw_aggr_cpg_daily_venue_sales", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"], "analytics_engineering_marts": null}, "tags": ["Phase 5B"], "refs": [["aggr_cpg_daily_venue_sales"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_cpg_daily_venue_sales"]}, "description": "## Implementation Detail\n*   Date        : 09/23/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_venue_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Venue Sales View consist of Sales details of WWE products on venue & event - basis\n\n## Maintenance Log\n* Date : 09/23/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_agg_sales_id": {"name": "dim_agg_sales_id", "description": "Auto generated id to uniquely identify a sale", "meta": {}, "data_type": null, "tags": []}, "date_id": {"name": "date_id", "description": "Order Date", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id from dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "dim_event_id": {"name": "dim_event_id", "description": "References dim_event_id from cdm.dim_event table", "meta": {}, "data_type": null, "tags": []}, "dim_venue_id": {"name": "dim_venue_id", "description": "References dim_venue_id from fds_le.brdg_live_event_venue table", "meta": {}, "data_type": null, "tags": []}, "quantity_shipped": {"name": "quantity_shipped", "description": "Shipped Quantity", "meta": {}, "data_type": null, "tags": []}, "quantity_adjustment": {"name": "quantity_adjustment", "description": "Adjusted Quantity", "meta": {}, "data_type": null, "tags": []}, "quantity_returned": {"name": "quantity_returned", "description": "Returned Quantity", "meta": {}, "data_type": null, "tags": []}, "compelements": {"name": "compelements", "description": "Complements", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "selling_price": {"name": "selling_price", "description": "Selling Price", "meta": {}, "data_type": null, "tags": []}, "total_revenue": {"name": "total_revenue", "description": "Total revenue", "meta": {}, "data_type": null, "tags": []}, "complement_revenue": {"name": "complement_revenue", "description": "Complement revenue", "meta": {}, "data_type": null, "tags": []}, "active_flag": {"name": "active_flag", "description": "To indicate whether its active or not", "meta": {}, "data_type": null, "tags": []}, "effective_start_datetime": {"name": "effective_start_datetime", "description": "effective start date time", "meta": {}, "data_type": null, "tags": []}, "effective_end_datetime": {"name": "effective_end_datetime", "description": "effective end date time", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/view/vw_aggr_cpg_daily_venue_sales.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_venue_sales\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_venue_sales\""}, "model.analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t 'schema': 'fds_cpg',\t\r\n\t     \"materialized\": 'view',\"tags\": 'Phase 5B',\"persist_docs\": {'relation' : true, 'columns' : true}\r\n        })\r\n}}\r\nselect * from {{ref('aggr_cpg_daily_kit_sales')}}", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "view", "vw_aggr_cpg_daily_kit_sales"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/view/vw_aggr_cpg_daily_kit_sales.sql", "original_file_path": "models/fds_cpg/view/vw_aggr_cpg_daily_kit_sales.sql", "name": "vw_aggr_cpg_daily_kit_sales", "resource_type": "model", "alias": "vw_aggr_cpg_daily_kit_sales", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"], "analytics_engineering_marts": null}, "tags": ["Phase 5B"], "refs": [["aggr_cpg_daily_kit_sales"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_kit_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Kit Sales View consist of Sales details of WWE Kit products on daily-basis\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "Order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "Type of Order", "meta": {}, "data_type": null, "tags": []}, "dim_kit_item_id": {"name": "dim_kit_item_id", "description": "dim_kit_item_id referencing from dim_cpg_kit_item table", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id of dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "Cost per Unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "Current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "kit_units_sold": {"name": "kit_units_sold", "description": "Number of Kit Units Sold", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Returned COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id of dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/view/vw_aggr_cpg_daily_kit_sales.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_kit_sales\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_kit_sales\""}, "model.analytics_engineering_marts.vw_aggr_cpg_daily_sales": {"raw_sql": "{{\r\n  config({\r\n\t\t 'schema': 'fds_cpg',\t\r\n\t     \"materialized\": 'view',\"tags\": 'Phase 5B',\"persist_docs\": {'relation' : true, 'columns' : true}\r\n        })\r\n}}\r\nselect * from {{ref('aggr_cpg_daily_sales')}}", "database": "entdwdb", "schema": "fds_cpg", "fqn": ["analytics_engineering_marts", "fds_cpg", "view", "vw_aggr_cpg_daily_sales"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cpg_daily_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cpg/view/vw_aggr_cpg_daily_sales.sql", "original_file_path": "models/fds_cpg/view/vw_aggr_cpg_daily_sales.sql", "name": "vw_aggr_cpg_daily_sales", "resource_type": "model", "alias": "vw_aggr_cpg_daily_sales", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cpg", "tags": ["Phase 5B"], "analytics_engineering_marts": null}, "tags": ["Phase 5B"], "refs": [["aggr_cpg_daily_sales"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_cpg_daily_sales"]}, "description": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Sales Table View of Sales details of WWE products on daily-basis\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project.", "columns": {"dim_business_unit_id": {"name": "dim_business_unit_id", "description": "Generated unique Id for each business unit from dim_cpg_business_unit table", "meta": {}, "data_type": null, "tags": []}, "dim_order_method_id": {"name": "dim_order_method_id", "description": "Autogenerated id from dim_cpg_order_method table", "meta": {}, "data_type": null, "tags": []}, "date_key": {"name": "date_key", "description": "order date key", "meta": {}, "data_type": null, "tags": []}, "src_order_type": {"name": "src_order_type", "description": "type of order", "meta": {}, "data_type": null, "tags": []}, "dim_item_id": {"name": "dim_item_id", "description": "References dim_item_id from dim_cpg_item table", "meta": {}, "data_type": null, "tags": []}, "src_unit_cost": {"name": "src_unit_cost", "description": "cost per unit", "meta": {}, "data_type": null, "tags": []}, "src_current_retail_price": {"name": "src_current_retail_price", "description": "current retail price", "meta": {}, "data_type": null, "tags": []}, "src_units_ordered": {"name": "src_units_ordered", "description": "Number of Units Ordered", "meta": {}, "data_type": null, "tags": []}, "src_units_shipped": {"name": "src_units_shipped", "description": "Number of units shipped", "meta": {}, "data_type": null, "tags": []}, "units_returned": {"name": "units_returned", "description": "Number of units returned", "meta": {}, "data_type": null, "tags": []}, "net_units_sold": {"name": "net_units_sold", "description": "Net units sold", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_$": {"name": "demand_cogs_$", "description": "Demand COG Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_$": {"name": "shipped_cogs_$", "description": "Shipped COG Amount", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_$": {"name": "returned_cogs_$", "description": "Returned COG Amount", "meta": {}, "data_type": null, "tags": []}, "net_cogs_$": {"name": "net_cogs_$", "description": "Net COG Amount", "meta": {}, "data_type": null, "tags": []}, "demand_retail_$": {"name": "demand_retail_$", "description": "Demand Retail Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_$": {"name": "shipped_retail_$", "description": "Shipped Retail Amount", "meta": {}, "data_type": null, "tags": []}, "net_retail_$": {"name": "net_retail_$", "description": "Net Retail Amount", "meta": {}, "data_type": null, "tags": []}, "demand_sales_$": {"name": "demand_sales_$", "description": "Demand Sales Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_$": {"name": "shipped_sales_$", "description": "Shipped Sales Amount", "meta": {}, "data_type": null, "tags": []}, "returns_$": {"name": "returns_$", "description": "Return Sales Amount", "meta": {}, "data_type": null, "tags": []}, "net_sales_$": {"name": "net_sales_$", "description": "Net Sales Amount", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_$": {"name": "demand_selling_margin_$", "description": "Demand Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_$": {"name": "shipped_selling_margin_$", "description": "Shipped Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_$": {"name": "net_selling_margin_$", "description": "Net Selling Margin Amount", "meta": {}, "data_type": null, "tags": []}, "other_amount": {"name": "other_amount", "description": "Other Amount", "meta": {}, "data_type": null, "tags": []}, "unit_cost_local": {"name": "unit_cost_local", "description": "Cost per Unit in USD", "meta": {}, "data_type": null, "tags": []}, "current_retail_price_local": {"name": "current_retail_price_local", "description": "Current Retail Price in USD", "meta": {}, "data_type": null, "tags": []}, "demand_cogs_local": {"name": "demand_cogs_local", "description": "Demand COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_cogs_local": {"name": "shipped_cogs_local", "description": "Shipped COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returned_cogs_local": {"name": "returned_cogs_local", "description": "Return COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_cogs_local": {"name": "net_cogs_local", "description": "Net COG Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_retail_local": {"name": "demand_retail_local", "description": "Demand Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_retail_local": {"name": "shipped_retail_local", "description": "Shipped Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_retail_local": {"name": "net_retail_local", "description": "Net Retail Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_sales_local": {"name": "demand_sales_local", "description": "Demand Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_sales_local": {"name": "shipped_sales_local", "description": "Shipped Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "returns_local": {"name": "returns_local", "description": "Return Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_sales_local": {"name": "net_sales_local", "description": "Net Sales Amount in USD", "meta": {}, "data_type": null, "tags": []}, "demand_selling_margin_local": {"name": "demand_selling_margin_local", "description": "Demand Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "shipped_selling_margin_local": {"name": "shipped_selling_margin_local", "description": "Shipped Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "net_selling_margin_local": {"name": "net_selling_margin_local", "description": "Net Selling Margin Amount in USD", "meta": {}, "data_type": null, "tags": []}, "other_amount_local": {"name": "other_amount_local", "description": "Other Amount in USD", "meta": {}, "data_type": null, "tags": []}, "src_currency_code_from": {"name": "src_currency_code_from", "description": "Currency Code from", "meta": {}, "data_type": null, "tags": []}, "dim_shop_site_id": {"name": "dim_shop_site_id", "description": "References dim_shop_site_id from dim_cpg_shop_site table", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cpg/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cpg/view/vw_aggr_cpg_daily_sales.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_sales\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_cpg\".\"aggr_cpg_daily_sales\""}, "model.analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast": {"raw_sql": "{{\r\n  config({\r\n\t\"schemas\": 'fds_nplus',\t\r\n\t\"materialized\": 'view'\r\n\t\t})\r\n}}\r\nselect * from {{ref('rpt_network_ppv_actuals_estimates_forecast')}}", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_network_ppv_actuals_estimates_forecast"], "unique_id": "model.analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_rpt_network_ppv_actuals_estimates_forecast.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_network_ppv_actuals_estimates_forecast.sql", "name": "vw_rpt_network_ppv_actuals_estimates_forecast", "resource_type": "model", "alias": "vw_rpt_network_ppv_actuals_estimates_forecast", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [["rpt_network_ppv_actuals_estimates_forecast"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_network_ppv_actuals_estimates_forecast.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_actuals_estimates_forecast\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_actuals_estimates_forecast\""}, "model.analytics_engineering_marts.vw_rpt_weekly_network_subscriber_kpis_ir": {"raw_sql": "{{\r\n  config({\r\n    \"schemas\": 'fds_nplus',\r\n\t\"materialized\": 'view',\r\n\t})\r\n}}\r\nwith curr_year as\r\n(\r\nselect \r\n       cal_year,\r\n       cal_year_week_num,\r\n       cal_year_week_begin_date,\r\n       cal_year_week_end_date,\r\n       sum(paid) as paid,\r\n       sum(lp_adds) as lp_adds,\r\n       sum(free_trials) as free_trials,\r\n       sum(losses) as losses,\r\n       sum(case when rn=2 then paid_ending_actives else 0 end) as paid_ending_actives,\r\n       sum(case when rn=2 then total_ending_actives else 0 end) as total_ending_actives,\r\n       dense_rank() over(order by cal_year desc) as cyr_rn\r\nfrom   \r\n(\r\nselect a.*,\r\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\r\n       cal_year,\r\n       cal_year_week_num,\r\n       cal_year_week_begin_date,\r\n       cal_year_week_end_date  \r\nfrom\r\n(\r\nselect \r\n(as_on_date) as as_on_date\r\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\r\n,sum(daily_lp_add_cnt) as lp_adds\r\n,sum(daily_trial_adds_cnt) as free_trials\r\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\r\n,sum(total_active_cnt) as total_ending_actives\r\n,sum(total_paid_active_cnt) as paid_ending_actives\r\nfrom fds_nplus.aggr_kpi_hist_prod\r\nwhere as_on_date < '2019-12-14'\r\ngroup by 1\r\n\r\nunion\r\n\r\nselect \r\ndly.as_on_date\r\n,paid\r\n,lp_adds\r\n,free_trials\r\n,losses\r\n,total_ending_actives\r\n,paid_ending_actives\r\nfrom \r\n(\r\nselect \r\n(as_on_date) as as_on_date\r\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\r\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\r\n,sum(daily_trial_adds_cnt) as free_trials\r\n,sum(coalesce(daily_loss_cnt,0)) \r\n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\r\nfrom fds_nplus.aggr_daily_subscription\r\nwhere as_on_date >= '2019-12-14'\r\ngroup by 1\r\n) dly\r\n\r\nleft join\r\n(\r\nselect \r\n(as_on_date) as as_on_date\r\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\r\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\r\nfrom fds_nplus.aggr_total_subscription\r\nwhere as_on_date >= '2019-12-14'\r\ngroup by 1\r\n) tot\r\non dly.as_on_date = tot.as_on_date\r\n) a\r\n\r\nleft join\r\n(\r\nselect  full_date+2 as full_date, \r\n        cal_year,\r\n        cal_year_week_num,\r\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\r\n        cal_year_week_end_date+1 as cal_year_week_end_date\r\n        from cdm.dim_date\r\n) b\r\non a.as_on_date = b.full_date\r\n) daily\r\ngroup by 1,2,3,4\r\n),\r\n\r\nprev_year as\r\n(\r\nselect       \r\n       cal_year as prev_cal_year,\r\n       cal_year_week_num as prev_cal_year_week_num,\r\n       cal_year_week_begin_date as prev_cal_year_week_begin_date,\r\n       cal_year_week_end_date as prev_cal_year_week_end_date,\r\n       sum(paid) as prev_paid,\r\n       sum(lp_adds) as prev_lp_adds,\r\n       sum(free_trials) as prev_free_trials,\r\n       sum(losses) as prev_losses,\r\n       sum(case when rn=2 then paid_ending_actives else 0 end) as prev_paid_ending_actives,\r\n       sum(case when rn=2 then total_ending_actives else 0 end) as prev_total_ending_actives,\r\n       dense_rank() over(order by cal_year desc) as pyr_rn\r\nfrom   \r\n(\r\nselect a.*,\r\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\r\n       cal_year,\r\n       cal_year_week_num,\r\n       cal_year_week_begin_date,\r\n       cal_year_week_end_date  \r\nfrom\r\n(\r\nselect \r\n(as_on_date) as as_on_date\r\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\r\n,sum(daily_lp_add_cnt) as lp_adds\r\n,sum(daily_trial_adds_cnt) as free_trials\r\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\r\n,sum(total_active_cnt) as total_ending_actives\r\n,sum(total_paid_active_cnt) as paid_ending_actives\r\nfrom fds_nplus.aggr_kpi_hist_prod\r\nwhere as_on_date < '2019-12-14'\r\ngroup by 1\r\n\r\nunion\r\n\r\nselect \r\ndly.as_on_date\r\n,paid\r\n,lp_adds\r\n,free_trials\r\n,losses\r\n,total_ending_actives\r\n,paid_ending_actives\r\nfrom \r\n(\r\nselect \r\n(as_on_date) as as_on_date\r\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\r\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\r\n,sum(daily_trial_adds_cnt) as free_trials\r\n,sum(coalesce(daily_loss_cnt,0)) \r\n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\r\nfrom fds_nplus.aggr_daily_subscription\r\nwhere as_on_date >= '2019-12-14'\r\ngroup by 1\r\n) dly\r\n\r\nleft join\r\n(\r\nselect \r\n(as_on_date) as as_on_date\r\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\r\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\r\nfrom fds_nplus.aggr_total_subscription\r\nwhere as_on_date >= '2019-12-14'\r\ngroup by 1\r\n) tot\r\non dly.as_on_date = tot.as_on_date\r\n) a\r\n\r\nleft join\r\n(\r\nselect  full_date+2 as full_date, \r\n        cal_year,\r\n        cal_year_week_num,\r\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\r\n        cal_year_week_end_date+1 as cal_year_week_end_date\r\n        from cdm.dim_date\r\n) b\r\non a.as_on_date = b.full_date\r\n) daily\r\nwhere cal_year <> (select max(cal_year) from curr_year)\r\ngroup by 1,2,3,4\r\n)\r\nselect cal_year,cal_year_week_num,cal_year_week_begin_date,cal_year_week_end_date, paid, lp_adds,free_trials,losses, paid_ending_actives,total_ending_actives,\r\n       prev_cal_year,prev_cal_year_week_num,prev_cal_year_week_begin_date,prev_cal_year_week_end_date, prev_paid, prev_lp_adds,prev_free_trials,prev_losses,prev_paid_ending_actives,prev_total_ending_actives\r\nfrom \r\ncurr_year left join prev_year \r\non curr_year.cyr_rn =  prev_year.pyr_rn and curr_year.cal_year_week_num = prev_year.prev_cal_year_week_num\r\norder by cal_year desc, cal_year_week_num asc", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_weekly_network_subscriber_kpis_ir"], "unique_id": "model.analytics_engineering_marts.vw_rpt_weekly_network_subscriber_kpis_ir", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_rpt_weekly_network_subscriber_kpis_ir.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_weekly_network_subscriber_kpis_ir.sql", "name": "vw_rpt_weekly_network_subscriber_kpis_ir", "resource_type": "model", "alias": "vw_rpt_weekly_network_subscriber_kpis_ir", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_weekly_network_subscriber_kpis_ir\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : vw_rpt_weekly_network_subscriber_kpis_ir Weekly Network Subscriber KPIs for IR Team\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.", "columns": {"cal_year": {"name": "cal_year", "description": "Calander Year", "meta": {}, "data_type": null, "tags": []}, "cal_year_week_num": {"name": "cal_year_week_num", "description": "Calander Year Week Number", "meta": {}, "data_type": null, "tags": []}, "cal_year_week_begin_date": {"name": "cal_year_week_begin_date", "description": "Calander Year Week Begin Date", "meta": {}, "data_type": null, "tags": []}, "cal_year_week_end_date": {"name": "cal_year_week_end_date", "description": "Calander Year Week End Date", "meta": {}, "data_type": null, "tags": []}, "paid": {"name": "paid", "description": "Weekly count of paid subscriber adds", "meta": {}, "data_type": null, "tags": []}, "lp_adds": {"name": "lp_adds", "description": "Weekly count of new subscriber adds for license partners", "meta": {}, "data_type": null, "tags": []}, "free_trials": {"name": "free_trials", "description": "Weekly count of trial subscriber adds", "meta": {}, "data_type": null, "tags": []}, "losses": {"name": "losses", "description": "Weekly count of total subscriber loss", "meta": {}, "data_type": null, "tags": []}, "paid_ending_actives": {"name": "paid_ending_actives", "description": "Weekly count of total number of paid active subscriptions", "meta": {}, "data_type": null, "tags": []}, "total_ending_actives": {"name": "total_ending_actives", "description": "Weekly count of total number of active subscriptions", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_weekly_network_subscriber_kpis_ir.sql", "compiled": true, "compiled_sql": "\nwith curr_year as\n(\nselect \n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date,\n       sum(paid) as paid,\n       sum(lp_adds) as lp_adds,\n       sum(free_trials) as free_trials,\n       sum(losses) as losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as total_ending_actives,\n       dense_rank() over(order by cal_year desc) as cyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\ngroup by 1,2,3,4\n),\n\nprev_year as\n(\nselect       \n       cal_year as prev_cal_year,\n       cal_year_week_num as prev_cal_year_week_num,\n       cal_year_week_begin_date as prev_cal_year_week_begin_date,\n       cal_year_week_end_date as prev_cal_year_week_end_date,\n       sum(paid) as prev_paid,\n       sum(lp_adds) as prev_lp_adds,\n       sum(free_trials) as prev_free_trials,\n       sum(losses) as prev_losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as prev_paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as prev_total_ending_actives,\n       dense_rank() over(order by cal_year desc) as pyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\nwhere cal_year <> (select max(cal_year) from curr_year)\ngroup by 1,2,3,4\n)\nselect cal_year,cal_year_week_num,cal_year_week_begin_date,cal_year_week_end_date, paid, lp_adds,free_trials,losses, paid_ending_actives,total_ending_actives,\n       prev_cal_year,prev_cal_year_week_num,prev_cal_year_week_begin_date,prev_cal_year_week_end_date, prev_paid, prev_lp_adds,prev_free_trials,prev_losses,prev_paid_ending_actives,prev_total_ending_actives\nfrom \ncurr_year left join prev_year \non curr_year.cyr_rn =  prev_year.pyr_rn and curr_year.cal_year_week_num = prev_year.prev_cal_year_week_num\norder by cal_year desc, cal_year_week_num asc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith curr_year as\n(\nselect \n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date,\n       sum(paid) as paid,\n       sum(lp_adds) as lp_adds,\n       sum(free_trials) as free_trials,\n       sum(losses) as losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as total_ending_actives,\n       dense_rank() over(order by cal_year desc) as cyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\ngroup by 1,2,3,4\n),\n\nprev_year as\n(\nselect       \n       cal_year as prev_cal_year,\n       cal_year_week_num as prev_cal_year_week_num,\n       cal_year_week_begin_date as prev_cal_year_week_begin_date,\n       cal_year_week_end_date as prev_cal_year_week_end_date,\n       sum(paid) as prev_paid,\n       sum(lp_adds) as prev_lp_adds,\n       sum(free_trials) as prev_free_trials,\n       sum(losses) as prev_losses,\n       sum(case when rn=2 then paid_ending_actives else 0 end) as prev_paid_ending_actives,\n       sum(case when rn=2 then total_ending_actives else 0 end) as prev_total_ending_actives,\n       dense_rank() over(order by cal_year desc) as pyr_rn\nfrom   \n(\nselect a.*,\n       row_number() over(partition by cal_year,cal_year_week_num order by as_on_date desc) as rn,\n       cal_year,\n       cal_year_week_num,\n       cal_year_week_begin_date,\n       cal_year_week_end_date  \nfrom\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(daily_paid_adds_cnt,0))-sum(coalesce(daily_lp_add_cnt,0)) as paid\n,sum(daily_lp_add_cnt) as lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0))+sum(coalesce(daily_lp_loss_cnt,0))+sum(coalesce(daily_iap_loss_cnt,0)) as losses\n,sum(total_active_cnt) as total_ending_actives\n,sum(total_paid_active_cnt) as paid_ending_actives\nfrom fds_nplus.aggr_kpi_hist_prod\nwhere as_on_date < '2019-12-14'\ngroup by 1\n\nunion\n\nselect \ndly.as_on_date\n,paid\n,lp_adds\n,free_trials\n,losses\n,total_ending_actives\n,paid_ending_actives\nfrom \n(\nselect \n(as_on_date) as as_on_date\n,sum(case when payment_method not in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) paid\n,sum(case when payment_method in ('astro','china_pptv','osn','rogers') then daily_paid_adds_cnt else 0 end) lp_adds\n,sum(daily_trial_adds_cnt) as free_trials\n,sum(coalesce(daily_loss_cnt,0)) \n+ sum(coalesce(daily_iap_loss_cnt,0)) as losses\nfrom fds_nplus.aggr_daily_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) dly\n\nleft join\n(\nselect \n(as_on_date) as as_on_date\n,sum(coalesce(total_active_cnt,0)) as total_ending_actives\n,sum(coalesce(total_paid_active_cnt,0)) as paid_ending_actives\nfrom fds_nplus.aggr_total_subscription\nwhere as_on_date >= '2019-12-14'\ngroup by 1\n) tot\non dly.as_on_date = tot.as_on_date\n) a\n\nleft join\n(\nselect  full_date+2 as full_date, \n        cal_year,\n        cal_year_week_num,\n        cal_year_week_begin_date+1 as cal_year_week_begin_date,\n        cal_year_week_end_date+1 as cal_year_week_end_date\n        from cdm.dim_date\n) b\non a.as_on_date = b.full_date\n) daily\nwhere cal_year <> (select max(cal_year) from curr_year)\ngroup by 1,2,3,4\n)\nselect cal_year,cal_year_week_num,cal_year_week_begin_date,cal_year_week_end_date, paid, lp_adds,free_trials,losses, paid_ending_actives,total_ending_actives,\n       prev_cal_year,prev_cal_year_week_num,prev_cal_year_week_begin_date,prev_cal_year_week_end_date, prev_paid, prev_lp_adds,prev_free_trials,prev_losses,prev_paid_ending_actives,prev_total_ending_actives\nfrom \ncurr_year left join prev_year \non curr_year.cyr_rn =  prev_year.pyr_rn and curr_year.cal_year_week_num = prev_year.prev_cal_year_week_num\norder by cal_year desc, cal_year_week_num asc"}, "model.analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm": {"raw_sql": "{{\r\n  config({\r\n    \"schemas\": 'fds_nplus',\r\n\t\"materialized\": 'view',\r\n\t})\r\n}}\r\nselect * from {{ref('aggr_monthly_network_kpis_vkm')}}", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_monthly_network_kpis_vkm"], "unique_id": "model.analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_aggr_monthly_network_kpis_vkm.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_monthly_network_kpis_vkm.sql", "name": "vw_aggr_monthly_network_kpis_vkm", "resource_type": "model", "alias": "vw_aggr_monthly_network_kpis_vkm", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [["aggr_monthly_network_kpis_vkm"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm"]}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_monthly_network_kpis_vkm\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : monthly VKM network kpis\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT : Sudhakar Change: Initial Version", "columns": {"bill_date": {"name": "bill_date", "description": "report date", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks": {"name": "paid_winbacks", "description": "All paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "new_paid": {"name": "new_paid", "description": "All paid subscriptions who have paid for the first time", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs": {"name": "free_trial_subs", "description": "Total trial adds for the month", "meta": {}, "data_type": null, "tags": []}, "losses": {"name": "losses", "description": "Total Paid and trial Losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate": {"name": "paid_churn_rate", "description": "paid churn rate", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate": {"name": "total_churn_rate", "description": "total churn rate", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs": {"name": "eom_total_subs", "description": "end of month total subscriptions", "meta": {}, "data_type": null, "tags": []}, "adp": {"name": "adp", "description": "average daily paid subscriptions", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_ly": {"name": "paid_winbacks_ly", "description": "All paid winback subscriptions for the month in last year", "meta": {}, "data_type": null, "tags": []}, "new_paid_ly": {"name": "new_paid_ly", "description": "All paid subscriptions who have paid for the first time last year", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_ly": {"name": "free_trial_subs_ly", "description": "Total trial adds for the month in last year", "meta": {}, "data_type": null, "tags": []}, "losses_ly": {"name": "losses_ly", "description": "Total Paid and trial Losses for the month last year", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate_ly": {"name": "paid_churn_rate_ly", "description": "paid churn rate last year", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate_ly": {"name": "total_churn_rate_ly", "description": "total churn rate last year", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_ly": {"name": "eom_total_subs_ly", "description": "end of month total subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "adp_ly": {"name": "adp_ly", "description": "average daily paid subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_f": {"name": "paid_winbacks_f", "description": "All paid winback subscriptions for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "new_paid_f": {"name": "new_paid_f", "description": "All paid subscriptions who have paid for the first time forecasted", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_f": {"name": "free_trial_subs_f", "description": "Total trial adds for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "losses_f": {"name": "losses_f", "description": "Total Paid and trial Losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_f": {"name": "eom_total_subs_f", "description": "end of month total subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "adp_f": {"name": "adp_f", "description": "average daily paid subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched": {"name": "mnthly_total_hours_watched", "description": "Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub": {"name": "mnthly_avg_hours_per_sub", "description": "average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate": {"name": "lst_mnth_subs_viewing_cohort_rate", "description": "viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched_ly": {"name": "mnthly_total_hours_watched_ly", "description": "last year Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub_ly": {"name": "mnthly_avg_hours_per_sub_ly", "description": "last year average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate_ly": {"name": "lst_mnth_subs_viewing_cohort_rate_ly", "description": "last year viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_monthly_network_kpis_vkm.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_network_kpis_vkm\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_network_kpis_vkm\""}, "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs": {"raw_sql": "-- Marketing Subs Report View\n\n/*\n*************************************************************************************************************************************************\n   Date        : 08/14/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nplus_monthly_marketing_subs\n   Schema\t   : fds_nplus\n   Contributor : Hima Dasan\n   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n*************************************************************************************************************************************************\n*/\n\n {{\n  config({\n\t\"schemas\": 'fds_nplus',\t\n\t\"materialized\": 'view',\"persist_docs\": {'relation' : true, 'columns' : true}\n\t\t})\n}}\n\nselect a.bill_date,a.free_adds_budget,a.paid_adds_budget,a.free_disconnects_budget,a.paid_disconnects_budget,\n b.free_adds_actuals,b.paid_adds_actuals,b.free_disconnects_actuals,b.paid_disconnects_actuals,\n case when a.bill_Date < '2019-12-01' then e.EOP_Subs  else f.EOP_Subs end  as EOP_Subs ,\n  c.free_adds_FYE,c.paid_adds_FYE,c.free_disconnects_FYE,c.paid_disconnects_FYE\n from ( \n \n (select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      ROUND(sum (trial_adds)) as free_adds_budget,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_budget,\n       case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '66640'\n\t   when year='2018' and month ='3' then '11277'\n\t   when year='2018' and month ='4' then '31978'\n\t   when year='2018' and month ='5' then '116441'\n\t   when year='2018' and month ='6' then '8326'\n\t   when year='2018' and month ='7' then '32396'\n\t   when year='2018' and month ='8' then '14618'\n\t   when year='2018' and month ='9' then '33469'\n\t   when year='2018' and month ='10' then '9547'\n\t   when year='2018' and month ='11' then '14309'\n\t   when year='2018' and month ='12' then '15939'\n\t\t   else round(sum(total_trial_loss)) end as free_disconnects_budget,\n       round(sum(paid_losses_actual)) as paid_disconnects_budget\n\t  from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}  \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\n and comments='jan_budget'\n  and year between extract(year from (dateadd(month,-1,current_date))) -3 and \n  extract(year from (dateadd(month,-1,current_date)))\nand forecast_date = to_date((cast(year as char(4)) + '-01-01'),'yyyy-mm-dd') \n group by 1,2,3,4\n ) a \nleft join (select as_on_date,sum(total_active_cnt) as EOP_Subs from  {{source('fds_nplus','aggr_kpi_hist')}}  group by 1) e on \n a.bill_date= dateadd(month,-1,e.as_on_date)\n left join (select as_on_date,sum(total_active_cnt) as EOP_Subs from {{source('fds_nplus','aggr_total_subscription')}}   group by 1) f on\n a.bill_date= dateadd(month,-1,f.as_on_date)\n left join\n(select\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\nforecast_date,year,  month,\n      round(sum (trial_adds)) as free_adds_actuals,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_actuals,\n       round(sum(total_trial_loss)) as free_disconnects_actuals,\n       round(sum(paid_losses_actual)) as paid_disconnects_actuals\n from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official' \n and forecast_date= (select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} )\n and (year||case when length(month) <2 then ('0' + cast(month as varchar))\n else cast(month as varchar) end) < to_char((select max(forecast_date) from \n {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} ), 'YYYYMM')\n group by 1,2,3,4) b\n on a.bill_date = b.bill_date\n \n LEFT JOIN\n (\n select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      round(sum (trial_adds)) as free_adds_FYE,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_FYE,\n\t   case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '64263'\n\t   when year='2018' and month ='3' then '25116'\n\t   when year='2018' and month ='4' then '25791'\n\t   when year='2018' and month ='5' then '156463'\n\t   when year='2018' and month ='6' then '8345'\n\t   when year='2018' and month ='7' then '17285'\n\t   when year='2018' and month ='8' then '12532'\n\t   when year='2018' and month ='9' then '31342'\n\t   when year='2018' and month ='10' then '15455'\n\t   when year='2018' and month ='11' then '18825'\n\t   when year='2018' and month ='12' then '17960'\n       else round(sum(total_trial_loss)) end  as free_disconnects_FYE,\n       round(sum(paid_losses_actual)) as paid_disconnects_FYE\n\t  -- (total_active_cnt) as EOP_subs\n from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}   \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\nand to_date(add_months(forecast_date, -0),'yyyy-mm-01') = bill_date \n and year = extract(year from bill_date)\n and month = extract(month from bill_date)\n group by 1,2,3,4) c\n on a.BILL_dATE = c.bill_Date\n )\n order by bill_date desc", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_nplus_monthly_marketing_subs"], "unique_id": "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_rpt_nplus_monthly_marketing_subs.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_nplus_monthly_marketing_subs.sql", "name": "vw_rpt_nplus_monthly_marketing_subs", "resource_type": "model", "alias": "vw_rpt_nplus_monthly_marketing_subs", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_kpi_hist"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output"]}, "description": "## Implementation Detail\n*   Date        : 08/14/2020\n*   Version     : 1.0\n*   TableName   : vw_rpt_nplus_monthly_marketing_subs\n*   Schema      : fds_nplus\n*   Contributor : Hima Dasan\n*   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n\n## Maintenance Log\n* Date : 08/14/2020 ; Developer: Hima Dasan; Change: Initial Version", "columns": {"bill_date": {"name": "bill_date", "description": "report date", "meta": {}, "data_type": null, "tags": []}, "free_adds_budget": {"name": "free_adds_budget", "description": "Total trial adds budget for the month", "meta": {}, "data_type": null, "tags": []}, "paid_adds_budget": {"name": "paid_adds_budget", "description": "Budget for all paid subscriptions who have paid for the first time and all paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "free_disconnects_budget": {"name": "free_disconnects_budget", "description": "Budget for Total trial losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_disconnects_budget": {"name": "paid_disconnects_budget", "description": "Budget for Total Paid Losses for the month", "meta": {}, "data_type": null, "tags": []}, "free_adds_actuals": {"name": "free_adds_actuals", "description": "Total trial adds for the month", "meta": {}, "data_type": null, "tags": []}, "paid_adds_actuals": {"name": "paid_adds_actuals", "description": "All paid subscriptions who have paid for the first time and all paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "free_disconnects_actuals": {"name": "free_disconnects_actuals", "description": "Total trial losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_disconnects_actuals": {"name": "paid_disconnects_actuals", "description": "Total Paid Losses for the month", "meta": {}, "data_type": null, "tags": []}, "eop_subs": {"name": "eop_subs", "description": "end of period total subscriptions", "meta": {}, "data_type": null, "tags": []}, "free_adds_FYE": {"name": "free_adds_FYE", "description": "Total trial adds for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "paid_adds_FYE": {"name": "paid_adds_FYE", "description": "All paid subscriptions who have paid for the first time and all paid winback subscriptions for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "free_disconnects_FYE": {"name": "free_disconnects_FYE", "description": "Total trial losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "paid_disconnects_FYE": {"name": "paid_disconnects_FYE", "description": "Total Paid Losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_nplus_monthly_marketing_subs.sql", "compiled": true, "compiled_sql": "-- Marketing Subs Report View\n\n/*\n*************************************************************************************************************************************************\n   Date        : 08/14/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nplus_monthly_marketing_subs\n   Schema\t   : fds_nplus\n   Contributor : Hima Dasan\n   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n*************************************************************************************************************************************************\n*/\n\n \n\nselect a.bill_date,a.free_adds_budget,a.paid_adds_budget,a.free_disconnects_budget,a.paid_disconnects_budget,\n b.free_adds_actuals,b.paid_adds_actuals,b.free_disconnects_actuals,b.paid_disconnects_actuals,\n case when a.bill_Date < '2019-12-01' then e.EOP_Subs  else f.EOP_Subs end  as EOP_Subs ,\n  c.free_adds_FYE,c.paid_adds_FYE,c.free_disconnects_FYE,c.paid_disconnects_FYE\n from ( \n \n (select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      ROUND(sum (trial_adds)) as free_adds_budget,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_budget,\n       case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '66640'\n\t   when year='2018' and month ='3' then '11277'\n\t   when year='2018' and month ='4' then '31978'\n\t   when year='2018' and month ='5' then '116441'\n\t   when year='2018' and month ='6' then '8326'\n\t   when year='2018' and month ='7' then '32396'\n\t   when year='2018' and month ='8' then '14618'\n\t   when year='2018' and month ='9' then '33469'\n\t   when year='2018' and month ='10' then '9547'\n\t   when year='2018' and month ='11' then '14309'\n\t   when year='2018' and month ='12' then '15939'\n\t\t   else round(sum(total_trial_loss)) end as free_disconnects_budget,\n       round(sum(paid_losses_actual)) as paid_disconnects_budget\n\t  from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\n and comments='jan_budget'\n  and year between extract(year from (dateadd(month,-1,current_date))) -3 and \n  extract(year from (dateadd(month,-1,current_date)))\nand forecast_date = to_date((cast(year as char(4)) + '-01-01'),'yyyy-mm-dd') \n group by 1,2,3,4\n ) a \nleft join (select as_on_date,sum(total_active_cnt) as EOP_Subs from  \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"  group by 1) e on \n a.bill_date= dateadd(month,-1,e.as_on_date)\n left join (select as_on_date,sum(total_active_cnt) as EOP_Subs from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"   group by 1) f on\n a.bill_date= dateadd(month,-1,f.as_on_date)\n left join\n(select\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\nforecast_date,year,  month,\n      round(sum (trial_adds)) as free_adds_actuals,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_actuals,\n       round(sum(total_trial_loss)) as free_disconnects_actuals,\n       round(sum(paid_losses_actual)) as paid_disconnects_actuals\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official' \n and forecast_date= (select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" )\n and (year||case when length(month) <2 then ('0' + cast(month as varchar))\n else cast(month as varchar) end) < to_char((select max(forecast_date) from \n \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" ), 'YYYYMM')\n group by 1,2,3,4) b\n on a.bill_date = b.bill_date\n \n LEFT JOIN\n (\n select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      round(sum (trial_adds)) as free_adds_FYE,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_FYE,\n\t   case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '64263'\n\t   when year='2018' and month ='3' then '25116'\n\t   when year='2018' and month ='4' then '25791'\n\t   when year='2018' and month ='5' then '156463'\n\t   when year='2018' and month ='6' then '8345'\n\t   when year='2018' and month ='7' then '17285'\n\t   when year='2018' and month ='8' then '12532'\n\t   when year='2018' and month ='9' then '31342'\n\t   when year='2018' and month ='10' then '15455'\n\t   when year='2018' and month ='11' then '18825'\n\t   when year='2018' and month ='12' then '17960'\n       else round(sum(total_trial_loss)) end  as free_disconnects_FYE,\n       round(sum(paid_losses_actual)) as paid_disconnects_FYE\n\t  -- (total_active_cnt) as EOP_subs\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"   \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\nand to_date(add_months(forecast_date, -0),'yyyy-mm-01') = bill_date \n and year = extract(year from bill_date)\n and month = extract(month from bill_date)\n group by 1,2,3,4) c\n on a.BILL_dATE = c.bill_Date\n )\n order by bill_date desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Marketing Subs Report View\n\n/*\n*************************************************************************************************************************************************\n   Date        : 08/14/2020\n   Version     : 1.0\n   TableName   : vw_rpt_nplus_monthly_marketing_subs\n   Schema\t   : fds_nplus\n   Contributor : Hima Dasan\n   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n*************************************************************************************************************************************************\n*/\n\n \n\nselect a.bill_date,a.free_adds_budget,a.paid_adds_budget,a.free_disconnects_budget,a.paid_disconnects_budget,\n b.free_adds_actuals,b.paid_adds_actuals,b.free_disconnects_actuals,b.paid_disconnects_actuals,\n case when a.bill_Date < '2019-12-01' then e.EOP_Subs  else f.EOP_Subs end  as EOP_Subs ,\n  c.free_adds_FYE,c.paid_adds_FYE,c.free_disconnects_FYE,c.paid_disconnects_FYE\n from ( \n \n (select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      ROUND(sum (trial_adds)) as free_adds_budget,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_budget,\n       case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '66640'\n\t   when year='2018' and month ='3' then '11277'\n\t   when year='2018' and month ='4' then '31978'\n\t   when year='2018' and month ='5' then '116441'\n\t   when year='2018' and month ='6' then '8326'\n\t   when year='2018' and month ='7' then '32396'\n\t   when year='2018' and month ='8' then '14618'\n\t   when year='2018' and month ='9' then '33469'\n\t   when year='2018' and month ='10' then '9547'\n\t   when year='2018' and month ='11' then '14309'\n\t   when year='2018' and month ='12' then '15939'\n\t\t   else round(sum(total_trial_loss)) end as free_disconnects_budget,\n       round(sum(paid_losses_actual)) as paid_disconnects_budget\n\t  from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\n and comments='jan_budget'\n  and year between extract(year from (dateadd(month,-1,current_date))) -3 and \n  extract(year from (dateadd(month,-1,current_date)))\nand forecast_date = to_date((cast(year as char(4)) + '-01-01'),'yyyy-mm-dd') \n group by 1,2,3,4\n ) a \nleft join (select as_on_date,sum(total_active_cnt) as EOP_Subs from  \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"  group by 1) e on \n a.bill_date= dateadd(month,-1,e.as_on_date)\n left join (select as_on_date,sum(total_active_cnt) as EOP_Subs from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"   group by 1) f on\n a.bill_date= dateadd(month,-1,f.as_on_date)\n left join\n(select\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\nforecast_date,year,  month,\n      round(sum (trial_adds)) as free_adds_actuals,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_actuals,\n       round(sum(total_trial_loss)) as free_disconnects_actuals,\n       round(sum(paid_losses_actual)) as paid_disconnects_actuals\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official' \n and forecast_date= (select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" )\n and (year||case when length(month) <2 then ('0' + cast(month as varchar))\n else cast(month as varchar) end) < to_char((select max(forecast_date) from \n \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" ), 'YYYYMM')\n group by 1,2,3,4) b\n on a.bill_date = b.bill_date\n \n LEFT JOIN\n (\n select  to_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,\n forecast_date,year,month,\n      round(sum (trial_adds)) as free_adds_FYE,\n       round(sum(paid_new_adds)) + round(sum(paid_winbacks)) as paid_adds_FYE,\n\t   case when year='2018' and month ='1' then '23974'\n\t   when year='2018' and month ='2' then '64263'\n\t   when year='2018' and month ='3' then '25116'\n\t   when year='2018' and month ='4' then '25791'\n\t   when year='2018' and month ='5' then '156463'\n\t   when year='2018' and month ='6' then '8345'\n\t   when year='2018' and month ='7' then '17285'\n\t   when year='2018' and month ='8' then '12532'\n\t   when year='2018' and month ='9' then '31342'\n\t   when year='2018' and month ='10' then '15455'\n\t   when year='2018' and month ='11' then '18825'\n\t   when year='2018' and month ='12' then '17960'\n       else round(sum(total_trial_loss)) end  as free_disconnects_FYE,\n       round(sum(paid_losses_actual)) as paid_disconnects_FYE\n\t  -- (total_active_cnt) as EOP_subs\n from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"   \n where payment_method in ('apple','roku','mlbam')\n and official_run_flag ='official'\nand to_date(add_months(forecast_date, -0),'yyyy-mm-01') = bill_date \n and year = extract(year from bill_date)\n and month = extract(month from bill_date)\n group by 1,2,3,4) c\n on a.BILL_dATE = c.bill_Date\n )\n order by bill_date desc"}, "model.analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis": {"raw_sql": "{{\r\n  config({\r\n\t\"schemas\": 'fds_nplus',\t\r\n\t\"materialized\": 'view'\r\n\t\t})\r\n}}\r\nSELECT c.country_nm,a.*, \r\nb.domest_paid_active,\r\nb.domest_trial_active,\r\nb.inter_paid_active,\r\nb.inter_trial_active,\r\nb.active,\r\nb.inactive,\r\nb.lp_active,\r\nb.t2_inact_dedup,\r\nb.t2_inact_dedup_logged_in,\r\nb.prospects_logged_in,\r\nb.prospects_not_logged_in,\r\nb.unique_visitors_mtd_prospects_inactives,\r\nb.unique_visitors_network_subscribers_mtd\r\n from\r\n(select as_on_date-1 as date,dim_country_id,country_cd,\r\nsum(case when order_type='first' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_new,\r\nsum(case when order_type='winback' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_winback,\r\nsum(case when order_type='first' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro')then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_new,\r\nsum(case when order_type='winback' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_winback,\r\n\r\nsum(case when country_cd='us' then daily_paid_adds_cnt else null end) as domest_paid_add,\r\nsum(case when country_cd='us' then daily_trial_adds_cnt else null end) as domest_trial_add,\r\nsum(case when country_cd !='us' then daily_paid_adds_cnt else null end) as inter_paid_add,\r\nsum(case when country_cd !='us' then daily_trial_adds_cnt else null end) as inter_trial_add,\r\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt else null end) as lp_adds,\r\nsum(daily_new_adds_cnt) as adds,\r\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as domest_paid_loss,\r\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as domest_trial_loss,\r\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as inter_paid_loss,\r\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as inter_trial_loss,\r\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else null end) as lp_loss,\r\nsum(daily_loss_cnt) as loss,\r\nsum(daily_tier2_prospect_loggedin_new_users_cnt) tier2_new_registrations,\r\nsum(daily_unique_visitors_tier2_cnt) as Unique_Visitors_Daily_Prospects_inactives,\r\nsum(daily_unique_visitors_tier3_cnt) as Unique_Visitors_Network_Subscribers_Daily      \r\nfrom {{source('fds_nplus','aggr_daily_subscription')}}\r\ngroup by 1,2,3) a\r\nleft join\r\n(select as_on_date-1 as date,dim_country_id,country_cd,\r\nsum(case when country_cd='us' then total_paid_active_cnt else null end) as domest_paid_active,\r\nsum(case when country_cd='us' then total_trial_active_cnt else null end) as domest_trial_active,\r\nsum(case when country_cd !='us' then total_paid_active_cnt else null end) as inter_paid_active,\r\nsum(case when country_cd !='us' then total_trial_active_cnt else null end) as inter_trial_active,\r\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then total_active_cnt else null end) as lp_active,\r\nsum(total_active_cnt) as active, \r\nsum(total_tier2_inactive_cnt) as inactive,\r\nsum(total_tier2_inactive_dedup_cnt) as t2_inact_dedup,\r\nsum(total_tier2_prospect_loggedin_dedup_cnt) as t2_inact_dedup_logged_in,\r\nsum(total_tier2_prospect_loggedin_cnt) as Prospects_logged_in,\r\nsum(total_tier2_prospect_nonlogged_cnt) as Prospects_not_logged_in,\r\nsum(total_unique_visitors_tier2_mtd) as Unique_Visitors_MTD_Prospects_inactives,\r\nsum(total_unique_visitors_tier3_mtd) as Unique_Visitors_Network_Subscribers_MTD \r\nfrom {{source('fds_nplus','aggr_total_subscription')}} \r\ngroup by 1,2,3) b\r\non a.date = b.date\r\nand a.dim_country_id = b.dim_country_id\r\nand a.country_cd = b.country_cd\r\nleft join\r\n(select * from cdm.dim_region_country where etl_source_name = 'Network 0') c\r\non a.dim_country_id = c.dim_country_id\r\norder by date,dim_country_id,country_cd,country_nm", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_network_daily_subscription_kpis"], "unique_id": "model.analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_rpt_network_daily_subscription_kpis.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_network_daily_subscription_kpis.sql", "name": "vw_rpt_network_daily_subscription_kpis", "resource_type": "model", "alias": "vw_rpt_network_daily_subscription_kpis", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["fds_nplus", "aggr_daily_subscription"], ["fds_nplus", "aggr_total_subscription"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription"]}, "description": "## Implementation Detail\n* Date        : 06/29/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_network_daily_subscription_kpis\n* Schema\t  : fds_nl\n* Contributor : Lakshman Murugeshan\n* Description : vw_rpt_network_daily_subscription_kpis view consists of network daily kpi information\n## Maintenance Log\n* Date : 06/29/2020 ; Developer: Lakshman Murugeshan DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.", "columns": {"country_nm": {"name": "country_nm", "description": "Name of the country where the region located", "meta": {}, "data_type": null, "tags": []}, "date": {"name": "date", "description": "as on date of one day before", "meta": {}, "data_type": null, "tags": []}, "dim_country_id": {"name": "dim_country_id", "description": "References dim country for region country location", "meta": {}, "data_type": null, "tags": []}, "country_cd": {"name": "country_cd", "description": "Country Code", "meta": {}, "data_type": null, "tags": []}, "daily_paid_adds_cnt_new": {"name": "daily_paid_adds_cnt_new", "description": "Daily count of paid subscriber adds where order type = 'first'", "meta": {}, "data_type": null, "tags": []}, "daily_paid_adds_cnt_winback": {"name": "daily_paid_adds_cnt_winback", "description": "Daily count of paid subscriber adds where order type = 'winback'", "meta": {}, "data_type": null, "tags": []}, "daily_paid_loss_cnt_new": {"name": "daily_paid_loss_cnt_new", "description": "Daily count of total paid subscriber loss where order type = 'first' and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "daily_paid_loss_cnt_winback": {"name": "daily_paid_loss_cnt_winback", "description": "Daily count of total paid subscriber loss where order type = 'winback' and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "domest_paid_add": {"name": "domest_paid_add", "description": "Daily count of paid subscriber adds in US", "meta": {}, "data_type": null, "tags": []}, "domest_trial_add": {"name": "domest_trial_add", "description": "Daily count of trial subscriber adds in US", "meta": {}, "data_type": null, "tags": []}, "inter_paid_add": {"name": "inter_paid_add", "description": "Daily count of paid subscriber adds international", "meta": {}, "data_type": null, "tags": []}, "inter_trial_add": {"name": "inter_trial_add", "description": "Daily count of trial subscriber adds international", "meta": {}, "data_type": null, "tags": []}, "lp_adds": {"name": "lp_adds", "description": "Daily count of new subscriber adds for license partners", "meta": {}, "data_type": null, "tags": []}, "adds": {"name": "adds", "description": "Daily count of new subscriber adds", "meta": {}, "data_type": null, "tags": []}, "domest_paid_loss": {"name": "domest_paid_loss", "description": "Daily count of total paid subscriber loss in US and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "domest_trial_loss": {"name": "domest_trial_loss", "description": "Daily count of total trial subscriber loss in US and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "inter_paid_loss": {"name": "inter_paid_loss", "description": "Daily count of total paid subscriber loss international and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "inter_trial_loss": {"name": "inter_trial_loss", "description": "Daily count of total trial subscriber loss international and payment method is not license partner", "meta": {}, "data_type": null, "tags": []}, "lp_loss": {"name": "lp_loss", "description": "Daily count of total subscriber loss for license partners", "meta": {}, "data_type": null, "tags": []}, "loss": {"name": "loss", "description": "Daily count of total subscriber loss", "meta": {}, "data_type": null, "tags": []}, "tier2_new_registrations": {"name": "tier2_new_registrations", "description": "daily tier2 prospect loggedin new users count", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_daily_prospects_inactives": {"name": "unique_visitors_daily_prospects_inactives", "description": "daily unique visitors tier2 count", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_network_subscribers_daily": {"name": "unique_visitors_network_subscribers_daily", "description": "daily unique visitors tier3 count", "meta": {}, "data_type": null, "tags": []}, "domest_paid_active": {"name": "domest_paid_active", "description": "total number of paid active subscriptions in US", "meta": {}, "data_type": null, "tags": []}, "domest_trial_active": {"name": "domest_trial_active", "description": "total number of trial active subscriptions in US", "meta": {}, "data_type": null, "tags": []}, "inter_paid_active": {"name": "inter_paid_active", "description": "total number of paid active subscriptions international", "meta": {}, "data_type": null, "tags": []}, "inter_trial_active": {"name": "inter_trial_active", "description": "total number of trial active subscriptions international", "meta": {}, "data_type": null, "tags": []}, "lp_active": {"name": "lp_active", "description": "Total active subscription for license partners", "meta": {}, "data_type": null, "tags": []}, "active": {"name": "active", "description": "Total active subscriptions", "meta": {}, "data_type": null, "tags": []}, "inactive": {"name": "inactive", "description": "Total inactive subscriptions", "meta": {}, "data_type": null, "tags": []}, "t2_inact_dedup": {"name": "t2_inact_dedup", "description": "Count of distinct exid when tier_status = T2 and ever_active = 1 and remove_guid = 0", "meta": {}, "data_type": null, "tags": []}, "t2_inact_dedup_logged_in": {"name": "t2_inact_dedup_logged_in", "description": "Count of distinct exid when tier_status = T2 and ever_active = 0  andlast_login_date is not null and remove_guid = 0", "meta": {}, "data_type": null, "tags": []}, "prospects_logged_in": {"name": "prospects_logged_in", "description": "total tier 2 prospects who have logged in post n2.0 launch", "meta": {}, "data_type": null, "tags": []}, "prospects_not_logged_in": {"name": "prospects_not_logged_in", "description": "total tier 2 users who have not logged in n2.0", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_mtd_prospects_inactives": {"name": "unique_visitors_mtd_prospects_inactives", "description": "tier 2 distinct user logins in the month. resets every month", "meta": {}, "data_type": null, "tags": []}, "unique_visitors_network_subscribers_mtd": {"name": "unique_visitors_network_subscribers_mtd", "description": "tier 3 distinct user logins in the month. resets every month", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_network_daily_subscription_kpis.sql", "compiled": true, "compiled_sql": "\nSELECT c.country_nm,a.*, \nb.domest_paid_active,\nb.domest_trial_active,\nb.inter_paid_active,\nb.inter_trial_active,\nb.active,\nb.inactive,\nb.lp_active,\nb.t2_inact_dedup,\nb.t2_inact_dedup_logged_in,\nb.prospects_logged_in,\nb.prospects_not_logged_in,\nb.unique_visitors_mtd_prospects_inactives,\nb.unique_visitors_network_subscribers_mtd\n from\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when order_type='first' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_new,\nsum(case when order_type='winback' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_winback,\nsum(case when order_type='first' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro')then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_new,\nsum(case when order_type='winback' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_winback,\n\nsum(case when country_cd='us' then daily_paid_adds_cnt else null end) as domest_paid_add,\nsum(case when country_cd='us' then daily_trial_adds_cnt else null end) as domest_trial_add,\nsum(case when country_cd !='us' then daily_paid_adds_cnt else null end) as inter_paid_add,\nsum(case when country_cd !='us' then daily_trial_adds_cnt else null end) as inter_trial_add,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt else null end) as lp_adds,\nsum(daily_new_adds_cnt) as adds,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as domest_paid_loss,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as domest_trial_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as inter_paid_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as inter_trial_loss,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else null end) as lp_loss,\nsum(daily_loss_cnt) as loss,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) tier2_new_registrations,\nsum(daily_unique_visitors_tier2_cnt) as Unique_Visitors_Daily_Prospects_inactives,\nsum(daily_unique_visitors_tier3_cnt) as Unique_Visitors_Network_Subscribers_Daily      \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\ngroup by 1,2,3) a\nleft join\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when country_cd='us' then total_paid_active_cnt else null end) as domest_paid_active,\nsum(case when country_cd='us' then total_trial_active_cnt else null end) as domest_trial_active,\nsum(case when country_cd !='us' then total_paid_active_cnt else null end) as inter_paid_active,\nsum(case when country_cd !='us' then total_trial_active_cnt else null end) as inter_trial_active,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then total_active_cnt else null end) as lp_active,\nsum(total_active_cnt) as active, \nsum(total_tier2_inactive_cnt) as inactive,\nsum(total_tier2_inactive_dedup_cnt) as t2_inact_dedup,\nsum(total_tier2_prospect_loggedin_dedup_cnt) as t2_inact_dedup_logged_in,\nsum(total_tier2_prospect_loggedin_cnt) as Prospects_logged_in,\nsum(total_tier2_prospect_nonlogged_cnt) as Prospects_not_logged_in,\nsum(total_unique_visitors_tier2_mtd) as Unique_Visitors_MTD_Prospects_inactives,\nsum(total_unique_visitors_tier3_mtd) as Unique_Visitors_Network_Subscribers_MTD \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\" \ngroup by 1,2,3) b\non a.date = b.date\nand a.dim_country_id = b.dim_country_id\nand a.country_cd = b.country_cd\nleft join\n(select * from cdm.dim_region_country where etl_source_name = 'Network 0') c\non a.dim_country_id = c.dim_country_id\norder by date,dim_country_id,country_cd,country_nm", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nSELECT c.country_nm,a.*, \nb.domest_paid_active,\nb.domest_trial_active,\nb.inter_paid_active,\nb.inter_trial_active,\nb.active,\nb.inactive,\nb.lp_active,\nb.t2_inact_dedup,\nb.t2_inact_dedup_logged_in,\nb.prospects_logged_in,\nb.prospects_not_logged_in,\nb.unique_visitors_mtd_prospects_inactives,\nb.unique_visitors_network_subscribers_mtd\n from\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when order_type='first' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_new,\nsum(case when order_type='winback' then daily_paid_adds_cnt else null end) as daily_paid_adds_cnt_winback,\nsum(case when order_type='first' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro')then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_new,\nsum(case when order_type='winback' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as daily_paid_loss_cnt_winback,\n\nsum(case when country_cd='us' then daily_paid_adds_cnt else null end) as domest_paid_add,\nsum(case when country_cd='us' then daily_trial_adds_cnt else null end) as domest_trial_add,\nsum(case when country_cd !='us' then daily_paid_adds_cnt else null end) as inter_paid_add,\nsum(case when country_cd !='us' then daily_trial_adds_cnt else null end) as inter_trial_add,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt else null end) as lp_adds,\nsum(daily_new_adds_cnt) as adds,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as domest_paid_loss,\nsum(case when country_cd='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as domest_trial_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_paid_loss_cnt else null end) as inter_paid_loss,\nsum(case when country_cd !='us' and payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_trial_loss_cnt else null end) as inter_trial_loss,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else null end) as lp_loss,\nsum(daily_loss_cnt) as loss,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) tier2_new_registrations,\nsum(daily_unique_visitors_tier2_cnt) as Unique_Visitors_Daily_Prospects_inactives,\nsum(daily_unique_visitors_tier3_cnt) as Unique_Visitors_Network_Subscribers_Daily      \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\ngroup by 1,2,3) a\nleft join\n(select as_on_date-1 as date,dim_country_id,country_cd,\nsum(case when country_cd='us' then total_paid_active_cnt else null end) as domest_paid_active,\nsum(case when country_cd='us' then total_trial_active_cnt else null end) as domest_trial_active,\nsum(case when country_cd !='us' then total_paid_active_cnt else null end) as inter_paid_active,\nsum(case when country_cd !='us' then total_trial_active_cnt else null end) as inter_trial_active,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then total_active_cnt else null end) as lp_active,\nsum(total_active_cnt) as active, \nsum(total_tier2_inactive_cnt) as inactive,\nsum(total_tier2_inactive_dedup_cnt) as t2_inact_dedup,\nsum(total_tier2_prospect_loggedin_dedup_cnt) as t2_inact_dedup_logged_in,\nsum(total_tier2_prospect_loggedin_cnt) as Prospects_logged_in,\nsum(total_tier2_prospect_nonlogged_cnt) as Prospects_not_logged_in,\nsum(total_unique_visitors_tier2_mtd) as Unique_Visitors_MTD_Prospects_inactives,\nsum(total_unique_visitors_tier3_mtd) as Unique_Visitors_Network_Subscribers_MTD \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\" \ngroup by 1,2,3) b\non a.date = b.date\nand a.dim_country_id = b.dim_country_id\nand a.country_cd = b.country_cd\nleft join\n(select * from cdm.dim_region_country where etl_source_name = 'Network 0') c\non a.dim_country_id = c.dim_country_id\norder by date,dim_country_id,country_cd,country_nm"}, "model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking": {"raw_sql": "{{\r\n  config({\r\n\t\"schemas\": 'fds_nplus',\r\n\t\"materialized\": 'view',\r\n\t\"post-hook\": [\"COMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event_date IS 'Date and timestamp of the scheduled live events as received from LES';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_event_nm IS 'Name of the PPVevent';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_nm IS 'Name of the PPV';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_start_date IS 'date of Event Date minus 6 days';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_end_date IS 'date of Event date plus 2 days';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.year IS 'Extracted year from event date';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event IS 'concatenated text of PPV event name and year ';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.full_date IS 'full date';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt IS 'Daily count of paid subscriber adds';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_trial_adds_cnt IS 'Daily count of trial subscriber adds';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_promo_paid_add_cnt IS 'Daily count of total promo paid subscription add';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_new IS 'custom filed based on order type and Daily count of paid subscriber adds';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_winback IS 'custom filed based on order type winback and Daily count of paid subscriber adds';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.bill_date IS 'Process date';\r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_paid_winbacks IS 'Roll up of all paid winback subscriptions for the day';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_new_paid IS 'Roll up of all paid subscriptions who have paid for the first time';  \r\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_free_trial_subs IS 'Total trial adds for the day';\r\n\t\t\t\t\t\r\n\t\t\t\"]\r\n\t})\r\n}}\r\nSELECT c.date as event_date,\r\n       c.ppv_event_nm,\r\n       c.ppv_nm,\r\n       c.start_date as ghw_start_date,\r\n       c.end_date as ghw_end_date,\r\n       c.year,\r\n       c.event,\r\n       c.full_date,\r\n       c.daily_paid_adds_cnt,\r\n       c.daily_trial_adds_cnt,\r\n       c.daily_promo_paid_add_cnt,\r\n       c.daily_paid_adds_cnt_new,\r\n       c.daily_paid_adds_cnt_winback,\r\n       d.bill_date,\r\n       d.paid_winbacks as forecast_paid_winbacks,\r\n       d.new_paid as forecast_new_paid,\r\n       d.free_trial_subs as forecast_free_trial_subs\r\n\r\n  FROM\r\n  (\r\n\r\nSELECT a.* ,\r\n       b.daily_paid_adds_cnt,b.daily_trial_adds_cnt,b.daily_promo_paid_add_cnt,\r\n        b.daily_paid_adds_cnt_new,b.daily_paid_adds_cnt_winback \r\n FROM\r\n(\r\n\r\nselect date,ppv_event_nm,ppv_nm,\r\n\t       start_date,end_date,year,\r\n\t\t   event,full_date\r\nFROM\r\n        (\t\t\r\n          select trunc(event_dttm) as date,\r\n               ppv_event_nm,ppv_nm,\r\n               trunc(DATEADD(day, -6, date)) as start_date, \r\n               trunc(DATEADD(day,2, date)) as end_date,\r\n               EXTRACT(YEAR FROM date) as year,\r\n               CONCAT(ppv_event_nm,TO_CHAR(year,'9999')) as event\r\n          from {{source('cdm','dim_event')}}\r\n\t\t  \r\n          where ppv_event_nm <> '' \r\n           and event_status='Published'\r\n         )\r\n         left join {{source('cdm','dim_date')}}\r\n                on start_date<=full_date and end_date>=full_date\r\n    )a\r\n    \r\n  LEFT JOIN \r\n\t(\r\n\tselect as_on_date,\r\n\tsum(coalesce(daily_paid_adds_cnt,0)) as daily_paid_adds_cnt,\r\n\tsum(coalesce(daily_trial_adds_cnt,0)) as daily_trial_adds_cnt,\r\n\tsum(coalesce(daily_promo_paid_add_cnt,0)) as daily_promo_paid_add_cnt,\r\n\tsum(case when order_type='first' then coalesce(daily_new_adds_cnt,0) else null end) as daily_paid_adds_cnt_new,\r\n\tsum(case when order_type='winback' then coalesce(daily_new_adds_cnt,0) else null end) as daily_paid_adds_cnt_winback\r\n\tfrom {{source('fds_nplus','aggr_daily_subscription')}}\r\n\twhere payment_method in ('incomm' ,'paypal' ,'stripe' ,'unknown' ,'cybersource','roku_iap')\r\n\tgroup by 1 \r\n\t) b\r\non a.full_date=b.as_on_date-1 \r\n)c\r\n\r\nRIGHT JOIN\r\n\t(\r\n                 select trunc(bill_date) as bill_date,                \r\n                 sum(coalesce(paid_winbacks,0))+sum(coalesce(paid_new_with_trial,0))+sum(coalesce(trial_winback_adds,0)) as paid_winbacks,\r\n                 sum(coalesce(paid_new_adds,0))+sum(coalesce(paid_new_with_Trial,0)) as new_paid,                \r\n                 sum(coalesce(trial_adds,0)) as free_trial_subs\r\n                 from {{source('fds_nplus','aggr_nplus_daily_forcast_output')}}\r\n                 where forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_daily_forcast_output')}})\r\n                 and payment_method in ('mlbam','roku','apple') \r\n                 and official_run_flag='official' \r\n                 and bill_date>'2019-12-20'\r\n                 group by 1 \r\n                 order by 1\r\n\t )d\r\n on c.full_date=d.bill_date\r\n where c.date is not null", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_nplus_ppv_week_adds_tracking"], "unique_id": "model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_aggr_nplus_ppv_week_adds_tracking.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_nplus_ppv_week_adds_tracking.sql", "name": "vw_aggr_nplus_ppv_week_adds_tracking", "resource_type": "model", "alias": "vw_aggr_nplus_ppv_week_adds_tracking", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [{"sql": "COMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event_date IS 'Date and timestamp of the scheduled live events as received from LES';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_event_nm IS 'Name of the PPVevent';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ppv_nm IS 'Name of the PPV';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_start_date IS 'date of Event Date minus 6 days';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.ghw_end_date IS 'date of Event date plus 2 days';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.year IS 'Extracted year from event date';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.event IS 'concatenated text of PPV event name and year ';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.full_date IS 'full date';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt IS 'Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_trial_adds_cnt IS 'Daily count of trial subscriber adds';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_promo_paid_add_cnt IS 'Daily count of total promo paid subscription add';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_new IS 'custom filed based on order type and Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.daily_paid_adds_cnt_winback IS 'custom filed based on order type winback and Daily count of paid subscriber adds';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.bill_date IS 'Process date';\n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_paid_winbacks IS 'Roll up of all paid winback subscriptions for the day';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_new_paid IS 'Roll up of all paid subscriptions who have paid for the first time';  \n\t\t\t\t\tCOMMENT ON COLUMN fds_nplus.vw_aggr_nplus_ppv_week_adds_tracking.forecast_free_trial_subs IS 'Total trial adds for the day';\n\t\t\t\t\t\n\t\t\t", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["cdm", "dim_event"], ["cdm", "dim_date"], ["fds_nplus", "aggr_daily_subscription"], ["fds_nplus", "aggr_nplus_daily_forcast_output"], ["fds_nplus", "aggr_nplus_daily_forcast_output"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.cdm.dim_event", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output"]}, "description": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_nplus_ppv_week_adds_tracking\n* Schema\t  : fds_nplus\n* Contributor : Remya K Nair\n* Description : vw_aggr_nplus_ppv_week_adds_tracking view consists of  PPV event details with count of paid/trail/promo subscription add and forecast suscription count\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Network 2.0 Project.", "columns": {"event_date": {"name": "event_date", "description": "Date and timestamp of the scheduled live events as received from LES", "meta": {}, "data_type": null, "tags": []}, "ppv_event_nm": {"name": "ppv_event_nm", "description": "Name of the PPVevent", "meta": {}, "data_type": null, "tags": []}, "ppv_nm": {"name": "ppv_nm", "description": "Name of the PPV", "meta": {}, "data_type": null, "tags": []}, "ghw_start_date": {"name": "ghw_start_date", "description": "date of Event Date minus 6 days", "meta": {}, "data_type": null, "tags": []}, "ghw_end_date": {"name": "ghw_end_date", "description": "date of Event date plus 2 days", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Extracted year from event date", "meta": {}, "data_type": null, "tags": []}, "event": {"name": "event", "description": "concatenated text of PPV event name and year", "meta": {}, "data_type": null, "tags": []}, "full_date": {"name": "full_date", "description": "full date", "meta": {}, "data_type": null, "tags": []}, "daily_paid_adds_cnt": {"name": "daily_paid_adds_cnt", "description": "Daily count of paid subscriber adds", "meta": {}, "data_type": null, "tags": []}, "daily_trial_adds_cnt": {"name": "daily_trial_adds_cnt", "description": "Daily count of trial subscriber adds", "meta": {}, "data_type": null, "tags": []}, "daily_promo_paid_add_cnt": {"name": "daily_promo_paid_add_cnt", "description": "Daily count of total promo paid subscription add", "meta": {}, "data_type": null, "tags": []}, "daily_paid_adds_cnt_new": {"name": "daily_paid_adds_cnt_new", "description": "custom filed based on order type and Daily count of paid subscriber adds", "meta": {}, "data_type": null, "tags": []}, "daily_paid_adds_cnt_winback": {"name": "daily_paid_adds_cnt_winback", "description": "custom filed based on order type winback and Daily count of paid subscriber adds", "meta": {}, "data_type": null, "tags": []}, "bill_date": {"name": "bill_date", "description": "Process date", "meta": {}, "data_type": null, "tags": []}, "forecast_paid_winbacks": {"name": "forecast_paid_winbacks", "description": "Roll up of all paid winback subscriptions for the day", "meta": {}, "data_type": null, "tags": []}, "forecast_new_paid": {"name": "forecast_new_paid", "description": "Roll up of all paid subscriptions who have paid for the first time", "meta": {}, "data_type": null, "tags": []}, "forecast_free_trial_subs": {"name": "forecast_free_trial_subs", "description": "Total trial adds for the day", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_nplus_ppv_week_adds_tracking.sql", "compiled": true, "compiled_sql": "\nSELECT c.date as event_date,\n       c.ppv_event_nm,\n       c.ppv_nm,\n       c.start_date as ghw_start_date,\n       c.end_date as ghw_end_date,\n       c.year,\n       c.event,\n       c.full_date,\n       c.daily_paid_adds_cnt,\n       c.daily_trial_adds_cnt,\n       c.daily_promo_paid_add_cnt,\n       c.daily_paid_adds_cnt_new,\n       c.daily_paid_adds_cnt_winback,\n       d.bill_date,\n       d.paid_winbacks as forecast_paid_winbacks,\n       d.new_paid as forecast_new_paid,\n       d.free_trial_subs as forecast_free_trial_subs\n\n  FROM\n  (\n\nSELECT a.* ,\n       b.daily_paid_adds_cnt,b.daily_trial_adds_cnt,b.daily_promo_paid_add_cnt,\n        b.daily_paid_adds_cnt_new,b.daily_paid_adds_cnt_winback \n FROM\n(\n\nselect date,ppv_event_nm,ppv_nm,\n\t       start_date,end_date,year,\n\t\t   event,full_date\nFROM\n        (\t\t\n          select trunc(event_dttm) as date,\n               ppv_event_nm,ppv_nm,\n               trunc(DATEADD(day, -6, date)) as start_date, \n               trunc(DATEADD(day,2, date)) as end_date,\n               EXTRACT(YEAR FROM date) as year,\n               CONCAT(ppv_event_nm,TO_CHAR(year,'9999')) as event\n          from \"entdwdb\".\"cdm\".\"dim_event\"\n\t\t  \n          where ppv_event_nm <> '' \n           and event_status='Published'\n         )\n         left join \"entdwdb\".\"cdm\".\"dim_date\"\n                on start_date<=full_date and end_date>=full_date\n    )a\n    \n  LEFT JOIN \n\t(\n\tselect as_on_date,\n\tsum(coalesce(daily_paid_adds_cnt,0)) as daily_paid_adds_cnt,\n\tsum(coalesce(daily_trial_adds_cnt,0)) as daily_trial_adds_cnt,\n\tsum(coalesce(daily_promo_paid_add_cnt,0)) as daily_promo_paid_add_cnt,\n\tsum(case when order_type='first' then coalesce(daily_new_adds_cnt,0) else null end) as daily_paid_adds_cnt_new,\n\tsum(case when order_type='winback' then coalesce(daily_new_adds_cnt,0) else null end) as daily_paid_adds_cnt_winback\n\tfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\n\twhere payment_method in ('incomm' ,'paypal' ,'stripe' ,'unknown' ,'cybersource','roku_iap')\n\tgroup by 1 \n\t) b\non a.full_date=b.as_on_date-1 \n)c\n\nRIGHT JOIN\n\t(\n                 select trunc(bill_date) as bill_date,                \n                 sum(coalesce(paid_winbacks,0))+sum(coalesce(paid_new_with_trial,0))+sum(coalesce(trial_winback_adds,0)) as paid_winbacks,\n                 sum(coalesce(paid_new_adds,0))+sum(coalesce(paid_new_with_Trial,0)) as new_paid,                \n                 sum(coalesce(trial_adds,0)) as free_trial_subs\n                 from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\"\n                 where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\")\n                 and payment_method in ('mlbam','roku','apple') \n                 and official_run_flag='official' \n                 and bill_date>'2019-12-20'\n                 group by 1 \n                 order by 1\n\t )d\n on c.full_date=d.bill_date\n where c.date is not null", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nSELECT c.date as event_date,\n       c.ppv_event_nm,\n       c.ppv_nm,\n       c.start_date as ghw_start_date,\n       c.end_date as ghw_end_date,\n       c.year,\n       c.event,\n       c.full_date,\n       c.daily_paid_adds_cnt,\n       c.daily_trial_adds_cnt,\n       c.daily_promo_paid_add_cnt,\n       c.daily_paid_adds_cnt_new,\n       c.daily_paid_adds_cnt_winback,\n       d.bill_date,\n       d.paid_winbacks as forecast_paid_winbacks,\n       d.new_paid as forecast_new_paid,\n       d.free_trial_subs as forecast_free_trial_subs\n\n  FROM\n  (\n\nSELECT a.* ,\n       b.daily_paid_adds_cnt,b.daily_trial_adds_cnt,b.daily_promo_paid_add_cnt,\n        b.daily_paid_adds_cnt_new,b.daily_paid_adds_cnt_winback \n FROM\n(\n\nselect date,ppv_event_nm,ppv_nm,\n\t       start_date,end_date,year,\n\t\t   event,full_date\nFROM\n        (\t\t\n          select trunc(event_dttm) as date,\n               ppv_event_nm,ppv_nm,\n               trunc(DATEADD(day, -6, date)) as start_date, \n               trunc(DATEADD(day,2, date)) as end_date,\n               EXTRACT(YEAR FROM date) as year,\n               CONCAT(ppv_event_nm,TO_CHAR(year,'9999')) as event\n          from \"entdwdb\".\"cdm\".\"dim_event\"\n\t\t  \n          where ppv_event_nm <> '' \n           and event_status='Published'\n         )\n         left join \"entdwdb\".\"cdm\".\"dim_date\"\n                on start_date<=full_date and end_date>=full_date\n    )a\n    \n  LEFT JOIN \n\t(\n\tselect as_on_date,\n\tsum(coalesce(daily_paid_adds_cnt,0)) as daily_paid_adds_cnt,\n\tsum(coalesce(daily_trial_adds_cnt,0)) as daily_trial_adds_cnt,\n\tsum(coalesce(daily_promo_paid_add_cnt,0)) as daily_promo_paid_add_cnt,\n\tsum(case when order_type='first' then coalesce(daily_new_adds_cnt,0) else null end) as daily_paid_adds_cnt_new,\n\tsum(case when order_type='winback' then coalesce(daily_new_adds_cnt,0) else null end) as daily_paid_adds_cnt_winback\n\tfrom \"entdwdb\".\"fds_nplus\".\"aggr_daily_subscription\"\n\twhere payment_method in ('incomm' ,'paypal' ,'stripe' ,'unknown' ,'cybersource','roku_iap')\n\tgroup by 1 \n\t) b\non a.full_date=b.as_on_date-1 \n)c\n\nRIGHT JOIN\n\t(\n                 select trunc(bill_date) as bill_date,                \n                 sum(coalesce(paid_winbacks,0))+sum(coalesce(paid_new_with_trial,0))+sum(coalesce(trial_winback_adds,0)) as paid_winbacks,\n                 sum(coalesce(paid_new_adds,0))+sum(coalesce(paid_new_with_Trial,0)) as new_paid,                \n                 sum(coalesce(trial_adds,0)) as free_trial_subs\n                 from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\"\n                 where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_daily_forcast_output\")\n                 and payment_method in ('mlbam','roku','apple') \n                 and official_run_flag='official' \n                 and bill_date>'2019-12-20'\n                 group by 1 \n                 order by 1\n\t )d\n on c.full_date=d.bill_date\n where c.date is not null"}, "model.analytics_engineering_marts.vw_aggr_monthly_network_perf_renewal_payment_track": {"raw_sql": "{{\r\n  config(\r\n    schemas='fds_nplus',\t\r\n\tmaterialized='view'\r\n    \r\n  )\r\n}}\r\n\r\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\r\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\r\npayment_status,active_status ,\r\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\r\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\r\nthen '2.UK/IRE' else '3.ROW' end as country,\r\ncase when payment_method = 'roku_iap'  then 'roku'\r\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\r\nas payment_type,\r\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\r\ncase when payment_count between 0 and 1 then '0-1'\r\n                when payment_count between 2 and 3 then '2-3'\r\n                when payment_count between 4 and 6 then '4-6'\r\n                when payment_count between 7 and 12 then '7-12'\r\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\r\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\r\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\r\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\r\nfrom {{source('fds_nplus','fact_daily_subscription_order_status')}} where trunc(initial_order_dttm) < trunc(org_billing_dttm)\r\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\r\nwhere rk = 1)\r\nselect\r\ndt_mon billing_month,\r\nori_bill_dt original_billing_date,\r\npayment_status as order_status,\r\ncountry,\r\npayment_type payment_type,\r\ncount(order_id) as renewed_count ,\r\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\r\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\r\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\r\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\r\nsum(sf_ind) as soft_fail_enter ,\r\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\r\nPayments payments_count,\r\ncancel_type\r\nfrom ap group by 1,2,3,4,5,Payments,cancel_type", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_monthly_network_perf_renewal_payment_track"], "unique_id": "model.analytics_engineering_marts.vw_aggr_monthly_network_perf_renewal_payment_track", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "name": "vw_aggr_monthly_network_perf_renewal_payment_track", "resource_type": "model", "alias": "vw_aggr_monthly_network_perf_renewal_payment_track", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [], "sources": [["fds_nplus", "fact_daily_subscription_order_status"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status"]}, "description": "A view to display various metrics of order subscriptions", "columns": {"billing_month": {"name": "billing_month", "description": "Original Billing Month", "meta": {}, "data_type": null, "tags": []}, "original_billing_date": {"name": "original_billing_date", "description": "Original Billing Date", "meta": {}, "data_type": null, "tags": []}, "order_status": {"name": "order_status", "description": "The status of order whether it is 'trial' or 'paid'", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "Country where payment is billed", "meta": {}, "data_type": null, "tags": []}, "payment_type": {"name": "payment_type", "description": "Payment method used for the payment", "meta": {}, "data_type": null, "tags": []}, "renewed_count": {"name": "renewed_count", "description": "The number of payments done for the orders", "meta": {}, "data_type": null, "tags": []}, "hard_fail_indicator": {"name": "hard_fail_indicator", "description": "Type of cancellation whether it is 'Voluntary' or 'Involuntary'", "meta": {}, "data_type": null, "tags": []}, "renewed_total": {"name": "renewed_total", "description": "The number of subscription orders up for renewal", "meta": {}, "data_type": null, "tags": []}, "involuntary_cancels_count": {"name": "involuntary_cancels_count", "description": "The number of inactive voluntary cancelled order subscriptions with same original and scheduled billing date", "meta": {}, "data_type": null, "tags": []}, "voluntary_cancels_count": {"name": "voluntary_cancels_count", "description": "The number of renewed subscription orders", "meta": {}, "data_type": null, "tags": []}, "soft_fail_enter": {"name": "soft_fail_enter", "description": "The number of inactive involuntary cancelled order subscriptions", "meta": {}, "data_type": null, "tags": []}, "soft_fail_successful_enter": {"name": "soft_fail_successful_enter", "description": "The number of inactive voluntary cancelled order subscriptions", "meta": {}, "data_type": null, "tags": []}, "payments_count": {"name": "payments_count", "description": "The number of soft fail enter (scheduled billing date > original billing date) order subscriptions", "meta": {}, "data_type": null, "tags": []}, "cancel_type": {"name": "cancel_type", "description": "", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_monthly_network_perf_renewal_payment_track.sql", "compiled": true, "compiled_sql": "\n\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\npayment_status,active_status ,\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when payment_method = 'roku_iap'  then 'roku'\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\nas payment_type,\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_count between 0 and 1 then '0-1'\n                when payment_count between 2 and 3 then '2-3'\n                when payment_count between 4 and 6 then '4-6'\n                when payment_count between 7 and 12 then '7-12'\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_order_status\" where trunc(initial_order_dttm) < trunc(org_billing_dttm)\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\nwhere rk = 1)\nselect\ndt_mon billing_month,\nori_bill_dt original_billing_date,\npayment_status as order_status,\ncountry,\npayment_type payment_type,\ncount(order_id) as renewed_count ,\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\nsum(sf_ind) as soft_fail_enter ,\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\nPayments payments_count,\ncancel_type\nfrom ap group by 1,2,3,4,5,Payments,cancel_type", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith ap as ( select * from (select order_id, extract (month from org_billing_dttm) as dt_mon,\ntrunc(org_billing_dttm) as ori_bill_dt , trunc(scheduled_billing_dttm) as sch_bill_dt ,\npayment_status,active_status ,\ncase when billing_country_cd is null then '4.NA' when billing_country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen billing_country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie')\nthen '2.UK/IRE' else '3.ROW' end as country,\ncase when payment_method = 'roku_iap'  then 'roku'\nwhen product_sku like '%retail%' then 'RC' else 'managed payment' end\nas payment_type,\ncase when revoked_dttm is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_count between 0 and 1 then '0-1'\n                when payment_count between 2 and 3 then '2-3'\n                when payment_count between 4 and 6 then '4-6'\n                when payment_count between 7 and 12 then '7-12'\n                else '13+' end as Payments,row_number() over (partition by order_id, trunc(org_billing_dttm)  order by as_on_date desc) as rk,\nmax(case when revoked_dttm is null then 0 else 1 end ) as f_dt_ind ,\nmax(case when coalesce(trunc(revoked_dttm)) is not null  then 1 else 0 end) as invol_loss_ind,\nmax(case when trunc(scheduled_billing_dttm) > trunc(org_billing_dttm) then 1 else 0 end) as sf_ind\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_order_status\" where trunc(initial_order_dttm) < trunc(org_billing_dttm)\ngroup by 1,2,3,4,5,6,7,8,9,10,as_on_date)\nwhere rk = 1)\nselect\ndt_mon billing_month,\nori_bill_dt original_billing_date,\npayment_status as order_status,\ncountry,\npayment_type payment_type,\ncount(order_id) as renewed_count ,\ncount(case when sch_bill_dt = ori_bill_dt and f_dt_ind = 1 and active_status <> 'active' then order_id end) as hard_fail_indicator,\nsum(case when active_status = 'active' then 1 else 0  end) as renewed_total,\nsum(case when active_status <> 'active' and f_dt_ind = 1 then 1 else 0  end) as involuntary_cancels_count,\nsum(case when active_status <> 'active' and f_dt_ind = 0 then 1 else 0 end) as voluntary_cancels_count,\nsum(sf_ind) as soft_fail_enter ,\nsum(case when active_status = 'active' and sf_ind = 1 then 1 else 0  end) as soft_fail_successful_enter,\nPayments payments_count,\ncancel_type\nfrom ap group by 1,2,3,4,5,Payments,cancel_type"}, "model.analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod": {"raw_sql": "{{\r\n  config({\r\n    \"schemas\": 'fds_nplus',\r\n\t\"materialized\": 'view',\r\n\t})\r\n}}\r\nselect * from {{ref('rpt_network_ppv_liveplusvod')}}", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_rpt_network_ppv_liveplusvod"], "unique_id": "model.analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_rpt_network_ppv_liveplusvod.sql", "original_file_path": "models/fds_nplus/views/vw_rpt_network_ppv_liveplusvod.sql", "name": "vw_rpt_network_ppv_liveplusvod", "resource_type": "model", "alias": "vw_rpt_network_ppv_liveplusvod", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null, "schemas": "fds_nplus"}, "tags": [], "refs": [["rpt_network_ppv_liveplusvod"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_network_ppv_liveplusvod"]}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_network_ppv_liveplusvod\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : View contains the information related to Live NXT and HOF evenet\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"asset_id": {"name": "asset_id", "description": "The ID for a YouTube channel. In the YouTube Data API, this is the value of a channelresources id property.", "meta": {}, "data_type": null, "tags": []}, "production_id": {"name": "production_id", "description": "Unique content version level id", "meta": {}, "data_type": null, "tags": []}, "event": {"name": "event", "description": "Event name and year", "meta": {}, "data_type": null, "tags": []}, "event_name": {"name": "event_name", "description": "Event name", "meta": {}, "data_type": null, "tags": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "start timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "end timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "platform": {"name": "platform", "description": "platform name i.e. Facebook, Youtube, etc", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "number of views for the event", "meta": {}, "data_type": null, "tags": []}, "us_views": {"name": "us_views", "description": "number of views in US for the event", "meta": {}, "data_type": null, "tags": []}, "minutes": {"name": "minutes", "description": "number of minutes watched", "meta": {}, "data_type": null, "tags": []}, "per_us_views": {"name": "per_us_views", "description": "percentage of views in US against overall views", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "previous month views", "meta": {}, "data_type": null, "tags": []}, "prev_month_event": {"name": "prev_month_event", "description": "previous month event name", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "previous year views", "meta": {}, "data_type": null, "tags": []}, "prev_year_event": {"name": "prev_year_event", "description": "previous year event name", "meta": {}, "data_type": null, "tags": []}, "monthly_per_change_views": {"name": "monthly_per_change_views", "description": "monthly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "yearly_per_change_views": {"name": "yearly_per_change_views", "description": "yearly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "duration of the event", "meta": {}, "data_type": null, "tags": []}, "overall_rank": {"name": "overall_rank", "description": "overall rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "yearly_rank": {"name": "yearly_rank", "description": "yearly rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "tier": {"name": "tier", "description": "event tier", "meta": {}, "data_type": null, "tags": []}, "monthly_color": {"name": "monthly_color", "description": "color metric for the month", "meta": {}, "data_type": null, "tags": []}, "yearly_color": {"name": "yearly_color", "description": "color metric for the year", "meta": {}, "data_type": null, "tags": []}, "choose_ppv": {"name": "choose_ppv", "description": "prior or most recent ppv", "meta": {}, "data_type": null, "tags": []}, "event_brand": {"name": "event_brand", "description": "event brand i.e. PPV, NXT or Hall of Fame", "meta": {}, "data_type": null, "tags": []}, "report_name": {"name": "report_name", "description": "name of the report i.e. Kickoff show, The Bump etc", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "name of the series", "meta": {}, "data_type": null, "tags": []}, "account": {"name": "account", "description": "account name of the platform", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "platform url of the event", "meta": {}, "data_type": null, "tags": []}, "content_wweid": {"name": "content_wweid", "description": "unique identifier for the event", "meta": {}, "data_type": null, "tags": []}, "data_level": {"name": "data_level", "description": "identifier for Live data and Live+VOD data", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_rpt_network_ppv_liveplusvod.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_liveplusvod\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_network_ppv_liveplusvod\""}, "model.analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track": {"raw_sql": "{{\r\n  config(\r\n\tschema='fds_nplus',\t\r\n\tmaterialized='view'\r\n    \r\n  )\r\n}}\r\n\r\n\r\nwith ttl_loss_data as\r\n(select as_on_date-1 as as_on_date,country,order_status,cancel_type,payment_method,payments,ttl_losses\r\nfrom (select as_on_date,\r\ncase when country_cd is null then '4.NA' when country_cd in ('united states', 'us' , 'usa' ) then '1.US'\r\nwhen country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') then '2.UK/IRE' else '3.ROW' end as country,\r\ncase when first_charged_date is null then 'Trial' else 'Paid' end as order_status,\r\ncase when revoked_date is null then 'Voluntary' else 'Involuntary' end as cancel_type,\r\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'\r\n    when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\r\ncase when payment_number between 0 and 1 then '0-1'\r\nwhen payment_number between 2 and 3 then '2-3'\r\nwhen payment_number between 4 and 6 then '4-6'\r\nwhen payment_number between 7 and 12 then '7-12'\r\nelse '13+' end as payments,\r\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'paid' then order_id end)) +\r\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'trial' then order_id end)) as ttl_losses\r\nfrom {{source('fds_nplus','fact_daily_subscription_status_plus')}}\r\ngroup by 1,2,3,4,5,6))\r\nselect * from ttl_loss_data", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "views", "vw_aggr_daily_network_adds_and_loss_track"], "unique_id": "model.analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "original_file_path": "models/fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "name": "vw_aggr_daily_network_adds_and_loss_track", "resource_type": "model", "alias": "vw_aggr_daily_network_adds_and_loss_track", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nplus", "fact_daily_subscription_status_plus"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_status_plus"]}, "description": "## Implementation Detail\n* Date        : 07/15/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_daily_network_adds_and_loss_track\n* Schema\t  : fds_nplus\n* Contributor : Sudhakar Andugula\n* Description : vw_aggr_daily_network_adds_and_loss_track view cosists of details about total subscription losses of orders\n## Maintenance Log\n* Date : 07/15/2020 ; Developer: Sudhakar Andugula ; Change: Initial Version as a part of Network 2.0 Project.", "columns": {"as_on_date": {"name": "as_on_date", "description": "Processing Date", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "Country of the product sku is purchased", "meta": {}, "data_type": null, "tags": []}, "order_status": {"name": "order_status", "description": "The status of order whether it is 'trial' or 'paid'", "meta": {}, "data_type": null, "tags": []}, "cancel_type": {"name": "cancel_type", "description": "Type of cancellation whether it is 'Voluntary' or 'Involuntary'", "meta": {}, "data_type": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "Payment method used for the payment", "meta": {}, "data_type": null, "tags": []}, "payments": {"name": "payments", "description": "Total number of payments done for the orders", "meta": {}, "data_type": null, "tags": []}, "ttl_losses": {"name": "ttl_losses", "description": "The total number of subscription order losses", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/views/vw_aggr_daily_network_adds_and_loss_track.sql", "compiled": true, "compiled_sql": "\n\n\nwith ttl_loss_data as\n(select as_on_date-1 as as_on_date,country,order_status,cancel_type,payment_method,payments,ttl_losses\nfrom (select as_on_date,\ncase when country_cd is null then '4.NA' when country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') then '2.UK/IRE' else '3.ROW' end as country,\ncase when first_charged_date is null then 'Trial' else 'Paid' end as order_status,\ncase when revoked_date is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'\n    when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\ncase when payment_number between 0 and 1 then '0-1'\nwhen payment_number between 2 and 3 then '2-3'\nwhen payment_number between 4 and 6 then '4-6'\nwhen payment_number between 7 and 12 then '7-12'\nelse '13+' end as payments,\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'paid' then order_id end)) +\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'trial' then order_id end)) as ttl_losses\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_status_plus\"\ngroup by 1,2,3,4,5,6))\nselect * from ttl_loss_data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\nwith ttl_loss_data as\n(select as_on_date-1 as as_on_date,country,order_status,cancel_type,payment_method,payments,ttl_losses\nfrom (select as_on_date,\ncase when country_cd is null then '4.NA' when country_cd in ('united states', 'us' , 'usa' ) then '1.US'\nwhen country_cd in ('united kingdom', 'ireland', 'isle of man', 'jersey', 'guernsey', 'je' , 'gg' , 'im' , 'ie') then '2.UK/IRE' else '3.ROW' end as country,\ncase when first_charged_date is null then 'Trial' else 'Paid' end as order_status,\ncase when revoked_date is null then 'Voluntary' else 'Involuntary' end as cancel_type,\ncase when payment_method like '%roku%' then 'Roku' when payment_method like '%paypal%' then 'Paypal'\n    when product_sku like '%retail%' then 'Retail Card' else 'Managed Payment' end as payment_method,\ncase when payment_number between 0 and 1 then '0-1'\nwhen payment_number between 2 and 3 then '2-3'\nwhen payment_number between 4 and 6 then '4-6'\nwhen payment_number between 7 and 12 then '7-12'\nelse '13+' end as payments,\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'paid' then order_id end)) +\nCOUNT(distinct(case when exprd_entlmnt_date = as_on_date-1 and payment_status = 'trial' then order_id end)) as ttl_losses\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_subscription_status_plus\"\ngroup by 1,2,3,4,5,6))\nselect * from ttl_loss_data"}, "model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_nplus',\t\r\n\t\"materialized\": 'incremental',\r\n\t\"pre-hook\":[\"delete from fds_nplus.rpt_network_ppv_actuals_estimates_forecast\",\r\n\"drop table if exists #final_view;\r\ncreate table  #final_view as \r\nselect \r\nevent_date, event_dttm, event_name, event_type, event_reporting_type, \r\nadds_days_to_event, adds_day_of_week, adds_date, adds_time - extract(hour from event_dttm) as adds_time_to_event,\r\nadds_time, paid_adds, trial_adds, total_adds\r\nfrom dt_prod_support.rpt_ppv_final_table where adds_time is not null\r\nunion all\r\n        (select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, \r\n        a.adds_days_to_event, a.adds_day_of_week, a.adds_date, b.adds_time - extract(hour from a.event_dttm) as adds_time_to_event,\r\n        b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\r\n        from dt_prod_support.rpt_ppv_final_table as a\r\n        inner join (Select  adds_date,\t\r\n\thour as adds_time,\r\n\tcount(distinct case when flag = 'Paid' then customerid end) as  paid_adds,\r\n\tcount(distinct case when flag = 'Trial' or flag = 'NA' then customerid end) as  trial_adds,(paid_adds+trial_adds)  total_adds from\r\n           (Select customerid,\t\r\n\t\t(case when extract(hour from convert_timezone('AMERICA/NEW_YORK', cast(current_timestamp as timestamp)))=0 then \r\n\t\ttrunc(convert_timezone('AMERICA/NEW_YORK', sysdate-1)) else trunc(convert_timezone('AMERICA/NEW_YORK', sysdate)) end ) as adds_date,\t\r\n            min(extract(hour from CONVERT_TIMEZONE('AMERICA/NEW_YORK', cast(ts as timestamp)))) as hour,\t\r\n            case when payload_data_voucher_code is not null and payload_data_voucher = true and payload_data_price_with_tax_amount =0 and \r\n\t\t\t\tpayload_data_renewal = 'false' then 'Trial'\t\r\n                when payload_data_is_trial='true' or payload_data_price_with_tax_amount =0  then 'Trial'\t\r\n                when payload_data_is_trial='false' then 'Paid' else 'NA' end as flag\r\n           from udl_nplus.stg_dice_stream_flattened\t\r\n           where payload_data_ta in ('SUCCESSFUL_PURCHASE')\t\r\n           and (payload_data_voucher_code is null or payload_data_voucher_code!='WWE Network VIP')\t\r\n           and (payload_data_renewal !='true' or payload_data_renewal is null)\t\r\n             and trunc(CONVERT_TIMEZONE('AMERICA/NEW_YORK', cast(ts as timestamp))) = (case when extract(hour from convert_timezone('AMERICA/NEW_YORK', cast(current_timestamp as timestamp)))=0\r\n\t\t   then trunc(convert_timezone('AMERICA/NEW_YORK', cast(current_timestamp -1 as timestamp))) else\r\n\t\t   trunc(convert_timezone('AMERICA/NEW_YORK', sysdate)) end )\r\n           group by 1,2,4) group by 1,2\r\n\t) as b\r\n        on a.adds_date = b.adds_date\r\n        where a.adds_time is null\r\n);\",\r\n\r\n\"drop table if exists #estimates;\r\ncreate table #estimates as \r\nselect *,(((ghw_adds_tillnow1+currentday_adds_tillnow)/d2_pct1)*(d2_pct2-d2_pct1))+currentday_adds_tillnow  currentday_adds_estimate,\r\n(((ghw_adds_tillnow1+currentday_adds_tillnow)/d2_pct1)*(1-d2_pct1))+(currentday_adds_tillnow+2590)  weekend_adds_estimate\r\nfrom \r\n(select event_reporting_type, \r\nevent_name,\r\nevent_date,\r\nevent_dttm,\r\ncurrent_adds_date, \r\ncurrent_adds_days_to_event,\r\ncurrent_adds_day_of_week,\r\ncurrent_adds_time,\r\nghw_adds_tillnow,\r\ncurrentday_adds_tillnow,\r\nweekend_adds_tillnow,\r\nghw_adds_tillnow1,\r\n(select d2_pct from dt_prod_support.rpt_ppv_hourly_pct where adds_time=current_adds_time and adds_day_of_week=current_adds_day_of_week) d2_pct1,\r\n(select d2_pct from dt_prod_support.rpt_ppv_hourly_pct where adds_time=23 and adds_day_of_week=current_adds_day_of_week) d2_pct2,\r\ncase when ghw_adds_tillnow > 0 and comp_ghw_adds_tillnow > 0 then ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) else -1 end as ghw_adds_estimate\r\nfrom\r\n\r\n        (select\r\n        max(event_reporting_type) as event_reporting_type,\r\n        max(case when event_type = 'current_ppv' then event_name else null end) as event_name,\r\n        max(case when event_type = 'current_ppv' then event_date else null end) as event_date, \r\n        max(case when event_type = 'current_ppv' then event_dttm else null end) as event_dttm, \r\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_date else null end) as current_adds_date,\r\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_days_to_event else null end) as current_adds_days_to_event,\r\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_day_of_week else null end) as current_adds_day_of_week,\r\n        max(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type = 'current_ppv' then adds_time else null end) as current_adds_time,\r\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as weekend_adds_tillnow,\r\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as ghw_adds_tillnow,\r\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -6 and -1 then total_adds::float else 0 end) as ghw_adds_tillnow1,\r\n        sum(case when current_days_to_event = 1  and event_type = 'current_ppv' then total_adds::float else 0 end) as currentday_adds_tillnow,\r\n\t\tsum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds_tillnow,\r\n\t\tsum(case when event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds\r\n\t\t\r\n        from (\r\n                select a.*, \r\n                case when b.adds_days_to_event is null then 0 else 1 end as current_days_to_event,\r\n                case when c.adds_time_to_event is null then 0 else 1 end as current_time_to_event\r\n                from #final_view as a\r\n                left join (\r\n                select max(adds_days_to_event) as adds_days_to_event\r\n                from #final_view where event_type = 'current_ppv' and total_adds is not null\r\n                ) as b\r\n                on a.adds_days_to_event = b.adds_days_to_event\r\n                left join (\r\n                select distinct adds_days_to_event, adds_time_to_event\r\n                from #final_view where event_type = 'current_ppv' and total_adds is not null\r\n                ) as c\r\n                on a.adds_days_to_event = c.adds_days_to_event and a.adds_time_to_event = c.adds_time_to_event\r\n        )) a);\",\r\n\"drop table if exists #actuals_estimates;\r\ncreate table #actuals_estimates as\r\n(select a.*,\r\nb.event_reporting_type as current_event_reporting_type,\r\nb.event_name as current_event_name,\r\nb.event_date as current_event_date,\r\nb.event_dttm as current_event_dttm,\r\nb.current_adds_date,\r\nb.current_adds_days_to_event,\r\nb.current_adds_day_of_week,\r\nb.current_adds_time,\r\nb.ghw_adds_tillnow,\r\nb.ghw_adds_estimate,\r\nb.currentday_adds_tillnow,\r\nb.currentday_adds_estimate,\r\nb.weekend_adds_tillnow,\r\nb.weekend_adds_estimate\r\nfrom #final_view as a\r\nleft join #estimates as b\r\non a.adds_days_to_event = b.current_adds_days_to_event);\",\r\n\"drop table if exists #forecast;\r\ncreate table #forecast as\r\n(select trunc(bill_date) as bill_date,forecast_event_dt,\r\ncase\r\n        when date_part(dayofweek,bill_date) = 0 then 'Sunday'\r\n        when date_part(dayofweek,bill_date) = 1 then 'Monday'\r\n        when date_part(dayofweek,bill_date) = 2 then 'Tuesday'\r\n        when date_part(dayofweek,bill_date) = 3 then 'Wednesday'\r\n        when date_part(dayofweek,bill_date) = 4 then 'Thursday'\r\n        when date_part(dayofweek,bill_date) = 5 then 'Friday'\r\n        when date_part(dayofweek,bill_date) = 6 then 'Saturday'\r\nelse 'Other' end as bill_day_of_week,\r\n--sum(paid_new_adds+paid_winbacks+trial_adds) as current_day_forecast\r\n--TAB-2028\r\nsum(paid_new_adds+paid_winbacks) as current_day_forecast\r\nfrom fds_nplus.aggr_nplus_daily_forcast_output a,\r\n(select top 1 event_date as forecast_event_dt, \r\ndateadd(day,-2,event_date) as forecast_start_dt \r\nfrom udl_nplus.raw_da_weekly_ppv_hourly_comps_new where event_type='current_ppv'\r\nand as_on_date=(select max(as_on_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)\r\nand  update_date=(select max(update_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)) b\r\nwhere forecast_date=(select max(forecast_date) from fds_nplus.aggr_nplus_daily_forcast_output)\r\nand UPPER(payment_method) in ('MLBAM','APPLE','ROKU') and Upper(official_run_flag)='OFFICIAL' \r\nand trunc(bill_date) >= b.forecast_start_dt\r\nand trunc(bill_date) <= b.forecast_event_dt\r\ngroup by bill_date,forecast_event_dt);\",\r\n\"\r\n--Merging Weekday and Weekend Forecast--\r\ndrop table if exists #forecast_view;\r\ncreate table #forecast_view as\r\nselect bill_day_of_week,current_day_forecast,weekend_forecast,forecast_event_dt from\r\n#forecast,(select sum(current_day_forecast) as weekend_forecast from #forecast)\r\nwhere trunc(bill_date) = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())));\",\r\n\r\n\"drop table if exists #actuals_estimates_forecast_view;\r\ncreate table #actuals_estimates_forecast_view as\r\n(select \r\na.*,\r\nb.current_day_forecast,\r\nb.weekend_forecast\r\nfrom #actuals_estimates as a \r\nleft join \r\n#forecast_view as b\r\non a.current_event_date=b.forecast_event_dt);\"]})}}\r\nselect a.*,'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\r\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\r\n    NULL                                                AS etl_update_user_id,\r\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from #actuals_estimates_forecast_view a", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "rpt_network_ppv_actuals_estimates_forecast"], "unique_id": "model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/aggregate/rpt_network_ppv_actuals_estimates_forecast.sql", "original_file_path": "models/fds_nplus/aggregate/rpt_network_ppv_actuals_estimates_forecast.sql", "name": "rpt_network_ppv_actuals_estimates_forecast", "resource_type": "model", "alias": "rpt_network_ppv_actuals_estimates_forecast", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_nplus.rpt_network_ppv_actuals_estimates_forecast", "transaction": true, "index": null}, {"sql": "drop table if exists #final_view;\ncreate table  #final_view as \nselect \nevent_date, event_dttm, event_name, event_type, event_reporting_type, \nadds_days_to_event, adds_day_of_week, adds_date, adds_time - extract(hour from event_dttm) as adds_time_to_event,\nadds_time, paid_adds, trial_adds, total_adds\nfrom dt_prod_support.rpt_ppv_final_table where adds_time is not null\nunion all\n        (select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, \n        a.adds_days_to_event, a.adds_day_of_week, a.adds_date, b.adds_time - extract(hour from a.event_dttm) as adds_time_to_event,\n        b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\n        from dt_prod_support.rpt_ppv_final_table as a\n        inner join (Select  adds_date,\t\n\thour as adds_time,\n\tcount(distinct case when flag = 'Paid' then customerid end) as  paid_adds,\n\tcount(distinct case when flag = 'Trial' or flag = 'NA' then customerid end) as  trial_adds,(paid_adds+trial_adds)  total_adds from\n           (Select customerid,\t\n\t\t(case when extract(hour from convert_timezone('AMERICA/NEW_YORK', cast(current_timestamp as timestamp)))=0 then \n\t\ttrunc(convert_timezone('AMERICA/NEW_YORK', sysdate-1)) else trunc(convert_timezone('AMERICA/NEW_YORK', sysdate)) end ) as adds_date,\t\n            min(extract(hour from CONVERT_TIMEZONE('AMERICA/NEW_YORK', cast(ts as timestamp)))) as hour,\t\n            case when payload_data_voucher_code is not null and payload_data_voucher = true and payload_data_price_with_tax_amount =0 and \n\t\t\t\tpayload_data_renewal = 'false' then 'Trial'\t\n                when payload_data_is_trial='true' or payload_data_price_with_tax_amount =0  then 'Trial'\t\n                when payload_data_is_trial='false' then 'Paid' else 'NA' end as flag\n           from udl_nplus.stg_dice_stream_flattened\t\n           where payload_data_ta in ('SUCCESSFUL_PURCHASE')\t\n           and (payload_data_voucher_code is null or payload_data_voucher_code!='WWE Network VIP')\t\n           and (payload_data_renewal !='true' or payload_data_renewal is null)\t\n             and trunc(CONVERT_TIMEZONE('AMERICA/NEW_YORK', cast(ts as timestamp))) = (case when extract(hour from convert_timezone('AMERICA/NEW_YORK', cast(current_timestamp as timestamp)))=0\n\t\t   then trunc(convert_timezone('AMERICA/NEW_YORK', cast(current_timestamp -1 as timestamp))) else\n\t\t   trunc(convert_timezone('AMERICA/NEW_YORK', sysdate)) end )\n           group by 1,2,4) group by 1,2\n\t) as b\n        on a.adds_date = b.adds_date\n        where a.adds_time is null\n);", "transaction": true, "index": null}, {"sql": "drop table if exists #estimates;\ncreate table #estimates as \nselect *,(((ghw_adds_tillnow1+currentday_adds_tillnow)/d2_pct1)*(d2_pct2-d2_pct1))+currentday_adds_tillnow  currentday_adds_estimate,\n(((ghw_adds_tillnow1+currentday_adds_tillnow)/d2_pct1)*(1-d2_pct1))+(currentday_adds_tillnow+2590)  weekend_adds_estimate\nfrom \n(select event_reporting_type, \nevent_name,\nevent_date,\nevent_dttm,\ncurrent_adds_date, \ncurrent_adds_days_to_event,\ncurrent_adds_day_of_week,\ncurrent_adds_time,\nghw_adds_tillnow,\ncurrentday_adds_tillnow,\nweekend_adds_tillnow,\nghw_adds_tillnow1,\n(select d2_pct from dt_prod_support.rpt_ppv_hourly_pct where adds_time=current_adds_time and adds_day_of_week=current_adds_day_of_week) d2_pct1,\n(select d2_pct from dt_prod_support.rpt_ppv_hourly_pct where adds_time=23 and adds_day_of_week=current_adds_day_of_week) d2_pct2,\ncase when ghw_adds_tillnow > 0 and comp_ghw_adds_tillnow > 0 then ghw_adds_tillnow/(comp_ghw_adds_tillnow/comp_ghw_adds) else -1 end as ghw_adds_estimate\nfrom\n\n        (select\n        max(event_reporting_type) as event_reporting_type,\n        max(case when event_type = 'current_ppv' then event_name else null end) as event_name,\n        max(case when event_type = 'current_ppv' then event_date else null end) as event_date, \n        max(case when event_type = 'current_ppv' then event_dttm else null end) as event_dttm, \n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_date else null end) as current_adds_date,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_days_to_event else null end) as current_adds_days_to_event,\n        max(case when current_days_to_event = 1 and event_type = 'current_ppv' then adds_day_of_week else null end) as current_adds_day_of_week,\n        max(case when current_days_to_event = 1 and current_time_to_event = 1 and event_type = 'current_ppv' then adds_time else null end) as current_adds_time,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -2 and 0 then total_adds::float else 0 end) as weekend_adds_tillnow,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as ghw_adds_tillnow,\n        sum(case when event_type = 'current_ppv' and adds_days_to_event between -6 and -1 then total_adds::float else 0 end) as ghw_adds_tillnow1,\n        sum(case when current_days_to_event = 1  and event_type = 'current_ppv' then total_adds::float else 0 end) as currentday_adds_tillnow,\n\t\tsum(case when current_time_to_event = 1 and event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds_tillnow,\n\t\tsum(case when event_type != 'current_ppv' and adds_days_to_event between -6 and 0 then total_adds::float else 0 end) as comp_ghw_adds\n\t\t\n        from (\n                select a.*, \n                case when b.adds_days_to_event is null then 0 else 1 end as current_days_to_event,\n                case when c.adds_time_to_event is null then 0 else 1 end as current_time_to_event\n                from #final_view as a\n                left join (\n                select max(adds_days_to_event) as adds_days_to_event\n                from #final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as b\n                on a.adds_days_to_event = b.adds_days_to_event\n                left join (\n                select distinct adds_days_to_event, adds_time_to_event\n                from #final_view where event_type = 'current_ppv' and total_adds is not null\n                ) as c\n                on a.adds_days_to_event = c.adds_days_to_event and a.adds_time_to_event = c.adds_time_to_event\n        )) a);", "transaction": true, "index": null}, {"sql": "drop table if exists #actuals_estimates;\ncreate table #actuals_estimates as\n(select a.*,\nb.event_reporting_type as current_event_reporting_type,\nb.event_name as current_event_name,\nb.event_date as current_event_date,\nb.event_dttm as current_event_dttm,\nb.current_adds_date,\nb.current_adds_days_to_event,\nb.current_adds_day_of_week,\nb.current_adds_time,\nb.ghw_adds_tillnow,\nb.ghw_adds_estimate,\nb.currentday_adds_tillnow,\nb.currentday_adds_estimate,\nb.weekend_adds_tillnow,\nb.weekend_adds_estimate\nfrom #final_view as a\nleft join #estimates as b\non a.adds_days_to_event = b.current_adds_days_to_event);", "transaction": true, "index": null}, {"sql": "drop table if exists #forecast;\ncreate table #forecast as\n(select trunc(bill_date) as bill_date,forecast_event_dt,\ncase\n        when date_part(dayofweek,bill_date) = 0 then 'Sunday'\n        when date_part(dayofweek,bill_date) = 1 then 'Monday'\n        when date_part(dayofweek,bill_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,bill_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,bill_date) = 4 then 'Thursday'\n        when date_part(dayofweek,bill_date) = 5 then 'Friday'\n        when date_part(dayofweek,bill_date) = 6 then 'Saturday'\nelse 'Other' end as bill_day_of_week,\n--sum(paid_new_adds+paid_winbacks+trial_adds) as current_day_forecast\n--TAB-2028\nsum(paid_new_adds+paid_winbacks) as current_day_forecast\nfrom fds_nplus.aggr_nplus_daily_forcast_output a,\n(select top 1 event_date as forecast_event_dt, \ndateadd(day,-2,event_date) as forecast_start_dt \nfrom udl_nplus.raw_da_weekly_ppv_hourly_comps_new where event_type='current_ppv'\nand as_on_date=(select max(as_on_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)\nand  update_date=(select max(update_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)) b\nwhere forecast_date=(select max(forecast_date) from fds_nplus.aggr_nplus_daily_forcast_output)\nand UPPER(payment_method) in ('MLBAM','APPLE','ROKU') and Upper(official_run_flag)='OFFICIAL' \nand trunc(bill_date) >= b.forecast_start_dt\nand trunc(bill_date) <= b.forecast_event_dt\ngroup by bill_date,forecast_event_dt);", "transaction": true, "index": null}, {"sql": "\n--Merging Weekday and Weekend Forecast--\ndrop table if exists #forecast_view;\ncreate table #forecast_view as\nselect bill_day_of_week,current_day_forecast,weekend_forecast,forecast_event_dt from\n#forecast,(select sum(current_day_forecast) as weekend_forecast from #forecast)\nwhere trunc(bill_date) = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())));", "transaction": true, "index": null}, {"sql": "drop table if exists #actuals_estimates_forecast_view;\ncreate table #actuals_estimates_forecast_view as\n(select \na.*,\nb.current_day_forecast,\nb.weekend_forecast\nfrom #actuals_estimates as a \nleft join \n#forecast_view as b\non a.current_event_date=b.forecast_event_dt);", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "ppv forecast information", "columns": {"event_date": {"name": "event_date", "description": "PPV event date", "meta": {}, "data_type": null, "tags": []}, "event_dttm": {"name": "event_dttm", "description": "PPV event date and time", "meta": {}, "data_type": null, "tags": []}, "event_name": {"name": "event_name", "description": "PPV event name", "meta": {}, "data_type": null, "tags": []}, "event_type": {"name": "event_type", "description": "Evenet type", "meta": {}, "data_type": null, "tags": []}, "event_reporting_type": {"name": "event_reporting_type", "description": "Event reporting type", "meta": {}, "data_type": null, "tags": []}, "adds_days_to_event": {"name": "adds_days_to_event", "description": "adds day to event", "meta": {}, "data_type": null, "tags": []}, "adds_day_of_week": {"name": "adds_day_of_week", "description": "adds day of the week", "meta": {}, "data_type": null, "tags": []}, "adds_date": {"name": "adds_date", "description": "adds date", "meta": {}, "data_type": null, "tags": []}, "adds_time_to_event": {"name": "adds_time_to_event", "description": "adds time to event", "meta": {}, "data_type": null, "tags": []}, "adds_time": {"name": "adds_time", "description": "adds time", "meta": {}, "data_type": null, "tags": []}, "paid_adds": {"name": "paid_adds", "description": "paid adds", "meta": {}, "data_type": null, "tags": []}, "trial_adds": {"name": "trial_adds", "description": "trial adds", "meta": {}, "data_type": null, "tags": []}, "total_adds": {"name": "total_adds", "description": "total adds", "meta": {}, "data_type": null, "tags": []}, "current_event_reporting_type": {"name": "current_event_reporting_type", "description": "current event reporting type", "meta": {}, "data_type": null, "tags": []}, "current_event_name": {"name": "current_event_name", "description": "current event name", "meta": {}, "data_type": null, "tags": []}, "current_event_date": {"name": "current_event_date", "description": "current event date", "meta": {}, "data_type": null, "tags": []}, "current_event_dttm": {"name": "current_event_dttm", "description": "current event date time", "meta": {}, "data_type": null, "tags": []}, "current_adds_date": {"name": "current_adds_date", "description": "current adds date", "meta": {}, "data_type": null, "tags": []}, "current_adds_days_to_event": {"name": "current_adds_days_to_event", "description": "current adds days to event", "meta": {}, "data_type": null, "tags": []}, "current_adds_day_of_week": {"name": "current_adds_day_of_week", "description": "current adds day of the week", "meta": {}, "data_type": null, "tags": []}, "current_adds_time": {"name": "current_adds_time", "description": "current adds time", "meta": {}, "data_type": null, "tags": []}, "ghw_adds_tillnow": {"name": "ghw_adds_tillnow", "description": "go home eek adds till now", "meta": {}, "data_type": null, "tags": []}, "ghw_adds_estimate": {"name": "ghw_adds_estimate", "description": "go week home adds estimate", "meta": {}, "data_type": null, "tags": []}, "currentday_adds_tillnow": {"name": "currentday_adds_tillnow", "description": "currentday adds till now", "meta": {}, "data_type": null, "tags": []}, "currentday_adds_estimate": {"name": "currentday_adds_estimate", "description": "current day adds estimate", "meta": {}, "data_type": null, "tags": []}, "weekend_adds_tillnow": {"name": "weekend_adds_tillnow", "description": "weekend adds till now", "meta": {}, "data_type": null, "tags": []}, "weekend_adds_estimate": {"name": "weekend_adds_estimate", "description": "weekends adds estimate", "meta": {}, "data_type": null, "tags": []}, "current_day_forecast": {"name": "current_day_forecast", "description": "current day forecast", "meta": {}, "data_type": null, "tags": []}, "weekend_forecast": {"name": "weekend_forecast", "description": "weekend forecast", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/aggregate/rpt_network_ppv_actuals_estimates_forecast.sql", "compiled": true, "compiled_sql": "\nselect a.*,'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from #actuals_estimates_forecast_view a", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect a.*,'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm from #actuals_estimates_forecast_view a"}, "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_nplus',\t\r\n\t\"materialized\": 'incremental',\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\nselect a.bill_date,a.paid_winbacks, a.new_paid, a.free_trial_subs, a.losses,\r\npaid_churn_rate, total_churn_rate, eom_total_subs, adp,\r\npaid_winbacks_ly, new_paid_ly, free_trial_subs_ly, losses_ly, paid_churn_rate_ly, total_churn_rate_ly, eom_total_subs_ly, adp_ly,\r\npaid_winbacks_f, new_paid_f, free_trial_subs_f, losses_f, eom_total_subs_f, adp_f,\r\nmnthly_total_hours_watched, mnthly_avg_hours_per_sub,lst_mnth_subs_viewing_cohort_rate,\r\nmnthly_total_hours_watched_ly, mnthly_avg_hours_per_sub_ly, lst_mnth_subs_viewing_cohort_rate_ly \r\nfrom \r\n(\r\n-------------------------------------------------------------------------------------------------------------------------------\r\n--Current Year Actuals\r\n-------------------------------------------------------------------------------------------------------------------------------\r\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\r\n(select \r\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks,\r\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid,sum(trial_adds) as free_trial_subs,\r\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses \r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}\r\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}})  \r\nand payment_method in ('mlbam','apple','roku')\r\nand official_run_flag='official' \r\nand extract(year from (dateadd(month,-1,current_date))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2) a\r\n\r\nleft join\r\n\r\n--OTT Total Churn Rate, Paid Churn Rate\r\n(select \r\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate,\r\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \r\nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\r\nleft join (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\r\nwhere as_on_date=date_trunc('month',dateadd(month,-1,current_date)) and payment_method<>'roku_iap') b\r\non 1=1 \r\nleft join (select sum(trial_active_end) as trial_active_2\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} where forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \r\nand payment_method in ('roku')\r\nand official_run_flag='official' \r\nand extract(year from (dateadd(month,-2,current_date))) =year\r\nand extract(month from current_date)-2=month ) c\r\non 1=1\r\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \r\nand payment_method in ('mlbam','apple','roku')\r\nand official_run_flag='official' \r\nand extract(year from (dateadd(month,-1,current_date))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2 \r\n) b\r\non a.bill_date = b.bill_date\r\n\r\nleft join\r\n\r\n(\r\n--All Providers EOM,ADP\r\nselect \r\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then nvl(trial_active_end,0) else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs,\r\nsum(avg_daily_paid_subs) as adp\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\r\nleft join (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\r\nwhere as_on_date=date_trunc('month',current_date) and payment_method<>'roku_iap') b\r\non 1=1 \r\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \r\nand official_run_flag='official' \r\nand extract(year from (dateadd(month,-1,current_date))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2\r\n)c\r\non a.bill_date = c.bill_date\r\n\r\nleft join\r\n(\r\n-------------------------------------------------------------------------------------------------------------------------------\r\n--Previous Year Actuals\r\n-------------------------------------------------------------------------------------------------------------------------------\r\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\r\nselect \r\nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_ly,\r\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_ly,sum(trial_adds) as free_trial_subs_ly,\r\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_ly \r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} \r\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}})\r\nand payment_method in ('mlbam','apple','roku')\r\nand official_run_flag='official' \r\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2\r\n) d\r\non a.bill_date = d.bill_date\r\n\r\nleft join\r\n(\r\n--OTT Total Churn Rate, Paid Churn Rate\r\nselect \r\nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate_ly,\r\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \r\nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate_ly\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\r\nleft join \r\n(select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\r\nwhere as_on_date=date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and payment_method<>'roku_iap'\r\nand as_on_date>'2019-12-14'\r\nunion all\r\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from fds_nplus.aggr_kpi_hist\r\nwhere as_on_date= date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and as_on_Date<='2019-12-14')) b\r\non 1=1 \r\nleft join (select sum(trial_active_end) as trial_active_2\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} where forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \r\nand payment_method in ('roku')\r\nand official_run_flag='official' \r\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\r\nand extract(month from current_date)-2=month) c\r\non 1=1\r\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \r\nand payment_method in ('mlbam','apple','roku')\r\nand official_run_flag='official' \r\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2\r\n) e\r\non a.bill_date = e.bill_date\r\n\r\nleft join\r\n(\r\n--All Providers EOM,ADP\r\nselect \r\nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then trial_active_end else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs_ly,\r\nsum(avg_daily_paid_subs) as adp_ly\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} a\r\nleft join (select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_total_subscription')}}\r\nwhere as_on_date=date_trunc('month',dateadd(year,-1,current_date)) and payment_method<>'roku_iap'\r\nand as_on_date>'2019-12-14'\r\nunion all\r\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from {{source('fds_nplus','aggr_kpi_hist')}}\r\nwhere as_on_date= date_trunc('month',dateadd(year,-1,current_date)) and as_on_Date<='2019-12-14')) b\r\non 1=1 \r\nwhere forecast_date=(select max(forecast_date) from {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}) \r\nand official_run_flag='official' \r\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2\r\n) f\r\non a.bill_date = f.bill_date\r\n\r\nleft join\r\n\r\n(\r\n-------------------------------------------------------------------------------------------------------------------------------\r\n--Forecast Current Year\r\n-------------------------------------------------------------------------------------------------------------------------------\r\n--OTT FYE (OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses)\r\nselect \r\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_f,\r\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_f,sum(trial_adds) as free_trial_subs_f,\r\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_f\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}} \r\nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\r\nand payment_method in ('mlbam','apple','roku')\r\nand official_run_flag='official' \r\nand extract(year from (dateadd(month,-1,current_date))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2\r\n) g\r\non a.bill_date = g.bill_date\r\n\r\nleft join\r\n(\r\n--All Providers FYE EOM,ADP\r\nselect \r\nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\r\nsum(nvl(paid_active_end,0))+sum(nvl(trial_active_end,0)) as eom_total_subs_f,\r\nsum(avg_daily_paid_subs) as adp_f\r\nfrom {{source('fds_nplus','aggr_nplus_monthly_forcast_output')}}  \r\nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\r\nand official_run_flag='official' \r\nand extract(year from (dateadd(month,-1,current_date))) =year\r\nand extract(month from current_date)-1=month\r\ngroup by 1,2\r\n) h\r\non a.bill_date = h.bill_date\r\n\r\nleft join\r\n(\r\n--Viewership Actual\r\nselect  mnth_start_dt as bill_date, \r\nmnthly_total_hours_watched,mnthly_avg_hours_per_sub\r\nfrom {{source('fds_nplus','aggr_monthly_program_type_viewership')}}\r\nwhere stream_type_cd='live+vod'\r\nand program_type_cd='All'\r\nand as_on_date=(select max(as_on_date) from {{source('fds_nplus','aggr_monthly_program_type_viewership')}})\r\nand subs_tier='95'\r\nand initial_signup_year = '2099'\r\n) i\r\non a.bill_date = i.bill_date\r\n\r\nleft join\r\n(\r\nselect  mnth_start_dt as bill_date,lst_mnth_subs_viewing_cohort_rate\r\nfrom {{source('fds_nplus','aggr_monthly_subs_cohort_viewership')}}\r\nwhere stream_type_cd='live+vod'\r\nand program_type_cd='All'\r\nand as_on_date=(select max(as_on_date) from {{source('fds_nplus','aggr_monthly_subs_cohort_viewership')}})\r\nand subs_tier='95'\r\nand subs_year = '2099'\r\n) j\r\non a.bill_date = j.bill_date\r\n\r\nleft join\r\n(\r\n--Viewership Last Year\r\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date, \r\nmnthly_total_hours_watched as mnthly_total_hours_watched_ly,\r\nmnthly_avg_hours_per_sub as mnthly_avg_hours_per_sub_ly\r\nfrom {{source('fds_nplus','aggr_monthly_program_type_viewership')}}\r\nwhere stream_type_cd='live+vod'\r\nand program_type_cd='All'\r\nand subs_tier='95'\r\nand initial_signup_year = '2099'\r\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\r\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\r\n) k\r\non a.bill_date = k.bill_date\r\n\r\nleft join\r\n(\r\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date,\r\nlst_mnth_subs_viewing_cohort_rate as lst_mnth_subs_viewing_cohort_rate_ly\r\nfrom fds_nplus.aggr_monthly_subs_cohort_viewership\r\nwhere stream_type_cd='live+vod'\r\nand program_type_cd='All'\r\nand subs_tier='95'\r\nand subs_year = '2099'\r\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\r\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\r\n) l\r\non a.bill_date = l.bill_date\r\n)", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "aggr_monthly_network_kpis_vkm"], "unique_id": "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/aggregate/aggr_monthly_network_kpis_vkm.sql", "original_file_path": "models/fds_nplus/aggregate/aggr_monthly_network_kpis_vkm.sql", "name": "aggr_monthly_network_kpis_vkm", "resource_type": "model", "alias": "aggr_monthly_network_kpis_vkm", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_total_subscription"], ["fds_nplus", "aggr_kpi_hist"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_nplus_monthly_forcast_output"], ["fds_nplus", "aggr_monthly_program_type_viewership"], ["fds_nplus", "aggr_monthly_program_type_viewership"], ["fds_nplus", "aggr_monthly_subs_cohort_viewership"], ["fds_nplus", "aggr_monthly_subs_cohort_viewership"], ["fds_nplus", "aggr_monthly_program_type_viewership"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership"]}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_monthly_network_kpis_vkm\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : monthly VKM network kpis\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT : Sudhakar Change: Initial Version", "columns": {"bill_date": {"name": "bill_date", "description": "report date", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks": {"name": "paid_winbacks", "description": "All paid winback subscriptions for the month", "meta": {}, "data_type": null, "tags": []}, "new_paid": {"name": "new_paid", "description": "All paid subscriptions who have paid for the first time", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs": {"name": "free_trial_subs", "description": "Total trial adds for the month", "meta": {}, "data_type": null, "tags": []}, "losses": {"name": "losses", "description": "Total Paid and trial Losses for the month", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate": {"name": "paid_churn_rate", "description": "paid churn rate", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate": {"name": "total_churn_rate", "description": "total churn rate", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs": {"name": "eom_total_subs", "description": "end of month total subscriptions", "meta": {}, "data_type": null, "tags": []}, "adp": {"name": "adp", "description": "average daily paid subscriptions", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_ly": {"name": "paid_winbacks_ly", "description": "All paid winback subscriptions for the month in last year", "meta": {}, "data_type": null, "tags": []}, "new_paid_ly": {"name": "new_paid_ly", "description": "All paid subscriptions who have paid for the first time last year", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_ly": {"name": "free_trial_subs_ly", "description": "Total trial adds for the month in last year", "meta": {}, "data_type": null, "tags": []}, "losses_ly": {"name": "losses_ly", "description": "Total Paid and trial Losses for the month last year", "meta": {}, "data_type": null, "tags": []}, "paid_churn_rate_ly": {"name": "paid_churn_rate_ly", "description": "paid churn rate last year", "meta": {}, "data_type": null, "tags": []}, "total_churn_rate_ly": {"name": "total_churn_rate_ly", "description": "total churn rate last year", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_ly": {"name": "eom_total_subs_ly", "description": "end of month total subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "adp_ly": {"name": "adp_ly", "description": "average daily paid subscriptions last year", "meta": {}, "data_type": null, "tags": []}, "paid_winbacks_f": {"name": "paid_winbacks_f", "description": "All paid winback subscriptions for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "new_paid_f": {"name": "new_paid_f", "description": "All paid subscriptions who have paid for the first time forecasted", "meta": {}, "data_type": null, "tags": []}, "free_trial_subs_f": {"name": "free_trial_subs_f", "description": "Total trial adds for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "losses_f": {"name": "losses_f", "description": "Total Paid and trial Losses for the month forecasted", "meta": {}, "data_type": null, "tags": []}, "eom_total_subs_f": {"name": "eom_total_subs_f", "description": "end of month total subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "adp_f": {"name": "adp_f", "description": "average daily paid subscriptions forecasted", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched": {"name": "mnthly_total_hours_watched", "description": "Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub": {"name": "mnthly_avg_hours_per_sub", "description": "average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate": {"name": "lst_mnth_subs_viewing_cohort_rate", "description": "viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}, "mnthly_total_hours_watched_ly": {"name": "mnthly_total_hours_watched_ly", "description": "last year Count of unique viewers for the month", "meta": {}, "data_type": null, "tags": []}, "mnthly_avg_hours_per_sub_ly": {"name": "mnthly_avg_hours_per_sub_ly", "description": "last year average hours per subscriber for the month", "meta": {}, "data_type": null, "tags": []}, "lst_mnth_subs_viewing_cohort_rate_ly": {"name": "lst_mnth_subs_viewing_cohort_rate_ly", "description": "last year viewing cohert rate of last month subscriptions", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/aggregate/aggr_monthly_network_kpis_vkm.sql", "compiled": true, "compiled_sql": "\nselect a.bill_date,a.paid_winbacks, a.new_paid, a.free_trial_subs, a.losses,\npaid_churn_rate, total_churn_rate, eom_total_subs, adp,\npaid_winbacks_ly, new_paid_ly, free_trial_subs_ly, losses_ly, paid_churn_rate_ly, total_churn_rate_ly, eom_total_subs_ly, adp_ly,\npaid_winbacks_f, new_paid_f, free_trial_subs_f, losses_f, eom_total_subs_f, adp_f,\nmnthly_total_hours_watched, mnthly_avg_hours_per_sub,lst_mnth_subs_viewing_cohort_rate,\nmnthly_total_hours_watched_ly, mnthly_avg_hours_per_sub_ly, lst_mnth_subs_viewing_cohort_rate_ly \nfrom \n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Current Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid,sum(trial_adds) as free_trial_subs,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")  \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2) a\n\nleft join\n\n--OTT Total Churn Rate, Paid Churn Rate\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(month,-1,current_date)) and payment_method<>'roku_iap') b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-2,current_date))) =year\nand extract(month from current_date)-2=month ) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2 \n) b\non a.bill_date = b.bill_date\n\nleft join\n\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then nvl(trial_active_end,0) else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs,\nsum(avg_daily_paid_subs) as adp\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',current_date) and payment_method<>'roku_iap') b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n)c\non a.bill_date = c.bill_date\n\nleft join\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Previous Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_ly,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_ly,sum(trial_adds) as free_trial_subs_ly,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_ly \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) d\non a.bill_date = d.bill_date\n\nleft join\n(\n--OTT Total Churn Rate, Paid Churn Rate\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate_ly,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join \n(select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from fds_nplus.aggr_kpi_hist\nwhere as_on_date= date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and as_on_Date<='2019-12-14')) b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-2=month) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) e\non a.bill_date = e.bill_date\n\nleft join\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then trial_active_end else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs_ly,\nsum(avg_daily_paid_subs) as adp_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,current_date)) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"\nwhere as_on_date= date_trunc('month',dateadd(year,-1,current_date)) and as_on_Date<='2019-12-14')) b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) f\non a.bill_date = f.bill_date\n\nleft join\n\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Forecast Current Year\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT FYE (OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses)\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_f,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_f,sum(trial_adds) as free_trial_subs_f,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) g\non a.bill_date = g.bill_date\n\nleft join\n(\n--All Providers FYE EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(nvl(trial_active_end,0)) as eom_total_subs_f,\nsum(avg_daily_paid_subs) as adp_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) h\non a.bill_date = h.bill_date\n\nleft join\n(\n--Viewership Actual\nselect  mnth_start_dt as bill_date, \nmnthly_total_hours_watched,mnthly_avg_hours_per_sub\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\")\nand subs_tier='95'\nand initial_signup_year = '2099'\n) i\non a.bill_date = i.bill_date\n\nleft join\n(\nselect  mnth_start_dt as bill_date,lst_mnth_subs_viewing_cohort_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\")\nand subs_tier='95'\nand subs_year = '2099'\n) j\non a.bill_date = j.bill_date\n\nleft join\n(\n--Viewership Last Year\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date, \nmnthly_total_hours_watched as mnthly_total_hours_watched_ly,\nmnthly_avg_hours_per_sub as mnthly_avg_hours_per_sub_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand initial_signup_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) k\non a.bill_date = k.bill_date\n\nleft join\n(\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date,\nlst_mnth_subs_viewing_cohort_rate as lst_mnth_subs_viewing_cohort_rate_ly\nfrom fds_nplus.aggr_monthly_subs_cohort_viewership\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand subs_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) l\non a.bill_date = l.bill_date\n)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect a.bill_date,a.paid_winbacks, a.new_paid, a.free_trial_subs, a.losses,\npaid_churn_rate, total_churn_rate, eom_total_subs, adp,\npaid_winbacks_ly, new_paid_ly, free_trial_subs_ly, losses_ly, paid_churn_rate_ly, total_churn_rate_ly, eom_total_subs_ly, adp_ly,\npaid_winbacks_f, new_paid_f, free_trial_subs_f, losses_f, eom_total_subs_f, adp_f,\nmnthly_total_hours_watched, mnthly_avg_hours_per_sub,lst_mnth_subs_viewing_cohort_rate,\nmnthly_total_hours_watched_ly, mnthly_avg_hours_per_sub_ly, lst_mnth_subs_viewing_cohort_rate_ly \nfrom \n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Current Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid,sum(trial_adds) as free_trial_subs,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")  \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2) a\n\nleft join\n\n--OTT Total Churn Rate, Paid Churn Rate\n(select \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(month,-1,current_date)) and payment_method<>'roku_iap') b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-2,current_date))) =year\nand extract(month from current_date)-2=month ) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2 \n) b\non a.bill_date = b.bill_date\n\nleft join\n\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then nvl(trial_active_end,0) else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs,\nsum(avg_daily_paid_subs) as adp\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',current_date) and payment_method<>'roku_iap') b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n)c\non a.bill_date = c.bill_date\n\nleft join\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Previous Year Actuals\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_ly,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_ly,sum(trial_adds) as free_trial_subs_ly,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_ly \nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\")\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) d\non a.bill_date = d.bill_date\n\nleft join\n(\n--OTT Total Churn Rate, Paid Churn Rate\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(paid_losses_actual)/sum(paid_active_start) :: float as paid_churn_rate_ly,\nsum(nvl(paid_losses_actual,0)+nvl(total_trial_loss,0))/(sum(nvl(paid_active_start,0))+ \nmax(nvl(c.trial_active_2,0))+max(nvl(b.trial_active,0))) :: float as total_churn_rate_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join \n(select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from fds_nplus.aggr_kpi_hist\nwhere as_on_date= date_trunc('month',dateadd(year,-1,dateadd(month,-1,current_date))) and as_on_Date<='2019-12-14')) b\non 1=1 \nleft join (select sum(trial_active_end) as trial_active_2\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" where forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-2=month) c\non 1=1\nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) e\non a.bill_date = e.bill_date\n\nleft join\n(\n--All Providers EOM,ADP\nselect \nto_date((cast(year+1 as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(case when payment_method='roku' then trial_active_end else 0 end)+max(nvl(b.trial_active,0)) as eom_total_subs_ly,\nsum(avg_daily_paid_subs) as adp_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" a\nleft join (select sum(trial_active) as trial_active from (select sum(total_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_total_subscription\"\nwhere as_on_date=date_trunc('month',dateadd(year,-1,current_date)) and payment_method<>'roku_iap'\nand as_on_date>'2019-12-14'\nunion all\nselect sum(total_trial_active_cnt)-sum(total_iap_trial_active_cnt) trial_active from \"entdwdb\".\"fds_nplus\".\"aggr_kpi_hist\"\nwhere as_on_date= date_trunc('month',dateadd(year,-1,current_date)) and as_on_Date<='2019-12-14')) b\non 1=1 \nwhere forecast_date=(select max(forecast_date) from \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\") \nand official_run_flag='official' \nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) f\non a.bill_date = f.bill_date\n\nleft join\n\n(\n-------------------------------------------------------------------------------------------------------------------------------\n--Forecast Current Year\n-------------------------------------------------------------------------------------------------------------------------------\n--OTT FYE (OTT Gross Adds, Free Trials, Paid Winbacks, New Paid,Losses)\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_winbacks,0)+nvl(paid_new_with_trial,0)) as paid_winbacks_f,\nsum(nvl(paid_new_adds,0)-nvl(paid_new_with_trial,0)) as new_paid_f,sum(trial_adds) as free_trial_subs_f,\nsum(nvl(paid_losses_actual,0))+sum(nvl(total_trial_loss,0)) as losses_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\" \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand payment_method in ('mlbam','apple','roku')\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) g\non a.bill_date = g.bill_date\n\nleft join\n(\n--All Providers FYE EOM,ADP\nselect \nto_date((cast(year as char(4)) + '-' + cast(month as char(2)) + '-01'),'yyyy-mm-dd') as bill_date,forecast_date,\nsum(nvl(paid_active_end,0))+sum(nvl(trial_active_end,0)) as eom_total_subs_f,\nsum(avg_daily_paid_subs) as adp_f\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_nplus_monthly_forcast_output\"  \nwhere forecast_date=date_trunc('month',(dateadd(month,-1,current_date)))\nand official_run_flag='official' \nand extract(year from (dateadd(month,-1,current_date))) =year\nand extract(month from current_date)-1=month\ngroup by 1,2\n) h\non a.bill_date = h.bill_date\n\nleft join\n(\n--Viewership Actual\nselect  mnth_start_dt as bill_date, \nmnthly_total_hours_watched,mnthly_avg_hours_per_sub\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\")\nand subs_tier='95'\nand initial_signup_year = '2099'\n) i\non a.bill_date = i.bill_date\n\nleft join\n(\nselect  mnth_start_dt as bill_date,lst_mnth_subs_viewing_cohort_rate\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand as_on_date=(select max(as_on_date) from \"entdwdb\".\"fds_nplus\".\"aggr_monthly_subs_cohort_viewership\")\nand subs_tier='95'\nand subs_year = '2099'\n) j\non a.bill_date = j.bill_date\n\nleft join\n(\n--Viewership Last Year\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date, \nmnthly_total_hours_watched as mnthly_total_hours_watched_ly,\nmnthly_avg_hours_per_sub as mnthly_avg_hours_per_sub_ly\nfrom \"entdwdb\".\"fds_nplus\".\"aggr_monthly_program_type_viewership\"\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand initial_signup_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) k\non a.bill_date = k.bill_date\n\nleft join\n(\nselect  trunc(dateadd(year,1,mnth_start_dt)) as bill_date,\nlst_mnth_subs_viewing_cohort_rate as lst_mnth_subs_viewing_cohort_rate_ly\nfrom fds_nplus.aggr_monthly_subs_cohort_viewership\nwhere stream_type_cd='live+vod'\nand program_type_cd='All'\nand subs_tier='95'\nand subs_year = '2099'\nand extract(year from dateadd(year,-1,(dateadd(month,-1,current_date)))) = extract(year from mnth_start_dt)\nand extract(month from current_date)-1=extract(month from mnth_start_dt)\n) l\non a.bill_date = l.bill_date\n)"}, "model.analytics_engineering_marts.rpt_ppv_final_table": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'dt_prod_support',\t\r\n\t\"materialized\": 'incremental',\r\n\t\"pre-hook\":[\"drop table if exists #current_ppv;\r\ncreate table #current_ppv as \r\n(select as_on_date, event_name,  event_date, event_timestamp as event_dttm,\r\n event_reporting_type, event_type, update_date \r\nfrom udl_nplus.raw_da_weekly_ppv_hourly_comps_new\r\nwhere update_date=(select max(update_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)\r\nand as_on_date=(select max(as_on_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)\r\nand exists (select 1 from udl_nplus.raw_da_weekly_ppv_hourly_comps_new where event_date between\r\ntrunc(convert_timezone('AMERICA/NEW_YORK', sysdate-1)) and trunc(convert_timezone('AMERICA/NEW_YORK', sysdate+7))\r\nand event_type='current_ppv'));\r\n\r\ndrop table if exists #full_list;\r\ncreate table #full_list as \r\n(select event_date, event_dttm, event_name, event_type, event_reporting_type, 0 as adds_days_to_event, event_date as adds_date from #current_ppv\r\nunion all\r\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -1 as adds_days_to_event, event_date-1 as adds_date from #current_ppv\r\nunion all\r\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -2 as adds_days_to_event, event_date-2 as adds_date from #current_ppv\r\nunion all\r\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -3 as adds_days_to_event, event_date-3 as adds_date from #current_ppv\r\nunion all\r\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -4 as adds_days_to_event, event_date-4 as adds_date from #current_ppv\r\nunion all\r\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -5 as adds_days_to_event, event_date-5 as adds_date from #current_ppv\r\nunion all\r\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -6 as adds_days_to_event, event_date-6 as adds_date from #current_ppv);\r\n\r\ndrop table if exists #hist_orders;\r\ncreate table #hist_orders as \r\nselect adds_date,adds_time,trial_adds,paid_adds,trial_adds+Paid_adds total_adds from (SELECT  ordr_dt adds_date, \r\n        hour_flag adds_time,\r\n        COALESCE(Paid_add,0) as Paid_adds,\r\n        COALESCE(Trial_add,0) as Trial_adds\r\n        \r\nFROM\r\n(\r\nSELECT  ordr_dt, \r\n        hour_flag,\r\n        sum(case when ADD_TYPE = 'Trial' then add_cnt end) as Trial_add,\r\n        sum(case when ADD_TYPE = 'Paid' then add_cnt end) as Paid_add\r\n FROM\r\n (\r\n        \r\n select trunc(initial_order_dttm) ordr_dt, \r\n        date_part(hour,initial_order_dttm) hour_flag,\r\n        case when trial_start_dttm is not null then 'Trial' else 'Paid' end as add_type,\r\n        count(distinct order_id) add_cnt\r\n from fds_nplus.fact_daily_subscription_order_status \r\n where trunc(initial_order_dttm) in (select distinct adds_date from #full_list)\r\n and payment_method in ('cybersource','stripe','incomm','paypal','roku_iap')\r\n group by 1,2,3\r\n )\r\n  group by 1,2\r\n  ));\r\n\r\ndrop table if exists #final_table;\r\ncreate table #final_table as \r\nselect * from \r\n(select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, a.adds_days_to_event,\r\ncase\r\n        when date_part(dayofweek,a.adds_date) = 0 then 'Sunday'\r\n        when date_part(dayofweek,a.adds_date) = 1 then 'Monday'\r\n        when date_part(dayofweek,a.adds_date) = 2 then 'Tuesday'\r\n        when date_part(dayofweek,a.adds_date) = 3 then 'Wednesday'\r\n        when date_part(dayofweek,a.adds_date) = 4 then 'Thursday'\r\n        when date_part(dayofweek,a.adds_date) = 5 then 'Friday'\r\n        when date_part(dayofweek,a.adds_date) = 6 then 'Saturday'\r\nelse 'Other' end as adds_day_of_week,\r\na.adds_date, b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\r\nfrom #full_list as a\r\nleft join (\r\n        select adds_date, adds_time, paid_adds, trial_adds, total_adds\r\n        from #hist_orders\r\n) as b on a.adds_date = b.adds_date);\r\n\r\ndrop table if exists #final_table_up;\r\ncreate table #final_table_up as\r\nselect * from #final_table where event_type = 'current_ppv'\r\nunion all\r\nselect * from #final_table where event_type != 'current_ppv' and adds_day_of_week in ('Friday','Saturday','Sunday');\r\n\r\n--select *,convert_timezone('AMERICA/NEW_YORK', sysdate) as etl_insert_dtmm  from #final_table_up\r\n\r\n\r\ndrop table if exists #t1;\r\ncreate table #t1 as\r\nselect  (ag_hour*1.00)/ag_sum ag_sum_pct,a.adds_day_of_week,adds_time from\r\n(select ag_hour,adds_day_of_week,adds_time from\r\n(select avg(paid_adds)+avg(trial_adds) ag_hour,adds_time,adds_day_of_week from #final_table_up where adds_day_of_week in ('Friday','Saturday','Sunday') group by adds_time,adds_day_of_week)) a \r\nleft join\r\n(select sum(ag_hour) ag_sum,adds_day_of_week from\r\n(select avg(paid_adds)+avg(trial_adds) ag_hour,adds_day_of_week from #final_table_up where adds_day_of_week in ('Friday','Saturday','Sunday') group by adds_time,adds_day_of_week)\r\ngroup by 2) b\r\non a.adds_day_of_week=b.adds_day_of_week;\r\n\r\ndrop table if exists #t2;\r\ncreate table #t2 as\r\nselect (ghw_avg*1.00)/tot_sum  tot_pct,adds_day_of_week from\r\n(select avg(ghw_sum) ghw_avg,adds_day_of_week from\r\n(select sum(paid_adds)+sum(trial_adds) ghw_sum ,adds_day_of_week,event_name  from #final_table where event_type!='current_ppv' \r\ngroup by adds_day_of_week,event_name) group by 2),\r\n(select sum(ghw_avg) tot_sum from\r\n(select avg(ghw_sum) ghw_avg,adds_day_of_week from\r\n(select sum(paid_adds)+sum(trial_adds) ghw_sum ,adds_day_of_week,event_name  from #final_table where event_type!='current_ppv' \r\ngroup by adds_day_of_week,event_name) group by 2)) b ;\r\n\r\n\r\n\r\ndrop table if exists #t3;\r\ncreate table #t3 as \r\nselect case \r\n\twhen adds_day_of_week='Friday' then\r\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week not in ('Friday','Saturday','Sunday'))+\r\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week  = 'Friday')*\r\n\t\t\t(select sum(ag_sum_pct) from #t1 where adds_time<a.adds_time and adds_day_of_week  =a.adds_day_of_week)\r\n\twhen adds_day_of_week='Saturday' then\r\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week not in ('Saturday','Sunday'))+\r\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week  = 'Saturday')*\r\n\t\t\t(select sum(ag_sum_pct) from #t1 where adds_time<a.adds_time and adds_day_of_week  = a.adds_day_of_week)\r\n\twhen adds_day_of_week='Sunday' then\r\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week not in ('Sunday'))+\r\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week  = 'Sunday')*\r\n\t\t\t(select sum(ag_sum_pct) from #t1 where adds_time<a.adds_time and adds_day_of_week  = a.adds_day_of_week) end day_pct,\r\n\t\t\tadds_day_of_week,adds_time  from #t1 a;\r\n\t\t\t\r\n\r\ndelete from dt_prod_support.rpt_ppv_hourly_pct;\r\n\r\ninsert into dt_prod_support.rpt_ppv_hourly_pct(adds_day_of_week,adds_time,pct,d2_pct)\r\nselect a.adds_day_of_week,a.adds_time,a.ag_sum_pct,b.day_pct from #t1 a join \r\n#t3 b on a.adds_day_of_week=b.adds_day_of_week and a.adds_time=b.adds_time;\r\n\r\ninsert into  dt_prod_support.rpt_ppv_hourly_pct(gwh_pct,gwh_pct_day)\r\nselect tot_pct,adds_day_of_week from #t2;\r\n\"]\r\n\t\t})\r\n}}\r\nselect *,convert_timezone('AMERICA/NEW_YORK', sysdate) as etl_insert_dtmm  from #final_table_up", "database": "entdwdb", "schema": "dt_prod_support", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "rpt_ppv_final_table"], "unique_id": "model.analytics_engineering_marts.rpt_ppv_final_table", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/aggregate/rpt_ppv_final_table.sql", "original_file_path": "models/fds_nplus/aggregate/rpt_ppv_final_table.sql", "name": "rpt_ppv_final_table", "resource_type": "model", "alias": "rpt_ppv_final_table", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "drop table if exists #current_ppv;\ncreate table #current_ppv as \n(select as_on_date, event_name,  event_date, event_timestamp as event_dttm,\n event_reporting_type, event_type, update_date \nfrom udl_nplus.raw_da_weekly_ppv_hourly_comps_new\nwhere update_date=(select max(update_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)\nand as_on_date=(select max(as_on_date) from udl_nplus.raw_da_weekly_ppv_hourly_comps_new)\nand exists (select 1 from udl_nplus.raw_da_weekly_ppv_hourly_comps_new where event_date between\ntrunc(convert_timezone('AMERICA/NEW_YORK', sysdate-1)) and trunc(convert_timezone('AMERICA/NEW_YORK', sysdate+7))\nand event_type='current_ppv'));\n\ndrop table if exists #full_list;\ncreate table #full_list as \n(select event_date, event_dttm, event_name, event_type, event_reporting_type, 0 as adds_days_to_event, event_date as adds_date from #current_ppv\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -1 as adds_days_to_event, event_date-1 as adds_date from #current_ppv\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -2 as adds_days_to_event, event_date-2 as adds_date from #current_ppv\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -3 as adds_days_to_event, event_date-3 as adds_date from #current_ppv\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -4 as adds_days_to_event, event_date-4 as adds_date from #current_ppv\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -5 as adds_days_to_event, event_date-5 as adds_date from #current_ppv\nunion all\nselect event_date, event_dttm, event_name, event_type, event_reporting_type, -6 as adds_days_to_event, event_date-6 as adds_date from #current_ppv);\n\ndrop table if exists #hist_orders;\ncreate table #hist_orders as \nselect adds_date,adds_time,trial_adds,paid_adds,trial_adds+Paid_adds total_adds from (SELECT  ordr_dt adds_date, \n        hour_flag adds_time,\n        COALESCE(Paid_add,0) as Paid_adds,\n        COALESCE(Trial_add,0) as Trial_adds\n        \nFROM\n(\nSELECT  ordr_dt, \n        hour_flag,\n        sum(case when ADD_TYPE = 'Trial' then add_cnt end) as Trial_add,\n        sum(case when ADD_TYPE = 'Paid' then add_cnt end) as Paid_add\n FROM\n (\n        \n select trunc(initial_order_dttm) ordr_dt, \n        date_part(hour,initial_order_dttm) hour_flag,\n        case when trial_start_dttm is not null then 'Trial' else 'Paid' end as add_type,\n        count(distinct order_id) add_cnt\n from fds_nplus.fact_daily_subscription_order_status \n where trunc(initial_order_dttm) in (select distinct adds_date from #full_list)\n and payment_method in ('cybersource','stripe','incomm','paypal','roku_iap')\n group by 1,2,3\n )\n  group by 1,2\n  ));\n\ndrop table if exists #final_table;\ncreate table #final_table as \nselect * from \n(select a.event_date, a.event_dttm, a.event_name, a.event_type, a.event_reporting_type, a.adds_days_to_event,\ncase\n        when date_part(dayofweek,a.adds_date) = 0 then 'Sunday'\n        when date_part(dayofweek,a.adds_date) = 1 then 'Monday'\n        when date_part(dayofweek,a.adds_date) = 2 then 'Tuesday'\n        when date_part(dayofweek,a.adds_date) = 3 then 'Wednesday'\n        when date_part(dayofweek,a.adds_date) = 4 then 'Thursday'\n        when date_part(dayofweek,a.adds_date) = 5 then 'Friday'\n        when date_part(dayofweek,a.adds_date) = 6 then 'Saturday'\nelse 'Other' end as adds_day_of_week,\na.adds_date, b.adds_time, b.paid_adds, b.trial_adds, b.total_adds\nfrom #full_list as a\nleft join (\n        select adds_date, adds_time, paid_adds, trial_adds, total_adds\n        from #hist_orders\n) as b on a.adds_date = b.adds_date);\n\ndrop table if exists #final_table_up;\ncreate table #final_table_up as\nselect * from #final_table where event_type = 'current_ppv'\nunion all\nselect * from #final_table where event_type != 'current_ppv' and adds_day_of_week in ('Friday','Saturday','Sunday');\n\n--select *,convert_timezone('AMERICA/NEW_YORK', sysdate) as etl_insert_dtmm  from #final_table_up\n\n\ndrop table if exists #t1;\ncreate table #t1 as\nselect  (ag_hour*1.00)/ag_sum ag_sum_pct,a.adds_day_of_week,adds_time from\n(select ag_hour,adds_day_of_week,adds_time from\n(select avg(paid_adds)+avg(trial_adds) ag_hour,adds_time,adds_day_of_week from #final_table_up where adds_day_of_week in ('Friday','Saturday','Sunday') group by adds_time,adds_day_of_week)) a \nleft join\n(select sum(ag_hour) ag_sum,adds_day_of_week from\n(select avg(paid_adds)+avg(trial_adds) ag_hour,adds_day_of_week from #final_table_up where adds_day_of_week in ('Friday','Saturday','Sunday') group by adds_time,adds_day_of_week)\ngroup by 2) b\non a.adds_day_of_week=b.adds_day_of_week;\n\ndrop table if exists #t2;\ncreate table #t2 as\nselect (ghw_avg*1.00)/tot_sum  tot_pct,adds_day_of_week from\n(select avg(ghw_sum) ghw_avg,adds_day_of_week from\n(select sum(paid_adds)+sum(trial_adds) ghw_sum ,adds_day_of_week,event_name  from #final_table where event_type!='current_ppv' \ngroup by adds_day_of_week,event_name) group by 2),\n(select sum(ghw_avg) tot_sum from\n(select avg(ghw_sum) ghw_avg,adds_day_of_week from\n(select sum(paid_adds)+sum(trial_adds) ghw_sum ,adds_day_of_week,event_name  from #final_table where event_type!='current_ppv' \ngroup by adds_day_of_week,event_name) group by 2)) b ;\n\n\n\ndrop table if exists #t3;\ncreate table #t3 as \nselect case \n\twhen adds_day_of_week='Friday' then\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week not in ('Friday','Saturday','Sunday'))+\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week  = 'Friday')*\n\t\t\t(select sum(ag_sum_pct) from #t1 where adds_time<a.adds_time and adds_day_of_week  =a.adds_day_of_week)\n\twhen adds_day_of_week='Saturday' then\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week not in ('Saturday','Sunday'))+\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week  = 'Saturday')*\n\t\t\t(select sum(ag_sum_pct) from #t1 where adds_time<a.adds_time and adds_day_of_week  = a.adds_day_of_week)\n\twhen adds_day_of_week='Sunday' then\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week not in ('Sunday'))+\n\t\t\t(select sum(tot_pct) from #t2 where adds_day_of_week  = 'Sunday')*\n\t\t\t(select sum(ag_sum_pct) from #t1 where adds_time<a.adds_time and adds_day_of_week  = a.adds_day_of_week) end day_pct,\n\t\t\tadds_day_of_week,adds_time  from #t1 a;\n\t\t\t\n\ndelete from dt_prod_support.rpt_ppv_hourly_pct;\n\ninsert into dt_prod_support.rpt_ppv_hourly_pct(adds_day_of_week,adds_time,pct,d2_pct)\nselect a.adds_day_of_week,a.adds_time,a.ag_sum_pct,b.day_pct from #t1 a join \n#t3 b on a.adds_day_of_week=b.adds_day_of_week and a.adds_time=b.adds_time;\n\ninsert into  dt_prod_support.rpt_ppv_hourly_pct(gwh_pct,gwh_pct_day)\nselect tot_pct,adds_day_of_week from #t2;\n", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "dt_prod_support", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/aggregate/rpt_ppv_final_table.sql", "compiled": true, "compiled_sql": "\nselect *,convert_timezone('AMERICA/NEW_YORK', sysdate) as etl_insert_dtmm  from #final_table_up", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect *,convert_timezone('AMERICA/NEW_YORK', sysdate) as etl_insert_dtmm  from #final_table_up"}, "model.analytics_engineering_marts.rpt_network_ppv_liveplusvod": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_nplus',\t\r\n\t\"materialized\": 'incremental',\"persist_docs\": {'relation' : true, 'columns' : true},\r\n\t\"pre-hook\":[\"drop table if exists #live_plus_vod_manual;\r\nselect * into #live_plus_vod_manual from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard \r\nwhere event_brand in ('PPV','NXT') and data_level = 'Live+VOD' \r\nand event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1\r\nand as_on_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate));\",\r\n\"drop table if exists #prior_change_live_vod;\r\n  select a.*, prev_year_views, prev_year_event\r\n  into #prior_change_live_vod\r\n  from\r\n  (select platform,\r\n         views as prev_month_views,\r\n         event as prev_month_event,\r\n         event_brand\r\n  from fds_nplus.rpt_network_ppv_liveplusvod\r\n  where data_level = 'Live+VOD' and event_brand in (select distinct event_brand from #live_plus_vod_manual) and event in (select distinct prev_month_event from #live_plus_vod_manual)) as a \r\n  join \r\n  (\r\n  select platform,\r\n         views as prev_year_views,\r\n         event as prev_year_event,\r\n         event_brand\r\n  from fds_nplus.rpt_network_ppv_liveplusvod\r\n  where data_level = 'Live+VOD' and event_brand in (select distinct event_brand from #live_plus_vod_manual) and event in (select distinct prev_year_event from #live_plus_vod_manual)) as b\r\n  on a.platform=b.platform\r\n  and a.event_brand = b.event_brand\r\n  where a.platform <> 'Total';\",\r\n  \"drop table if exists #live_plusvod_manual_base;\r\nselect a.*,b.prev_month_views,b.prev_year_views,\r\ncase when a.platform = 'YouTube' then round(a.views*0.23)\r\n     else 0 end as us_views\r\ninto #live_plusvod_manual_base\r\nfrom #live_plus_vod_manual a\r\nleft join\r\n#prior_change_live_vod b\r\non a.platform = b.platform\r\nand a.event_brand = b.event_brand;\",\r\n\"drop table if exists #liveplus_vod_nwk_views;\r\nselect * into #liveplus_vod_nwk_views\r\nfrom (  select *, 'PPV' as event_brand from\r\n        (\r\n         (select 'GLOBAL' as country,   ------- Network Views All\r\n               count(distinct src_fan_id) as views,\r\n               sum(play_time) as minutes \r\n          from fds_nplus.fact_daily_content_viewership\r\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'PPV')   \r\n               and STREAM_START_DTTM between first_stream and _same_day)\r\n        union all\r\n        (select 'US' as country,       ------- Network Views US\r\n               count(distinct src_fan_id) as views,\r\n               sum(play_time) as minutes \r\n          from fds_nplus.fact_daily_content_viewership\r\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'PPV')   \r\n           and STREAM_START_DTTM between first_stream and _same_day\r\n           and lower(country_cd) = 'united states')\r\n         )\r\n      )\r\n      union all\r\n      (  select *, 'NXT' as event_brand from\r\n        (\r\n         (select 'GLOBAL' as country,   ------- Network Views All\r\n               count(distinct src_fan_id) as views,\r\n               sum(play_time) as minutes \r\n          from fds_nplus.fact_daily_content_viewership\r\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'NXT')   \r\n               and STREAM_START_DTTM between first_stream and _same_day)\r\n        union all\r\n        (select 'US' as country,       ------- Network Views US\r\n               count(distinct src_fan_id) as views,\r\n               sum(play_time) as minutes \r\n          from fds_nplus.fact_daily_content_viewership\r\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'NXT')   \r\n           and STREAM_START_DTTM between first_stream and _same_day\r\n           and lower(country_cd) = 'united states')\r\n        )\r\n      );\",\r\n\t  \"drop table if exists #live_plusvod_manual_base1;\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\r\ncase when platform = 'Network' and event_brand = 'PPV' then (select views from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'PPV') \r\n     when platform = 'WWE.COM' and event_brand = 'PPV' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\r\n     when platform = 'Twitch' and event_brand = 'PPV' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch')\r\n                               \r\n     when platform = 'Network' and event_brand = 'NXT' then (select views from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'NXT') \r\n     when platform = 'WWE.COM' and event_brand = 'NXT' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\r\n     when platform = 'Twitch' and event_brand = 'NXT' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch')\r\n     else views end as views,\r\n     \r\ncase when platform = 'Network' and event_brand = 'PPV' then (select minutes from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'PPV') \r\n     when platform = 'Twitch' and event_brand = 'PPV' then (select minutes from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch') \r\n                                 \r\n     when platform = 'Network' and event_brand = 'NXT' then (select minutes from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'NXT') \r\n     when platform = 'Twitch' and event_brand = 'NXT' then (select minutes from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch')   \r\n     else minutes end as minutes,\r\n     \r\nprev_month_views,prev_year_views,\r\ncase when platform = 'Network' and event_brand = 'PPV' then (select views from #liveplus_vod_nwk_views where country = 'US' and event_brand = 'PPV')\r\n     when platform = 'WWE.COM' and event_brand = 'PPV' then (select us_views from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\r\n                               \r\n     when platform = 'Network' and event_brand = 'NXT' then (select views from #liveplus_vod_nwk_views where country = 'US' and event_brand = 'NXT')\r\n     when platform = 'WWE.COM' and event_brand = 'NXT' then (select us_views from fds_nplus.rpt_network_ppv_liveplusvod\r\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\r\n     else us_views end as us_views\r\ninto #live_plusvod_manual_base1\r\nfrom #live_plusvod_manual_base;\",\r\n\"drop table if exists #live_plusvod_manual_base_total;\r\nselect * into #live_plusvod_manual_base_total from\r\n(\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\r\nviews,minutes,prev_month_views,prev_year_views,us_views\r\nfrom #live_plusvod_manual_base1\r\nunion all\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,'Total' as platform,data_level,\r\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\r\nsum(views) as views,\r\nsum(minutes) as minutes,\r\nsum(prev_month_views) as prev_month_views,\r\nsum(prev_year_views) as prev_year_views,\r\nsum(us_views) as us_views\r\nfrom #live_plusvod_manual_base1\r\ngroup by \r\nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\r\nprev_month_event,prev_year_event,data_level);\",\r\n\"drop table if exists #live_plusvod_consolidation;\r\nselect * into #live_plusvod_consolidation from\r\n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\r\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\r\nviews,minutes,prev_month_views,prev_year_views,us_views,\r\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \r\nfrom #live_plusvod_manual_base_total\r\nunion all\r\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\r\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\r\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \r\nfrom fds_nplus.rpt_network_ppv_liveplusvod where event_brand in (select distinct event_brand from #live_plus_vod_manual) and data_level = 'Live+VOD'\r\nand event_date <> trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1);\",\r\n\"drop table if exists #live_plusvod_final;\r\nselect a.*, \r\n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\r\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\r\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\r\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\r\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \r\n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\r\n               else null end as yearly_rank,\r\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\r\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\r\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\r\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\r\n               else 'Tier 2' end as tier,\r\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\r\n          else '0' end as monthly_color,\r\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\r\n          else '0' end as yearly_color,\r\n          case when a.event_date=(select max(event_date) from #live_plusvod_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\r\n into #live_plusvod_final\r\n from #live_plusvod_consolidation a\r\n left join\r\n           (select platform, event,event_date,views,\r\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \r\n           from #live_plusvod_consolidation where trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-event_date::date <=380 and event_brand = 'PPV') as b\r\non a.platform=b.platform\r\nand a.event=b.event\r\nand a.event_date=b.event_date\r\n\r\n left join\r\n           (select platform, event,event_date,views,\r\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \r\n           from #live_plusvod_consolidation where trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-event_date::date <=735 and event_brand = 'NXT') as c\r\non a.platform=c.platform\r\nand a.event=c.event\r\nand a.event_date=c.event_date;\",\r\n\"delete from fds_nplus.rpt_network_ppv_liveplusvod where event_brand in (select distinct event_brand from #live_plus_vod_manual) \r\nand data_level = 'Live+VOD';\"]})}}\r\nselect asset_id,production_id,event,event_name,event_date,start_time,end_time,platform,\r\nviews,us_views,minutes,per_us_views,prev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\r\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\r\nchoose_ppv,event_brand,report_name,series_name,account,url,content_wwe_id as content_wweid,data_level,\r\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\r\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\r\n    NULL                                                AS etl_update_user_id,\r\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\r\nfrom #live_plusvod_final", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_nplus", "aggregate", "rpt_network_ppv_liveplusvod"], "unique_id": "model.analytics_engineering_marts.rpt_network_ppv_liveplusvod", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_nplus/aggregate/rpt_network_ppv_liveplusvod.sql", "original_file_path": "models/fds_nplus/aggregate/rpt_network_ppv_liveplusvod.sql", "name": "rpt_network_ppv_liveplusvod", "resource_type": "model", "alias": "rpt_network_ppv_liveplusvod", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "drop table if exists #live_plus_vod_manual;\nselect * into #live_plus_vod_manual from udl_nplus.raw_da_weekly_live_vod_kickoff_show_dashboard \nwhere event_brand in ('PPV','NXT') and data_level = 'Live+VOD' \nand event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1\nand as_on_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate));", "transaction": true, "index": null}, {"sql": "drop table if exists #prior_change_live_vod;\n  select a.*, prev_year_views, prev_year_event\n  into #prior_change_live_vod\n  from\n  (select platform,\n         views as prev_month_views,\n         event as prev_month_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live+VOD' and event_brand in (select distinct event_brand from #live_plus_vod_manual) and event in (select distinct prev_month_event from #live_plus_vod_manual)) as a \n  join \n  (\n  select platform,\n         views as prev_year_views,\n         event as prev_year_event,\n         event_brand\n  from fds_nplus.rpt_network_ppv_liveplusvod\n  where data_level = 'Live+VOD' and event_brand in (select distinct event_brand from #live_plus_vod_manual) and event in (select distinct prev_year_event from #live_plus_vod_manual)) as b\n  on a.platform=b.platform\n  and a.event_brand = b.event_brand\n  where a.platform <> 'Total';", "transaction": true, "index": null}, {"sql": "drop table if exists #live_plusvod_manual_base;\nselect a.*,b.prev_month_views,b.prev_year_views,\ncase when a.platform = 'YouTube' then round(a.views*0.23)\n     else 0 end as us_views\ninto #live_plusvod_manual_base\nfrom #live_plus_vod_manual a\nleft join\n#prior_change_live_vod b\non a.platform = b.platform\nand a.event_brand = b.event_brand;", "transaction": true, "index": null}, {"sql": "drop table if exists #liveplus_vod_nwk_views;\nselect * into #liveplus_vod_nwk_views\nfrom (  select *, 'PPV' as event_brand from\n        (\n         (select 'GLOBAL' as country,   ------- Network Views All\n               count(distinct src_fan_id) as views,\n               sum(play_time) as minutes \n          from fds_nplus.fact_daily_content_viewership\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'PPV')   \n               and STREAM_START_DTTM between first_stream and _same_day)\n        union all\n        (select 'US' as country,       ------- Network Views US\n               count(distinct src_fan_id) as views,\n               sum(play_time) as minutes \n          from fds_nplus.fact_daily_content_viewership\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'PPV')   \n           and STREAM_START_DTTM between first_stream and _same_day\n           and lower(country_cd) = 'united states')\n         )\n      )\n      union all\n      (  select *, 'NXT' as event_brand from\n        (\n         (select 'GLOBAL' as country,   ------- Network Views All\n               count(distinct src_fan_id) as views,\n               sum(play_time) as minutes \n          from fds_nplus.fact_daily_content_viewership\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'NXT')   \n               and STREAM_START_DTTM between first_stream and _same_day)\n        union all\n        (select 'US' as country,       ------- Network Views US\n               count(distinct src_fan_id) as views,\n               sum(play_time) as minutes \n          from fds_nplus.fact_daily_content_viewership\n         where lower(production_id) in (select lower(production_id) from #live_plusvod_manual_base where platform = 'Network' and event_brand = 'NXT')   \n           and STREAM_START_DTTM between first_stream and _same_day\n           and lower(country_cd) = 'united states')\n        )\n      );", "transaction": true, "index": null}, {"sql": "drop table if exists #live_plusvod_manual_base1;\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account,url,asset_id,\ncase when platform = 'Network' and event_brand = 'PPV' then (select views from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'PPV') \n     when platform = 'WWE.COM' and event_brand = 'PPV' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\n     when platform = 'Twitch' and event_brand = 'PPV' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch')\n                               \n     when platform = 'Network' and event_brand = 'NXT' then (select views from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'NXT') \n     when platform = 'WWE.COM' and event_brand = 'NXT' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\n     when platform = 'Twitch' and event_brand = 'NXT' then (select views from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch')\n     else views end as views,\n     \ncase when platform = 'Network' and event_brand = 'PPV' then (select minutes from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'PPV') \n     when platform = 'Twitch' and event_brand = 'PPV' then (select minutes from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch') \n                                 \n     when platform = 'Network' and event_brand = 'NXT' then (select minutes from #liveplus_vod_nwk_views where country = 'GLOBAL' and event_brand = 'NXT') \n     when platform = 'Twitch' and event_brand = 'NXT' then (select minutes from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='Twitch')   \n     else minutes end as minutes,\n     \nprev_month_views,prev_year_views,\ncase when platform = 'Network' and event_brand = 'PPV' then (select views from #liveplus_vod_nwk_views where country = 'US' and event_brand = 'PPV')\n     when platform = 'WWE.COM' and event_brand = 'PPV' then (select us_views from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'PPV' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\n                               \n     when platform = 'Network' and event_brand = 'NXT' then (select views from #liveplus_vod_nwk_views where country = 'US' and event_brand = 'NXT')\n     when platform = 'WWE.COM' and event_brand = 'NXT' then (select us_views from fds_nplus.rpt_network_ppv_liveplusvod\n                               where event_brand = 'NXT' and data_level =  'Live' and event_date = trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1 and platform='WWE.COM')\n     else us_views end as us_views\ninto #live_plusvod_manual_base1\nfrom #live_plusvod_manual_base;", "transaction": true, "index": null}, {"sql": "drop table if exists #live_plusvod_manual_base_total;\nselect * into #live_plusvod_manual_base_total from\n(\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views\nfrom #live_plusvod_manual_base1\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,'Total' as platform,data_level,\n'' as content_wwe_id,'' as production_id,'' as account,'' as url,'' as asset_id,\nsum(views) as views,\nsum(minutes) as minutes,\nsum(prev_month_views) as prev_month_views,\nsum(prev_year_views) as prev_year_views,\nsum(us_views) as us_views\nfrom #live_plusvod_manual_base1\ngroup by \nreport_name,event,event_name,event_brand,series_name,event_date,start_timestamp,end_timestamp,\nprev_month_event,prev_year_event,data_level);", "transaction": true, "index": null}, {"sql": "drop table if exists #live_plusvod_consolidation;\nselect * into #live_plusvod_consolidation from\n(select report_name,event,event_name,event_brand,series_name,event_date,start_timestamp as start_time,end_timestamp as end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wwe_id,production_id,account::varchar,url,asset_id,\nviews,minutes,prev_month_views,prev_year_views,us_views,\ncase when nvl(us_views,0) > 0 and nvl(views,0) > 0  then (us_views*1.00)/views else null end as per_us_views \nfrom #live_plusvod_manual_base_total\nunion all\nselect report_name,event,event_name,event_brand,series_name,event_date,start_time,end_time,\nprev_month_event,prev_year_event,platform,data_level,content_wweid,production_id,account,url,asset_id::varchar,\nviews,minutes,prev_month_views,prev_year_views,us_views,per_us_views \nfrom fds_nplus.rpt_network_ppv_liveplusvod where event_brand in (select distinct event_brand from #live_plus_vod_manual) and data_level = 'Live+VOD'\nand event_date <> trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-1);", "transaction": true, "index": null}, {"sql": "drop table if exists #live_plusvod_final;\nselect a.*, \n          (a.views*1.00)/a.prev_month_views-1 as monthly_per_change_views,\n          (a.views*1.00)/a.prev_year_views-1 as yearly_per_change_views,\n          (EXTRACT(EPOCH FROM ((end_time) - (start_time)))/60::numeric)+1 as duration,\n          row_number() OVER (PARTITION BY a.platform ORDER BY a.views desc) as overall_rank,\n          case when a.event_brand = 'PPV' and ppv_yearly_rank>0 then ppv_yearly_rank \n               when a.event_brand = 'NXT' and nxt_yearly_rank>0 then nxt_yearly_rank\n               else null end as yearly_rank,\n          case when lower(a.event) like '%wrestlemania%' then 'Tier 1'\n               when lower(a.event) like '%royal rumble%' and lower(a.event) not like '%greatest%' then 'Tier 1'\n               when lower(a.event) like '%summerslam%' then 'Tier 1'\n               when lower(a.event) like '%survivor series%' then 'Tier 1'\n               else 'Tier 2' end as tier,\n          case when (a.views*1.00)/a.prev_month_views-1 >= 0 then '1'\n          else '0' end as monthly_color,\n          case when (a.views*1.00)/a.prev_year_views-1 >= 0 then '1'\n          else '0' end as yearly_color,\n          case when a.event_date=(select max(event_date) from #live_plusvod_consolidation) then 'Most Recent PPV' else 'Prior PPVs' end as Choose_PPV\n into #live_plusvod_final\n from #live_plusvod_consolidation a\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as ppv_yearly_rank \n           from #live_plusvod_consolidation where trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-event_date::date <=380 and event_brand = 'PPV') as b\non a.platform=b.platform\nand a.event=b.event\nand a.event_date=b.event_date\n\n left join\n           (select platform, event,event_date,views,\n           (row_number() OVER (PARTITION BY platform ORDER BY views desc)) as nxt_yearly_rank \n           from #live_plusvod_consolidation where trunc(convert_timezone('AMERICA/NEW_YORK', sysdate))-event_date::date <=735 and event_brand = 'NXT') as c\non a.platform=c.platform\nand a.event=c.event\nand a.event_date=c.event_date;", "transaction": true, "index": null}, {"sql": "delete from fds_nplus.rpt_network_ppv_liveplusvod where event_brand in (select distinct event_brand from #live_plus_vod_manual) \nand data_level = 'Live+VOD';", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : rpt_network_ppv_liveplusvod\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : View contains the information related to Live NXT and HOF evenet\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"asset_id": {"name": "asset_id", "description": "The ID for a YouTube channel. In the YouTube Data API, this is the value of a channelresources id property.", "meta": {}, "data_type": null, "tags": []}, "production_id": {"name": "production_id", "description": "Unique content version level id", "meta": {}, "data_type": null, "tags": []}, "event": {"name": "event", "description": "Event name and year", "meta": {}, "data_type": null, "tags": []}, "event_name": {"name": "event_name", "description": "Event name", "meta": {}, "data_type": null, "tags": []}, "event_date": {"name": "event_date", "description": "Date of the event", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "start timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "end timestamp of the event", "meta": {}, "data_type": null, "tags": []}, "platform": {"name": "platform", "description": "platform name i.e. Facebook, Youtube, etc", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "number of views for the event", "meta": {}, "data_type": null, "tags": []}, "us_views": {"name": "us_views", "description": "number of views in US for the event", "meta": {}, "data_type": null, "tags": []}, "minutes": {"name": "minutes", "description": "number of minutes watched", "meta": {}, "data_type": null, "tags": []}, "per_us_views": {"name": "per_us_views", "description": "percentage of views in US against overall views", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "previous month views", "meta": {}, "data_type": null, "tags": []}, "prev_month_event": {"name": "prev_month_event", "description": "previous month event name", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "previous year views", "meta": {}, "data_type": null, "tags": []}, "prev_year_event": {"name": "prev_year_event", "description": "previous year event name", "meta": {}, "data_type": null, "tags": []}, "monthly_per_change_views": {"name": "monthly_per_change_views", "description": "monthly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "yearly_per_change_views": {"name": "yearly_per_change_views", "description": "yearly percentage changes in the number of views", "meta": {}, "data_type": null, "tags": []}, "duration": {"name": "duration", "description": "duration of the event", "meta": {}, "data_type": null, "tags": []}, "overall_rank": {"name": "overall_rank", "description": "overall rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "yearly_rank": {"name": "yearly_rank", "description": "yearly rank of the event based on the views", "meta": {}, "data_type": null, "tags": []}, "tier": {"name": "tier", "description": "event tier", "meta": {}, "data_type": null, "tags": []}, "monthly_color": {"name": "monthly_color", "description": "color metric for the month", "meta": {}, "data_type": null, "tags": []}, "yearly_color": {"name": "yearly_color", "description": "color metric for the year", "meta": {}, "data_type": null, "tags": []}, "choose_ppv": {"name": "choose_ppv", "description": "prior or most recent ppv", "meta": {}, "data_type": null, "tags": []}, "event_brand": {"name": "event_brand", "description": "event brand i.e. PPV, NXT or Hall of Fame", "meta": {}, "data_type": null, "tags": []}, "report_name": {"name": "report_name", "description": "name of the report i.e. Kickoff show, The Bump etc", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "name of the series", "meta": {}, "data_type": null, "tags": []}, "account": {"name": "account", "description": "account name of the platform", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "platform url of the event", "meta": {}, "data_type": null, "tags": []}, "content_wweid": {"name": "content_wweid", "description": "unique identifier for the event", "meta": {}, "data_type": null, "tags": []}, "data_level": {"name": "data_level", "description": "identifier for Live data and Live+VOD data", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_nplus/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_nplus/aggregate/rpt_network_ppv_liveplusvod.sql", "compiled": true, "compiled_sql": "\nselect asset_id,production_id,event,event_name,event_date,start_time,end_time,platform,\nviews,us_views,minutes,per_us_views,prev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\nchoose_ppv,event_brand,report_name,series_name,account,url,content_wwe_id as content_wweid,data_level,\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nfrom #live_plusvod_final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect asset_id,production_id,event,event_name,event_date,start_time,end_time,platform,\nviews,us_views,minutes,per_us_views,prev_month_views,prev_month_event,prev_year_views,prev_year_event,monthly_per_change_views,\nyearly_per_change_views,duration,overall_rank,yearly_rank,tier,monthly_color,yearly_color,\nchoose_ppv,event_brand,report_name,series_name,account,url,content_wwe_id as content_wweid,data_level,\n'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_PPV' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    NULL                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nfrom #live_plusvod_final"}, "model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_cp',\r\n    \"pre-hook\": \"delete from fds_cp.rpt_cp_monthly_global_consumption_by_platform where platform='TikTok' and month = date_trunc('month',current_date-25)\",\r\n    \"materialized\": \"incremental\"\r\n  })\r\n}}\r\nwith #temp_table as \r\n(select x.platform,\r\n\t\tx.type, \r\n\t\t'' as type2, \r\n\t\tnvl(y.region_nm,'Global') as Region, \r\n\t\tnvl(y.country_nm,'Global') as Country,\r\n\t\tx.month, \r\n\t\tx.views, \r\n\t\tx.hours_watched, \r\n\t\t0 as ytd_views, \r\n\t\t0 as ytd_hours_watched, \r\n\t\t0 as prev_year_views, \r\n\t\t0 as prev_year_hours\r\n from\r\n\t\t(select distinct \r\n\t\t\t\t'TikTok' as platform, \r\n\t\t\t\tb.month, '' as type, \r\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\r\n\t\t\t\tthen a.views\r\n\t\t\t\telse b.views\r\n\t\t\t\tend as views,\r\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\r\n\t\t\t\tthen a.hours_watched\r\n\t\t\t\telse b.hours_watched\r\n\t\t\t\tend as hours_watched,\r\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\r\n\t\t\t\tthen a.Country\r\n\t\t\t\telse b.Country\r\n\t\t\t\tend as Country\r\n\t\tfrom\r\n\t\t\t\t((select date_trunc('month', (source_as_on_date-1)) as month, \r\n\t\t\t\t\t\t country as Country,\r\n\t\t\t\t\t\t sum(video_views) views, \r\n\t\t\t\t\t\t sum(play_duration)/3600 hours_watched\r\n\t\t\t\t from udl_tkt.tiktok_monthly_country_consumption\r\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date) \r\n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_monthly_country_consumption)\r\n\t\t\t\t group by date_trunc('month',source_as_on_date-1),country) a\r\n\t\t\t\t right outer join\r\n\t\t\t\t(select date_trunc('month',source_as_on_date) as month, \r\n\t\t\t\t\t\tcountry as Country,\r\n\t\t\t\t\t\tsum(video_views) views, \r\n\t\t\t\t\t\tsum(play_duration)/3600 hours_watched\r\n\t\t\t\t from udl_tkt.tiktok_weekly_country_consumption\r\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date-25) \r\n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_weekly_country_consumption)\r\n\t\t\t\t group by date_trunc('month',source_as_on_date),country) b\r\n\t\t\t\t on 1=1)\r\n\t\t) x\r\nleft join\r\ncdm.dim_region_country y\r\n\t\ton lower(x.country)=lower(y.iso_alpha2_ctry_cd)\r\n\t\tand src_sys_cd='iso'\r\n\t\tand ent_map_nm='GM Region'\r\n),\r\n\r\n#all_data as\r\n((select platform,\r\n\t\t type, \r\n\t\t type2, \r\n\t\t region, \r\n\t\t country,\r\n\t\t month, \r\n\t\t views, \r\n\t\t hours_watched, \r\n\t\t ytd_views, \r\n\t\t ytd_hours_watched, \r\n\t\t prev_year_views, \r\n\t\t prev_year_hours \r\n from fds_cp.rpt_cp_monthly_global_consumption_by_platform\r\n where month between date_trunc('month',add_months(current_date,-14)) and date_trunc('month',current_date-50) and platform ='TikTok')\r\nunion\r\n(select * from #temp_table))\r\n\r\n(select a.platform, \r\n\t\ta.type, \r\n\t\t'' as type2,  \r\n\t\ta.Region, \r\n\t\ta.Country, \r\n\t\ta.month, \r\n\t\ta.views, \r\n\t\ta.hours_watched, \r\n\t\tb.prev_month_views, \r\n\t\tb.prev_month_hours, \r\n\t\td.ytd_views, \r\n\t\td.ytd_hours_watched, \r\n\t\tc.prev_year_views, \r\n\t\tc.prev_year_hours,\r\n\t\t100001 \t\t as  etl_batch_id,\r\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\r\n\t\tsysdate \t as etl_insert_rec_dttm,\r\n\t\t'' \t\t\t as etl_update_user_id,\r\n\t\tsysdate \t as\tetl_update_rec_dttm\r\nfrom \r\n\t\t(select platform, \r\n\t\t\t\tmonth, \r\n\t\t\t\ttype, \r\n\t\t\t\tCountry, \r\n\t\t\t\tRegion, \r\n\t\t\t\tviews, \r\n\t\t\t\thours_watched\r\n\t\tfrom #temp_table ) as a\r\nleft join \r\n\t\t(select platform, \r\n\t\t\t\tmonth, \r\n\t\t\t\ttype, \r\n\t\t\t\tCountry, \r\n\t\t\t\tRegion, \r\n\t\t\t\tviews as prev_month_views, \r\n\t\t\t\thours_watched as prev_month_hours\r\n\t\tfrom #all_data ) as b\r\n\t\t\ton a.platform=b.platform\r\n\t\t\tand a.month=add_months (b.month,1)\r\n\t\t\tand a.type=b.type\r\n\t\t\tand a.Country=b.Country\r\n\t\t\tand a.Region=b.Region\r\nleft join\r\n\t\t(select platform, \r\n\t\t\t\tmonth, \r\n\t\t\t\ttype, \r\n\t\t\t\tCountry, \r\n\t\t\t\tRegion, \r\n\t\t\t\tytd_views as prev_year_views, \r\n\t\t\t\tytd_hours_watched as prev_year_hours\r\n\t\tfrom #all_data) as c\r\n\t\t\ton a.platform=c.platform\r\n\t\t\tand add_months(a.month,-12)=c.month\r\n\t\t\tand a.type=c.type\r\n\t\t\tand a.Country=c.Country\r\n\t\t\tand a.Region=c.Region\r\nleft join\r\n\t\t(select platform, \r\n\t\t\t\ttype, \r\n\t\t\t\tCountry, \r\n\t\t\t\tRegion, \r\n\t\t\t\tsum(views) ytd_views, \r\n\t\t\t\tsum(hours_watched) ytd_hours_watched\r\n\t\tfrom #all_data\r\n\t\twhere month between date_trunc('year',current_date-25) and date_trunc('month',current_date-25)\r\n\t\tgroup by 1,2,3,4) d\r\n\t\t\ton a.Country=d.Country\r\n\t\t\tand a.Region=d.Region\r\n\t\t\tand a.type=d.type\r\n\t\t\tand a.platform=d.platform\r\nwhere a.month = date_trunc('month',current_date-25))", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate", "rpt_cp_monthly_global_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/aggregate/rpt_cp_monthly_global_consumption_by_platform.sql", "original_file_path": "models/fds_cp/aggregate/rpt_cp_monthly_global_consumption_by_platform.sql", "name": "rpt_cp_monthly_global_consumption_by_platform", "resource_type": "model", "alias": "rpt_cp_monthly_global_consumption_by_platform", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cp.rpt_cp_monthly_global_consumption_by_platform where platform='TikTok' and month = date_trunc('month',current_date-25)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "## Implementation Detail\n*   Date        : 07/14/2020\n*   Version     : 1.0\n*   ViewName    : rpt_cp_monthly_global_consumption_by_platform\n*   Schema\t: fds_cp\n*   Contributor : Sandeep Battula\n*   Description : Monthly Cross Platform Global Content Consumption aggregate table consists of consumption metrics Views and Hours watched with country and \tregion details for all cross platforms. This script inserts last month data for platforms- Youtube, Facebook, WWE.Com and WWE App, Instagram, Snapchat and Twitter from respective source tables on monthly basis (5th of every month). Inaddition to the latest month, metrics are also calculated and inserted for previous month, year-to-date and previous year-to-date. \n\n## Maintenance Log\n* Date : 07/14/2020 ; Developer: Sandeep Battula ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"platform": {"name": "platform", "description": "name of cross platform", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "platform type where applicable", "meta": {}, "data_type": null, "tags": []}, "type2": {"name": "type2", "description": "network premium type for International TV - Pay or FTA", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "geographical region based on country", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "country", "meta": {}, "data_type": null, "tags": []}, "month": {"name": "month", "description": "view month", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "total views for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "hours_watched": {"name": "hours_watched", "description": "total hours watched for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "total views for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_hours": {"name": "prev_month_hours", "description": "total hours watched for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_views": {"name": "ytd_views", "description": "total year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_hours_watched": {"name": "ytd_hours_watched", "description": "total year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "total previous year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_hours": {"name": "prev_year_hours", "description": "total previous year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate/rpt_cp_monthly_global_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\nwith #temp_table as \n(select x.platform,\n\t\tx.type, \n\t\t'' as type2, \n\t\tnvl(y.region_nm,'Global') as Region, \n\t\tnvl(y.country_nm,'Global') as Country,\n\t\tx.month, \n\t\tx.views, \n\t\tx.hours_watched, \n\t\t0 as ytd_views, \n\t\t0 as ytd_hours_watched, \n\t\t0 as prev_year_views, \n\t\t0 as prev_year_hours\n from\n\t\t(select distinct \n\t\t\t\t'TikTok' as platform, \n\t\t\t\tb.month, '' as type, \n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.views\n\t\t\t\telse b.views\n\t\t\t\tend as views,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.hours_watched\n\t\t\t\telse b.hours_watched\n\t\t\t\tend as hours_watched,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.Country\n\t\t\t\telse b.Country\n\t\t\t\tend as Country\n\t\tfrom\n\t\t\t\t((select date_trunc('month', (source_as_on_date-1)) as month, \n\t\t\t\t\t\t country as Country,\n\t\t\t\t\t\t sum(video_views) views, \n\t\t\t\t\t\t sum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_monthly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_monthly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date-1),country) a\n\t\t\t\t right outer join\n\t\t\t\t(select date_trunc('month',source_as_on_date) as month, \n\t\t\t\t\t\tcountry as Country,\n\t\t\t\t\t\tsum(video_views) views, \n\t\t\t\t\t\tsum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_weekly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date-25) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_weekly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date),country) b\n\t\t\t\t on 1=1)\n\t\t) x\nleft join\ncdm.dim_region_country y\n\t\ton lower(x.country)=lower(y.iso_alpha2_ctry_cd)\n\t\tand src_sys_cd='iso'\n\t\tand ent_map_nm='GM Region'\n),\n\n#all_data as\n((select platform,\n\t\t type, \n\t\t type2, \n\t\t region, \n\t\t country,\n\t\t month, \n\t\t views, \n\t\t hours_watched, \n\t\t ytd_views, \n\t\t ytd_hours_watched, \n\t\t prev_year_views, \n\t\t prev_year_hours \n from fds_cp.rpt_cp_monthly_global_consumption_by_platform\n where month between date_trunc('month',add_months(current_date,-14)) and date_trunc('month',current_date-50) and platform ='TikTok')\nunion\n(select * from #temp_table))\n\n(select a.platform, \n\t\ta.type, \n\t\t'' as type2,  \n\t\ta.Region, \n\t\ta.Country, \n\t\ta.month, \n\t\ta.views, \n\t\ta.hours_watched, \n\t\tb.prev_month_views, \n\t\tb.prev_month_hours, \n\t\td.ytd_views, \n\t\td.ytd_hours_watched, \n\t\tc.prev_year_views, \n\t\tc.prev_year_hours,\n\t\t100001 \t\t as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate \t as etl_insert_rec_dttm,\n\t\t'' \t\t\t as etl_update_user_id,\n\t\tsysdate \t as\tetl_update_rec_dttm\nfrom \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews, \n\t\t\t\thours_watched\n\t\tfrom #temp_table ) as a\nleft join \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews as prev_month_views, \n\t\t\t\thours_watched as prev_month_hours\n\t\tfrom #all_data ) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.month=add_months (b.month,1)\n\t\t\tand a.type=b.type\n\t\t\tand a.Country=b.Country\n\t\t\tand a.Region=b.Region\nleft join\n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tytd_views as prev_year_views, \n\t\t\t\tytd_hours_watched as prev_year_hours\n\t\tfrom #all_data) as c\n\t\t\ton a.platform=c.platform\n\t\t\tand add_months(a.month,-12)=c.month\n\t\t\tand a.type=c.type\n\t\t\tand a.Country=c.Country\n\t\t\tand a.Region=c.Region\nleft join\n\t\t(select platform, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tsum(views) ytd_views, \n\t\t\t\tsum(hours_watched) ytd_hours_watched\n\t\tfrom #all_data\n\t\twhere month between date_trunc('year',current_date-25) and date_trunc('month',current_date-25)\n\t\tgroup by 1,2,3,4) d\n\t\t\ton a.Country=d.Country\n\t\t\tand a.Region=d.Region\n\t\t\tand a.type=d.type\n\t\t\tand a.platform=d.platform\nwhere a.month = date_trunc('month',current_date-25))", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nwith #temp_table as \n(select x.platform,\n\t\tx.type, \n\t\t'' as type2, \n\t\tnvl(y.region_nm,'Global') as Region, \n\t\tnvl(y.country_nm,'Global') as Country,\n\t\tx.month, \n\t\tx.views, \n\t\tx.hours_watched, \n\t\t0 as ytd_views, \n\t\t0 as ytd_hours_watched, \n\t\t0 as prev_year_views, \n\t\t0 as prev_year_hours\n from\n\t\t(select distinct \n\t\t\t\t'TikTok' as platform, \n\t\t\t\tb.month, '' as type, \n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.views\n\t\t\t\telse b.views\n\t\t\t\tend as views,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.hours_watched\n\t\t\t\telse b.hours_watched\n\t\t\t\tend as hours_watched,\n\t\t\t\tcase when a.month=date_trunc('month',current_date-25)\n\t\t\t\tthen a.Country\n\t\t\t\telse b.Country\n\t\t\t\tend as Country\n\t\tfrom\n\t\t\t\t((select date_trunc('month', (source_as_on_date-1)) as month, \n\t\t\t\t\t\t country as Country,\n\t\t\t\t\t\t sum(video_views) views, \n\t\t\t\t\t\t sum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_monthly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_monthly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date-1),country) a\n\t\t\t\t right outer join\n\t\t\t\t(select date_trunc('month',source_as_on_date) as month, \n\t\t\t\t\t\tcountry as Country,\n\t\t\t\t\t\tsum(video_views) views, \n\t\t\t\t\t\tsum(play_duration)/3600 hours_watched\n\t\t\t\t from udl_tkt.tiktok_weekly_country_consumption\n\t\t\t\t where \tdate_trunc('month',source_as_on_date) = date_trunc('month',current_date-25) \n\t\t\t\t\t\tand as_on_date = (select max(as_on_date) from udl_tkt.tiktok_weekly_country_consumption)\n\t\t\t\t group by date_trunc('month',source_as_on_date),country) b\n\t\t\t\t on 1=1)\n\t\t) x\nleft join\ncdm.dim_region_country y\n\t\ton lower(x.country)=lower(y.iso_alpha2_ctry_cd)\n\t\tand src_sys_cd='iso'\n\t\tand ent_map_nm='GM Region'\n),\n\n#all_data as\n((select platform,\n\t\t type, \n\t\t type2, \n\t\t region, \n\t\t country,\n\t\t month, \n\t\t views, \n\t\t hours_watched, \n\t\t ytd_views, \n\t\t ytd_hours_watched, \n\t\t prev_year_views, \n\t\t prev_year_hours \n from fds_cp.rpt_cp_monthly_global_consumption_by_platform\n where month between date_trunc('month',add_months(current_date,-14)) and date_trunc('month',current_date-50) and platform ='TikTok')\nunion\n(select * from #temp_table))\n\n(select a.platform, \n\t\ta.type, \n\t\t'' as type2,  \n\t\ta.Region, \n\t\ta.Country, \n\t\ta.month, \n\t\ta.views, \n\t\ta.hours_watched, \n\t\tb.prev_month_views, \n\t\tb.prev_month_hours, \n\t\td.ytd_views, \n\t\td.ytd_hours_watched, \n\t\tc.prev_year_views, \n\t\tc.prev_year_hours,\n\t\t100001 \t\t as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate \t as etl_insert_rec_dttm,\n\t\t'' \t\t\t as etl_update_user_id,\n\t\tsysdate \t as\tetl_update_rec_dttm\nfrom \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews, \n\t\t\t\thours_watched\n\t\tfrom #temp_table ) as a\nleft join \n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tviews as prev_month_views, \n\t\t\t\thours_watched as prev_month_hours\n\t\tfrom #all_data ) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.month=add_months (b.month,1)\n\t\t\tand a.type=b.type\n\t\t\tand a.Country=b.Country\n\t\t\tand a.Region=b.Region\nleft join\n\t\t(select platform, \n\t\t\t\tmonth, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tytd_views as prev_year_views, \n\t\t\t\tytd_hours_watched as prev_year_hours\n\t\tfrom #all_data) as c\n\t\t\ton a.platform=c.platform\n\t\t\tand add_months(a.month,-12)=c.month\n\t\t\tand a.type=c.type\n\t\t\tand a.Country=c.Country\n\t\t\tand a.Region=c.Region\nleft join\n\t\t(select platform, \n\t\t\t\ttype, \n\t\t\t\tCountry, \n\t\t\t\tRegion, \n\t\t\t\tsum(views) ytd_views, \n\t\t\t\tsum(hours_watched) ytd_hours_watched\n\t\tfrom #all_data\n\t\twhere month between date_trunc('year',current_date-25) and date_trunc('month',current_date-25)\n\t\tgroup by 1,2,3,4) d\n\t\t\ton a.Country=d.Country\n\t\t\tand a.Region=d.Region\n\t\t\tand a.type=d.type\n\t\t\tand a.platform=d.platform\nwhere a.month = date_trunc('month',current_date-25))"}, "model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_nplus',\t\r\n\t\"materialized\": 'incremental',\r\n\t\"pre-hook\": [\r\n\t\"--create dates for rollup\r\ndrop table if exists #dim_dates;\r\ncreate table #dim_dates as\r\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \r\ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\r\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and cal_year_mon_week_end_date < date_trunc('week',getdate());\r\n\r\n--create network weekly dataset\r\ndrop table if exists #dp_wkly_nw;\r\ncreate table #dp_wkly_nw as\r\nselect b.*, a.hours_watched as hours_watched_wk, a.hours_watched_tier2 as hours_watched_tier2_wk, a.active_network_subscribers as active_network_subscribers_wk, \r\na.hours_per_tot_subscriber as hours_per_tot_subscriber_wk, a.active_viewers as views_wk, 0 as ad_impressions_wk, \r\nc.network_subscriber_adds as network_subscriber_adds_wk,\r\nc.new_adds_direct_t3 as new_adds_direct_t3_wk,\r\nc.reg_prospects_t2_to_t3 as reg_prospects_t2_to_t3_wk,\r\nc.winback_adds_t2_to_t3 as winback_adds_t2_to_t3_wk,\r\nc.lp_adds as lp_adds_wk,\r\nc.new_free_version_regns as new_free_version_regns_wk,\r\nc.network_losses as network_losses_wk,\r\n'Network' as platform,\r\n'Network' as type\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\n        select a.monday_date, a.hours_watched, b.active_network_subscribers,a.hours_watched/b.active_network_subscribers as hours_per_tot_subscriber, \r\n        a.hours_watched_tier2,a.active_viewers\r\n        from\r\n        (select date_trunc('week',stream_start_dttm) as monday_date, round(sum(play_time )/60) as hours_watched, \r\n        coalesce(round(sum(case when subs_tier = '2' then play_time end )/60),0) as hours_watched_tier2,\r\n        count(distinct(case when subs_tier = '2' then src_fan_id else null end)) as active_viewers  \r\n        from fds_nplus.fact_daily_content_viewership \r\n        where trunc(stream_start_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\n        group by 1) a\r\n        join\r\n        (select a.as_on_date,b.cal_year_mon_week_begin_date as monday_date,sum(a.total_active_cnt) as active_network_subscribers\r\n        from fds_nplus.AGGR_TOTAL_SUBSCRIPTION a\r\n        join #dim_dates b\r\n        on a.as_on_date = b.cal_year_mon_week_end_date+1\r\n        where a.as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\n        group by 1,2) b\r\n        on a.monday_date=b.monday_date\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date\r\nleft join\r\n(select date_trunc('week',as_on_date-1) as monday_date,\r\nsum(daily_new_adds_cnt) as network_subscriber_adds,\r\nsum(first_total_adds_new_to_t3 ) as new_adds_direct_t3,\r\nsum(first_total_adds_upgrades) as reg_prospects_t2_to_t3,\r\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') and order_type = 'winback' then daily_new_adds_cnt else  0 end) as winback_adds_t2_to_t3,\r\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt  else 0 end) as lp_adds,\r\nsum(daily_tier2_prospect_loggedin_new_users_cnt) as new_free_version_regns,\r\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else 0 end) as network_losses\r\nfrom fds_nplus.aggr_daily_subscription \r\nwhere as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\ngroup by 1\r\n) c\r\non trunc(c.monday_date) = b.cal_year_mon_week_begin_date\r\n;\r\n\r\n--create facebook weekly dataset\r\ndrop table if exists #dp_wkly_fb;\r\ncreate table #dp_wkly_fb as\r\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \r\n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \r\n0 as network_subscriber_adds_wk,\r\n0 as new_adds_direct_t3_wk,\r\n0 as reg_prospects_t2_to_t3_wk,\r\n0 as winback_adds_t2_to_t3_wk,\r\n0 as lp_adds_wk,\r\n0 as new_free_version_regns_wk,\r\n0 as network_losses_wk,\r\n'Facebook' as platform,\r\n'Facebook' as type\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\r\n        sum(views_3_seconds) views, \r\n        sum(video_view_time_minutes)/60 hours_watched\t\t \r\nfrom fds_fbk.fact_fb_consumption_parent_video \r\nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\ngroup by 1\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\r\n\r\n\r\n--create dotocm weekly dataset\r\ndrop table if exists #dp_wkly_dc;\r\ncreate table #dp_wkly_dc as\r\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \r\n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \r\n0 as network_subscriber_adds_wk,\r\n0 as new_adds_direct_t3_wk,\r\n0 as reg_prospects_t2_to_t3_wk,\r\n0 as winback_adds_t2_to_t3_wk,\r\n0 as lp_adds_wk,\r\n0 as new_free_version_regns_wk,\r\n0 as network_losses_wk,\r\n'Dotcom' as platform,\r\n'Dotcom' as type\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\nselect \tdate_trunc('week',start_time) as monday_date,\r\n                count(*) views, \r\n                sum(play_time)/3600 hours_watched\t\t \r\n                from fds_nplus.vw_fact_daily_dotcom_viewership \r\nwhere trunc(start_time) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\ngroup by 1\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\r\n\r\n\r\n--create twitter weekly dataset\r\ndrop table if exists #dp_wkly_tw;\r\ncreate table #dp_wkly_tw as\r\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \r\n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \r\n0 as network_subscriber_adds_wk,\r\n0 as new_adds_direct_t3_wk,\r\n0 as reg_prospects_t2_to_t3_wk,\r\n0 as winback_adds_t2_to_t3_wk,\r\n0 as lp_adds_wk,\r\n0 as new_free_version_regns_wk,\r\n0 as network_losses_wk,\r\n'Twitter' as platform,\r\n'Twitter' as type\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\r\n                sum(video_views) views, \r\n                sum(post_view_time_secs)/3600 hours_watched\t\t \r\n                from fds_tw.fact_tw_consumption_post \r\nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\ngroup by 1\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\r\n\r\n\r\n--create instagram weekly dataset\r\ndrop table if exists #dp_wkly_ig;\r\ncreate table #dp_wkly_ig as\r\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \r\n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \r\n0 as network_subscriber_adds_wk,\r\n0 as new_adds_direct_t3_wk,\r\n0 as reg_prospects_t2_to_t3_wk,\r\n0 as winback_adds_t2_to_t3_wk,\r\n0 as lp_adds_wk,\r\n0 as new_free_version_regns_wk,\r\n0 as network_losses_wk,\r\n'Instagram' as platform,\r\n'Instagram' as type\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\nselect \t        monday_date,\r\n                sum(views) views, \r\n\t\tsum(hours_watched) hours_watched\r\nfrom\r\n\t(select\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\r\n                        sum(video_views) views, \r\n                        sum(post_view_time_secs)/3600 hours_watched\t\t \r\n                        from fds_igm.fact_ig_consumption_post \r\n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\n         group by 1\r\n\t union all\r\n         select date_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\r\n                        sum(impressions) views, \r\n                        sum(story_view_time_secs)/3600 hours_watched\t\t \r\n                        from fds_igm.fact_ig_consumption_story \r\n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\r\n         group by 1)\r\ngroup by 1\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\r\n\r\n--create snapchat weekly dataset\r\ndrop table if exists #dp_wkly_sc;\r\ncreate table #dp_wkly_sc as\r\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \r\n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \r\n0 as network_subscriber_adds_wk,\r\n0 as new_adds_direct_t3_wk,\r\n0 as reg_prospects_t2_to_t3_wk,\r\n0 as winback_adds_t2_to_t3_wk,\r\n0 as lp_adds_wk,\r\n0 as new_free_version_regns_wk,\r\n0 as network_losses_wk,\r\n'Snapchat' as platform,\r\n'Snapchat' as type\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\nselect \t        monday_date,\r\n                sum(views) views, \r\n\t\tsum(hours_watched) hours_watched \r\nfrom\r\n\t\t((\r\n\t\tselect \tsum(views) views, \r\n\t\t\t(sum(views)/6.0)/60 as hours_watched,\r\n\t\t\tdate_trunc('week',story_start) as monday_date\r\n\t\tfrom fds_sc.fact_sc_consumption_story a\r\n\t\tjoin\r\n\t\t\t(select trunc(story_start) post_date,\r\n\t\t\t\t\tmax(dim_date_id) max_dim_date \r\n\t\t\tfrom fds_sc.fact_sc_consumption_story\r\n\t\t\twhere \ttrunc(story_start) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and views>0\r\n\t\t\tgroup by 1) b\r\n\t\t        on trunc(a.story_start) = b.post_date and a.dim_date_id= b.max_dim_date\r\n\t\tgroup by 3)\r\n\t\tunion all \r\n\t\t(select sum(topsnap_views) views, \r\n\t\t\t\tsum(total_time_viewed_secs)/3600 hours_watched,\r\n\t\t\t\tdate_trunc('week',snap_time_posted) as monday_date \r\n\t\t from fds_sc.fact_scd_consumption_frame a\r\n\t\t join\r\n\t\t\t (select trunc(snap_time_posted) post_date, max(dim_date_id) max_dim_date \r\n\t\t\t from fds_sc.fact_scd_consumption_frame\r\n\t\t\t where trunc(snap_time_posted) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and topsnap_views>0\r\n\t\t\t group by 1) b\r\n\t\t\t on trunc(a.snap_time_posted) = b.post_date and a.dim_date_id= b.max_dim_date\r\n\t\t group by 3))\r\ngroup by 1\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\r\n\r\n--create youtube weekly dataset\r\ndrop table if exists #dp_wkly_yt;\r\ncreate table #dp_wkly_yt as\r\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \r\n0 as hours_per_tot_subscriber_wk, a.views as views_wk, a.ad_impressions as ad_impressions_wk, \r\n0 as network_subscriber_adds_wk,\r\n0 as new_adds_direct_t3_wk,\r\n0 as reg_prospects_t2_to_t3_wk,\r\n0 as winback_adds_t2_to_t3_wk,\r\n0 as lp_adds_wk,\r\n0 as new_free_version_regns_wk,\r\n0 as network_losses_wk,\r\n'Youtube' as platform,\r\na.type\r\nfrom \r\n#dim_dates b\r\nleft join \r\n(       \r\nselect \tdate_trunc('week',view_date) as monday_date,type,\r\n                sum(views) views, \r\n                sum(hours_watched) as hours_watched,\r\n                sum(ad_impressions) as ad_impressions\t \r\n                from fds_yt.agg_yt_monetization_summary\r\nwhere view_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and view_date <= getdate()\r\ngroup by 1,2\r\n)  a\r\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\r\n\r\n\r\ndrop table if exists #dp_wkly;\r\ncreate table #dp_wkly as \r\nselect platform, type,cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk::decimal(15,1), hours_watched_tier2_wk::decimal(15,1), views_wk::decimal(15,1),\r\nactive_network_subscribers_wk::decimal(15,1), hours_per_tot_subscriber_wk::decimal(15,1), ad_impressions_wk::decimal(15,1),\r\nnetwork_subscriber_adds_wk::decimal(15,1),\r\nnew_adds_direct_t3_wk::decimal(15,1),\r\nreg_prospects_t2_to_t3_wk::decimal(15,1),\r\nwinback_adds_t2_to_t3_wk::decimal(15,1),\r\nlp_adds_wk::decimal(15,1),\r\nnew_free_version_regns_wk::decimal(15,1),\r\nnetwork_losses_wk::decimal(15,1)\r\nfrom (\r\nselect * from #dp_wkly_nw union all\r\nselect * from #dp_wkly_fb union all\r\nselect * from #dp_wkly_dc union all\r\nselect * from #dp_wkly_tw union all\r\nselect * from #dp_wkly_ig union all\r\nselect * from #dp_wkly_sc union all\r\nselect * from #dp_wkly_yt);\r\n\r\n\r\ndrop table if exists #dp_wkly1;\r\ncreate table #dp_wkly1 as\r\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\r\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\r\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\r\ncoalesce(b.active_network_subscribers_wk,0) as prev_active_network_subscribers_wk, coalesce(b.hours_watched_wk,0) as prev_hours_watched_wk,\r\ncoalesce(b.hours_watched_tier2_wk,0) as prev_hours_watched_tier2_wk,\r\ncoalesce(b.hours_per_tot_subscriber_wk,0) as prev_hours_per_tot_subscriber_wk,coalesce(b.views_wk,0) as prev_views_wk,\r\ncoalesce(b.ad_impressions_wk,0) as prev_ad_impressions_wk,\r\ncoalesce(b.network_subscriber_adds_wk,0) as prev_network_subscriber_adds_wk,\r\ncoalesce(b.new_adds_direct_t3_wk,0) as prev_new_adds_direct_t3_wk,\r\ncoalesce(b.reg_prospects_t2_to_t3_wk,0) as prev_reg_prospects_t2_to_t3_wk,\r\ncoalesce(b.winback_adds_t2_to_t3_wk,0) as prev_winback_adds_t2_to_t3_wk,\r\ncoalesce(b.lp_adds_wk,0) as prev_lp_adds_wk,\r\ncoalesce(b.new_free_version_regns_wk,0) as prev_new_free_version_regns_wk,\r\ncoalesce(b.network_losses_wk,0) as prev_network_losses_wk\r\nfrom \r\n#dp_wkly a\r\nleft join \r\n#dp_wkly b\r\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type;\r\n\r\n--create monthly dataset\r\ndrop table if exists #dp_mthly;\r\ncreate table #dp_mthly as\r\nselect a.platform,a.type, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\r\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \r\na.prev_cal_year, a.prev_cal_year_week_num_mon,\r\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\r\nsum(b.active_network_subscribers_wk) active_network_subscribers_mtd, sum(b.hours_watched_wk) hours_watched_mtd, sum(b.hours_watched_tier2_wk) hours_watched_tier2_mtd,\r\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_mtd, sum(b.views_wk) views_mtd, sum(b.ad_impressions_wk) ad_impressions_mtd,\r\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_mtd,\r\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_mtd,\r\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_mtd,\r\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_mtd,\r\nsum(b.lp_adds_wk) as lp_adds_mtd,\r\nsum(b.new_free_version_regns_wk) as new_free_version_regns_mtd,\r\nsum(b.network_losses_wk) as network_losses_mtd,\r\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_mtd, sum(b.prev_hours_watched_wk) prev_hours_watched_mtd, \r\nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_mtd,\r\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_mtd, \r\nsum(b.prev_views_wk) prev_views_mtd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_mtd,\r\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_mtd,\r\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_mtd,\r\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_mtd,\r\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_mtd,\r\nsum(b.prev_lp_adds_wk) as prev_lp_adds_mtd,\r\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_mtd,\r\nsum(b.prev_network_losses_wk) as prev_network_losses_mtd\r\nfrom #dp_wkly1 a\r\nleft join #dp_wkly1 b\r\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\r\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\r\n\r\n--create yearly dataset\r\ndrop table if exists #dp_yrly;\r\ncreate table #dp_yrly as\r\nselect a.platform,a.type,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\r\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\r\na.prev_cal_year, a.prev_cal_year_week_num_mon,\r\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\r\nsum(b.active_network_subscribers_wk) active_network_subscribers_ytd, sum(b.hours_watched_wk) hours_watched_ytd, \r\nsum(b.hours_watched_tier2_wk) hours_watched_tier2_ytd,\r\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_ytd, sum(b.views_wk) views_ytd, sum(b.ad_impressions_wk) ad_impressions_ytd,\r\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_ytd,\r\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_ytd,\r\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_ytd,\r\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_ytd,\r\nsum(b.lp_adds_wk) as lp_adds_ytd,\r\nsum(b.new_free_version_regns_wk) as new_free_version_regns_ytd,\r\nsum(b.network_losses_wk) as network_losses_ytd,\r\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_ytd, sum(b.prev_hours_watched_wk) prev_hours_watched_ytd, \r\nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_ytd,\r\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_ytd, sum(b.prev_views_wk) prev_views_ytd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_ytd,\r\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_ytd,\r\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_ytd,\r\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_ytd,\r\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_ytd,\r\nsum(b.prev_lp_adds_wk) as prev_lp_adds_ytd,\r\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_ytd,\r\nsum(b.prev_network_losses_wk) as prev_network_losses_ytd\r\nfrom #dp_wkly1 a\r\nleft join #dp_wkly1 b\r\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\r\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\r\n\r\n--pivot weekly dataset\r\ndrop table if exists #dp_wkly_pivot;\r\ncreate table #dp_wkly_pivot as\r\nselect * from\r\n(\r\nselect 'Weekly' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_wk as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_wk as prev_year_value\r\nfrom #dp_wkly1\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_wk as prev_year_value\r\nfrom #dp_wkly1  where platform = 'Youtube'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'Weekly' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\n);\r\n\r\n--pivot monthly dataset\r\ndrop table if exists #dp_mthly_pivot;\r\ncreate table #dp_mthly_pivot as\r\nselect * from\r\n(\r\nselect 'MTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_mtd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_mtd as prev_year_value\r\nfrom #dp_mthly\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_mtd as prev_year_value\r\nfrom #dp_mthly  where platform = 'Youtube'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\nunion all\r\nselect 'MTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_mtd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_mtd as prev_year_value\r\nfrom #dp_mthly where platform = 'Network'\r\n);\r\n\r\n--pivot yearly dataset\r\ndrop table if exists #dp_yrly_pivot;\r\ncreate table #dp_yrly_pivot as\r\nselect * from\r\n(\r\nselect 'YTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_ytd as  value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_ytd as prev_year_value\r\nfrom #dp_yrly\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Youtube'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\r\nfrom #dp_wkly1 where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\nunion all\r\nselect 'YTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \r\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_ytd as value,\r\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_ytd as prev_year_value\r\nfrom #dp_yrly where platform = 'Network'\r\n);\r\n\r\ndrop table if exists #consolidation;\r\ncreate table #consolidation as\r\nselect \r\na.granularity, a.platform, a.type, a.metric, a.cal_year as year,\r\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\r\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\r\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\r\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\r\nfrom \r\n(select * from #dp_wkly_pivot union all\r\n select * from #dp_mthly_pivot union all\r\n select * from #dp_yrly_pivot) a;\r\n\r\ndrop table if exists #final;\r\ncreate table #final as\r\nselect granularity, platform, type, metric, a.year, a.month, week, \r\ncase when granularity = 'MTD' then b.start_date \r\n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\r\nend_date, value, prev_year, prev_year_week, \r\ncase when granularity = 'MTD' then b.prev_year_start_date \r\n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \r\nprev_year_end_date, prev_year_value,'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\r\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\r\n    cast (NULL as varchar)                                                AS etl_update_user_id,\r\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\r\nfrom #consolidation a\r\nleft join\r\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1,2) b\r\non a.year = b.year\r\nand a.month = b.month\r\nleft join\r\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1 ) c\r\non a.year = c.year\r\norder by platform, granularity, metric, year, week;\r\n\r\n--select * from #final where platform = 'Network' and metric = 'Active Network Subscribers' order by year, week\r\n\"]\r\n\t})}}\r\n\r\n--create dates for rollup\r\nselect *\r\nfrom #final", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate", "rpt_cp_weekly_consolidated_kpi"], "unique_id": "model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/aggregate/rpt_cp_weekly_consolidated_kpi.sql", "original_file_path": "models/fds_cp/aggregate/rpt_cp_weekly_consolidated_kpi.sql", "name": "rpt_cp_weekly_consolidated_kpi", "resource_type": "model", "alias": "rpt_cp_weekly_consolidated_kpi", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "--create dates for rollup\ndrop table if exists #dim_dates;\ncreate table #dim_dates as\nselect distinct cal_year, extract('month' from cal_year_mon_week_begin_date) as cal_mth_num, \ncase when cal_year_week_num_mon is null then 1 else cal_year_week_num_mon end as cal_year_week_num_mon,\ncal_year_mon_week_begin_date, cal_year_mon_week_end_date\nfrom cdm.dim_date where cal_year_mon_week_begin_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and cal_year_mon_week_end_date < date_trunc('week',getdate());\n\n--create network weekly dataset\ndrop table if exists #dp_wkly_nw;\ncreate table #dp_wkly_nw as\nselect b.*, a.hours_watched as hours_watched_wk, a.hours_watched_tier2 as hours_watched_tier2_wk, a.active_network_subscribers as active_network_subscribers_wk, \na.hours_per_tot_subscriber as hours_per_tot_subscriber_wk, a.active_viewers as views_wk, 0 as ad_impressions_wk, \nc.network_subscriber_adds as network_subscriber_adds_wk,\nc.new_adds_direct_t3 as new_adds_direct_t3_wk,\nc.reg_prospects_t2_to_t3 as reg_prospects_t2_to_t3_wk,\nc.winback_adds_t2_to_t3 as winback_adds_t2_to_t3_wk,\nc.lp_adds as lp_adds_wk,\nc.new_free_version_regns as new_free_version_regns_wk,\nc.network_losses as network_losses_wk,\n'Network' as platform,\n'Network' as type\nfrom \n#dim_dates b\nleft join \n(       \n        select a.monday_date, a.hours_watched, b.active_network_subscribers,a.hours_watched/b.active_network_subscribers as hours_per_tot_subscriber, \n        a.hours_watched_tier2,a.active_viewers\n        from\n        (select date_trunc('week',stream_start_dttm) as monday_date, round(sum(play_time )/60) as hours_watched, \n        coalesce(round(sum(case when subs_tier = '2' then play_time end )/60),0) as hours_watched_tier2,\n        count(distinct(case when subs_tier = '2' then src_fan_id else null end)) as active_viewers  \n        from fds_nplus.fact_daily_content_viewership \n        where trunc(stream_start_dttm) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n        group by 1) a\n        join\n        (select a.as_on_date,b.cal_year_mon_week_begin_date as monday_date,sum(a.total_active_cnt) as active_network_subscribers\n        from fds_nplus.AGGR_TOTAL_SUBSCRIPTION a\n        join #dim_dates b\n        on a.as_on_date = b.cal_year_mon_week_end_date+1\n        where a.as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n        group by 1,2) b\n        on a.monday_date=b.monday_date\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date\nleft join\n(select date_trunc('week',as_on_date-1) as monday_date,\nsum(daily_new_adds_cnt) as network_subscriber_adds,\nsum(first_total_adds_new_to_t3 ) as new_adds_direct_t3,\nsum(first_total_adds_upgrades) as reg_prospects_t2_to_t3,\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') and order_type = 'winback' then daily_new_adds_cnt else  0 end) as winback_adds_t2_to_t3,\nsum(case when payment_method in ('china_pptv', 'osn', 'rogers', 'astro') then daily_new_adds_cnt  else 0 end) as lp_adds,\nsum(daily_tier2_prospect_loggedin_new_users_cnt) as new_free_version_regns,\nsum(case when payment_method not in ('china_pptv', 'osn', 'rogers', 'astro') then daily_loss_cnt else 0 end) as network_losses\nfrom fds_nplus.aggr_daily_subscription \nwhere as_on_date >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n) c\non trunc(c.monday_date) = b.cal_year_mon_week_begin_date\n;\n\n--create facebook weekly dataset\ndrop table if exists #dp_wkly_fb;\ncreate table #dp_wkly_fb as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Facebook' as platform,\n'Facebook' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n        sum(views_3_seconds) views, \n        sum(video_view_time_minutes)/60 hours_watched\t\t \nfrom fds_fbk.fact_fb_consumption_parent_video \nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create dotocm weekly dataset\ndrop table if exists #dp_wkly_dc;\ncreate table #dp_wkly_dc as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Dotcom' as platform,\n'Dotcom' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',start_time) as monday_date,\n                count(*) views, \n                sum(play_time)/3600 hours_watched\t\t \n                from fds_nplus.vw_fact_daily_dotcom_viewership \nwhere trunc(start_time) >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create twitter weekly dataset\ndrop table if exists #dp_wkly_tw;\ncreate table #dp_wkly_tw as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Twitter' as platform,\n'Twitter' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                sum(video_views) views, \n                sum(post_view_time_secs)/3600 hours_watched\t\t \n                from fds_tw.fact_tw_consumption_post \nwhere to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\n--create instagram weekly dataset\ndrop table if exists #dp_wkly_ig;\ncreate table #dp_wkly_ig as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Instagram' as platform,\n'Instagram' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \t        monday_date,\n                sum(views) views, \n\t\tsum(hours_watched) hours_watched\nfrom\n\t(select\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                        sum(video_views) views, \n                        sum(post_view_time_secs)/3600 hours_watched\t\t \n                        from fds_igm.fact_ig_consumption_post \n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n         group by 1\n\t union all\n         select date_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date,\n                        sum(impressions) views, \n                        sum(story_view_time_secs)/3600 hours_watched\t\t \n                        from fds_igm.fact_ig_consumption_story \n         where to_date(dim_date_id,'yyyymmdd') >= trunc(dateadd('year',-1,date_trunc('year',getdate())))\n         group by 1)\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n--create snapchat weekly dataset\ndrop table if exists #dp_wkly_sc;\ncreate table #dp_wkly_sc as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, 0 as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Snapchat' as platform,\n'Snapchat' as type\nfrom \n#dim_dates b\nleft join \n(       \nselect \t        monday_date,\n                sum(views) views, \n\t\tsum(hours_watched) hours_watched \nfrom\n\t\t((\n\t\tselect \tsum(views) views, \n\t\t\t(sum(views)/6.0)/60 as hours_watched,\n\t\t\tdate_trunc('week',story_start) as monday_date\n\t\tfrom fds_sc.fact_sc_consumption_story a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom fds_sc.fact_sc_consumption_story\n\t\t\twhere \ttrunc(story_start) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and views>0\n\t\t\tgroup by 1) b\n\t\t        on trunc(a.story_start) = b.post_date and a.dim_date_id= b.max_dim_date\n\t\tgroup by 3)\n\t\tunion all \n\t\t(select sum(topsnap_views) views, \n\t\t\t\tsum(total_time_viewed_secs)/3600 hours_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted) as monday_date \n\t\t from fds_sc.fact_scd_consumption_frame a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date, max(dim_date_id) max_dim_date \n\t\t\t from fds_sc.fact_scd_consumption_frame\n\t\t\t where trunc(snap_time_posted) >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t on trunc(a.snap_time_posted) = b.post_date and a.dim_date_id= b.max_dim_date\n\t\t group by 3))\ngroup by 1\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n--create youtube weekly dataset\ndrop table if exists #dp_wkly_yt;\ncreate table #dp_wkly_yt as\nselect b.*, a.hours_watched as hours_watched_wk, 0 as hours_watched_tier2_wk, 0 as active_network_subscribers_wk, \n0 as hours_per_tot_subscriber_wk, a.views as views_wk, a.ad_impressions as ad_impressions_wk, \n0 as network_subscriber_adds_wk,\n0 as new_adds_direct_t3_wk,\n0 as reg_prospects_t2_to_t3_wk,\n0 as winback_adds_t2_to_t3_wk,\n0 as lp_adds_wk,\n0 as new_free_version_regns_wk,\n0 as network_losses_wk,\n'Youtube' as platform,\na.type\nfrom \n#dim_dates b\nleft join \n(       \nselect \tdate_trunc('week',view_date) as monday_date,type,\n                sum(views) views, \n                sum(hours_watched) as hours_watched,\n                sum(ad_impressions) as ad_impressions\t \n                from fds_yt.agg_yt_monetization_summary\nwhere view_date >= trunc(dateadd('year',-1,date_trunc('year',getdate()))) and view_date <= getdate()\ngroup by 1,2\n)  a\non trunc(a.monday_date) = b.cal_year_mon_week_begin_date;\n\n\ndrop table if exists #dp_wkly;\ncreate table #dp_wkly as \nselect platform, type,cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk::decimal(15,1), hours_watched_tier2_wk::decimal(15,1), views_wk::decimal(15,1),\nactive_network_subscribers_wk::decimal(15,1), hours_per_tot_subscriber_wk::decimal(15,1), ad_impressions_wk::decimal(15,1),\nnetwork_subscriber_adds_wk::decimal(15,1),\nnew_adds_direct_t3_wk::decimal(15,1),\nreg_prospects_t2_to_t3_wk::decimal(15,1),\nwinback_adds_t2_to_t3_wk::decimal(15,1),\nlp_adds_wk::decimal(15,1),\nnew_free_version_regns_wk::decimal(15,1),\nnetwork_losses_wk::decimal(15,1)\nfrom (\nselect * from #dp_wkly_nw union all\nselect * from #dp_wkly_fb union all\nselect * from #dp_wkly_dc union all\nselect * from #dp_wkly_tw union all\nselect * from #dp_wkly_ig union all\nselect * from #dp_wkly_sc union all\nselect * from #dp_wkly_yt);\n\n\ndrop table if exists #dp_wkly1;\ncreate table #dp_wkly1 as\nselect a.*, a.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\nb.cal_year as prev_cal_year, b.cal_year_week_num_mon as prev_cal_year_week_num_mon,\nb.cal_year_mon_week_begin_date as prev_cal_year_mon_week_begin_date, b.cal_year_mon_week_end_date as prev_cal_year_mon_week_end_date,\ncoalesce(b.active_network_subscribers_wk,0) as prev_active_network_subscribers_wk, coalesce(b.hours_watched_wk,0) as prev_hours_watched_wk,\ncoalesce(b.hours_watched_tier2_wk,0) as prev_hours_watched_tier2_wk,\ncoalesce(b.hours_per_tot_subscriber_wk,0) as prev_hours_per_tot_subscriber_wk,coalesce(b.views_wk,0) as prev_views_wk,\ncoalesce(b.ad_impressions_wk,0) as prev_ad_impressions_wk,\ncoalesce(b.network_subscriber_adds_wk,0) as prev_network_subscriber_adds_wk,\ncoalesce(b.new_adds_direct_t3_wk,0) as prev_new_adds_direct_t3_wk,\ncoalesce(b.reg_prospects_t2_to_t3_wk,0) as prev_reg_prospects_t2_to_t3_wk,\ncoalesce(b.winback_adds_t2_to_t3_wk,0) as prev_winback_adds_t2_to_t3_wk,\ncoalesce(b.lp_adds_wk,0) as prev_lp_adds_wk,\ncoalesce(b.new_free_version_regns_wk,0) as prev_new_free_version_regns_wk,\ncoalesce(b.network_losses_wk,0) as prev_network_losses_wk\nfrom \n#dp_wkly a\nleft join \n#dp_wkly b\non (a.cal_year-1) = b.cal_year and a.cal_year_week_num_mon = b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type;\n\n--create monthly dataset\ndrop table if exists #dp_mthly;\ncreate table #dp_mthly as\nselect a.platform,a.type, a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week, \na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\nsum(b.active_network_subscribers_wk) active_network_subscribers_mtd, sum(b.hours_watched_wk) hours_watched_mtd, sum(b.hours_watched_tier2_wk) hours_watched_tier2_mtd,\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_mtd, sum(b.views_wk) views_mtd, sum(b.ad_impressions_wk) ad_impressions_mtd,\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_mtd,\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_mtd,\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_mtd,\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_mtd,\nsum(b.lp_adds_wk) as lp_adds_mtd,\nsum(b.new_free_version_regns_wk) as new_free_version_regns_mtd,\nsum(b.network_losses_wk) as network_losses_mtd,\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_mtd, sum(b.prev_hours_watched_wk) prev_hours_watched_mtd, \nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_mtd,\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_mtd, \nsum(b.prev_views_wk) prev_views_mtd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_mtd,\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_mtd,\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_mtd,\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_mtd,\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_mtd,\nsum(b.prev_lp_adds_wk) as prev_lp_adds_mtd,\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_mtd,\nsum(b.prev_network_losses_wk) as prev_network_losses_mtd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_mth_num = b.cal_mth_num and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\n\n--create yearly dataset\ndrop table if exists #dp_yrly;\ncreate table #dp_yrly as\nselect a.platform,a.type,a.cal_year,a.cal_mth_num, a.cal_year_week_num_mon, a.cal_year_mon_week_begin_date, a.cal_year_mon_week_end_date,\na.cal_year||'-'||to_char(a.cal_year_week_num_mon, 'fm00') as week,\na.prev_cal_year, a.prev_cal_year_week_num_mon,\na.prev_cal_year_mon_week_begin_date, a.prev_cal_year_mon_week_end_date,\nsum(b.active_network_subscribers_wk) active_network_subscribers_ytd, sum(b.hours_watched_wk) hours_watched_ytd, \nsum(b.hours_watched_tier2_wk) hours_watched_tier2_ytd,\nsum(b.hours_per_tot_subscriber_wk) hours_per_tot_subscriber_ytd, sum(b.views_wk) views_ytd, sum(b.ad_impressions_wk) ad_impressions_ytd,\nsum(b.network_subscriber_adds_wk) as network_subscriber_adds_ytd,\nsum(b.new_adds_direct_t3_wk) as new_adds_direct_t3_ytd,\nsum(b.reg_prospects_t2_to_t3_wk) as reg_prospects_t2_to_t3_ytd,\nsum(b.winback_adds_t2_to_t3_wk) as winback_adds_t2_to_t3_ytd,\nsum(b.lp_adds_wk) as lp_adds_ytd,\nsum(b.new_free_version_regns_wk) as new_free_version_regns_ytd,\nsum(b.network_losses_wk) as network_losses_ytd,\nsum(b.prev_active_network_subscribers_wk) prev_active_network_subscribers_ytd, sum(b.prev_hours_watched_wk) prev_hours_watched_ytd, \nsum(b.prev_hours_watched_tier2_wk) prev_hours_watched_tier2_ytd,\nsum(b.prev_hours_per_tot_subscriber_wk) prev_hours_per_tot_subscriber_ytd, sum(b.prev_views_wk) prev_views_ytd, sum(b.prev_ad_impressions_wk) prev_ad_impressions_ytd,\nsum(b.prev_network_subscriber_adds_wk) as prev_network_subscriber_adds_ytd,\nsum(b.prev_new_adds_direct_t3_wk) as prev_new_adds_direct_t3_ytd,\nsum(b.prev_reg_prospects_t2_to_t3_wk) as prev_reg_prospects_t2_to_t3_ytd,\nsum(b.prev_winback_adds_t2_to_t3_wk) as prev_winback_adds_t2_to_t3_ytd,\nsum(b.prev_lp_adds_wk) as prev_lp_adds_ytd,\nsum(b.prev_new_free_version_regns_wk) as prev_new_free_version_regns_ytd,\nsum(b.prev_network_losses_wk) as prev_network_losses_ytd\nfrom #dp_wkly1 a\nleft join #dp_wkly1 b\non a.cal_year = b.cal_year and a.cal_year_week_num_mon >= b.cal_year_week_num_mon and a.platform = b.platform and a.type=b.type\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12;\n\n--pivot weekly dataset\ndrop table if exists #dp_wkly_pivot;\ncreate table #dp_wkly_pivot as\nselect * from\n(\nselect 'Weekly' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_wk as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_wk as prev_year_value\nfrom #dp_wkly1\nunion all\nselect 'Weekly' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_wk as prev_year_value\nfrom #dp_wkly1  where platform = 'Youtube'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'Weekly' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\n);\n\n--pivot monthly dataset\ndrop table if exists #dp_mthly_pivot;\ncreate table #dp_mthly_pivot as\nselect * from\n(\nselect 'MTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_mtd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_mtd as prev_year_value\nfrom #dp_mthly\nunion all\nselect 'MTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_mtd as prev_year_value\nfrom #dp_mthly  where platform = 'Youtube'\nunion all\nselect 'MTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\nunion all\nselect 'MTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_mtd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_mtd as prev_year_value\nfrom #dp_mthly where platform = 'Network'\n);\n\n--pivot yearly dataset\ndrop table if exists #dp_yrly_pivot;\ncreate table #dp_yrly_pivot as\nselect * from\n(\nselect 'YTD' as granularity, platform, type, 'Hours Watched' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, type, 'Hours Watched Tier2' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_watched_tier2_ytd as  value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_watched_tier2_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Views' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, views_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_views_ytd as prev_year_value\nfrom #dp_yrly\nunion all\nselect 'YTD' as granularity, platform, type, 'Ad Impressions' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, ad_impressions_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_ad_impressions_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Youtube'\nunion all\nselect 'YTD' as granularity, platform, type, 'Active Network Subscribers' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, active_network_subscribers_wk as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_active_network_subscribers_wk as prev_year_value\nfrom #dp_wkly1 where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Hours per total Subscriber' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, hours_per_tot_subscriber_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_hours_per_tot_subscriber_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Network Subscriber Adds' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_subscriber_adds_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_subscriber_adds_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'New Adds (Direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_adds_direct_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_adds_direct_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Registered Prospects (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, reg_prospects_t2_to_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_reg_prospects_t2_to_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Winback Adds (T2 to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, winback_adds_t2_to_t3_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_winback_adds_t2_to_t3_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'License Partner Adds (direct to T3)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, lp_adds_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_lp_adds_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'New Free Version Registrations (New to T2)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, new_free_version_regns_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_new_free_version_regns_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\nunion all\nselect 'YTD' as granularity, platform, type, 'Network Losses (T3 to T2, except LP losses)' as Metric, week, cal_year, cal_mth_num, cal_year_week_num_mon, \ncal_year_mon_week_begin_date, cal_year_mon_week_end_date, network_losses_ytd as value,\nprev_cal_year, prev_cal_year_week_num_mon, prev_cal_year_mon_week_begin_date, prev_cal_year_mon_week_end_date, prev_network_losses_ytd as prev_year_value\nfrom #dp_yrly where platform = 'Network'\n);\n\ndrop table if exists #consolidation;\ncreate table #consolidation as\nselect \na.granularity, a.platform, a.type, a.metric, a.cal_year as year,\na.cal_mth_num as month, a.cal_year_week_num_mon as week, a.cal_year_mon_week_begin_date as start_date,\na.cal_year_mon_week_end_date as end_date, a.value, a.prev_cal_year as prev_year,\na.prev_cal_year_week_num_mon as prev_year_week, a.prev_cal_year_mon_week_begin_date as prev_year_start_date,\na.prev_cal_year_mon_week_end_date as prev_year_end_date,a.prev_year_value\nfrom \n(select * from #dp_wkly_pivot union all\n select * from #dp_mthly_pivot union all\n select * from #dp_yrly_pivot) a;\n\ndrop table if exists #final;\ncreate table #final as\nselect granularity, platform, type, metric, a.year, a.month, week, \ncase when granularity = 'MTD' then b.start_date \n     when granularity = 'YTD' then c.start_date else a.start_date end as start_date,\nend_date, value, prev_year, prev_year_week, \ncase when granularity = 'MTD' then b.prev_year_start_date \n     when granularity = 'YTD' then c.prev_year_start_date else a.prev_year_start_date end as prev_year_start_date,     \nprev_year_end_date, prev_year_value,'DBT_'+TO_CHAR(convert_timezone('AMERICA/NEW_YORK', sysdate),'YYYY_MM_DD_HH_MI_SS')+'_CP' etl_batch_id, 'bi_dbt_user_prd' AS etl_insert_user_id,\n    convert_timezone('AMERICA/NEW_YORK', sysdate)                                   AS etl_insert_rec_dttm,\n    cast (NULL as varchar)                                                AS etl_update_user_id,\n    CAST( NULL AS TIMESTAMP)                            AS etl_update_rec_dttm\nfrom #consolidation a\nleft join\n(select year,month, min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1,2) b\non a.year = b.year\nand a.month = b.month\nleft join\n(select year,min(start_date) start_date, min(prev_year_start_date) prev_year_start_date from #consolidation group by 1 ) c\non a.year = c.year\norder by platform, granularity, metric, year, week;\n\n--select * from #final where platform = 'Network' and metric = 'Active Network Subscribers' order by year, week\n", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_nplus", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate/rpt_cp_weekly_consolidated_kpi.sql", "compiled": true, "compiled_sql": "\n\n--create dates for rollup\nselect *\nfrom #final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n--create dates for rollup\nselect *\nfrom #final"}, "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_cp',\r\n    \"pre-hook\": \"delete from fds_cp.aggr_cp_weekly_consumption_by_platform where monday_date >= date_trunc('week',current_date-14)\",\r\n    \"materialized\": \"incremental\"\r\n  })\r\n}}\r\n\r\nwith __dbt__CTE__youtube_weekly as (\r\n\r\nselect \tsum(views) Views, \r\n\t\tsum(watch_time_minutes) Minutes_watched,\r\n\t\tdate_trunc('week',report_date_dt) as monday_date, \r\n\t\t'Youtube-Owned' as platform\r\nfrom {{source('fds_yt','rpt_yt_wwe_engagement_daily')}} a\r\nwhere monday_date >= current_date-28\r\ngroup by 3,4\r\n), \r\n\r\n __dbt__CTE__youtube_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tviews, \r\n\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\tfrom __dbt__CTE__youtube_weekly \r\n\tgroup by platform, monday_date, views) as a\r\n\tleft join \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tminutes_watched, \r\n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\tfrom __dbt__CTE__youtube_weekly \r\n\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\ton a.platform=b.platform\r\n\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n), \r\n\r\n __dbt__CTE__facebook_weekly as (\r\n\r\nselect \tsum(views_3_seconds) Views, \r\n\t\tsum(video_view_time_minutes) Minutes_watched,\r\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \r\n\t\t'Facebook' as platform\r\nfrom {{source('fds_fbk','fact_fb_consumption_parent_video')}} a\r\nwhere monday_date >= current_date-28\r\ngroup by 3,4\r\n),  \r\n\r\n__dbt__CTE__facebook_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom\r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tviews, \r\n\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\tfrom __dbt__CTE__facebook_weekly \r\n\tgroup by platform, monday_date, views) as a\r\n\tleft join \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tminutes_watched, \r\n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\tfrom __dbt__CTE__facebook_weekly  \r\n\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\ton a.platform=b.platform\r\n\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n), \r\n\r\n __dbt__CTE__twitter_weekly as (\r\n\r\nselect \tsum(video_views) Views, \r\n\t\tsum(post_view_time_secs)/60 Minutes_watched,\r\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \r\n\t\t'Twitter' as platform\r\nfrom {{source('fds_tw','fact_tw_consumption_post')}}\r\nwhere monday_date >= current_date-28\r\ngroup by 3,4\r\n), \r\n\r\n __dbt__CTE__twitter_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views,\r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom\r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tviews, \r\n\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\tfrom __dbt__CTE__twitter_weekly \r\n\tgroup by platform, monday_date, views) as a\r\n\tleft join \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tminutes_watched, \r\n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\tfrom __dbt__CTE__twitter_weekly \r\n\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\t\ton a.platform=b.platform\r\n\t\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n),  \r\n\r\n__dbt__CTE__instagram_weekly as (\r\n\r\nselect \tsum(Views) Views, \r\n\t\tsum(Minutes_watched) Minutes_watched, \r\n\t\tmonday_date, \r\n\t\tplatform \r\nfrom\r\n\t(select sum(video_views) Views, \r\n\t\t\tsum(post_view_time_secs)/60 Minutes_watched,\r\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \r\n\t\t\t'Instagram' as platform\r\n\t from  fds_igm.fact_ig_consumption_post  \r\n\t where monday_date >= current_date-28\r\n\t group by 3,4\r\n\t union all\r\n\t select sum(impressions) Views, \r\n\t\t\tsum(story_view_time_secs)/60 Minutes_watched,\r\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \r\n\t\t\t'Instagram' as platform\r\n\t from {{source('fds_igm','fact_ig_consumption_story')}}\r\n\t where monday_date >= current_date-28\r\n\t group by 3,4)\r\ngroup by 3,4\r\n), \r\n\r\n __dbt__CTE__instagram_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom\r\n\t\t(select platform, \r\n\t\t\t\tmonday_date, \r\n\t\t\t\tviews, \r\n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\t\tfrom __dbt__CTE__instagram_weekly \r\n\t\tgroup by platform, monday_date, views) as a\r\n\t\tleft join \r\n\t\t(select platform, \r\n\t\t\t\tmonday_date, \r\n\t\t\t\tminutes_watched, \r\n\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\t\tfrom __dbt__CTE__instagram_weekly \r\n\t\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\t\ton a.platform=b.platform\r\n\t\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n),  \r\n\r\n__dbt__CTE__snapchat_weekly as (\r\n\r\nselect \tsum(Views) Views, \r\n\t\tsum(Minutes_watched) Minutes_watched, \r\n\t\tmonday_date, \r\n\t\tplatform \r\nfrom\r\n\t\t((\r\n\t\tselect \tsum(views) Views, \r\n\t\t\t\tsum(views)/6.0 as Minutes_watched,\r\n\t\t\t\tdate_trunc('week',story_start+4) as monday_date, \r\n\t\t\t\t'Snapchat' as platform\r\n\t\tfrom {{source('fds_sc','fact_sc_consumption_story')}} a\r\n\t\tjoin\r\n\t\t\t(select trunc(story_start) post_date,\r\n\t\t\t\t\tmax(dim_date_id) max_dim_date \r\n\t\t\tfrom {{source('fds_sc','fact_sc_consumption_story')}}\r\n\t\t\twhere \tdate_trunc('week',story_start+4) >= current_date-28 \r\n\t\t\t\t\tand views>0\r\n\t\t\tgroup by 1) b\r\n\t\t\ton  trunc(a.story_start) = b.post_date\r\n\t\t\t\tand\ta.dim_date_id= b.max_dim_date\r\n\t\twhere monday_date >= current_date-28\r\n\t\tgroup by 3,4)\r\n\t\tunion all \r\n\t\t(select sum(topsnap_views) Views, \r\n\t\t\t\tsum(total_time_viewed_secs)/60.0 Minutes_watched,\r\n\t\t\t\tdate_trunc('week',snap_time_posted+4) as monday_date, \r\n\t\t\t\t'Snapchat' as platform\r\n\t\t from {{source('fds_sc','fact_scd_consumption_frame')}} a\r\n\t\t join\r\n\t\t\t (select trunc(snap_time_posted) post_date,\r\n\t\t\t\t\t max(dim_date_id) max_dim_date \r\n\t\t\t from {{source('fds_sc','fact_scd_consumption_frame')}}\r\n\t\t\t where date_trunc('week',snap_time_posted+4) >= current_date-28 \r\n\t\t\t\t   and topsnap_views>0\r\n\t\t\t group by 1) b\r\n\t\t\t\t on trunc(a.snap_time_posted) = b.post_date \r\n\t\t\t\t and a.dim_date_id= b.max_dim_date\r\n\t\t where monday_date >= current_date-28\r\n\t\t group by 3,4))\r\ngroup by 3,4\r\n ), \r\n\r\n __dbt__CTE__snapchat_weekly_aggregate as (\r\n\r\nselect  a.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom\r\n\t\t(select platform, \r\n\t\t\t\tmonday_date, \r\n\t\t\t\tviews, \r\n\t\t\t\tLAG(views) over (order by monday_date) as prev_views\r\n\t\tfrom __dbt__CTE__snapchat_weekly \r\n\t\tgroup by platform, monday_date, views) as a\r\n\t\tleft join \r\n\t\t\t(select platform, \r\n\t\t\t\t\tmonday_date, \r\n\t\t\t\t\tminutes_watched, \r\n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\t\t\tfrom __dbt__CTE__snapchat_weekly \r\n\t\t\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\ton a.platform=b.platform\r\n\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n),\r\n\r\n__dbt__CTE__dotcom_weekly as (\r\n\r\nselect \tcount(*) Views, \r\n\t\tsum(play_time)/60  Minutes_watched,\r\n\t\tdate_trunc('week',start_time) as monday_date, \r\n\t\t'.COM/App' as platform\r\nfrom {{source('fds_nplus','vw_fact_daily_dotcom_viewership')}}\r\nwhere monday_date >= current_date-28\r\ngroup by 3,4\r\n),  \r\n\r\n__dbt__CTE__dotcom_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom\r\n\t\t(select platform, \r\n\t\t\t\tmonday_date, \r\n\t\t\t\tviews, \r\n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\t\tfrom __dbt__CTE__dotcom_weekly \r\n\t\tgroup by platform, monday_date, views) as a\r\n\t\tleft join\r\n\t\t\t(select platform, \r\n\t\t\t\t\tmonday_date, \r\n\t\t\t\t\tminutes_watched, \r\n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\t\t\tfrom __dbt__CTE__dotcom_weekly\r\n\t\t\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\ton a.platform=b.platform\r\n\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n),\r\n\r\n__dbt__CTE__youtube_ugc_weekly as (\r\n\r\nselect \tsum(views) Views, \r\n\t\tsum(watch_time_minutes) Minutes_watched,\r\n\t\tdate_trunc('week',report_date_dt) as monday_date, \r\n\t\t'Youtube-UGC' as platform\r\nfrom {{source('fds_yt','rpt_yt_ugc_engagement_daily')}} a\r\nwhere monday_date >= current_date-28\r\ngroup by 3,4\r\n), \r\n\r\n __dbt__CTE__youtube_ugc_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tviews, \r\n\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\tfrom __dbt__CTE__youtube_ugc_weekly \r\n\tgroup by platform, monday_date, views) as a\r\n\tleft join \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tminutes_watched, \r\n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\tfrom __dbt__CTE__youtube_ugc_weekly \r\n\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\ton a.platform=b.platform\r\n\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n),\r\n\r\n__dbt__CTE__wwe_network_weekly as (\r\n\r\nselect \tcount (distinct stream_id) as Views, \r\n\t\tsum(play_time) as Minutes_watched,\r\n\t\tdate_trunc('week',stream_start_dttm) as monday_date, \r\n\t\t'WWE Network' as platform\r\nfrom {{source('fds_nplus','fact_daily_content_viewership')}}\r\nwhere monday_date >= current_date-28\r\ngroup by 3,4\r\n), \r\n\r\n __dbt__CTE__wwe_network_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tviews, \r\n\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\tfrom __dbt__CTE__wwe_network_weekly \r\n\tgroup by platform, monday_date, views) as a\r\n\tleft join \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tminutes_watched, \r\n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\tfrom __dbt__CTE__wwe_network_weekly \r\n\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\ton a.platform=b.platform\r\n\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n),\r\n\r\n__dbt__CTE__tiktok_weekly as\r\n\r\n(select sum(video_views) Views, \r\n\t\tsum(play_duration)/60 Minutes_watched,\r\n\t\tdate_trunc('week',source_as_on_date) as monday_date, \r\n\t\t'TikTok' as platform\r\n from {{source('udl_tkt','tiktok_weekly_country_consumption')}}\r\n where \tmonday_date >= current_date-28\r\n\t\tand as_on_date = (select max(as_on_date) from {{source('udl_tkt','tiktok_weekly_country_consumption')}})\r\n        and country='GLOBAL'\r\n group by 3,4),\r\n\r\n __dbt__CTE__tiktok_weekly_aggregate as (\r\n\r\nselect \ta.platform, \r\n\t\ta.monday_date, \r\n\t\ta.views, \r\n\t\tb.minutes_watched, \r\n\t\ta.prev_views, \r\n\t\tb.prev_mins,\r\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \r\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\r\nfrom \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tviews, \r\n\t\t\tLAG(views)  over (order by monday_date) as prev_views\r\n\tfrom __dbt__CTE__tiktok_weekly \r\n\tgroup by platform, monday_date, views) as a\r\n\tleft join \r\n\t(select platform, \r\n\t\t\tmonday_date, \r\n\t\t\tminutes_watched, \r\n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\r\n\tfrom __dbt__CTE__tiktok_weekly \r\n\tgroup by platform, monday_date, minutes_watched) as b\r\n\t\ton a.platform=b.platform\r\n\t\tand a.monday_date=b.monday_date \r\nwhere a.monday_date < date_trunc('week',current_date)\r\n)\r\n\r\nselect \ta.*,\r\n\t\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_CP' AS etl_batch_id, as  etl_batch_id,\r\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\r\n\t\tsysdate etl_insert_rec_dttm,\r\n\t\t'' etl_update_user_id,\r\n\t\tsysdate etl_update_rec_dttm \r\nfrom (\r\n\t\tselect * from __dbt__CTE__youtube_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\t\tunion all\r\n\t\tselect * from __dbt__CTE__facebook_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\t\tunion all\r\n\t\tselect * from __dbt__CTE__twitter_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\t\tunion all\r\n\t\tselect * from __dbt__CTE__instagram_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\t\tunion all\r\n\t\tselect * from __dbt__CTE__snapchat_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\t\tunion all\r\n\t\tselect * from __dbt__CTE__dotcom_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n        union all\r\n        select * from __dbt__CTE__youtube_ugc_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\t\tunion all\r\n\t\tselect * from __dbt__CTE__wwe_network_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\t\tunion all\r\n\t\tselect * from __dbt__CTE__tiktok_weekly_aggregate\r\n\t\twhere monday_date >= date_trunc('week',current_date-14)\r\n\r\n) a", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate", "aggr_cp_weekly_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/aggregate/aggr_cp_weekly_consumption_by_platform.sql", "original_file_path": "models/fds_cp/aggregate/aggr_cp_weekly_consumption_by_platform.sql", "name": "aggr_cp_weekly_consumption_by_platform", "resource_type": "model", "alias": "aggr_cp_weekly_consumption_by_platform", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "delete from fds_cp.aggr_cp_weekly_consumption_by_platform where monday_date >= date_trunc('week',current_date-14)", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_yt", "rpt_yt_wwe_engagement_daily"], ["fds_fbk", "fact_fb_consumption_parent_video"], ["fds_tw", "fact_tw_consumption_post"], ["fds_igm", "fact_ig_consumption_story"], ["fds_sc", "fact_sc_consumption_story"], ["fds_sc", "fact_sc_consumption_story"], ["fds_sc", "fact_scd_consumption_frame"], ["fds_sc", "fact_scd_consumption_frame"], ["fds_nplus", "vw_fact_daily_dotcom_viewership"], ["fds_yt", "rpt_yt_ugc_engagement_daily"], ["fds_nplus", "fact_daily_content_viewership"], ["udl_tkt", "tiktok_weekly_country_consumption"], ["udl_tkt", "tiktok_weekly_country_consumption"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_yt.rpt_yt_wwe_engagement_daily", "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_parent_video", "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post", "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame", "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame", "source.analytics_engineering_marts.fds_nplus.vw_fact_daily_dotcom_viewership", "source.analytics_engineering_marts.fds_yt.rpt_yt_ugc_engagement_daily", "source.analytics_engineering_marts.fds_nplus.fact_daily_content_viewership", "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption", "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption"]}, "description": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 2.0\n* ViewName    : aggr_cp_weekly_consumption_by_platform\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : aggr_cp_weekly_consumption_by_platform This aggregate table stores the crossplatform consumption metrics - total views and total minutes watched aggregated for each week for platforms- Youtube, facebook, Twitter, Instagram, Snapchat and dotcom/App.\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.\n* Date : 08/24/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: As a part weekly cross platform consumption enhancements to add Youtube-UGC, \tWWE Network and TikTok platform", "columns": {"platform": {"name": "platform", "description": "stores the name of cross platform", "meta": {}, "data_type": null, "tags": []}, "monday_date": {"name": "monday_date", "description": "represents the start of the week for measurement period Monday to Sunday", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "indicates the total views for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "minutes_watched": {"name": "minutes_watched", "description": "indicates the total minutes watched for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_views": {"name": "prev_views", "description": "indicates the total views for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_mins": {"name": "prev_mins", "description": "indicates the total minutes watched for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_views": {"name": "weekly_per_change_views", "description": "gives the week over week change in total views for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_mins": {"name": "weekly_per_change_mins", "description": "gives the week over week change in total minutes watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate/aggr_cp_weekly_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\n\nwith __dbt__CTE__youtube_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-Owned' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_wwe_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__facebook_weekly as (\n\nselect \tsum(views_3_seconds) Views, \n\t\tsum(video_view_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Facebook' as platform\nfrom \"entdwdb\".\"fds_fbk\".\"fact_fb_consumption_parent_video\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__facebook_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__facebook_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__facebook_weekly  \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__twitter_weekly as (\n\nselect \tsum(video_views) Views, \n\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Twitter' as platform\nfrom \"entdwdb\".\"fds_tw\".\"fact_tw_consumption_post\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__twitter_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views,\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__instagram_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t(select sum(video_views) Views, \n\t\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from  fds_igm.fact_ig_consumption_post  \n\t where monday_date >= current_date-28\n\t group by 3,4\n\t union all\n\t select sum(impressions) Views, \n\t\t\tsum(story_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from \"entdwdb\".\"fds_igm\".\"fact_ig_consumption_story\"\n\t where monday_date >= current_date-28\n\t group by 3,4)\ngroup by 3,4\n), \n\n __dbt__CTE__instagram_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tminutes_watched, \n\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__snapchat_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t\t((\n\t\tselect \tsum(views) Views, \n\t\t\t\tsum(views)/6.0 as Minutes_watched,\n\t\t\t\tdate_trunc('week',story_start+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\" a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\"\n\t\t\twhere \tdate_trunc('week',story_start+4) >= current_date-28 \n\t\t\t\t\tand views>0\n\t\t\tgroup by 1) b\n\t\t\ton  trunc(a.story_start) = b.post_date\n\t\t\t\tand\ta.dim_date_id= b.max_dim_date\n\t\twhere monday_date >= current_date-28\n\t\tgroup by 3,4)\n\t\tunion all \n\t\t(select sum(topsnap_views) Views, \n\t\t\t\tsum(total_time_viewed_secs)/60.0 Minutes_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\" a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date,\n\t\t\t\t\t max(dim_date_id) max_dim_date \n\t\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\"\n\t\t\t where date_trunc('week',snap_time_posted+4) >= current_date-28 \n\t\t\t\t   and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t\t on trunc(a.snap_time_posted) = b.post_date \n\t\t\t\t and a.dim_date_id= b.max_dim_date\n\t\t where monday_date >= current_date-28\n\t\t group by 3,4))\ngroup by 3,4\n ), \n\n __dbt__CTE__snapchat_weekly_aggregate as (\n\nselect  a.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views) over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__snapchat_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__snapchat_weekly \n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__dotcom_weekly as (\n\nselect \tcount(*) Views, \n\t\tsum(play_time)/60  Minutes_watched,\n\t\tdate_trunc('week',start_time) as monday_date, \n\t\t'.COM/App' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"vw_fact_daily_dotcom_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__dotcom_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__dotcom_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join\n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__dotcom_weekly\n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__youtube_ugc_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-UGC' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_ugc_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_ugc_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__wwe_network_weekly as (\n\nselect \tcount (distinct stream_id) as Views, \n\t\tsum(play_time) as Minutes_watched,\n\t\tdate_trunc('week',stream_start_dttm) as monday_date, \n\t\t'WWE Network' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_content_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__wwe_network_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__tiktok_weekly as\n\n(select sum(video_views) Views, \n\t\tsum(play_duration)/60 Minutes_watched,\n\t\tdate_trunc('week',source_as_on_date) as monday_date, \n\t\t'TikTok' as platform\n from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\"\n where \tmonday_date >= current_date-28\n\t\tand as_on_date = (select max(as_on_date) from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\")\n        and country='GLOBAL'\n group by 3,4),\n\n __dbt__CTE__tiktok_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n)\n\nselect \ta.*,\n\t\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_CP' AS etl_batch_id, as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate etl_insert_rec_dttm,\n\t\t'' etl_update_user_id,\n\t\tsysdate etl_update_rec_dttm \nfrom (\n\t\tselect * from __dbt__CTE__youtube_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__facebook_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__twitter_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__instagram_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__snapchat_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__dotcom_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n        union all\n        select * from __dbt__CTE__youtube_ugc_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__wwe_network_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__tiktok_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\n) a", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nwith __dbt__CTE__youtube_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-Owned' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_wwe_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__facebook_weekly as (\n\nselect \tsum(views_3_seconds) Views, \n\t\tsum(video_view_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Facebook' as platform\nfrom \"entdwdb\".\"fds_fbk\".\"fact_fb_consumption_parent_video\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__facebook_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__facebook_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__facebook_weekly  \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n), \n\n __dbt__CTE__twitter_weekly as (\n\nselect \tsum(video_views) Views, \n\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t'Twitter' as platform\nfrom \"entdwdb\".\"fds_tw\".\"fact_tw_consumption_post\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__twitter_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views,\n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__twitter_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__instagram_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t(select sum(video_views) Views, \n\t\t\tsum(post_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from  fds_igm.fact_ig_consumption_post  \n\t where monday_date >= current_date-28\n\t group by 3,4\n\t union all\n\t select sum(impressions) Views, \n\t\t\tsum(story_view_time_secs)/60 Minutes_watched,\n\t\t\tdate_trunc('week',to_date(dim_date_id,'yyyymmdd')) as monday_date, \n\t\t\t'Instagram' as platform\n\t from \"entdwdb\".\"fds_igm\".\"fact_ig_consumption_story\"\n\t where monday_date >= current_date-28\n\t group by 3,4)\ngroup by 3,4\n), \n\n __dbt__CTE__instagram_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tminutes_watched, \n\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\tfrom __dbt__CTE__instagram_weekly \n\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\t\ton a.platform=b.platform\n\t\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),  \n\n__dbt__CTE__snapchat_weekly as (\n\nselect \tsum(Views) Views, \n\t\tsum(Minutes_watched) Minutes_watched, \n\t\tmonday_date, \n\t\tplatform \nfrom\n\t\t((\n\t\tselect \tsum(views) Views, \n\t\t\t\tsum(views)/6.0 as Minutes_watched,\n\t\t\t\tdate_trunc('week',story_start+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\" a\n\t\tjoin\n\t\t\t(select trunc(story_start) post_date,\n\t\t\t\t\tmax(dim_date_id) max_dim_date \n\t\t\tfrom \"entdwdb\".\"fds_sc\".\"fact_sc_consumption_story\"\n\t\t\twhere \tdate_trunc('week',story_start+4) >= current_date-28 \n\t\t\t\t\tand views>0\n\t\t\tgroup by 1) b\n\t\t\ton  trunc(a.story_start) = b.post_date\n\t\t\t\tand\ta.dim_date_id= b.max_dim_date\n\t\twhere monday_date >= current_date-28\n\t\tgroup by 3,4)\n\t\tunion all \n\t\t(select sum(topsnap_views) Views, \n\t\t\t\tsum(total_time_viewed_secs)/60.0 Minutes_watched,\n\t\t\t\tdate_trunc('week',snap_time_posted+4) as monday_date, \n\t\t\t\t'Snapchat' as platform\n\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\" a\n\t\t join\n\t\t\t (select trunc(snap_time_posted) post_date,\n\t\t\t\t\t max(dim_date_id) max_dim_date \n\t\t\t from \"entdwdb\".\"fds_sc\".\"fact_scd_consumption_frame\"\n\t\t\t where date_trunc('week',snap_time_posted+4) >= current_date-28 \n\t\t\t\t   and topsnap_views>0\n\t\t\t group by 1) b\n\t\t\t\t on trunc(a.snap_time_posted) = b.post_date \n\t\t\t\t and a.dim_date_id= b.max_dim_date\n\t\t where monday_date >= current_date-28\n\t\t group by 3,4))\ngroup by 3,4\n ), \n\n __dbt__CTE__snapchat_weekly_aggregate as (\n\nselect  a.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views) over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__snapchat_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join \n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__snapchat_weekly \n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__dotcom_weekly as (\n\nselect \tcount(*) Views, \n\t\tsum(play_time)/60  Minutes_watched,\n\t\tdate_trunc('week',start_time) as monday_date, \n\t\t'.COM/App' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"vw_fact_daily_dotcom_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n),  \n\n__dbt__CTE__dotcom_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom\n\t\t(select platform, \n\t\t\t\tmonday_date, \n\t\t\t\tviews, \n\t\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\t\tfrom __dbt__CTE__dotcom_weekly \n\t\tgroup by platform, monday_date, views) as a\n\t\tleft join\n\t\t\t(select platform, \n\t\t\t\t\tmonday_date, \n\t\t\t\t\tminutes_watched, \n\t\t\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\t\t\tfrom __dbt__CTE__dotcom_weekly\n\t\t\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__youtube_ugc_weekly as (\n\nselect \tsum(views) Views, \n\t\tsum(watch_time_minutes) Minutes_watched,\n\t\tdate_trunc('week',report_date_dt) as monday_date, \n\t\t'Youtube-UGC' as platform\nfrom \"entdwdb\".\"fds_yt\".\"rpt_yt_ugc_engagement_daily\" a\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__youtube_ugc_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__youtube_ugc_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__wwe_network_weekly as (\n\nselect \tcount (distinct stream_id) as Views, \n\t\tsum(play_time) as Minutes_watched,\n\t\tdate_trunc('week',stream_start_dttm) as monday_date, \n\t\t'WWE Network' as platform\nfrom \"entdwdb\".\"fds_nplus\".\"fact_daily_content_viewership\"\nwhere monday_date >= current_date-28\ngroup by 3,4\n), \n\n __dbt__CTE__wwe_network_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__wwe_network_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n),\n\n__dbt__CTE__tiktok_weekly as\n\n(select sum(video_views) Views, \n\t\tsum(play_duration)/60 Minutes_watched,\n\t\tdate_trunc('week',source_as_on_date) as monday_date, \n\t\t'TikTok' as platform\n from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\"\n where \tmonday_date >= current_date-28\n\t\tand as_on_date = (select max(as_on_date) from \"entdwdb\".\"udl_tkt\".\"tiktok_weekly_country_consumption\")\n        and country='GLOBAL'\n group by 3,4),\n\n __dbt__CTE__tiktok_weekly_aggregate as (\n\nselect \ta.platform, \n\t\ta.monday_date, \n\t\ta.views, \n\t\tb.minutes_watched, \n\t\ta.prev_views, \n\t\tb.prev_mins,\n\t\t(views*1.0)/nullif(prev_views,0)-1 as weekly_per_change_views, \n\t\tminutes_watched*1.00/nullif(prev_mins*1.00,0)-1  as weekly_per_change_mins\nfrom \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tviews, \n\t\t\tLAG(views)  over (order by monday_date) as prev_views\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, views) as a\n\tleft join \n\t(select platform, \n\t\t\tmonday_date, \n\t\t\tminutes_watched, \n\t\t\tLAG(minutes_watched)  over (order by monday_date) as prev_mins\n\tfrom __dbt__CTE__tiktok_weekly \n\tgroup by platform, monday_date, minutes_watched) as b\n\t\ton a.platform=b.platform\n\t\tand a.monday_date=b.monday_date \nwhere a.monday_date < date_trunc('week',current_date)\n)\n\nselect \ta.*,\n\t\t'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_CP' AS etl_batch_id, as  etl_batch_id,\n\t\t'bi_dbt_user_prd' as etl_insert_user_id,\n\t\tsysdate etl_insert_rec_dttm,\n\t\t'' etl_update_user_id,\n\t\tsysdate etl_update_rec_dttm \nfrom (\n\t\tselect * from __dbt__CTE__youtube_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__facebook_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__twitter_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__instagram_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__snapchat_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__dotcom_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n        union all\n        select * from __dbt__CTE__youtube_ugc_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__wwe_network_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\t\tunion all\n\t\tselect * from __dbt__CTE__tiktok_weekly_aggregate\n\t\twhere monday_date >= date_trunc('week',current_date-14)\n\n) a"}, "model.analytics_engineering_marts.intm_cp_yt_followers_gain": {"raw_sql": "{{\n  config({\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect \ntrunc(date_trunc('month',trunc(convert(datetime,convert(varchar(10),report_date))))) as date,\ncountry_name2 as country,\nregion2 as region,\nsum(subscribers_gained) as yt_gain,\nsum(subscribers_gained) - sum(subscribers_lost) as yt_followers\nfrom fds_yt.agg_yt_monetization_summary\ngroup by 1,2,3\norder by 1,2,3 desc", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate_intermediate", "intm_cp_yt_followers_gain"], "unique_id": "model.analytics_engineering_marts.intm_cp_yt_followers_gain", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/aggregate_intermediate/intm_cp_yt_followers_gain.sql", "original_file_path": "models/fds_cp/aggregate_intermediate/intm_cp_yt_followers_gain.sql", "name": "intm_cp_yt_followers_gain", "resource_type": "model", "alias": "intm_cp_yt_followers_gain", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate_intermediate/intm_cp_yt_followers_gain.sql", "compiled": true, "compiled_sql": "\n\nselect \ntrunc(date_trunc('month',trunc(convert(datetime,convert(varchar(10),report_date))))) as date,\ncountry_name2 as country,\nregion2 as region,\nsum(subscribers_gained) as yt_gain,\nsum(subscribers_gained) - sum(subscribers_lost) as yt_followers\nfrom fds_yt.agg_yt_monetization_summary\ngroup by 1,2,3\norder by 1,2,3 desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect \ntrunc(date_trunc('month',trunc(convert(datetime,convert(varchar(10),report_date))))) as date,\ncountry_name2 as country,\nregion2 as region,\nsum(subscribers_gained) as yt_gain,\nsum(subscribers_gained) - sum(subscribers_lost) as yt_followers\nfrom fds_yt.agg_yt_monetization_summary\ngroup by 1,2,3\norder by 1,2,3 desc"}, "model.analytics_engineering_marts.intm_cp_fb_followers_gain": {"raw_sql": "{{\n  config({\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as fb_gain,\nsum(followers) as fb_followers\nfrom\n(select dim_country_id, date, followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_fbk.fact_fb_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate_intermediate", "intm_cp_fb_followers_gain"], "unique_id": "model.analytics_engineering_marts.intm_cp_fb_followers_gain", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/aggregate_intermediate/intm_cp_fb_followers_gain.sql", "original_file_path": "models/fds_cp/aggregate_intermediate/intm_cp_fb_followers_gain.sql", "name": "intm_cp_fb_followers_gain", "resource_type": "model", "alias": "intm_cp_fb_followers_gain", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate_intermediate/intm_cp_fb_followers_gain.sql", "compiled": true, "compiled_sql": "\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as fb_gain,\nsum(followers) as fb_followers\nfrom\n(select dim_country_id, date, followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_fbk.fact_fb_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as fb_gain,\nsum(followers) as fb_followers\nfrom\n(select dim_country_id, date, followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_fbk.fact_fb_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc"}, "model.analytics_engineering_marts.intm_cp_country_population": {"raw_sql": "{{\n  config({\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect dim_country_id,case when country_name='USA' then 'United States' else country_name end as Country, \nsum(population) as Population from cdm.dim_country_population group by 1,2", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate_intermediate", "intm_cp_country_population"], "unique_id": "model.analytics_engineering_marts.intm_cp_country_population", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/aggregate_intermediate/intm_cp_country_population.sql", "original_file_path": "models/fds_cp/aggregate_intermediate/intm_cp_country_population.sql", "name": "intm_cp_country_population", "resource_type": "model", "alias": "intm_cp_country_population", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate_intermediate/intm_cp_country_population.sql", "compiled": true, "compiled_sql": "\n\nselect dim_country_id,case when country_name='USA' then 'United States' else country_name end as Country, \nsum(population) as Population from cdm.dim_country_population group by 1,2", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect dim_country_id,case when country_name='USA' then 'United States' else country_name end as Country, \nsum(population) as Population from cdm.dim_country_population group by 1,2"}, "model.analytics_engineering_marts.intm_cp_ig_followers_gain": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\n\r\nselect\r\ntrunc(date_trunc('month',date)) as date,\r\ndim_country_id,\r\nsum(diff) as igm_gain,\r\nsum(followers) as igm_followers\r\nfrom\r\n(select  date, dim_country_id,followers,\r\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\r\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\r\nfrom\r\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\r\nsum(c_followers)as followers from fds_igm.fact_ig_smfollowership_audience_bycountry group by 1,2))\r\nwhere followers is not null group by 1,2 order by 1,2 desc", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_cp", "aggregate_intermediate", "intm_cp_ig_followers_gain"], "unique_id": "model.analytics_engineering_marts.intm_cp_ig_followers_gain", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/aggregate_intermediate/intm_cp_ig_followers_gain.sql", "original_file_path": "models/fds_cp/aggregate_intermediate/intm_cp_ig_followers_gain.sql", "name": "intm_cp_ig_followers_gain", "resource_type": "model", "alias": "intm_cp_ig_followers_gain", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/aggregate_intermediate/intm_cp_ig_followers_gain.sql", "compiled": true, "compiled_sql": "\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as igm_gain,\nsum(followers) as igm_followers\nfrom\n(select  date, dim_country_id,followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_igm.fact_ig_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as igm_gain,\nsum(followers) as igm_followers\nfrom\n(select  date, dim_country_id,followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_igm.fact_ig_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc"}, "model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership": {"raw_sql": "{{\n  config({\n\t\t 'schema': 'fds_cp',\t\n\t     \"materialized\": 'view',\"tags\": 'Content',\"persist_docs\": {'relation' : true, 'columns' : true}\n        })\n}}\n\nselect \nc.country,\na.date,\navg(c.population) as population,\nsum(a.fb_gain) as fb_gain,\nsum(a.fb_followers) as fb_followers,\nsum(b.igm_gain) as igm_gain,\nsum(b.igm_followers) as igm_followers,\nsum(d.yt_gain) as yt_gain,\nsum(d.yt_followers) as yt_followers\nfrom\n(select date,dim_country_id,fb_gain,fb_followers from {{ref('intm_cp_fb_followers_gain')}} )a\n left join \n(select date,dim_country_id,igm_followers,igm_gain from {{ref('intm_cp_ig_followers_gain')}} )b \n on  a.date=b.date and a.dim_country_id=b.dim_country_id\n left join \n(select dim_country_id ,Country,Population from {{ref('intm_cp_country_population')}} )c\n on  a.dim_country_id = c.dim_country_id\n left join\n(select date,country,region,yt_gain,yt_followers from  {{ref('intm_cp_yt_followers_gain')}} )d\n on  a.date = d.date and upper(c.country)=upper(d.country)\ngroup by 1,2\norder by 1,2", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "view", "vw_aggr_cp_monthly_social_followership"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/view/vw_aggr_cp_monthly_social_followership.sql", "original_file_path": "models/fds_cp/view/vw_aggr_cp_monthly_social_followership.sql", "name": "vw_aggr_cp_monthly_social_followership", "resource_type": "model", "alias": "vw_aggr_cp_monthly_social_followership", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": ["Content"], "analytics_engineering_marts": null}, "tags": ["Content"], "refs": [["intm_cp_fb_followers_gain"], ["intm_cp_ig_followers_gain"], ["intm_cp_country_population"], ["intm_cp_yt_followers_gain"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_cp_fb_followers_gain", "model.analytics_engineering_marts.intm_cp_ig_followers_gain", "model.analytics_engineering_marts.intm_cp_country_population", "model.analytics_engineering_marts.intm_cp_yt_followers_gain"]}, "description": "## Implementation Detail\n* Date        : 09/23/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_cp_monthly_social_followership\n* Schema\t  : fds_cp\n* Contributor : Remya K Nair\n* Description : vw_aggr_cp_monthly_social_followership provide Subscribers gains and followers of Facebook, YouTube, Instagram at country level \n## Maintenance Log\n* Date : 09/23/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of network dashboards.", "columns": {"country": {"name": "country", "description": "name of country", "meta": {}, "data_type": null, "tags": []}, "date": {"name": "date", "description": "as-on date", "meta": {}, "data_type": null, "tags": []}, "population": {"name": "population", "description": "countrywise population", "meta": {}, "data_type": null, "tags": []}, "fb_gain": {"name": "fb_gain", "description": "calculated value for face book subscribers gain", "meta": {}, "data_type": null, "tags": []}, "fb_followers": {"name": "fb_followers", "description": "The number of Facebook Followers broken out by Country", "meta": {}, "data_type": null, "tags": []}, "igm_gain": {"name": "igm_gain", "description": "calculated value for insta gram subscribers gain", "meta": {}, "data_type": null, "tags": []}, "igm_followers": {"name": "igm_followers", "description": "The number of Instagram Followers broken out by Country", "meta": {}, "data_type": null, "tags": []}, "yt_gain": {"name": "yt_gain", "description": "calculated value for youtube subscribers gain", "meta": {}, "data_type": null, "tags": []}, "yt_followers": {"name": "yt_followers", "description": "The number of youtube Followers broken out by Country", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/view/vw_aggr_cp_monthly_social_followership.sql", "compiled": true, "compiled_sql": "\n\nselect \nc.country,\na.date,\navg(c.population) as population,\nsum(a.fb_gain) as fb_gain,\nsum(a.fb_followers) as fb_followers,\nsum(b.igm_gain) as igm_gain,\nsum(b.igm_followers) as igm_followers,\nsum(d.yt_gain) as yt_gain,\nsum(d.yt_followers) as yt_followers\nfrom\n(select date,dim_country_id,fb_gain,fb_followers from __dbt__CTE__intm_cp_fb_followers_gain )a\n left join \n(select date,dim_country_id,igm_followers,igm_gain from __dbt__CTE__intm_cp_ig_followers_gain )b \n on  a.date=b.date and a.dim_country_id=b.dim_country_id\n left join \n(select dim_country_id ,Country,Population from __dbt__CTE__intm_cp_country_population )c\n on  a.dim_country_id = c.dim_country_id\n left join\n(select date,country,region,yt_gain,yt_followers from  __dbt__CTE__intm_cp_yt_followers_gain )d\n on  a.date = d.date and upper(c.country)=upper(d.country)\ngroup by 1,2\norder by 1,2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_cp_fb_followers_gain", "sql": " __dbt__CTE__intm_cp_fb_followers_gain as (\n\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as fb_gain,\nsum(followers) as fb_followers\nfrom\n(select dim_country_id, date, followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_fbk.fact_fb_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc\n)"}, {"id": "model.analytics_engineering_marts.intm_cp_ig_followers_gain", "sql": " __dbt__CTE__intm_cp_ig_followers_gain as (\n\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as igm_gain,\nsum(followers) as igm_followers\nfrom\n(select  date, dim_country_id,followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_igm.fact_ig_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc\n)"}, {"id": "model.analytics_engineering_marts.intm_cp_country_population", "sql": " __dbt__CTE__intm_cp_country_population as (\n\n\nselect dim_country_id,case when country_name='USA' then 'United States' else country_name end as Country, \nsum(population) as Population from cdm.dim_country_population group by 1,2\n)"}, {"id": "model.analytics_engineering_marts.intm_cp_yt_followers_gain", "sql": " __dbt__CTE__intm_cp_yt_followers_gain as (\n\n\nselect \ntrunc(date_trunc('month',trunc(convert(datetime,convert(varchar(10),report_date))))) as date,\ncountry_name2 as country,\nregion2 as region,\nsum(subscribers_gained) as yt_gain,\nsum(subscribers_gained) - sum(subscribers_lost) as yt_followers\nfrom fds_yt.agg_yt_monetization_summary\ngroup by 1,2,3\norder by 1,2,3 desc\n)"}], "injected_sql": "\n\nwith __dbt__CTE__intm_cp_fb_followers_gain as (\n\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as fb_gain,\nsum(followers) as fb_followers\nfrom\n(select dim_country_id, date, followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_fbk.fact_fb_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc\n),  __dbt__CTE__intm_cp_ig_followers_gain as (\n\n\nselect\ntrunc(date_trunc('month',date)) as date,\ndim_country_id,\nsum(diff) as igm_gain,\nsum(followers) as igm_followers\nfrom\n(select  date, dim_country_id,followers,\nfollowers-case when lag(followers) over (partition by dim_country_id order by date)\nis null then 0 else lag(followers) over (partition by dim_country_id order by date) end as diff\nfrom\n(select dim_country_id,trunc(convert(datetime,convert(varchar(10),as_on_date))) as date,\nsum(c_followers)as followers from fds_igm.fact_ig_smfollowership_audience_bycountry group by 1,2))\nwhere followers is not null group by 1,2 order by 1,2 desc\n),  __dbt__CTE__intm_cp_country_population as (\n\n\nselect dim_country_id,case when country_name='USA' then 'United States' else country_name end as Country, \nsum(population) as Population from cdm.dim_country_population group by 1,2\n),  __dbt__CTE__intm_cp_yt_followers_gain as (\n\n\nselect \ntrunc(date_trunc('month',trunc(convert(datetime,convert(varchar(10),report_date))))) as date,\ncountry_name2 as country,\nregion2 as region,\nsum(subscribers_gained) as yt_gain,\nsum(subscribers_gained) - sum(subscribers_lost) as yt_followers\nfrom fds_yt.agg_yt_monetization_summary\ngroup by 1,2,3\norder by 1,2,3 desc\n)select \nc.country,\na.date,\navg(c.population) as population,\nsum(a.fb_gain) as fb_gain,\nsum(a.fb_followers) as fb_followers,\nsum(b.igm_gain) as igm_gain,\nsum(b.igm_followers) as igm_followers,\nsum(d.yt_gain) as yt_gain,\nsum(d.yt_followers) as yt_followers\nfrom\n(select date,dim_country_id,fb_gain,fb_followers from __dbt__CTE__intm_cp_fb_followers_gain )a\n left join \n(select date,dim_country_id,igm_followers,igm_gain from __dbt__CTE__intm_cp_ig_followers_gain )b \n on  a.date=b.date and a.dim_country_id=b.dim_country_id\n left join \n(select dim_country_id ,Country,Population from __dbt__CTE__intm_cp_country_population )c\n on  a.dim_country_id = c.dim_country_id\n left join\n(select date,country,region,yt_gain,yt_followers from  __dbt__CTE__intm_cp_yt_followers_gain )d\n on  a.date = d.date and upper(c.country)=upper(d.country)\ngroup by 1,2\norder by 1,2"}, "model.analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_cp',\r\n    \"materialized\": \"view\"\r\n  })\r\n}}\r\n\r\nselect * from {{ref('rpt_cp_monthly_global_consumption_by_platform')}}", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "view", "vw_rpt_cp_monthly_global_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/view/vw_rpt_cp_monthly_global_consumption_by_platform.sql", "original_file_path": "models/fds_cp/view/vw_rpt_cp_monthly_global_consumption_by_platform.sql", "name": "vw_rpt_cp_monthly_global_consumption_by_platform", "resource_type": "model", "alias": "vw_rpt_cp_monthly_global_consumption_by_platform", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_cp_monthly_global_consumption_by_platform"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform"]}, "description": "## Implementation Detail\n*   Date        : 07/14/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_cp_monthly_global_consumption_by_platform\n*   Schema\t: fds_cp\n*   Contributor : Sandeep Battula\n*   Description : Monthly Cross Platform Global Content Consumption aggregate table consists of consumption metrics Views and Hours watched with country and \tregion details for all cross platforms. This script inserts last month data for platforms- Youtube, Facebook, WWE.Com and WWE App, Instagram, Snapchat and Twitter from respective source tables on monthly basis (5th of every month). Inaddition to the latest month, metrics are also calculated and inserted for previous month, year-to-date and previous year-to-date. \n\n## Maintenance Log\n* Date : 07/14/2020 ; Developer: Sandeep Battula ; DBT & Python Automation: Sudhakar; Change: Initial Version", "columns": {"platform": {"name": "platform", "description": "name of cross platform", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "platform type where applicable", "meta": {}, "data_type": null, "tags": []}, "type2": {"name": "type2", "description": "network premium type for International TV - Pay or FTA", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "geographical region based on country", "meta": {}, "data_type": null, "tags": []}, "country": {"name": "country", "description": "country", "meta": {}, "data_type": null, "tags": []}, "month": {"name": "month", "description": "view month", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "total views for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "hours_watched": {"name": "hours_watched", "description": "total hours watched for the month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_views": {"name": "prev_month_views", "description": "total views for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_month_hours": {"name": "prev_month_hours", "description": "total hours watched for previous month for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_views": {"name": "ytd_views", "description": "total year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "ytd_hours_watched": {"name": "ytd_hours_watched", "description": "total year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_views": {"name": "prev_year_views", "description": "total previous year-to-date views for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_year_hours": {"name": "prev_year_hours", "description": "total previous year-to-date hours watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/view/vw_rpt_cp_monthly_global_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"rpt_cp_monthly_global_consumption_by_platform\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"rpt_cp_monthly_global_consumption_by_platform\""}, "model.analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_cp',\r\n    \"materialized\": \"view\"\r\n  })\r\n}}\r\n\r\nselect * from {{ref('aggr_cp_weekly_consumption_by_platform')}}", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "view", "vw_aggr_cp_weekly_consumption_by_platform"], "unique_id": "model.analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/view/vw_aggr_cp_weekly_consumption_by_platform.sql", "original_file_path": "models/fds_cp/view/vw_aggr_cp_weekly_consumption_by_platform.sql", "name": "vw_aggr_cp_weekly_consumption_by_platform", "resource_type": "model", "alias": "vw_aggr_cp_weekly_consumption_by_platform", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["aggr_cp_weekly_consumption_by_platform"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"]}, "description": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_cp_weekly_consumption_by_platform\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : vw_aggr_cp_weekly_consumption_by_platform This aggregate table stores the crossplatform consumption metrics - total views and total minutes watched aggregated for each week for platforms- Youtube, facebook, Twitter, Instagram, Snapchat and dotcom/App.\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.", "columns": {"platform": {"name": "platform", "description": "stores the name of cross platform", "meta": {}, "data_type": null, "tags": []}, "monday_date": {"name": "monday_date", "description": "represents the start of the week for measurement period Monday to Sunday", "meta": {}, "data_type": null, "tags": []}, "views": {"name": "views", "description": "indicates the total views for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "minutes_watched": {"name": "minutes_watched", "description": "indicates the total minutes watched for the week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_views": {"name": "prev_views", "description": "indicates the total views for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "prev_mins": {"name": "prev_mins", "description": "indicates the total minutes watched for previous week for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_views": {"name": "weekly_per_change_views", "description": "gives the week over week change in total views for each platform", "meta": {}, "data_type": null, "tags": []}, "weekly_per_change_mins": {"name": "weekly_per_change_mins", "description": "gives the week over week change in total minutes watched for each platform", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_cp/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/view/vw_aggr_cp_weekly_consumption_by_platform.sql", "compiled": true, "compiled_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"aggr_cp_weekly_consumption_by_platform\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect * from \"entdwdb\".\"fds_cp\".\"aggr_cp_weekly_consumption_by_platform\""}, "model.analytics_engineering_marts.vw_rpt_cp_weekly_consolidated_kpi": {"raw_sql": "{{\r\n  config({\r\n\t\"schema\": 'fds_cp',\r\n    \"materialized\": \"view\"\r\n  })\r\n}}\r\nselect * from {{ref('rpt_cp_weekly_consolidated_kpi')}}\r\nunion all\r\nselect * from {{ref('rpt_le_weekly_consolidated_kpi')}}", "database": "entdwdb", "schema": "fds_cp", "fqn": ["analytics_engineering_marts", "fds_cp", "view", "vw_rpt_cp_weekly_consolidated_kpi"], "unique_id": "model.analytics_engineering_marts.vw_rpt_cp_weekly_consolidated_kpi", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_cp/view/vw_rpt_cp_weekly_consolidated_kpi.sql", "original_file_path": "models/fds_cp/view/vw_rpt_cp_weekly_consolidated_kpi.sql", "name": "vw_rpt_cp_weekly_consolidated_kpi", "resource_type": "model", "alias": "vw_rpt_cp_weekly_consolidated_kpi", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_cp", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["rpt_cp_weekly_consolidated_kpi"], ["rpt_le_weekly_consolidated_kpi"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi", "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_cp/view/vw_rpt_cp_weekly_consolidated_kpi.sql", "compiled": true, "compiled_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_cp_weekly_consolidated_kpi\"\nunion all\nselect * from \"entdwdb\".\"fds_le\".\"rpt_le_weekly_consolidated_kpi\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect * from \"entdwdb\".\"fds_nplus\".\"rpt_cp_weekly_consolidated_kpi\"\nunion all\nselect * from \"entdwdb\".\"fds_le\".\"rpt_le_weekly_consolidated_kpi\""}, "model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_kntr',\n\t\t\"pre-hook\": [\"truncate fds_kntr.aggr_kntr_weekly_competitive_program_ratings\"],\n\t\t\"materialized\": 'table','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\nselect c.*, 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,\n'bi_dbt_user_prd' as etl_insert_user_id, current_timestamp as etl_insert_rec_dttm, \nnull as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(select cal_year_week_begin_date as week_start_date, cal_year_week_end_date as week_end_date, \ncal_year_week_num as week_num, to_char(cal_year_week_begin_date, 'mon') as month,\n('q' || extract(quarter from cal_year_week_begin_date)) as quarter, \nextract(yr from cal_year_week_begin_date) as year,\nsrc_country, src_channel, src_property, demographic, \ncase\n\twhen lower(src_channel) like '%hd%' then 'Yes'\n\telse 'No' end as hd_flag,\nsum(length_avg_tm) as total_duration_mins, sum(length_avg_tm/60) as duration_hours,\n(sum(rat_num_avg_wg * length_avg_tm))/(nullif(sum(nvl2(rat_num_avg_wg, length_avg_tm, null)),0)) as rat_value,\nsum((rat_num_avg_wg * 1000 * length_avg_tm) / 60) as viewing_hours,\ncount(*) as telecasts_count,\nsum(rat_num_avg_wg) as weekly_cumulative_audience\nfrom {{source('fds_kntr','fact_kntr_annual_profile')}} a\njoin {{source('cdm','dim_date')}} b on a.broadcast_date_id = b.dim_date_id\ngroup by 1,2,3,4,5,6,7,8,9,10,11 ) c", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate", "aggr_kntr_weekly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate/aggr_kntr_weekly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/aggregate/aggr_kntr_weekly_competitive_program_ratings.sql", "name": "aggr_kntr_weekly_competitive_program_ratings", "resource_type": "model", "alias": "aggr_kntr_weekly_competitive_program_ratings", "config": {"enabled": true, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_kntr.aggr_kntr_weekly_competitive_program_ratings", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [], "sources": [["fds_kntr", "fact_kntr_annual_profile"], ["cdm", "dim_date"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_annual_profile", "source.analytics_engineering_marts.cdm.dim_date"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   TableName   : aggr_kntr_weekly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Weekly Aggregate Table consist of rating details of competitive programs referencing from Annual Profile Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "Calendar Year Week Start Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "week_end_date": {"name": "week_end_date", "description": "Calendar Year Week End Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "week_num": {"name": "week_num", "description": "Calendar Year Week Number based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "month": {"name": "month", "description": "Abbreviated Month Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "quarter": {"name": "quarter", "description": "Abbreviated Quarter Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "total_duration_mins": {"name": "total_duration_mins", "description": "The total duration of the competitive program in minutes", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total duration of the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program", "meta": {}, "data_type": null, "tags": []}, "weekly_cumulative_audience": {"name": "weekly_cumulative_audience", "description": "The weekly cumulative Audience who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate/aggr_kntr_weekly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect c.*, 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,\n'bi_dbt_user_prd' as etl_insert_user_id, current_timestamp as etl_insert_rec_dttm, \nnull as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(select cal_year_week_begin_date as week_start_date, cal_year_week_end_date as week_end_date, \ncal_year_week_num as week_num, to_char(cal_year_week_begin_date, 'mon') as month,\n('q' || extract(quarter from cal_year_week_begin_date)) as quarter, \nextract(yr from cal_year_week_begin_date) as year,\nsrc_country, src_channel, src_property, demographic, \ncase\n\twhen lower(src_channel) like '%hd%' then 'Yes'\n\telse 'No' end as hd_flag,\nsum(length_avg_tm) as total_duration_mins, sum(length_avg_tm/60) as duration_hours,\n(sum(rat_num_avg_wg * length_avg_tm))/(nullif(sum(nvl2(rat_num_avg_wg, length_avg_tm, null)),0)) as rat_value,\nsum((rat_num_avg_wg * 1000 * length_avg_tm) / 60) as viewing_hours,\ncount(*) as telecasts_count,\nsum(rat_num_avg_wg) as weekly_cumulative_audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_annual_profile\" a\njoin \"entdwdb\".\"cdm\".\"dim_date\" b on a.broadcast_date_id = b.dim_date_id\ngroup by 1,2,3,4,5,6,7,8,9,10,11 ) c", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect c.*, 'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,\n'bi_dbt_user_prd' as etl_insert_user_id, current_timestamp as etl_insert_rec_dttm, \nnull as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom\n(select cal_year_week_begin_date as week_start_date, cal_year_week_end_date as week_end_date, \ncal_year_week_num as week_num, to_char(cal_year_week_begin_date, 'mon') as month,\n('q' || extract(quarter from cal_year_week_begin_date)) as quarter, \nextract(yr from cal_year_week_begin_date) as year,\nsrc_country, src_channel, src_property, demographic, \ncase\n\twhen lower(src_channel) like '%hd%' then 'Yes'\n\telse 'No' end as hd_flag,\nsum(length_avg_tm) as total_duration_mins, sum(length_avg_tm/60) as duration_hours,\n(sum(rat_num_avg_wg * length_avg_tm))/(nullif(sum(nvl2(rat_num_avg_wg, length_avg_tm, null)),0)) as rat_value,\nsum((rat_num_avg_wg * 1000 * length_avg_tm) / 60) as viewing_hours,\ncount(*) as telecasts_count,\nsum(rat_num_avg_wg) as weekly_cumulative_audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_annual_profile\" a\njoin \"entdwdb\".\"cdm\".\"dim_date\" b on a.broadcast_date_id = b.dim_date_id\ngroup by 1,2,3,4,5,6,7,8,9,10,11 ) c"}, "model.analytics_engineering_marts.rpt_kntr_schedule_vh_data": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_kntr',\n\t\t\"pre-hook\": \"truncate fds_kntr.rpt_kntr_schedule_vh_data\",\n\t\t\"materialized\": 'incremental','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n  })\n}}\nselect a.*, b.regional_viewing_hours,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom {{ref('intm_kntr_schedule_vh_data')}} a\nleft join {{ref('intm_kntr_region_vh')}} b on a.modified_month = b.modified_month and a.region = b.region \nand a.demographic_type = b.demographic_type and a.demographic_group_name = b.demographic_group_name", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate", "rpt_kntr_schedule_vh_data"], "unique_id": "model.analytics_engineering_marts.rpt_kntr_schedule_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate/rpt_kntr_schedule_vh_data.sql", "original_file_path": "models/fds_kntr/aggregate/rpt_kntr_schedule_vh_data.sql", "name": "rpt_kntr_schedule_vh_data", "resource_type": "model", "alias": "rpt_kntr_schedule_vh_data", "config": {"enabled": true, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "truncate fds_kntr.rpt_kntr_schedule_vh_data", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_schedule_vh_data"], ["intm_kntr_region_vh"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_schedule_vh_data", "model.analytics_engineering_marts.intm_kntr_region_vh"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   TableName   : rpt_kntr_schedule_vh_data\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Schedule Viewing Hours Report table consist of rating and other details of WWE program schedule referencing from WWE Telecast Data table on daily-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"dim_date_id": {"name": "dim_date_id", "description": "The broadcast date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_weekday": {"name": "src_weekday", "description": "The day on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_name": {"name": "month_name", "description": "The month name on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_num": {"name": "month_num", "description": "The month number on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "modified_month": {"name": "modified_month", "description": "Derived from broadcast_date; day part of broadcast_date replaced with '01'", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "The broadcast year when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which WWE program telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic_type": {"name": "demographic_type", "description": "The type of demographic group watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "demographic_group_name": {"name": "demographic_group_name", "description": "The demographic group name who watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "src_series": {"name": "src_series", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "series_episode_name": {"name": "series_episode_name", "description": "Name of the content broadcast", "meta": {}, "data_type": null, "tags": []}, "series_episode_num": {"name": "series_episode_num", "description": "No.of episodes broadcast", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Indicates WWE series name", "meta": {}, "data_type": null, "tags": []}, "series_type": {"name": "series_type", "description": "Indicates WWE series type", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "End Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "duration_mins": {"name": "duration_mins", "description": "The duration of WWE Program in minutes", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "week_start_date": {"name": "week_start_date", "description": "Calendar Year Week Start Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "start_time_modified": {"name": "start_time_modified", "description": "The Start Time of WWE Program rounded off to the closest hour in timestamp format", "meta": {}, "data_type": null, "tags": []}, "channel_1": {"name": "channel_1", "description": "The value will be 'Others', if the channel is broadcasting for more than an year and percentage of viewership of the channel (compared to total viewership of country) is <=0.01", "meta": {}, "data_type": null, "tags": []}, "program_1": {"name": "program_1", "description": "The value will be 'Others' for the programs other than 'RAW', 'SMACKDOWN', 'NXT', 'PPV', 'SUNDAY DHAMAAL', 'SATURDAY NIGHT', 'TOTAL BELLAS' and 'TOTAL DIVAS'", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The average rating value of the WWE program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The viewing hours of WWE program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "aud": {"name": "aud", "description": "The average audience who watched the WWE Program", "meta": {}, "data_type": null, "tags": []}, "regional_viewing_hours": {"name": "regional_viewing_hours", "description": "The regional viewing hours of the demographic group on monthly-basis", "meta": {}, "data_type": null, "tags": []}, "etl_batch_id": {"name": "etl_batch_id", "description": "Unique ID of DBT Job used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_user_id": {"name": "etl_insert_user_id", "description": "Unique ID of the DBT user that was used to insert the record", "meta": {}, "data_type": null, "tags": []}, "etl_insert_rec_dttm": {"name": "etl_insert_rec_dttm", "description": "Date Time information on when the DBT inserted the record", "meta": {}, "data_type": null, "tags": []}, "etl_update_user_id": {"name": "etl_update_user_id", "description": "Unique ID of the DBT user which was used to update the record manually", "meta": {}, "data_type": null, "tags": []}, "etl_update_rec_dttm": {"name": "etl_update_rec_dttm", "description": "Date Time information on when the record was updated", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate/rpt_kntr_schedule_vh_data.sql", "compiled": true, "compiled_sql": "\nselect a.*, b.regional_viewing_hours,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom __dbt__CTE__intm_kntr_schedule_vh_data a\nleft join __dbt__CTE__intm_kntr_region_vh b on a.modified_month = b.modified_month and a.region = b.region \nand a.demographic_type = b.demographic_type and a.demographic_group_name = b.demographic_group_name", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_germany_high_income", "sql": " __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_channel_vh", "sql": " __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_vh", "sql": " __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_channel_1", "sql": " __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_schedule_vh_data", "sql": " __dbt__CTE__intm_kntr_schedule_vh_data as (\n\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_region_vh", "sql": " __dbt__CTE__intm_kntr_region_vh as (\n\nselect modified_month, region, demographic_type, demographic_group_name, sum(viewing_hours) as regional_viewing_hours\nfrom __dbt__CTE__intm_kntr_schedule_vh_data\ngroup by 1,2,3,4\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n),  __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n),  __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n),  __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n),  __dbt__CTE__intm_kntr_schedule_vh_data as (\n\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n),  __dbt__CTE__intm_kntr_region_vh as (\n\nselect modified_month, region, demographic_type, demographic_group_name, sum(viewing_hours) as regional_viewing_hours\nfrom __dbt__CTE__intm_kntr_schedule_vh_data\ngroup by 1,2,3,4\n)select a.*, b.regional_viewing_hours,\n'DBT_'+TO_CHAR(SYSDATE,'YYYY_MM_DD_HH_MI_SS')+'_4B' as etl_batch_id,'bi_dbt_user_prd' as etl_insert_user_id, \ncurrent_timestamp as etl_insert_rec_dttm, null as etl_update_user_id, cast(null as timestamp) as etl_update_rec_dttm\nfrom __dbt__CTE__intm_kntr_schedule_vh_data a\nleft join __dbt__CTE__intm_kntr_region_vh b on a.modified_month = b.modified_month and a.region = b.region \nand a.demographic_type = b.demographic_type and a.demographic_group_name = b.demographic_group_name"}, "model.analytics_engineering_marts.intm_kntr_country_channel_vh": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\r\nfrom {{source('fds_kntr','fact_kntr_wwe_telecast_data')}}\r\nwhere demographic_type = 'Everyone'\r\ngroup by 1, 2\r\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_country_channel_vh"], "unique_id": "model.analytics_engineering_marts.intm_kntr_country_channel_vh", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_country_channel_vh.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_country_channel_vh.sql", "name": "intm_kntr_country_channel_vh", "resource_type": "model", "alias": "intm_kntr_country_channel_vh", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_kntr", "fact_kntr_wwe_telecast_data"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_country_channel_vh.sql", "compiled": true, "compiled_sql": "\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365"}, "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_kntr',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom {{source('fds_kntr','fact_kntr_wwe_telecast_data')}} a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_wwe_program_rating_schedule"], "unique_id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_wwe_program_rating_schedule.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_wwe_program_rating_schedule.sql", "name": "intm_kntr_wwe_program_rating_schedule", "resource_type": "model", "alias": "intm_kntr_wwe_program_rating_schedule", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_kntr", "fact_kntr_wwe_telecast_data"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_wwe_program_rating_schedule.sql", "compiled": true, "compiled_sql": "\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12"}, "model.analytics_engineering_marts.intm_kntr_monthly_country_vh": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect to_char(broadcast_date :: date, 'YYYYMM') as broadcast_month_year,\r\ncase \r\n   when upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \r\n        else b.region end as region,\r\n       src_country, \r\n       broadcast_network_prem_type, \r\n\t   src_demographic_group, \r\n\t   src_demographic_age, \r\nsum(watched_mins/60) as viewing_hours \r\nfrom {{source('fds_kntr','fact_kntr_wwe_telecast_data')}} a\r\nleft join {{source('fds_kntr','kantar_static_country_region_tag')}}  b on upper(a.src_country) = upper(b.country)\r\nwhere to_char(broadcast_date :: date, 'YYYYMM') < to_char(current_date, 'YYYYMM')\r\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_monthly_country_vh"], "unique_id": "model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_monthly_country_vh.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_monthly_country_vh.sql", "name": "intm_kntr_monthly_country_vh", "resource_type": "model", "alias": "intm_kntr_monthly_country_vh", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_kntr", "fact_kntr_wwe_telecast_data"], ["fds_kntr", "kantar_static_country_region_tag"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data", "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_monthly_country_vh.sql", "compiled": true, "compiled_sql": "\nselect to_char(broadcast_date :: date, 'YYYYMM') as broadcast_month_year,\ncase \n   when upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n        else b.region end as region,\n       src_country, \n       broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \nsum(watched_mins/60) as viewing_hours \nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country) = upper(b.country)\nwhere to_char(broadcast_date :: date, 'YYYYMM') < to_char(current_date, 'YYYYMM')\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect to_char(broadcast_date :: date, 'YYYYMM') as broadcast_month_year,\ncase \n   when upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n        else b.region end as region,\n       src_country, \n       broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \nsum(watched_mins/60) as viewing_hours \nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country) = upper(b.country)\nwhere to_char(broadcast_date :: date, 'YYYYMM') < to_char(current_date, 'YYYYMM')\ngroup by 1,2,3,4,5,6"}, "model.analytics_engineering_marts.intm_kntr_schedule_vh_data": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\r\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\r\ncase \r\n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \r\n\telse b.region end as region,\r\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \r\na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\r\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\r\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\r\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\r\ncase \r\n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \r\n\telse 'Others' end as program_1, \r\n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\r\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\r\nfrom \r\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \r\ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\r\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\r\nfrom {{source('fds_kntr','fact_kntr_wwe_telecast_data')}}\r\nwhere demographic_type is not null and demographic_group_name is not null\r\nunion\r\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \r\ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\r\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\r\nfrom {{ref('intm_kntr_germany_high_income')}}) a\r\nleft join {{source('fds_kntr','kantar_static_country_region_tag')}}  b on upper(a.src_country)= upper(b.country)\r\nleft join {{ref('intm_kntr_channel_1')}} c on a.src_country = c.src_country and a.src_channel = c.src_channel\r\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_schedule_vh_data"], "unique_id": "model.analytics_engineering_marts.intm_kntr_schedule_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_schedule_vh_data.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_schedule_vh_data.sql", "name": "intm_kntr_schedule_vh_data", "resource_type": "model", "alias": "intm_kntr_schedule_vh_data", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intm_kntr_germany_high_income"], ["intm_kntr_channel_1"]], "sources": [["fds_kntr", "fact_kntr_wwe_telecast_data"], ["fds_kntr", "kantar_static_country_region_tag"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data", "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag", "model.analytics_engineering_marts.intm_kntr_germany_high_income", "model.analytics_engineering_marts.intm_kntr_channel_1"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_schedule_vh_data.sql", "compiled": true, "compiled_sql": "\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_germany_high_income", "sql": " __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_channel_vh", "sql": " __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_vh", "sql": " __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_channel_1", "sql": " __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n),  __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n),  __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n),  __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n)select a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26"}, "model.analytics_engineering_marts.intm_kntr_channel_1": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect a.src_country, a.src_channel\r\nfrom {{ref('intm_kntr_country_channel_vh')}} a \r\njoin {{ref('intm_kntr_country_vh')}} b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\r\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_channel_1"], "unique_id": "model.analytics_engineering_marts.intm_kntr_channel_1", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_channel_1.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_channel_1.sql", "name": "intm_kntr_channel_1", "resource_type": "model", "alias": "intm_kntr_channel_1", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intm_kntr_country_channel_vh"], ["intm_kntr_country_vh"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_country_channel_vh", "model.analytics_engineering_marts.intm_kntr_country_vh"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_channel_1.sql", "compiled": true, "compiled_sql": "\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_country_channel_vh", "sql": " __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_vh", "sql": " __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n),  __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n)select a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01"}, "model.analytics_engineering_marts.intm_kntr_region_vh": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect modified_month, region, demographic_type, demographic_group_name, sum(viewing_hours) as regional_viewing_hours\r\nfrom {{ref('intm_kntr_schedule_vh_data')}}\r\ngroup by 1,2,3,4", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_region_vh"], "unique_id": "model.analytics_engineering_marts.intm_kntr_region_vh", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_region_vh.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_region_vh.sql", "name": "intm_kntr_region_vh", "resource_type": "model", "alias": "intm_kntr_region_vh", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intm_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_schedule_vh_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_region_vh.sql", "compiled": true, "compiled_sql": "\nselect modified_month, region, demographic_type, demographic_group_name, sum(viewing_hours) as regional_viewing_hours\nfrom __dbt__CTE__intm_kntr_schedule_vh_data\ngroup by 1,2,3,4", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_germany_high_income", "sql": " __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_channel_vh", "sql": " __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_country_vh", "sql": " __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_channel_1", "sql": " __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n)"}, {"id": "model.analytics_engineering_marts.intm_kntr_schedule_vh_data", "sql": " __dbt__CTE__intm_kntr_schedule_vh_data as (\n\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_kntr_germany_high_income as (\n\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)\n),  __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n),  __dbt__CTE__intm_kntr_country_vh as (\n\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2\n),  __dbt__CTE__intm_kntr_channel_1 as (\n\nselect a.src_country, a.src_channel\nfrom __dbt__CTE__intm_kntr_country_channel_vh a \njoin __dbt__CTE__intm_kntr_country_vh b on a.src_country = b.src_country and a.broadcast_start_date = b.broadcast_start_date\nwhere a.total_watched_mins/b.country_watched_mins <= 0.01\n),  __dbt__CTE__intm_kntr_schedule_vh_data as (\n\nselect a.dim_date_id, a.broadcast_date, a.src_weekday, to_char(a.broadcast_date :: date, 'mon') as month_name, a.month_num,\n(substring(trim(broadcast_date), 1, 8) || '01') as modified_month, extract(yr from broadcast_date :: date) as year,\ncase \n\twhen upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n\telse b.region end as region,\na.src_country, a.broadcast_network_prem_type, a.src_channel, a.demographic_type, \na.demographic_group_name, a.src_series, a.series_episode_name, a.series_episode_num,\na.series_name, a.series_type, a.start_time, a.end_time, a.duration_mins, a.hd_flag, a.week_start_date,\n(substring((dateadd(m, 30, ((a.broadcast_date || ' ' || a.start_time) :: timestamp))), 1, 14) || '00:00') as start_time_modified,\nnvl2(c.src_channel, 'Others', a.src_channel) as channel_1,\ncase \n\twhen upper(a.series_name) in ('RAW','SMACKDOWN','NXT','PPV','SUNDAY DHAMAAL','SATURDAY NIGHT','TOTAL BELLAS','TOTAL DIVAS') then a.series_name \n\telse 'Others' end as program_1, \n(sum(a.rat_value*a.duration_mins))/(nullif(sum(nvl2(a.rat_value,a.duration_mins,null)),0)) as rat_value,\nsum(a.watched_mins/60) as viewing_hours, sum(aud) as aud\nfrom \n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type is not null and demographic_group_name is not null\nunion\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \ndemographic_type, demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, rat_value, watched_mins, aud\nfrom __dbt__CTE__intm_kntr_germany_high_income) a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country)= upper(b.country)\nleft join __dbt__CTE__intm_kntr_channel_1 c on a.src_country = c.src_country and a.src_channel = c.src_channel\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26\n)select modified_month, region, demographic_type, demographic_group_name, sum(viewing_hours) as regional_viewing_hours\nfrom __dbt__CTE__intm_kntr_schedule_vh_data\ngroup by 1,2,3,4"}, "model.analytics_engineering_marts.intm_kntr_country_vh": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\r\nfrom {{source('fds_kntr','fact_kntr_wwe_telecast_data')}} a\r\njoin (select distinct src_country, broadcast_start_date   from {{ref('intm_kntr_country_channel_vh')}}) b on a.src_country = b.src_country\r\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\r\ngroup by 1, 2", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_country_vh"], "unique_id": "model.analytics_engineering_marts.intm_kntr_country_vh", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_country_vh.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_country_vh.sql", "name": "intm_kntr_country_vh", "resource_type": "model", "alias": "intm_kntr_country_vh", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [["intm_kntr_country_channel_vh"]], "sources": [["fds_kntr", "fact_kntr_wwe_telecast_data"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data", "model.analytics_engineering_marts.intm_kntr_country_channel_vh"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_country_vh.sql", "compiled": true, "compiled_sql": "\nselect a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_country_channel_vh", "sql": " __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_kntr_country_channel_vh as (\n\nselect src_country, src_channel, min(broadcast_date) as broadcast_start_date, sum(watched_mins) as total_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere demographic_type = 'Everyone'\ngroup by 1, 2\nhaving datediff(d, min(broadcast_date) :: date, current_date) > 365\n)select a.src_country, b.broadcast_start_date,  sum(a.watched_mins) as country_watched_mins\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\njoin (select distinct src_country, broadcast_start_date   from __dbt__CTE__intm_kntr_country_channel_vh) b on a.src_country = b.src_country\nwhere a.demographic_type = 'Everyone' and a.broadcast_date >= b.broadcast_start_date\ngroup by 1, 2"}, "model.analytics_engineering_marts.intm_kntr_wwe_program_rating": {"raw_sql": "{{\n  config({\n\t\t'schema': 'fds_kntr',\n\t\t\"materialized\": 'ephemeral'\n  })\n}}\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom {{source('fds_kntr','fact_kntr_wwe_telecast_data')}}  a\n  group by 1,2,3,4,5,6,7,8,9,10", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_wwe_program_rating.sql", "name": "intm_kntr_wwe_program_rating", "resource_type": "model", "alias": "intm_kntr_wwe_program_rating", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_kntr", "fact_kntr_wwe_telecast_data"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_wwe_program_rating.sql", "compiled": true, "compiled_sql": "\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10"}, "model.analytics_engineering_marts.intm_kntr_germany_high_income": {"raw_sql": "{{\r\n  config({\r\n\t\t\"materialized\": 'ephemeral'\r\n  })\r\n}}\r\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \r\n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\r\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \r\n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \r\n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\r\n(everyone_aud - (medium_aud + low_aud))  as aud\r\nfrom\r\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \r\nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\r\nsum(case \r\n\twhen demographic_group_name = 'Everyone' then rat_value \r\n\telse null end) as everyone_rat_value,\r\nsum(case \r\n\twhen demographic_group_name = 'Everyone' then watched_mins \r\n\telse null end) as everyone_watched_mins,\r\nsum(case \r\n\twhen demographic_group_name = 'Everyone' then aud \r\n\telse null end) as everyone_aud,\r\nsum(case \r\n\twhen demographic_group_name = 'Medium Income' then rat_value \r\n\telse null end) as medium_rat_value,\r\nsum(case \r\n\twhen demographic_group_name = 'Medium Income' then watched_mins \r\n\telse null end) as medium_watched_mins,\r\nsum(case \r\n\twhen demographic_group_name = 'Medium Income' then aud \r\n\telse null end) as medium_aud,\r\nsum(case \r\n\twhen demographic_group_name = 'Low Income' then rat_value \r\n\telse null end) as low_rat_value,\r\nsum(case \r\n\twhen demographic_group_name = 'Low Income' then watched_mins \r\n\telse null end) as low_watched_mins,\r\nsum(case \r\n\twhen demographic_group_name = 'Low Income' then aud \r\n\telse null end) as low_aud\r\nfrom {{source('fds_kntr','fact_kntr_wwe_telecast_data')}}\r\nwhere src_country = 'germany' and\r\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\r\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\r\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\r\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\r\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_kntr", "aggregate_intermediate", "intm_kntr_germany_high_income"], "unique_id": "model.analytics_engineering_marts.intm_kntr_germany_high_income", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/aggregate_intermediate/intm_kntr_germany_high_income.sql", "original_file_path": "models/fds_kntr/aggregate_intermediate/intm_kntr_germany_high_income.sql", "name": "intm_kntr_germany_high_income", "resource_type": "model", "alias": "intm_kntr_germany_high_income", "config": {"enabled": true, "materialized": "ephemeral", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "analytics_engineering_marts": null}, "tags": [], "refs": [], "sources": [["fds_kntr", "fact_kntr_wwe_telecast_data"]], "depends_on": {"macros": [], "nodes": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/aggregate_intermediate/intm_kntr_germany_high_income.sql", "compiled": true, "compiled_sql": "\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, \n'Income' as demographic_type, 'High Income' as demographic_group_name, src_series, series_episode_name, series_episode_num,\nseries_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date, \n(everyone_rat_value - (medium_rat_value + low_rat_value))  as rat_value, \n(everyone_watched_mins - (medium_watched_mins + low_watched_mins))  as watched_mins,\n(everyone_aud - (medium_aud + low_aud))  as aud\nfrom\n(select dim_date_id, broadcast_date, src_weekday, month_num, src_country, broadcast_network_prem_type, src_channel, src_series, \nseries_episode_name, series_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, week_start_date,\nsum(case \n\twhen demographic_group_name = 'Everyone' then rat_value \n\telse null end) as everyone_rat_value,\nsum(case \n\twhen demographic_group_name = 'Everyone' then watched_mins \n\telse null end) as everyone_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Everyone' then aud \n\telse null end) as everyone_aud,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then rat_value \n\telse null end) as medium_rat_value,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then watched_mins \n\telse null end) as medium_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Medium Income' then aud \n\telse null end) as medium_aud,\nsum(case \n\twhen demographic_group_name = 'Low Income' then rat_value \n\telse null end) as low_rat_value,\nsum(case \n\twhen demographic_group_name = 'Low Income' then watched_mins \n\telse null end) as low_watched_mins,\nsum(case \n\twhen demographic_group_name = 'Low Income' then aud \n\telse null end) as low_aud\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"\nwhere src_country = 'germany' and\ndemographic_group_name in ('Everyone' , 'Medium Income', 'Low Income')\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 ) a\nwhere (a.everyone_rat_value is not null and a.medium_rat_value is not null and a.low_rat_value is not null) or\n(a.everyone_watched_mins is not null and a.medium_watched_mins is not null and a.low_watched_mins is not null) or\n(a.everyone_aud is not null and a.medium_aud is not null and a.low_aud is not null)"}, "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect quarter, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}}\ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_quarterly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_quarterly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_quarterly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_quarterly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_quarterly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_quarterly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Quarterly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on quarterly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"quarter": {"name": "quarter", "description": "Abbreviated Quarter Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total quarterly durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The quarterly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The quarterly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on quarterly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The average weekly cumulative Audience who watched the competitive program on quarterly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_quarterly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect quarter, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect quarter, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh": {"raw_sql": "{{\r\n  config({\r\n\t\t 'schema': 'fds_kntr',\t\r\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\r\n        })\r\n}}\r\nselect substring(broadcast_month_year, 5, 2) as broadcast_month,\r\n       substring(broadcast_month_year, 1, 4) as broadcast_year,\r\n       region, \r\n\t   src_country, \r\n\t   broadcast_network_prem_type, \r\n\t   src_demographic_group, \r\n\t   src_demographic_age, \r\ncase \r\n\twhen broadcast_month_year = to_char((add_months(current_date, -1)), 'YYYYMM')  then\r\n\t(case\r\n\t\twhen (region, src_country, broadcast_network_prem_type, src_demographic_group, src_demographic_age) \r\n\t\t\tnot in (select distinct region, src_country, broadcast_network_prem_type, \r\n\t\t\t\t\t\t\t\t\tsrc_demographic_group, src_demographic_age\r\n\t\t\t\t\tfrom {{ref('intm_kntr_monthly_country_vh')}}\r\n\t\t\t\t\twhere broadcast_month_year < to_char((add_months(current_date, -1)), 'YYYYMM'))\t\t\r\n\t\tthen\r\n\t\t\t(case when upper(broadcast_network_prem_type) ='FTA' then\r\n\t\t\t\t\t\tavg(viewing_hours) over (partition by region, src_country, src_demographic_group, src_demographic_age \r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder by broadcast_month_year desc, broadcast_network_prem_type desc\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\r\n\t\t\t\telse\tavg(viewing_hours) over (partition by region, src_country, src_demographic_group, src_demographic_age \r\n\t\t\t\t\t\t\t\t\t\t\t\t\torder by broadcast_month_year desc, broadcast_network_prem_type\r\n\t\t\t\t\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\r\n\t\t\tend)\r\n\t\telse\r\n\t\t\tavg(viewing_hours) over (partition by region, src_country, broadcast_network_prem_type, \r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc_demographic_group, src_demographic_age \r\n\t\t                              order by broadcast_month_year desc  \r\n\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\r\n\tend)\r\n\telse (viewing_hours) end as viewing_hours\r\nfrom  {{ref('intm_kntr_monthly_country_vh')}}", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_country_vh"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_monthly_country_vh.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_country_vh.sql", "name": "vw_aggr_kntr_monthly_country_vh", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_country_vh", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_monthly_country_vh"], ["intm_kntr_monthly_country_vh"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "model.analytics_engineering_marts.intm_kntr_monthly_country_vh"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_monthly_country_vh\n*   Schema\t    : fds_kntr\n*   Contributor : Hima Dasan\n*   Description : View calculates actual viewing hour on monthly basis and calculates estimate value for last month for all WWE programs\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n* Date : 09/22/2020 ; Developer: Rahul Chandran ; Change: Enhancement has done as requested as per Jira Request: PSTA-1153.", "columns": {"broadcast_month": {"name": "broadcast_month", "description": "The broadcast month based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "broadcast_year": {"name": "broadcast_year", "description": "The broadcast year based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Average monthly viewing Hours by specified demographic group", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_country_vh.sql", "compiled": true, "compiled_sql": "\nselect substring(broadcast_month_year, 5, 2) as broadcast_month,\n       substring(broadcast_month_year, 1, 4) as broadcast_year,\n       region, \n\t   src_country, \n\t   broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \ncase \n\twhen broadcast_month_year = to_char((add_months(current_date, -1)), 'YYYYMM')  then\n\t(case\n\t\twhen (region, src_country, broadcast_network_prem_type, src_demographic_group, src_demographic_age) \n\t\t\tnot in (select distinct region, src_country, broadcast_network_prem_type, \n\t\t\t\t\t\t\t\t\tsrc_demographic_group, src_demographic_age\n\t\t\t\t\tfrom __dbt__CTE__intm_kntr_monthly_country_vh\n\t\t\t\t\twhere broadcast_month_year < to_char((add_months(current_date, -1)), 'YYYYMM'))\t\t\n\t\tthen\n\t\t\t(case when upper(broadcast_network_prem_type) ='FTA' then\n\t\t\t\t\t\tavg(viewing_hours) over (partition by region, src_country, src_demographic_group, src_demographic_age \n\t\t\t\t\t\t\t\t\t\t\t\t\torder by broadcast_month_year desc, broadcast_network_prem_type desc\n\t\t\t\t\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\n\t\t\t\telse\tavg(viewing_hours) over (partition by region, src_country, src_demographic_group, src_demographic_age \n\t\t\t\t\t\t\t\t\t\t\t\t\torder by broadcast_month_year desc, broadcast_network_prem_type\n\t\t\t\t\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\n\t\t\tend)\n\t\telse\n\t\t\tavg(viewing_hours) over (partition by region, src_country, broadcast_network_prem_type, \n\t\t\t\t\t\t\t\t\t\t\t\tsrc_demographic_group, src_demographic_age \n\t\t                              order by broadcast_month_year desc  \n\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\n\tend)\n\telse (viewing_hours) end as viewing_hours\nfrom  __dbt__CTE__intm_kntr_monthly_country_vh", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "sql": " __dbt__CTE__intm_kntr_monthly_country_vh as (\n\nselect to_char(broadcast_date :: date, 'YYYYMM') as broadcast_month_year,\ncase \n   when upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n        else b.region end as region,\n       src_country, \n       broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \nsum(watched_mins/60) as viewing_hours \nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country) = upper(b.country)\nwhere to_char(broadcast_date :: date, 'YYYYMM') < to_char(current_date, 'YYYYMM')\ngroup by 1,2,3,4,5,6\n)"}], "injected_sql": "\nwith __dbt__CTE__intm_kntr_monthly_country_vh as (\n\nselect to_char(broadcast_date :: date, 'YYYYMM') as broadcast_month_year,\ncase \n   when upper(a.src_country)='UNITED ARAB EMIRATES' then 'APAC except India' \n        else b.region end as region,\n       src_country, \n       broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \nsum(watched_mins/60) as viewing_hours \nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nleft join \"entdwdb\".\"fds_kntr\".\"kantar_static_country_region_tag\"  b on upper(a.src_country) = upper(b.country)\nwhere to_char(broadcast_date :: date, 'YYYYMM') < to_char(current_date, 'YYYYMM')\ngroup by 1,2,3,4,5,6\n)select substring(broadcast_month_year, 5, 2) as broadcast_month,\n       substring(broadcast_month_year, 1, 4) as broadcast_year,\n       region, \n\t   src_country, \n\t   broadcast_network_prem_type, \n\t   src_demographic_group, \n\t   src_demographic_age, \ncase \n\twhen broadcast_month_year = to_char((add_months(current_date, -1)), 'YYYYMM')  then\n\t(case\n\t\twhen (region, src_country, broadcast_network_prem_type, src_demographic_group, src_demographic_age) \n\t\t\tnot in (select distinct region, src_country, broadcast_network_prem_type, \n\t\t\t\t\t\t\t\t\tsrc_demographic_group, src_demographic_age\n\t\t\t\t\tfrom __dbt__CTE__intm_kntr_monthly_country_vh\n\t\t\t\t\twhere broadcast_month_year < to_char((add_months(current_date, -1)), 'YYYYMM'))\t\t\n\t\tthen\n\t\t\t(case when upper(broadcast_network_prem_type) ='FTA' then\n\t\t\t\t\t\tavg(viewing_hours) over (partition by region, src_country, src_demographic_group, src_demographic_age \n\t\t\t\t\t\t\t\t\t\t\t\t\torder by broadcast_month_year desc, broadcast_network_prem_type desc\n\t\t\t\t\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\n\t\t\t\telse\tavg(viewing_hours) over (partition by region, src_country, src_demographic_group, src_demographic_age \n\t\t\t\t\t\t\t\t\t\t\t\t\torder by broadcast_month_year desc, broadcast_network_prem_type\n\t\t\t\t\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\n\t\t\tend)\n\t\telse\n\t\t\tavg(viewing_hours) over (partition by region, src_country, broadcast_network_prem_type, \n\t\t\t\t\t\t\t\t\t\t\t\tsrc_demographic_group, src_demographic_age \n\t\t                              order by broadcast_month_year desc  \n\t\t\t\t\t\t\t\t\trows between 1 following and 3 following)\n\tend)\n\telse (viewing_hours) end as viewing_hours\nfrom  __dbt__CTE__intm_kntr_monthly_country_vh"}, "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect 'q'+ cast(quarter as varchar) as quarter,\nyear,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom {{ref('intm_kntr_wwe_program_rating')}} group by 1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_quarterly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating.sql", "name": "vw_aggr_kntr_quarterly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_quarterly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_quarterly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"quarter": {"name": "quarter", "description": "Quarter Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Quarterly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect 'q'+ cast(quarter as varchar) as quarter,\nyear,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect 'q'+ cast(quarter as varchar) as quarter,\nyear,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8"}, "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\n  select TO_CHAR(TO_DATE (month::text, 'MM'), 'Mon') as month,\n  year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom {{ref('intm_kntr_wwe_program_rating')}} group by 1,2,3,4,5,6,7,8", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating.sql", "name": "vw_aggr_kntr_monthly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_monthly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"month": {"name": "month", "description": "Month Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Monthly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\n  select TO_CHAR(TO_DATE (month::text, 'MM'), 'Mon') as month,\n  year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\n  select TO_CHAR(TO_DATE (month::text, 'MM'), 'Mon') as month,\n  year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7,8"}, "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect  TO_CHAR(TO_DATE (cal_month::text, 'MM'), 'Mon') as month,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n\t\t(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\n        \nfrom  {{ref('intm_kntr_wwe_program_rating_schedule')}}\ngroup by 1,2,3,4,5,6,7,8,9,10", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_wwe_program_rating_schedule"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating_schedule.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating_schedule.sql", "name": "vw_aggr_kntr_monthly_wwe_program_rating_schedule", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_wwe_program_rating_schedule", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating_schedule"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"]}, "description": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"month": {"name": "month", "description": "Month Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "live_flag": {"name": "live_flag", "description": "Program live telecasted identifier", "meta": {}, "data_type": null, "tags": []}, "nth_run": {"name": "nth_run", "description": "Program telecasted count after live telecasted", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Monthly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_wwe_program_rating_schedule.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  TO_CHAR(TO_DATE (cal_month::text, 'MM'), 'Mon') as month,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n\t\t(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\n        \nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  TO_CHAR(TO_DATE (cal_month::text, 'MM'), 'Mon') as month,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n\t\t(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\n        \nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10"}, "model.analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect month, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}} \ngroup by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_monthly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_monthly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_monthly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_monthly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_monthly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_monthly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Monthly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on monthly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"month": {"name": "month", "description": "Abbreviated Month Name based on week start date", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total monthly durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The monthly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The monthly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on monthly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The average weekly cumulative Audience who watched the competitive program on monthly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_monthly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect month, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\" \ngroup by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect month, year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\" \ngroup by 1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating_schedule": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect  cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  {{ref('intm_kntr_wwe_program_rating_schedule')}}\ngroup by 1,2,3,4,5,6,7,8,9", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_yearly_wwe_program_rating_schedule"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating_schedule.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating_schedule.sql", "name": "vw_aggr_kntr_yearly_wwe_program_rating_schedule", "resource_type": "model", "alias": "vw_aggr_kntr_yearly_wwe_program_rating_schedule", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating_schedule"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"]}, "description": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "live_flag": {"name": "live_flag", "description": "Program live telecasted identifier", "meta": {}, "data_type": null, "tags": []}, "nth_run": {"name": "nth_run", "description": "Program telecasted count after live telecasted", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Yearly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating_schedule.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n*************************************************************************************************************************************************\n*/\n\nselect  cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9"}, "model.analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data": {"raw_sql": "{{\r\n  config({\r\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\nselect dim_date_id, broadcast_date, src_weekday, month_name, month_num, modified_month, year, src_country, region, \r\nbroadcast_network_prem_type, src_channel, demographic_type, demographic_group_name, src_series, series_episode_name,\r\nseries_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, start_time_modified,\r\nchannel_1, program_1, rat_value, viewing_hours, regional_viewing_hours\r\nfrom {{ref('rpt_kntr_schedule_vh_data')}}", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_rpt_kntr_schedule_vh_data"], "unique_id": "model.analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_rpt_kntr_schedule_vh_data.sql", "original_file_path": "models/fds_kntr/view/vw_rpt_kntr_schedule_vh_data.sql", "name": "vw_rpt_kntr_schedule_vh_data", "resource_type": "model", "alias": "vw_rpt_kntr_schedule_vh_data", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_kntr_schedule_vh_data\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Schedule Viewing Hours Report View consist of rating and other details of WWE program schedule referencing from Schedule VH Data Report Table on daily-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"dim_date_id": {"name": "dim_date_id", "description": "The broadcast date ID field", "meta": {}, "data_type": null, "tags": []}, "broadcast_date": {"name": "broadcast_date", "description": "The date on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_weekday": {"name": "src_weekday", "description": "The day on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_name": {"name": "month_name", "description": "The month name on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "month_num": {"name": "month_num", "description": "The month number on when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "modified_month": {"name": "modified_month", "description": "Derived from broadcast_date; day part of broadcast_date replaced with '01'", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "The broadcast year when the WWE program broadcasted", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which WWE program telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic_type": {"name": "demographic_type", "description": "The type of demographic group watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "demographic_group_name": {"name": "demographic_group_name", "description": "The demographic group name who watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "src_series": {"name": "src_series", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "series_episode_name": {"name": "series_episode_name", "description": "Name of the content broadcast", "meta": {}, "data_type": null, "tags": []}, "series_episode_num": {"name": "series_episode_num", "description": "No.of episodes broadcast", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Indicates WWE series name", "meta": {}, "data_type": null, "tags": []}, "series_type": {"name": "series_type", "description": "Indicates WWE series type", "meta": {}, "data_type": null, "tags": []}, "start_time": {"name": "start_time", "description": "Start Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "end_time": {"name": "end_time", "description": "End Time of the WWE Program", "meta": {}, "data_type": null, "tags": []}, "duration_mins": {"name": "duration_mins", "description": "The duration of WWE Program in minutes", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "start_time_modified": {"name": "start_time_modified", "description": "The Start Time of WWE Program rounded off to the closest hour in timestamp format", "meta": {}, "data_type": null, "tags": []}, "channel_1": {"name": "channel_1", "description": "The value will be 'Others', if the channel is broadcasting for more than an year and percentage of viewership of the channel (compared to total viewership of country) is <=0.01", "meta": {}, "data_type": null, "tags": []}, "program_1": {"name": "program_1", "description": "The value will be 'Others' for the programs other than 'RAW', 'SMACKDOWN', 'NXT', 'PPV', 'SUNDAY DHAMAAL', 'SATURDAY NIGHT', 'TOTAL BELLAS' and 'TOTAL DIVAS'", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The average rating value of the WWE program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The viewing hours of WWE program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "regional_viewing_hours": {"name": "regional_viewing_hours", "description": "The regional viewing hours of the demographic group on monthly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_rpt_kntr_schedule_vh_data.sql", "compiled": true, "compiled_sql": "\nselect dim_date_id, broadcast_date, src_weekday, month_name, month_num, modified_month, year, src_country, region, \nbroadcast_network_prem_type, src_channel, demographic_type, demographic_group_name, src_series, series_episode_name,\nseries_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, start_time_modified,\nchannel_1, program_1, rat_value, viewing_hours, regional_viewing_hours\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect dim_date_id, broadcast_date, src_weekday, month_name, month_num, modified_month, year, src_country, region, \nbroadcast_network_prem_type, src_channel, demographic_type, demographic_group_name, src_series, series_episode_name,\nseries_episode_num, series_name, series_type, start_time, end_time, duration_mins, hd_flag, start_time_modified,\nchannel_1, program_1, rat_value, viewing_hours, regional_viewing_hours\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\""}, "model.analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data": {"raw_sql": "{{\r\n  config({\r\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\r\n\t})\r\n}}\r\nselect week_start_date, src_country, region, broadcast_network_prem_type, src_channel, demographic_type, \r\ndemographic_group_name, series_name, series_type, hd_flag, channel_1, program_1, sum(duration_mins/60.00) as duration_hours,\r\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\r\nsum(viewing_hours) as viewing_hours, sum(aud) as weekly_cumulative_audience, count(*) as telecasts_count\r\nfrom {{ref('rpt_kntr_schedule_vh_data')}}\r\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_schedule_wca_data"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_schedule_wca_data.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_schedule_wca_data.sql", "name": "vw_aggr_kntr_schedule_wca_data", "resource_type": "model", "alias": "vw_aggr_kntr_schedule_wca_data", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_schedule_wca_data\n*   Schema\t    : fds_kntr\n*   Contributor : Hima Dasan\n*   Description : WWE Program Schedule Weekly Cumulative Audience Aggregate View consist of rating and other details of WWE program schedule referencing from Schedule VH Data Report Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "The week start date based on broadcast date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "The country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "region": {"name": "region", "description": "The region of country from where the WWE program is telecasted", "meta": {}, "data_type": null, "tags": []}, "broadcast_network_prem_type": {"name": "broadcast_network_prem_type", "description": "Indicates whether the channel is Pay / Free To Air", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which WWE program telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic_type": {"name": "demographic_type", "description": "The type of demographic group watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "demographic_group_name": {"name": "demographic_group_name", "description": "The demographic group name who watched the WWE program", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Indicates WWE series name", "meta": {}, "data_type": null, "tags": []}, "series_type": {"name": "series_type", "description": "Indicates WWE series type", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "channel_1": {"name": "channel_1", "description": "The value will be 'Others', if the channel is broadcasting for more than an year and percentage of viewership of the channel (compared to total viewership of country) is <=0.01", "meta": {}, "data_type": null, "tags": []}, "program_1": {"name": "program_1", "description": "The value will be 'Others' for the programs other than 'RAW', 'SMACKDOWN', 'NXT', 'PPV', 'SUNDAY DHAMAAL', 'SATURDAY NIGHT', 'TOTAL BELLAS' and 'TOTAL DIVAS'", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The weekly duration of WWE Program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The average weekly rating value of the WWE program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The weekly viewing hours of WWE program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "weekly_cumulative_audience": {"name": "weekly_cumulative_audience", "description": "The weekly cumulative audience", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "The count of telecasts on weekly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_schedule_wca_data.sql", "compiled": true, "compiled_sql": "\nselect week_start_date, src_country, region, broadcast_network_prem_type, src_channel, demographic_type, \ndemographic_group_name, series_name, series_type, hd_flag, channel_1, program_1, sum(duration_mins/60.00) as duration_hours,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(aud) as weekly_cumulative_audience, count(*) as telecasts_count\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect week_start_date, src_country, region, broadcast_network_prem_type, src_channel, demographic_type, \ndemographic_group_name, series_name, series_type, hd_flag, channel_1, program_1, sum(duration_mins/60.00) as duration_hours,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(aud) as weekly_cumulative_audience, count(*) as telecasts_count\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12"}, "model.analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}}\ngroup by 1,2,3,4,5,6", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_yearly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_yearly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_yearly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_yearly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_yearly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_yearly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Yearly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on yearly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"year": {"name": "year", "description": "Year based on week start date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The total yearly durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The yearly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The yearly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on yearly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The average weekly cumulative Audience who watched the competitive program on yearly-basis", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_yearly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect year, src_country, src_channel, src_property, demographic, hd_flag, sum(duration_hours) as duration_hours,\n(sum(rat_value * total_duration_mins))/(nullif(sum(nvl2(rat_value, total_duration_mins, null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours, sum(telecasts_count) as telecasts_count,\navg(weekly_cumulative_audience) as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\ngroup by 1,2,3,4,5,6"}, "model.analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings": {"raw_sql": "{{\n  config({\n\t'schema': 'fds_kntr',\"materialized\": 'view','tags': \"Phase4B\",\"persist_docs\": {'relation' : true, 'columns' : true}\n\t})\n}}\nselect week_start_date, src_country, src_channel, src_property, demographic, hd_flag, \nduration_hours, rat_value, viewing_hours, telecasts_count, weekly_cumulative_audience as average_weekly_cumulative_audience_000\nfrom {{ref('aggr_kntr_weekly_competitive_program_ratings')}}", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_weekly_competitive_program_ratings"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_weekly_competitive_program_ratings.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_weekly_competitive_program_ratings.sql", "name": "vw_aggr_kntr_weekly_competitive_program_ratings", "resource_type": "model", "alias": "vw_aggr_kntr_weekly_competitive_program_ratings", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_weekly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Weekly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "Calendar Year Week Start Date based on Broadcast Date", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "country name where competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "The channel name in which competitive program telecasted", "meta": {}, "data_type": null, "tags": []}, "src_property": {"name": "src_property", "description": "The competitive program which is telecasted", "meta": {}, "data_type": null, "tags": []}, "demographic": {"name": "demographic", "description": "The demographic group who watched the competitive program", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "Indicates whether the channel is HD or not", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "The weekly total durationof the competitive program in hours", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "The weekly rating value of the competitive program", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "The weekly viewing hours of competitive program by specified demographic group", "meta": {}, "data_type": null, "tags": []}, "telecasts_count": {"name": "telecasts_count", "description": "Count of Telecasts of competitive program on weekly-basis", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "The weekly cumulative Audience who watched the competitive program", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_weekly_competitive_program_ratings.sql", "compiled": true, "compiled_sql": "\nselect week_start_date, src_country, src_channel, src_property, demographic, hd_flag, \nduration_hours, rat_value, viewing_hours, telecasts_count, weekly_cumulative_audience as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect week_start_date, src_country, src_channel, src_property, demographic, hd_flag, \nduration_hours, rat_value, viewing_hours, telecasts_count, weekly_cumulative_audience as average_weekly_cumulative_audience_000\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\""}, "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom {{ref('intm_kntr_wwe_program_rating')}} group by 1,2,3,4,5,6,7", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_yearly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating.sql", "name": "vw_aggr_kntr_yearly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_yearly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_yearly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Yearly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_yearly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/17/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_yearly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect year,src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\nsum(viewing_hours) as viewing_hours,\nsum(duration_hours) as duration_hours,\nsum(count_telecast) as count_telecast,\navg(Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom __dbt__CTE__intm_kntr_wwe_program_rating group by 1,2,3,4,5,6,7"}, "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n*************************************************************************************************************************************************\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect 'q'+ cast(cal_quarter as varchar) as quarter,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  {{ref('intm_kntr_wwe_program_rating_schedule')}}\ngroup by 1,2,3,4,5,6,7,8,9,10", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_quarterly_wwe_program_rating_schedule"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating_schedule.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating_schedule.sql", "name": "vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "resource_type": "model", "alias": "vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating_schedule"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"]}, "description": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"quarter": {"name": "quarter", "description": "Quarter Name", "meta": {}, "data_type": null, "tags": []}, "year": {"name": "year", "description": "Year", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "live_flag": {"name": "live_flag", "description": "Program live telecasted identifier", "meta": {}, "data_type": null, "tags": []}, "nth_run": {"name": "nth_run", "description": "Program telecasted count after live telecasted", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Quarterly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_quarterly_wwe_program_rating_schedule.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\nselect 'q'+ cast(cal_quarter as varchar) as quarter,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating_schedule as (\n\n\nselect  week_Start_date,\n        extract(month from week_Start_date) as cal_month,\n        extract(quarter from week_Start_date) as cal_quarter,\n        extract(year from week_Start_date) as cal_year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group,\n        src_demographic_age,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\n        sum(duration_mins) as total_duration_mins,\n        sum(watched_mins/60) as viewing_hours,\n        sum(duration_mins/60.00) as duration_hours,\n        sum(aud/1000) as Sum_Weekly_Cumulative_Audience,\n        count(*) as count_telecast\n\n\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\" a\nwhere a.series_name in ('SmackDown','RAW','NXT','PPV')\n  and a.nth_run is not null\n group by 1,2,3,4,5,6,7,8,9,10,11,12\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/26/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n   Schema\t   : fds_kntr\n   Contributor : Remya K Nair\n   Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n*************************************************************************************************************************************************\n*/\n\nselect 'q'+ cast(cal_quarter as varchar) as quarter,\n        cal_year as year,\n        src_country,\n        src_channel,\n        series_name,\n        src_demographic_group ,\n        src_demographic_age ,\n        hd_flag ,\n        live_flag,\n        nth_run,\n        (sum(rat_value*total_duration_mins))/(nullif(sum(nvl2(rat_value,total_duration_mins,null)),0)) as rat_value,\n        sum(viewing_hours) as viewing_hours,\n        sum(duration_hours) as duration_hours,\n        sum(count_telecast) as count_telecast,\n        avg(Sum_Weekly_Cumulative_Audience) as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating_schedule\ngroup by 1,2,3,4,5,6,7,8,9,10"}, "model.analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating": {"raw_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_Weekly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n{{\n  config({\n\t\t 'schema': 'fds_kntr',\t\n\t     \"materialized\": 'view',\"tags\": 'Phase4B',\"persist_docs\": {'relation' : true, 'columns' : true}\n\n        })\n}}\nselect week_start_date,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\nrat_value,\nviewing_hours,\nduration_hours,\ncount_telecast,\nWeekly_Cumulative_Audience as average_weekly_cumulative_audience_000\nfrom  {{ref('intm_kntr_wwe_program_rating')}}", "database": "entdwdb", "schema": "fds_kntr", "fqn": ["analytics_engineering_marts", "fds_kntr", "view", "vw_aggr_kntr_weekly_wwe_program_rating"], "unique_id": "model.analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_kntr/view/vw_aggr_kntr_weekly_wwe_program_rating.sql", "original_file_path": "models/fds_kntr/view/vw_aggr_kntr_weekly_wwe_program_rating.sql", "name": "vw_aggr_kntr_weekly_wwe_program_rating", "resource_type": "model", "alias": "vw_aggr_kntr_weekly_wwe_program_rating", "config": {"enabled": true, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "schema": "fds_kntr", "tags": ["Phase4B"], "analytics_engineering_marts": null}, "tags": ["Phase4B"], "refs": [["intm_kntr_wwe_program_rating"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"]}, "description": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_weekly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.", "columns": {"week_start_date": {"name": "week_start_date", "description": "Start date of the week", "meta": {}, "data_type": null, "tags": []}, "src_country": {"name": "src_country", "description": "Country in which the program boradcasted by the broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_channel": {"name": "src_channel", "description": "broadcast network name", "meta": {}, "data_type": null, "tags": []}, "series_name": {"name": "series_name", "description": "Program name broadcasted on a partucular broadcast network (channel)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_group": {"name": "src_demographic_group", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "src_demographic_age": {"name": "src_demographic_age", "description": "Broad descriptor for Age Demos (ie P2+, P2-17, P50-99, etc) and Gender Split Demos (ie M2+, F2+)", "meta": {}, "data_type": null, "tags": []}, "hd_flag": {"name": "hd_flag", "description": "identifier for high definition video telecast", "meta": {}, "data_type": null, "tags": []}, "rat_value": {"name": "rat_value", "description": "Duration weighted Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}, "viewing_hours": {"name": "viewing_hours", "description": "Total time of broadcast", "meta": {}, "data_type": null, "tags": []}, "duration_hours": {"name": "duration_hours", "description": "total length of program (in hours and minutes)", "meta": {}, "data_type": null, "tags": []}, "count_telecast": {"name": "count_telecast", "description": "Total count of telecast", "meta": {}, "data_type": null, "tags": []}, "average_weekly_cumulative_audience_000": {"name": "average_weekly_cumulative_audience_000", "description": "Monthly cumulative Average Rating (of specific demographic selected)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/fds_kntr/schema.yml", "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/view/vw_aggr_kntr_weekly_wwe_program_rating.sql", "compiled": true, "compiled_sql": "/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_Weekly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect week_start_date,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\nrat_value,\nviewing_hours,\nduration_hours,\ncount_telecast,\nWeekly_Cumulative_Audience as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "sql": " __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)"}], "injected_sql": "with __dbt__CTE__intm_kntr_wwe_program_rating as (\n\nselect  week_start_date,\n extract(month from week_Start_date)  as month,\n        extract(quarter from week_Start_date) as quarter,\n        extract(year from week_Start_date) as year,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\n(sum(rat_value*duration_mins))/(nullif(sum(nvl2(rat_value,duration_mins,null)),0)) as rat_value,\nsum(duration_mins) as total_duration_mins,\nsum(watched_mins/60) as viewing_hours,\nsum(duration_mins/60.00) as duration_hours,\ncount(*) as count_telecast,\nsum(aud/1000) as Weekly_Cumulative_Audience\nfrom \"entdwdb\".\"fds_kntr\".\"fact_kntr_wwe_telecast_data\"  a\n  group by 1,2,3,4,5,6,7,8,9,10\n)/*\n*************************************************************************************************************************************************\n   Date        : 07/21/2020\n   Version     : 1.0\n   TableName   : vw_aggr_kntr_Weekly_wwe_program_rating\n   Schema\t   : fds_nl\n   Contributor : Hima Dasan\n   Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n*************************************************************************************************************************************************\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n*/\n\nselect week_start_date,\n src_country,src_channel,\nseries_name,src_demographic_group,src_demographic_age,hd_flag ,\nrat_value,\nviewing_hours,\nduration_hours,\ncount_telecast,\nWeekly_Cumulative_Audience as average_weekly_cumulative_audience_000\nfrom  __dbt__CTE__intm_kntr_wwe_program_rating"}, "test.analytics_engineering_marts.monetize_summary_test_cases": {"raw_sql": "{{ config(severity='error') }}\r\n\r\n-- If channel_name doesn't have any channels with UpUpDownDown The Bella Twins WWE (failure).\r\n-- If channel_name  have any channels with UpUpDownDown The Bella Twins WWE (success)\r\n\r\n--script to check the three channes exists or not\r\n\r\nwith channel_check as (select COUNT(distinct channel_name) cnt from   dwh_read_write.agg_yt_monetization_summary  where view_date=trunc(current_date)-1\r\nand  channel_name  \r\nin ('UpUpDownDown','The Bella Twins','WWE') having count(distinct channel_name)<3),\r\ncheck_data as (select count(*) from dwh_read_write.agg_yt_monetization_summary where view_date=trunc(current_date)-1\r\nhaving count(*)<=0)\r\nselect * from channel_check\r\nunion \r\nselect * from check_data", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "fds_yt", "data_test", "monetize_summary_test_cases"], "unique_id": "test.analytics_engineering_marts.monetize_summary_test_cases", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "fds_yt/data_test/monetize_summary_test_cases.sql", "original_file_path": "tests/fds_yt/monetize_summary_test_cases.sql", "name": "monetize_summary_test_cases", "resource_type": "test", "alias": "monetize_summary_test_cases", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "error", "analytics_engineering_marts": null}, "tags": ["data"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/tests/fds_yt/monetize_summary_test_cases.sql", "compiled": true, "compiled_sql": "\n\n-- If channel_name doesn't have any channels with UpUpDownDown The Bella Twins WWE (failure).\n-- If channel_name  have any channels with UpUpDownDown The Bella Twins WWE (success)\n\n--script to check the three channes exists or not\n\nwith channel_check as (select COUNT(distinct channel_name) cnt from   dwh_read_write.agg_yt_monetization_summary  where view_date=trunc(current_date)-1\nand  channel_name  \nin ('UpUpDownDown','The Bella Twins','WWE') having count(distinct channel_name)<3),\ncheck_data as (select count(*) from dwh_read_write.agg_yt_monetization_summary where view_date=trunc(current_date)-1\nhaving count(*)<=0)\nselect * from channel_check\nunion \nselect * from check_data", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n-- If channel_name doesn't have any channels with UpUpDownDown The Bella Twins WWE (failure).\n-- If channel_name  have any channels with UpUpDownDown The Bella Twins WWE (success)\n\n--script to check the three channes exists or not\n\nwith channel_check as (select COUNT(distinct channel_name) cnt from   dwh_read_write.agg_yt_monetization_summary  where view_date=trunc(current_date)-1\nand  channel_name  \nin ('UpUpDownDown','The Bella Twins','WWE') having count(distinct channel_name)<3),\ncheck_data as (select count(*) from dwh_read_write.agg_yt_monetization_summary where view_date=trunc(current_date)-1\nhaving count(*)<=0)\nselect * from channel_check\nunion \nselect * from check_data"}, "test.analytics_engineering_marts.ppv_hourly_test_post_load": {"raw_sql": "{{ config(severity='error') }}\r\nselect distinct * from(\r\nselect case when total=0 then null else 1 end query2 from\r\n(select 'total_adds_comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (with a as (select event_date,event_name,event_type,\r\nadds_date,sum(total_adds) as rpt_total_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast where \r\ndate_part(dayofweek,adds_date) = date_part(dayofweek,current_date) and event_type <> 'current_ppv' group by event_date,event_name,event_type,adds_date), \r\nb as (select trunc(initial_order_dttm) as adds_date, count(*) as sos_total_adds from fds_nplus.fact_daily_subscription_order_status \r\nwhere trunc(initial_order_dttm) + 1 = as_on_date and  trunc(initial_order_dttm) in (select distinct adds_date from a) and trunc(as_on_date) - 1 in \r\n(select distinct adds_date from a) and payment_method in ('cybersource','stripe','incomm','paypal') group by 1) select * from a \r\nleft join b on a.adds_date = b.adds_date) where rpt_total_adds <> sos_total_adds)\r\nunion all\r\nselect case when total=0 then null else 1 end query5 from\r\n(select 'forecasted_total_adds_fri_sat_sun' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \r\n(select current_adds_days_to_event, sum(current_day_forecast) as current_day_forecast,sum(weekend_forecast) as weekend_forecast,\r\ncase when sum(current_day_forecast) is null or sum(current_day_forecast) = 0 or sum(weekend_forecast) = 0 or sum(weekend_forecast) is null then \r\n1 else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and current_adds_days_to_event in \r\n(0,-1,-2) group by 1 ) where flag=1)\r\nunion all\r\nselect case when total=0 then null else 1 end query6 from\r\n(select 'total_adds_comp1_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \r\nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp1'and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\r\nunion all\r\nselect case when total=0 then null else 1 end query7 from\r\n(select 'total_adds_comp2_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \r\nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp2' and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\r\nunion all\r\nselect case when total=0 then null else 1 end query8 from\r\n(select 'total_adds_comp3_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) \r\nfrom fds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp3' and (total_adds is null or total_adds = 0) \r\ngroup by 1 having count(*) >= 1 ))\r\nunion all\r\nselect case when total=0 then null else 1 end query9 from\r\n(select 'total_adds_curr_ppv_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds, \r\ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and adds_date = current_date-1 and adds_time = 23.0 and \r\n(total_adds is null or total_adds = 0) then 1      when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \r\nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))      \r\nand (total_adds is null or total_adds = 0) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \r\nwhere event_type = 'current_ppv' and adds_date >= current_date-1 ) where flag=1)\r\nunion all\r\nselect case when total=0 then null else 1 end query10 from\r\n(select 'total_adds_curr_ppv_vs_comp1_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select case when \r\n(cur_ppv_zero_hr_tot_adds < 0.5 * comp1_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp1_zero_hr_tot_adds) then 1      \r\nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp1_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp1_otr_hr_tot_adds) then 1      \r\nelse 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \r\nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, \r\ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and adds_date = current_date \r\nand adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \r\nand event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \r\nextract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and \r\nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp1' then total_adds end as \r\ncomp1_zero_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and \r\nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \r\nand event_type = 'comp1' then total_adds end as comp1_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \r\nwhere adds_date >= current_date-1 ) ) where flag=1)\r\nunion all\r\nselect case when total=0 then null else 1 end query11 from\r\n(select 'total_adds_curr_ppv_vs_comp2_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \r\n(cur_ppv_zero_hr_tot_adds < 0.5 * comp2_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp2_zero_hr_tot_adds) then 1     \r\n when (cur_ppv_otr_hr_tot_adds < 0.5 * comp2_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp2_otr_hr_tot_adds) then 1      \r\n else 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \r\n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds,\r\n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \r\n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))   \r\n and event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \r\n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \r\n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp2' then total_adds end as comp2_zero_hr_tot_adds, \r\n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \r\n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \r\n and event_type = 'comp2' then total_adds end as comp2_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast \r\n where adds_date >= current_date-1 ) ) where flag=1)\r\nunion all\r\nselect case when total=0 then null else 1 end query12 from \r\n(select 'total_adds_curr_ppv_vs_comp3_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \r\n(cur_ppv_zero_hr_tot_adds < 0.5 * comp3_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp3_zero_hr_tot_adds) then 1      \r\nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp3_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp3_otr_hr_tot_adds) then 1      \r\nelse 0 end as flag from ( select case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and     \r\n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, case when \r\n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \r\n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'current_ppv' then \r\n total_adds end as cur_ppv_otr_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \r\n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp3' then total_adds end as comp3_zero_hr_tot_adds, case when \r\n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \r\n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'comp3' then \r\n total_adds end as comp3_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where adds_date >= current_date-1 )) where flag=1)\r\n union all\r\nselect case when total=0 then null else 1 end query13 from  \r\n(select 'total_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds,\r\ncurrentday_adds_tillnow,currentday_adds_estimate, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and\r\n      adds_date = current_date-1 and adds_time = 23.0 and      (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1 \r\n\t  when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \r\n\t  adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      \r\n\t  (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1       else 0 end as flag from \r\n\t  fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and adds_time = extract(hour \r\n\t  from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and adds_date >= current_date-1 ) where flag=1)\r\nunion all\r\nselect case when total=0 then null else 1 end query14 from \t  \r\n(select 'wknd_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \r\n(select adds_date,weekend_adds_tillnow ,currentday_adds_tillnow,weekend_adds_estimate,currentday_adds_estimate, \r\ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      adds_date = current_date-1 and \r\nadds_time = 23.0 and      (weekend_adds_tillnow < currentday_adds_tillnow or weekend_adds_estimate < currentday_adds_estimate) then 1       \r\nwhen extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \r\nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      (weekend_adds_tillnow < currentday_adds_tillnow or \r\nweekend_adds_estimate < currentday_adds_estimate) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where \r\nevent_type = 'current_ppv' and adds_time = extract(hour from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and \r\nadds_date >= current_date-1 ) where flag=1)) where query2>0", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "ppv_hourly", "data_test", "ppv_hourly_test_post_load"], "unique_id": "test.analytics_engineering_marts.ppv_hourly_test_post_load", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "ppv_hourly/data_test/ppv_hourly_test_post_load.sql", "original_file_path": "tests/ppv_hourly/ppv_hourly_test_post_load.sql", "name": "ppv_hourly_test_post_load", "resource_type": "test", "alias": "ppv_hourly_test_post_load", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "error", "analytics_engineering_marts": null}, "tags": ["data"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/tests/ppv_hourly/ppv_hourly_test_post_load.sql", "compiled": true, "compiled_sql": "\nselect distinct * from(\nselect case when total=0 then null else 1 end query2 from\n(select 'total_adds_comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (with a as (select event_date,event_name,event_type,\nadds_date,sum(total_adds) as rpt_total_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast where \ndate_part(dayofweek,adds_date) = date_part(dayofweek,current_date) and event_type <> 'current_ppv' group by event_date,event_name,event_type,adds_date), \nb as (select trunc(initial_order_dttm) as adds_date, count(*) as sos_total_adds from fds_nplus.fact_daily_subscription_order_status \nwhere trunc(initial_order_dttm) + 1 = as_on_date and  trunc(initial_order_dttm) in (select distinct adds_date from a) and trunc(as_on_date) - 1 in \n(select distinct adds_date from a) and payment_method in ('cybersource','stripe','incomm','paypal') group by 1) select * from a \nleft join b on a.adds_date = b.adds_date) where rpt_total_adds <> sos_total_adds)\nunion all\nselect case when total=0 then null else 1 end query5 from\n(select 'forecasted_total_adds_fri_sat_sun' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select current_adds_days_to_event, sum(current_day_forecast) as current_day_forecast,sum(weekend_forecast) as weekend_forecast,\ncase when sum(current_day_forecast) is null or sum(current_day_forecast) = 0 or sum(weekend_forecast) = 0 or sum(weekend_forecast) is null then \n1 else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and current_adds_days_to_event in \n(0,-1,-2) group by 1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query6 from\n(select 'total_adds_comp1_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp1'and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query7 from\n(select 'total_adds_comp2_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp2' and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query8 from\n(select 'total_adds_comp3_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) \nfrom fds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp3' and (total_adds is null or total_adds = 0) \ngroup by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query9 from\n(select 'total_adds_curr_ppv_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and adds_date = current_date-1 and adds_time = 23.0 and \n(total_adds is null or total_adds = 0) then 1      when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))      \nand (total_adds is null or total_adds = 0) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere event_type = 'current_ppv' and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query10 from\n(select 'total_adds_curr_ppv_vs_comp1_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp1_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp1_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp1_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp1_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and adds_date = current_date \nand adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \nextract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp1' then total_adds end as \ncomp1_zero_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'comp1' then total_adds end as comp1_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query11 from\n(select 'total_adds_curr_ppv_vs_comp2_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp2_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp2_zero_hr_tot_adds) then 1     \n when (cur_ppv_otr_hr_tot_adds < 0.5 * comp2_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp2_otr_hr_tot_adds) then 1      \n else 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds,\n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))   \n and event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp2' then total_adds end as comp2_zero_hr_tot_adds, \n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \n and event_type = 'comp2' then total_adds end as comp2_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast \n where adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query12 from \n(select 'total_adds_curr_ppv_vs_comp3_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp3_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp3_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp3_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp3_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and     \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'current_ppv' then \n total_adds end as cur_ppv_otr_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp3' then total_adds end as comp3_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'comp3' then \n total_adds end as comp3_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where adds_date >= current_date-1 )) where flag=1)\n union all\nselect case when total=0 then null else 1 end query13 from  \n(select 'total_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds,\ncurrentday_adds_tillnow,currentday_adds_estimate, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and\n      adds_date = current_date-1 and adds_time = 23.0 and      (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1 \n\t  when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n\t  adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      \n\t  (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1       else 0 end as flag from \n\t  fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and adds_time = extract(hour \n\t  from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query14 from \t  \n(select 'wknd_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select adds_date,weekend_adds_tillnow ,currentday_adds_tillnow,weekend_adds_estimate,currentday_adds_estimate, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      adds_date = current_date-1 and \nadds_time = 23.0 and      (weekend_adds_tillnow < currentday_adds_tillnow or weekend_adds_estimate < currentday_adds_estimate) then 1       \nwhen extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      (weekend_adds_tillnow < currentday_adds_tillnow or \nweekend_adds_estimate < currentday_adds_estimate) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where \nevent_type = 'current_ppv' and adds_time = extract(hour from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and \nadds_date >= current_date-1 ) where flag=1)) where query2>0", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\nselect distinct * from(\nselect case when total=0 then null else 1 end query2 from\n(select 'total_adds_comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (with a as (select event_date,event_name,event_type,\nadds_date,sum(total_adds) as rpt_total_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast where \ndate_part(dayofweek,adds_date) = date_part(dayofweek,current_date) and event_type <> 'current_ppv' group by event_date,event_name,event_type,adds_date), \nb as (select trunc(initial_order_dttm) as adds_date, count(*) as sos_total_adds from fds_nplus.fact_daily_subscription_order_status \nwhere trunc(initial_order_dttm) + 1 = as_on_date and  trunc(initial_order_dttm) in (select distinct adds_date from a) and trunc(as_on_date) - 1 in \n(select distinct adds_date from a) and payment_method in ('cybersource','stripe','incomm','paypal') group by 1) select * from a \nleft join b on a.adds_date = b.adds_date) where rpt_total_adds <> sos_total_adds)\nunion all\nselect case when total=0 then null else 1 end query5 from\n(select 'forecasted_total_adds_fri_sat_sun' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select current_adds_days_to_event, sum(current_day_forecast) as current_day_forecast,sum(weekend_forecast) as weekend_forecast,\ncase when sum(current_day_forecast) is null or sum(current_day_forecast) = 0 or sum(weekend_forecast) = 0 or sum(weekend_forecast) is null then \n1 else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and current_adds_days_to_event in \n(0,-1,-2) group by 1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query6 from\n(select 'total_adds_comp1_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp1'and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query7 from\n(select 'total_adds_comp2_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) from \nfds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp2' and (total_adds is null or total_adds = 0) group by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query8 from\n(select 'total_adds_comp3_prev_24_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_time, count(*) \nfrom fds_nplus.rpt_network_ppv_actuals_estimates_forecast where event_type = 'comp3' and (total_adds is null or total_adds = 0) \ngroup by 1 having count(*) >= 1 ))\nunion all\nselect case when total=0 then null else 1 end query9 from\n(select 'total_adds_curr_ppv_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and adds_date = current_date-1 and adds_time = 23.0 and \n(total_adds is null or total_adds = 0) then 1      when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))      \nand (total_adds is null or total_adds = 0) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere event_type = 'current_ppv' and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query10 from\n(select 'total_adds_curr_ppv_vs_comp1_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp1_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp1_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp1_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp1_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and adds_date = current_date \nand adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \nextract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and \nadds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp1' then total_adds end as \ncomp1_zero_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and \nadds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \nand event_type = 'comp1' then total_adds end as comp1_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  \nwhere adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query11 from\n(select 'total_adds_curr_ppv_vs_comp2_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp2_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp2_zero_hr_tot_adds) then 1     \n when (cur_ppv_otr_hr_tot_adds < 0.5 * comp2_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp2_otr_hr_tot_adds) then 1      \n else 0 end as flag from ( select  case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds,\n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))   \n and event_type = 'current_ppv' then total_adds end as cur_ppv_otr_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and    \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp2' then total_adds end as comp2_zero_hr_tot_adds, \n case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      \n adds_date = current_date and adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       \n and event_type = 'comp2' then total_adds end as comp2_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast \n where adds_date >= current_date-1 ) ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query12 from \n(select 'total_adds_curr_ppv_vs_comp3_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from ( select case when \n(cur_ppv_zero_hr_tot_adds < 0.5 * comp3_zero_hr_tot_adds) or (cur_ppv_zero_hr_tot_adds > 2 * comp3_zero_hr_tot_adds) then 1      \nwhen (cur_ppv_otr_hr_tot_adds < 0.5 * comp3_otr_hr_tot_adds) or (cur_ppv_otr_hr_tot_adds > 2 * comp3_otr_hr_tot_adds) then 1      \nelse 0 end as flag from ( select case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and     \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'current_ppv' then total_adds end as cur_ppv_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'current_ppv' then \n total_adds end as cur_ppv_otr_hr_tot_adds, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      \n adds_date = current_date-1 and adds_time = 23.0 and event_type = 'comp3' then total_adds end as comp3_zero_hr_tot_adds, case when \n extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))       and event_type = 'comp3' then \n total_adds end as comp3_otr_hr_tot_adds from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where adds_date >= current_date-1 )) where flag=1)\n union all\nselect case when total=0 then null else 1 end query13 from  \n(select 'total_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select adds_date,total_adds,\ncurrentday_adds_tillnow,currentday_adds_estimate, case when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and\n      adds_date = current_date-1 and adds_time = 23.0 and      (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1 \n\t  when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \n\t  adds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      \n\t  (currentday_adds_tillnow <= total_adds or currentday_adds_estimate <= total_adds) then 1       else 0 end as flag from \n\t  fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where event_type = 'current_ppv' and adds_time = extract(hour \n\t  from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and adds_date >= current_date-1 ) where flag=1)\nunion all\nselect case when total=0 then null else 1 end query14 from \t  \n(select 'wknd_adds_curr_day_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select adds_date,weekend_adds_tillnow ,currentday_adds_tillnow,weekend_adds_estimate,currentday_adds_estimate, \ncase when extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) = 0 and      adds_date = current_date-1 and \nadds_time = 23.0 and      (weekend_adds_tillnow < currentday_adds_tillnow or weekend_adds_estimate < currentday_adds_estimate) then 1       \nwhen extract(hour from dateadd('hour',0,convert_timezone('AMERICA/NEW_YORK', getdate()))) > 0 and      adds_date = current_date and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and      (weekend_adds_tillnow < currentday_adds_tillnow or \nweekend_adds_estimate < currentday_adds_estimate) then 1       else 0 end as flag from fds_nplus.rpt_network_ppv_actuals_estimates_forecast  where \nevent_type = 'current_ppv' and adds_time = extract(hour from(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate())))) and \nadds_date >= current_date-1 ) where flag=1)) where query2>0"}, "test.analytics_engineering_marts.ppv_hourly_test_pre_load": {"raw_sql": "{{ config(severity='error') }}\r\n\r\nselect distinct query1 from\r\n(select case when total>0 then null else 1 end query1 from\r\n(select 'comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(event_name) as total from \r\nudl_nplus.raw_da_weekly_ppv_hourly_comps \r\nwhere event_date >= current_date and \r\n(comp1_event_name != '' or comp2_event_name != '' or comp3_event_name != ''))\r\nunion all\r\nselect case when total>0 then null else 1 end query2 from\r\n(select 'total_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \r\n(select date as adds_date, hour as adds_time,sum(paid_adds) as \r\npaid_adds,sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \r\nudl_nplus.drvd_intra_hour_quarter_hour_adds where \r\ndate = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and hour = extract(hour from \r\ndateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2 ) where total_adds != 0)\r\nunion all\r\nselect case when total>0 then null else 1 end query3 from\r\n(select 'total_adds_prev_quarter_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select date as adds_date, hour as adds_time, \r\nquarter_hour,sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \r\nudl_nplus.drvd_intra_hour_quarter_hour_adds where date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and \r\nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2,3) where total_adds!= 0))", "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "ppv_hourly", "data_test", "ppv_hourly_test_pre_load"], "unique_id": "test.analytics_engineering_marts.ppv_hourly_test_pre_load", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "ppv_hourly/data_test/ppv_hourly_test_pre_load.sql", "original_file_path": "tests/ppv_hourly/ppv_hourly_test_pre_load.sql", "name": "ppv_hourly_test_pre_load", "resource_type": "test", "alias": "ppv_hourly_test_pre_load", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "error", "analytics_engineering_marts": null}, "tags": ["data"], "refs": [], "sources": [], "depends_on": {"macros": [], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/tests/ppv_hourly/ppv_hourly_test_pre_load.sql", "compiled": true, "compiled_sql": "\n\nselect distinct query1 from\n(select case when total>0 then null else 1 end query1 from\n(select 'comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(event_name) as total from \nudl_nplus.raw_da_weekly_ppv_hourly_comps \nwhere event_date >= current_date and \n(comp1_event_name != '' or comp2_event_name != '' or comp3_event_name != ''))\nunion all\nselect case when total>0 then null else 1 end query2 from\n(select 'total_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select date as adds_date, hour as adds_time,sum(paid_adds) as \npaid_adds,sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where \ndate = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and hour = extract(hour from \ndateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2 ) where total_adds != 0)\nunion all\nselect case when total>0 then null else 1 end query3 from\n(select 'total_adds_prev_quarter_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select date as adds_date, hour as adds_time, \nquarter_hour,sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2,3) where total_adds!= 0))", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\nselect distinct query1 from\n(select case when total>0 then null else 1 end query1 from\n(select 'comp_ppvs' as metric_nm, 'n/a' as dm_dimension_val, count(event_name) as total from \nudl_nplus.raw_da_weekly_ppv_hourly_comps \nwhere event_date >= current_date and \n(comp1_event_name != '' or comp2_event_name != '' or comp3_event_name != ''))\nunion all\nselect case when total>0 then null else 1 end query2 from\n(select 'total_adds_prev_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from \n(select date as adds_date, hour as adds_time,sum(paid_adds) as \npaid_adds,sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where \ndate = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and hour = extract(hour from \ndateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2 ) where total_adds != 0)\nunion all\nselect case when total>0 then null else 1 end query3 from\n(select 'total_adds_prev_quarter_hour' as metric_nm, 'n/a' as dm_dimension_val, count(*) as total from (select date as adds_date, hour as adds_time, \nquarter_hour,sum(paid_adds) as paid_adds, sum(trial_adds) as trial_adds, sum(paid_adds+trial_adds) as total_adds from \nudl_nplus.drvd_intra_hour_quarter_hour_adds where date = date(dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) and \nadds_time = extract(hour from dateadd('hour',-1,convert_timezone('AMERICA/NEW_YORK', getdate()))) group by 1,2,3) where total_adds!= 0))"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date_id", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date_id is null\n\n", "column_name": "broadcast_date_id"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_month_num", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_num is null\n\n", "column_name": "broadcast_month_num"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_month_nm", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_nm is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere broadcast_month_nm is null\n\n", "column_name": "broadcast_month_nm"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "src_broadcast_network_id", "model": "{{ ref('rpt_nl_daily_wwe_live_commercial_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_commercial_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere src_broadcast_network_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_commercial_ratings\"\nwhere src_broadcast_network_id is null\n\n", "column_name": "src_broadcast_network_id"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date_id", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date_id is null\n\n", "column_name": "broadcast_date_id"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_month_num", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_month_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere broadcast_month_num is null\n\n", "column_name": "broadcast_month_num"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "src_program_id", "model": "{{ ref('rpt_nl_daily_wwe_live_quarterhour_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_live_quarterhour_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere src_program_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_live_quarterhour_ratings\"\nwhere src_program_id is null\n\n", "column_name": "src_program_id"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date_id", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date_id is null\n\n", "column_name": "broadcast_date_id"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_week_begin_date", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_begin_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_begin_date is null\n\n", "column_name": "broadcast_cal_week_begin_date"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_week_end_date", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_end_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_end_date is null\n\n", "column_name": "broadcast_cal_week_end_date"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_week_num", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_week_num is null\n\n", "column_name": "broadcast_cal_week_num"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_month_num", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_num is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_num is null\n\n", "column_name": "broadcast_cal_month_num"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_cal_month_nm", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_nm is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere broadcast_cal_month_nm is null\n\n", "column_name": "broadcast_cal_month_nm"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_src_program_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "src_program_id", "model": "{{ ref('rpt_nl_daily_wwe_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_wwe_program_ratings_src_program_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_src_program_id", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_wwe_program_ratings_src_program_id.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_wwe_program_ratings_src_program_id", "resource_type": "test", "alias": "not_null_rpt_nl_daily_wwe_program_ratings_src_program_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_wwe_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_wwe_program_ratings_src_program_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere src_program_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_wwe_program_ratings\"\nwhere src_program_id is null\n\n", "column_name": "src_program_id"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "mxm_source", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere mxm_source is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere mxm_source is null\n\n", "column_name": "mxm_source"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "program_telecast_rpt_starttime", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere program_telecast_rpt_starttime is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere program_telecast_rpt_starttime is null\n\n", "column_name": "program_telecast_rpt_starttime"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "min_of_pgm_value", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere min_of_pgm_value is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere min_of_pgm_value is null\n\n", "column_name": "min_of_pgm_value"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "showdbid", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere showdbid is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere showdbid is null\n\n", "column_name": "showdbid"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_title": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "title", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_title"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_title", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_title.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_title", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_title", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_title.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere title is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere title is null\n\n", "column_name": "title"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "airdate", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere airdate is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere airdate is null\n\n", "column_name": "airdate"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "inpoint", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint is null\n\n", "column_name": "inpoint"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "inpoint_24hr_est", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint_24hr_est is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere inpoint_24hr_est is null\n\n", "column_name": "inpoint_24hr_est"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "modified_inpoint", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_inpoint is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_inpoint is null\n\n", "column_name": "modified_inpoint"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "modified_outpoint", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_outpoint is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere modified_outpoint is null\n\n", "column_name": "modified_outpoint"}, "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "duration", "model": "{{ ref('rpt_nl_daily_minxmin_lite_log_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration.sql", "original_file_path": "models/fds_nl/schema.yml", "name": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration", "resource_type": "test", "alias": "not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_nl_daily_minxmin_lite_log_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_nl/schema.yml/schema_test/not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere duration is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_nl\".\"rpt_nl_daily_minxmin_lite_log_ratings\"\nwhere duration is null\n\n", "column_name": "duration"}, "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "week_start_date", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere week_start_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere week_start_date is null\n\n", "column_name": "week_start_date"}, "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_month": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "month", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_month"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_month", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_month.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_month", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_month", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_month.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere month is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere month is null\n\n", "column_name": "month"}, "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_quarter": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "quarter", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_quarter"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_quarter", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_quarter.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_quarter", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_quarter", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_quarter.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere quarter is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere quarter is null\n\n", "column_name": "quarter"}, "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_year": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "year", "model": "{{ ref('aggr_kntr_weekly_competitive_program_ratings') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_aggr_kntr_weekly_competitive_program_ratings_year"], "unique_id": "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_year", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_year.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_aggr_kntr_weekly_competitive_program_ratings_year", "resource_type": "test", "alias": "not_null_aggr_kntr_weekly_competitive_program_ratings_year", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["aggr_kntr_weekly_competitive_program_ratings"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_aggr_kntr_weekly_competitive_program_ratings_year.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere year is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"aggr_kntr_weekly_competitive_program_ratings\"\nwhere year is null\n\n", "column_name": "year"}, "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_dim_date_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "dim_date_id", "model": "{{ ref('rpt_kntr_schedule_vh_data') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_kntr_schedule_vh_data_dim_date_id"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_dim_date_id", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_kntr_schedule_vh_data_dim_date_id.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_rpt_kntr_schedule_vh_data_dim_date_id", "resource_type": "test", "alias": "not_null_rpt_kntr_schedule_vh_data_dim_date_id", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_rpt_kntr_schedule_vh_data_dim_date_id.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere dim_date_id is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere dim_date_id is null\n\n", "column_name": "dim_date_id"}, "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_broadcast_date": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "broadcast_date", "model": "{{ ref('rpt_kntr_schedule_vh_data') }}"}}, "database": "entdwdb", "schema": "fds_nplus", "fqn": ["analytics_engineering_marts", "schema_test", "not_null_rpt_kntr_schedule_vh_data_broadcast_date"], "unique_id": "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_broadcast_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "schema_test/not_null_rpt_kntr_schedule_vh_data_broadcast_date.sql", "original_file_path": "models/fds_kntr/schema.yml", "name": "not_null_rpt_kntr_schedule_vh_data_broadcast_date", "resource_type": "test", "alias": "not_null_rpt_kntr_schedule_vh_data_broadcast_date", "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "tags": [], "severity": "ERROR", "analytics_engineering_marts": null}, "tags": ["schema"], "refs": [["rpt_kntr_schedule_vh_data"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target/compiled/analytics_engineering_marts/models/fds_kntr/schema.yml/schema_test/not_null_rpt_kntr_schedule_vh_data_broadcast_date.sql", "compiled": true, "compiled_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere broadcast_date is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n\n\nselect count(*) as validation_errors\nfrom \"entdwdb\".\"fds_kntr\".\"rpt_kntr_schedule_vh_data\"\nwhere broadcast_date is null\n\n", "column_name": "broadcast_date"}}, "sources": {"source.analytics_engineering_marts.fds_nl.fact_nl_quaterhour_viewership_ratings": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_quaterhour_viewership_ratings"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_quaterhour_viewership_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_quaterhour_viewership_ratings", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_quaterhour_viewership_ratings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_commercial_viewership_ratings": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_commercial_viewership_ratings"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_commercial_viewership_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_commercial_viewership_ratings", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_commercial_viewership_ratings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_program_viewership_ratings"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_program_viewership_ratings", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_program_viewership_ratings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.dim_nl_series": {"fqn": ["analytics_engineering_marts", "fds_nl", "dim_nl_series"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.dim_nl_series", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_nl_series", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "dim_nl_series", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network": {"fqn": ["analytics_engineering_marts", "fds_nl", "dim_nl_broadcast_network"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_nl_broadcast_network", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "dim_nl_broadcast_network", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.dim_nl_daypart": {"fqn": ["analytics_engineering_marts", "fds_nl", "dim_nl_daypart"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_nl_daypart", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "dim_nl_daypart", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_timeperiod_viewership_ratings"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_timeperiod_viewership_ratings", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_timeperiod_viewership_ratings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_weekly_overlap_chart"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_weekly_overlap_chart", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_weekly_overlap_chart", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_hulu_data": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_weekly_hulu_data"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_hulu_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_weekly_hulu_data", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_weekly_hulu_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_minxmin_ratings"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_minxmin_ratings", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_minxmin_ratings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_live_switching_behavior_destination_dist": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_weekly_live_switching_behavior_destination_dist"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_live_switching_behavior_destination_dist", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_weekly_live_switching_behavior_destination_dist", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_weekly_live_switching_behavior_destination_dist", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_channel_switch": {"fqn": ["analytics_engineering_marts", "fds_nl", "rpt_nl_weekly_channel_switch"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_channel_switch", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "rpt_nl_weekly_channel_switch", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "rpt_nl_weekly_channel_switch", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_4_way_oob": {"fqn": ["analytics_engineering_marts", "fds_nl", "fact_nl_weekly_overlap_4_way_oob"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_nl_weekly_overlap_4_way_oob", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "fact_nl_weekly_overlap_4_way_oob", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob": {"fqn": ["analytics_engineering_marts", "fds_nl", "rpt_nl_weekly_overlap_derived_4_way_oob"], "database": "entdwdb", "schema": "fds_nl", "unique_id": "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "rpt_nl_weekly_overlap_derived_4_way_oob", "source_name": "fds_nl", "source_description": "", "loader": "", "identifier": "rpt_nl_weekly_overlap_derived_4_way_oob", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.cdm.dim_date": {"fqn": ["analytics_engineering_marts", "cdm", "dim_date"], "database": "entdwdb", "schema": "cdm", "unique_id": "source.analytics_engineering_marts.cdm.dim_date", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_date", "source_name": "cdm", "source_description": "", "loader": "", "identifier": "dim_date", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.cdm.dim_region_country": {"fqn": ["analytics_engineering_marts", "cdm", "dim_region_country"], "database": "entdwdb", "schema": "cdm", "unique_id": "source.analytics_engineering_marts.cdm.dim_region_country", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_region_country", "source_name": "cdm", "source_description": "", "loader": "", "identifier": "dim_region_country", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.cdm.dim_event": {"fqn": ["analytics_engineering_marts", "cdm", "dim_event"], "database": "entdwdb", "schema": "cdm", "unique_id": "source.analytics_engineering_marts.cdm.dim_event", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_event", "source_name": "cdm", "source_description": "", "loader": "", "identifier": "dim_event", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.cdm.dim_country_population": {"fqn": ["analytics_engineering_marts", "cdm", "dim_country_population"], "database": "entdwdb", "schema": "cdm", "unique_id": "source.analytics_engineering_marts.cdm.dim_country_population", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_country_population", "source_name": "cdm", "source_description": "", "loader": "", "identifier": "dim_country_population", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.rpt_yt_wwe_engagement_daily": {"fqn": ["analytics_engineering_marts", "fds_yt", "rpt_yt_wwe_engagement_daily"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.rpt_yt_wwe_engagement_daily", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "rpt_yt_wwe_engagement_daily", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "rpt_yt_wwe_engagement_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.rpt_yt_revenue_daily": {"fqn": ["analytics_engineering_marts", "fds_yt", "rpt_yt_revenue_daily"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.rpt_yt_revenue_daily", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "rpt_yt_revenue_daily", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "rpt_yt_revenue_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.youtube_video_metadata_direct": {"fqn": ["analytics_engineering_marts", "fds_yt", "youtube_video_metadata_direct"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.youtube_video_metadata_direct", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "youtube_video_metadata_direct", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "youtube_video_metadata_direct", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.rpt_yt_demographics_views_daily": {"fqn": ["analytics_engineering_marts", "fds_yt", "rpt_yt_demographics_views_daily"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.rpt_yt_demographics_views_daily", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "rpt_yt_demographics_views_daily", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "rpt_yt_demographics_views_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.rpt_yt_ugc_engagement_daily": {"fqn": ["analytics_engineering_marts", "fds_yt", "rpt_yt_ugc_engagement_daily"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.rpt_yt_ugc_engagement_daily", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "rpt_yt_ugc_engagement_daily", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "rpt_yt_ugc_engagement_daily", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.agg_yt_monetization_summary": {"fqn": ["analytics_engineering_marts", "fds_yt", "agg_yt_monetization_summary"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.agg_yt_monetization_summary", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "agg_yt_monetization_summary", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "agg_yt_monetization_summary", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.youtube_annotations": {"fqn": ["analytics_engineering_marts", "fds_yt", "youtube_annotations"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.youtube_annotations", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "youtube_annotations", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "youtube_annotations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_yt.youtube_end_screens": {"fqn": ["analytics_engineering_marts", "fds_yt", "youtube_end_screens"], "database": "entdwdb", "schema": "fds_yt", "unique_id": "source.analytics_engineering_marts.fds_yt.youtube_end_screens", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "youtube_end_screens", "source_name": "fds_yt", "source_description": "", "loader": "", "identifier": "youtube_end_screens", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.public.yt_amg_content_groups": {"fqn": ["analytics_engineering_marts", "public", "yt_amg_content_groups"], "database": "entdwdb", "schema": "public", "unique_id": "source.analytics_engineering_marts.public.yt_amg_content_groups", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "yt_amg_content_groups", "source_name": "public", "source_description": "", "loader": "", "identifier": "yt_amg_content_groups", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_daily_subscription"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_daily_subscription", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_daily_subscription", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_nplus_daily_forcast_output"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_nplus_daily_forcast_output", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_nplus_daily_forcast_output", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status": {"fqn": ["analytics_engineering_marts", "fds_nplus", "fact_daily_subscription_order_status"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_daily_subscription_order_status", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "fact_daily_subscription_order_status", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.vw_fact_daily_dotcom_viewership": {"fqn": ["analytics_engineering_marts", "fds_nplus", "vw_fact_daily_dotcom_viewership"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.vw_fact_daily_dotcom_viewership", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "vw_fact_daily_dotcom_viewership", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "vw_fact_daily_dotcom_viewership", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_total_subscription"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_total_subscription", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_total_subscription", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist_prod": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_kpi_hist_prod"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist_prod", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_kpi_hist_prod", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_kpi_hist_prod", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_status_plus": {"fqn": ["analytics_engineering_marts", "fds_nplus", "fact_daily_subscription_status_plus"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_status_plus", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_daily_subscription_status_plus", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "fact_daily_subscription_status_plus", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_nplus_monthly_forcast_output"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_nplus_monthly_forcast_output", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_nplus_monthly_forcast_output", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_kpi_hist"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_kpi_hist", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_kpi_hist", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_monthly_program_type_viewership"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_monthly_program_type_viewership", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_monthly_program_type_viewership", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership": {"fqn": ["analytics_engineering_marts", "fds_nplus", "aggr_monthly_subs_cohort_viewership"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "aggr_monthly_subs_cohort_viewership", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "aggr_monthly_subs_cohort_viewership", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_nplus.fact_daily_content_viewership": {"fqn": ["analytics_engineering_marts", "fds_nplus", "fact_daily_content_viewership"], "database": "entdwdb", "schema": "fds_nplus", "unique_id": "source.analytics_engineering_marts.fds_nplus.fact_daily_content_viewership", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_daily_content_viewership", "source_name": "fds_nplus", "source_description": "", "loader": "", "identifier": "fact_daily_content_viewership", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.dwh_read_write.raw_da_weekly_ppv_hourly_comps": {"fqn": ["analytics_engineering_marts", "dwh_read_write", "raw_da_weekly_ppv_hourly_comps"], "database": "entdwdb", "schema": "dwh_read_write", "unique_id": "source.analytics_engineering_marts.dwh_read_write.raw_da_weekly_ppv_hourly_comps", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "raw_da_weekly_ppv_hourly_comps", "source_name": "dwh_read_write", "source_description": "", "loader": "", "identifier": "raw_da_weekly_ppv_hourly_comps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_parent_video": {"fqn": ["analytics_engineering_marts", "fds_fbk", "fact_fb_consumption_parent_video"], "database": "entdwdb", "schema": "fds_fbk", "unique_id": "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_parent_video", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_fb_consumption_parent_video", "source_name": "fds_fbk", "source_description": "", "loader": "", "identifier": "fact_fb_consumption_parent_video", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_post": {"fqn": ["analytics_engineering_marts", "fds_fbk", "fact_fb_consumption_post"], "database": "entdwdb", "schema": "fds_fbk", "unique_id": "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_post", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_fb_consumption_post", "source_name": "fds_fbk", "source_description": "", "loader": "", "identifier": "fact_fb_consumption_post", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_fbk.fact_fb_smfollowership_audience_bycountry": {"fqn": ["analytics_engineering_marts", "fds_fbk", "fact_fb_smfollowership_audience_bycountry"], "database": "entdwdb", "schema": "fds_fbk", "unique_id": "source.analytics_engineering_marts.fds_fbk.fact_fb_smfollowership_audience_bycountry", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_fb_smfollowership_audience_bycountry", "source_name": "fds_fbk", "source_description": "", "loader": "", "identifier": "fact_fb_smfollowership_audience_bycountry", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post": {"fqn": ["analytics_engineering_marts", "fds_tw", "fact_tw_consumption_post"], "database": "entdwdb", "schema": "fds_tw", "unique_id": "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_tw_consumption_post", "source_name": "fds_tw", "source_description": "", "loader": "", "identifier": "fact_tw_consumption_post", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_post": {"fqn": ["analytics_engineering_marts", "fds_igm", "fact_ig_consumption_post"], "database": "entdwdb", "schema": "fds_igm", "unique_id": "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_post", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_ig_consumption_post", "source_name": "fds_igm", "source_description": "", "loader": "", "identifier": "fact_ig_consumption_post", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_story": {"fqn": ["analytics_engineering_marts", "fds_igm", "fact_ig_consumption_story"], "database": "entdwdb", "schema": "fds_igm", "unique_id": "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_story", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_ig_consumption_story", "source_name": "fds_igm", "source_description": "", "loader": "", "identifier": "fact_ig_consumption_story", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_igm.fact_ig_smfollowership_audience_bycountry": {"fqn": ["analytics_engineering_marts", "fds_igm", "fact_ig_smfollowership_audience_bycountry"], "database": "entdwdb", "schema": "fds_igm", "unique_id": "source.analytics_engineering_marts.fds_igm.fact_ig_smfollowership_audience_bycountry", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_ig_smfollowership_audience_bycountry", "source_name": "fds_igm", "source_description": "", "loader": "", "identifier": "fact_ig_smfollowership_audience_bycountry", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story": {"fqn": ["analytics_engineering_marts", "fds_sc", "fact_sc_consumption_story"], "database": "entdwdb", "schema": "fds_sc", "unique_id": "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_sc_consumption_story", "source_name": "fds_sc", "source_description": "", "loader": "", "identifier": "fact_sc_consumption_story", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame": {"fqn": ["analytics_engineering_marts", "fds_sc", "fact_scd_consumption_frame"], "database": "entdwdb", "schema": "fds_sc", "unique_id": "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_scd_consumption_frame", "source_name": "fds_sc", "source_description": "", "loader": "", "identifier": "fact_scd_consumption_frame", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_nplus.drvd_intra_hour_quarter_hour_adds": {"fqn": ["analytics_engineering_marts", "udl_nplus", "drvd_intra_hour_quarter_hour_adds"], "database": "entdwdb", "schema": "udl_nplus", "unique_id": "source.analytics_engineering_marts.udl_nplus.drvd_intra_hour_quarter_hour_adds", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "drvd_intra_hour_quarter_hour_adds", "source_name": "udl_nplus", "source_description": "", "loader": "", "identifier": "drvd_intra_hour_quarter_hour_adds", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_nplus.raw_da_weekly_ppv_hourly_comps": {"fqn": ["analytics_engineering_marts", "udl_nplus", "raw_da_weekly_ppv_hourly_comps"], "database": "entdwdb", "schema": "udl_nplus", "unique_id": "source.analytics_engineering_marts.udl_nplus.raw_da_weekly_ppv_hourly_comps", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "raw_da_weekly_ppv_hourly_comps", "source_name": "udl_nplus", "source_description": "", "loader": "", "identifier": "raw_da_weekly_ppv_hourly_comps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_nplus.raw_lite_log": {"fqn": ["analytics_engineering_marts", "udl_nplus", "raw_lite_log"], "database": "entdwdb", "schema": "udl_nplus", "unique_id": "source.analytics_engineering_marts.udl_nplus.raw_lite_log", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "raw_lite_log", "source_name": "udl_nplus", "source_description": "", "loader": "", "identifier": "raw_lite_log", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_nl.nielsen_finance_yearly_calendar": {"fqn": ["analytics_engineering_marts", "udl_nl", "nielsen_finance_yearly_calendar"], "database": "entdwdb", "schema": "udl_nl", "unique_id": "source.analytics_engineering_marts.udl_nl.nielsen_finance_yearly_calendar", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "nielsen_finance_yearly_calendar", "source_name": "udl_nl", "source_description": "", "loader": "", "identifier": "nielsen_finance_yearly_calendar", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_cp.agg_cp_weekly_consumption_by_platform": {"fqn": ["analytics_engineering_marts", "fds_cp", "agg_cp_weekly_consumption_by_platform"], "database": "entdwdb", "schema": "fds_cp", "unique_id": "source.analytics_engineering_marts.fds_cp.agg_cp_weekly_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "agg_cp_weekly_consumption_by_platform", "source_name": "fds_cp", "source_description": "", "loader": "", "identifier": "agg_cp_weekly_consumption_by_platform", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data": {"fqn": ["analytics_engineering_marts", "fds_kntr", "fact_kntr_wwe_telecast_data"], "database": "entdwdb", "schema": "fds_kntr", "unique_id": "source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_kntr_wwe_telecast_data", "source_name": "fds_kntr", "source_description": "", "loader": "", "identifier": "fact_kntr_wwe_telecast_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_kntr.fact_kntr_annual_profile": {"fqn": ["analytics_engineering_marts", "fds_kntr", "fact_kntr_annual_profile"], "database": "entdwdb", "schema": "fds_kntr", "unique_id": "source.analytics_engineering_marts.fds_kntr.fact_kntr_annual_profile", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_kntr_annual_profile", "source_name": "fds_kntr", "source_description": "", "loader": "", "identifier": "fact_kntr_annual_profile", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag": {"fqn": ["analytics_engineering_marts", "fds_kntr", "kantar_static_country_region_tag"], "database": "entdwdb", "schema": "fds_kntr", "unique_id": "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "kantar_static_country_region_tag", "source_name": "fds_kntr", "source_description": "", "loader": "", "identifier": "kantar_static_country_region_tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_emm.emm_weekly_log_reference": {"fqn": ["analytics_engineering_marts", "udl_emm", "emm_weekly_log_reference"], "database": "entdwdb", "schema": "udl_emm", "unique_id": "source.analytics_engineering_marts.udl_emm.emm_weekly_log_reference", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "emm_weekly_log_reference", "source_name": "udl_emm", "source_description": "", "loader": "", "identifier": "emm_weekly_log_reference", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption": {"fqn": ["analytics_engineering_marts", "udl_tkt", "tiktok_weekly_country_consumption"], "database": "entdwdb", "schema": "udl_tkt", "unique_id": "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "tiktok_weekly_country_consumption", "source_name": "udl_tkt", "source_description": "", "loader": "", "identifier": "tiktok_weekly_country_consumption", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_cpg.dim_cpg_item": {"fqn": ["analytics_engineering_marts", "fds_cpg", "dim_cpg_item"], "database": "entdwdb", "schema": "fds_cpg", "unique_id": "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_cpg_item", "source_name": "fds_cpg", "source_description": "", "loader": "", "identifier": "dim_cpg_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item": {"fqn": ["analytics_engineering_marts", "fds_cpg", "dim_cpg_kit_item"], "database": "entdwdb", "schema": "fds_cpg", "unique_id": "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_cpg_kit_item", "source_name": "fds_cpg", "source_description": "", "loader": "", "identifier": "dim_cpg_kit_item", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method": {"fqn": ["analytics_engineering_marts", "fds_cpg", "dim_cpg_order_method"], "database": "entdwdb", "schema": "fds_cpg", "unique_id": "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "dim_cpg_order_method", "source_name": "fds_cpg", "source_description": "", "loader": "", "identifier": "dim_cpg_order_method", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail": {"fqn": ["analytics_engineering_marts", "fds_cpg", "fact_cpg_sales_detail"], "database": "entdwdb", "schema": "fds_cpg", "unique_id": "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_cpg_sales_detail", "source_name": "fds_cpg", "source_description": "", "loader": "", "identifier": "fact_cpg_sales_detail", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component": {"fqn": ["analytics_engineering_marts", "fds_cpg", "fact_cpg_sales_detail_kit_component"], "database": "entdwdb", "schema": "fds_cpg", "unique_id": "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_cpg_sales_detail_kit_component", "source_name": "fds_cpg", "source_description": "", "loader": "", "identifier": "fact_cpg_sales_detail_kit_component", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header": {"fqn": ["analytics_engineering_marts", "fds_cpg", "fact_cpg_sales_header"], "database": "entdwdb", "schema": "fds_cpg", "unique_id": "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "fact_cpg_sales_header", "source_name": "fds_cpg", "source_description": "", "loader": "", "identifier": "fact_cpg_sales_header", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.dt_stage.prestg_cpg_currency_exchange_rate": {"fqn": ["analytics_engineering_marts", "dt_stage", "prestg_cpg_currency_exchange_rate"], "database": "entdwdb", "schema": "dt_stage", "unique_id": "source.analytics_engineering_marts.dt_stage.prestg_cpg_currency_exchange_rate", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "prestg_cpg_currency_exchange_rate", "source_name": "dt_stage", "source_description": "", "loader": "", "identifier": "prestg_cpg_currency_exchange_rate", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.fds_le.brdg_live_event_venue": {"fqn": ["analytics_engineering_marts", "fds_le", "brdg_live_event_venue"], "database": "entdwdb", "schema": "fds_le", "unique_id": "source.analytics_engineering_marts.fds_le.brdg_live_event_venue", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "brdg_live_event_venue", "source_name": "fds_le", "source_description": "", "loader": "", "identifier": "brdg_live_event_venue", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_cpg.jde_daily_user_defined_codes_f0005": {"fqn": ["analytics_engineering_marts", "udl_cpg", "jde_daily_user_defined_codes_f0005"], "database": "entdwdb", "schema": "udl_cpg", "unique_id": "source.analytics_engineering_marts.udl_cpg.jde_daily_user_defined_codes_f0005", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "jde_daily_user_defined_codes_f0005", "source_name": "udl_cpg", "source_description": "", "loader": "", "identifier": "jde_daily_user_defined_codes_f0005", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_cpg.jde_daily_business_unit_master_f0006": {"fqn": ["analytics_engineering_marts", "udl_cpg", "jde_daily_business_unit_master_f0006"], "database": "entdwdb", "schema": "udl_cpg", "unique_id": "source.analytics_engineering_marts.udl_cpg.jde_daily_business_unit_master_f0006", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "jde_daily_business_unit_master_f0006", "source_name": "udl_cpg", "source_description": "", "loader": "", "identifier": "jde_daily_business_unit_master_f0006", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_cpg.jde_daily_item_master_f4101": {"fqn": ["analytics_engineering_marts", "udl_cpg", "jde_daily_item_master_f4101"], "database": "entdwdb", "schema": "udl_cpg", "unique_id": "source.analytics_engineering_marts.udl_cpg.jde_daily_item_master_f4101", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "jde_daily_item_master_f4101", "source_name": "udl_cpg", "source_description": "", "loader": "", "identifier": "jde_daily_item_master_f4101", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_cpg.jde_daily_item_cost_f4105": {"fqn": ["analytics_engineering_marts", "udl_cpg", "jde_daily_item_cost_f4105"], "database": "entdwdb", "schema": "udl_cpg", "unique_id": "source.analytics_engineering_marts.udl_cpg.jde_daily_item_cost_f4105", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "jde_daily_item_cost_f4105", "source_name": "udl_cpg", "source_description": "", "loader": "", "identifier": "jde_daily_item_cost_f4105", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_cpg.jde_daily_sales_order_history_f42119": {"fqn": ["analytics_engineering_marts", "udl_cpg", "jde_daily_sales_order_history_f42119"], "database": "entdwdb", "schema": "udl_cpg", "unique_id": "source.analytics_engineering_marts.udl_cpg.jde_daily_sales_order_history_f42119", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "jde_daily_sales_order_history_f42119", "source_name": "udl_cpg", "source_description": "", "loader": "", "identifier": "jde_daily_sales_order_history_f42119", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_header_f55m001": {"fqn": ["analytics_engineering_marts", "udl_cpg", "jde_daily_merch_settlement_header_f55m001"], "database": "entdwdb", "schema": "udl_cpg", "unique_id": "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_header_f55m001", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "jde_daily_merch_settlement_header_f55m001", "source_name": "udl_cpg", "source_description": "", "loader": "", "identifier": "jde_daily_merch_settlement_header_f55m001", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_detail_f55m002": {"fqn": ["analytics_engineering_marts", "udl_cpg", "jde_daily_merch_settlement_detail_f55m002"], "database": "entdwdb", "schema": "udl_cpg", "unique_id": "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_detail_f55m002", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "jde_daily_merch_settlement_detail_f55m002", "source_name": "udl_cpg", "source_description": "", "loader": "", "identifier": "jde_daily_merch_settlement_detail_f55m002", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.analytics_engineering_marts.hive_udl_pii.restricted_jde_daily_address_by_date_f0116": {"fqn": ["analytics_engineering_marts", "hive_udl_pii", "restricted_jde_daily_address_by_date_f0116"], "database": "entdwdb", "schema": "hive_udl_pii", "unique_id": "source.analytics_engineering_marts.hive_udl_pii.restricted_jde_daily_address_by_date_f0116", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "name": "restricted_jde_daily_address_by_date_f0116", "source_name": "hive_udl_pii", "source_description": "", "loader": "", "identifier": "restricted_jde_daily_address_by_date_f0116", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}}, "macros": {"macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set status, res = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, status=status, agate_table=res) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, status=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_result(name, status=status, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.adapter_macro": {"unique_id": "macro.dbt.adapter_macro", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "adapter_macro", "macro_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter_macro('create_schema', relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter_macro('drop_schema', relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.adapter_macro"]}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter_macro('alter_column_comment', relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter_macro('alter_relation_comment', relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter_macro('persist_docs', relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.adapter_macro"]}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter_macro('list_relations_without_caching', schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.adapter_macro"]}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter_macro('create_csv_table', model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter_macro('load_csv_rows', model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', status='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set full_refresh_mode = flags.FULL_REFRESH %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter_macro(\"dbt.handle_existing_table\", full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(flags.FULL_REFRESH, old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter_macro('get_insert_overwrite_merge_sql', target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n    \n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    select * from insertions\n    union all\n    select * from updates\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter_macro('snapshot_merge_sql', target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter_macro('snapshot_string_as_time', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['injected_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not flags.FULL_REFRESH) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter_macro('generate_database_name', custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.adapter_macro"]}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n  getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__make_temp_relation": {"unique_id": "macro.dbt_redshift.redshift__make_temp_relation", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__make_temp_relation", "macro_sql": "{% macro redshift__make_temp_relation(base_relation, suffix) %}\n    {% do return(postgres__make_temp_relation(base_relation, suffix)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where upper(sch.nspname) = upper('{{ schema }}')\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size / 1000000.0 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text = 'update'::text\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}, "macro.analytics_engineering_marts.generate_schema_name": {"unique_id": "macro.analytics_engineering_marts.generate_schema_name", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "macros/get_custom_schema.sql", "original_file_path": "macros/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n        {{ default_schema }}\r\n    {%- else -%}\r\n        {{ custom_schema_name | trim }}\r\n    {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "patch_path": null, "arguments": []}}, "docs": {"analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings": {"unique_id": "analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_nl_daily_wwe_live_commercial_ratings", "block_contents": "## Implementation Detail\n* Date        : 06/12/2020\n* Version     : 1.0\n* TableName   : rpt_nl_daily_wwe_live_commercial_ratings\n* Schema\t  : fds_nl\n* Contributor : Rahul Chandran\n* Description : WWE Live Commercial Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Commercial Viewership Ratings table on daily-basis\n\n## Schedule Details\n* Frequency : Weekly ; 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_commercial_viewership_ratings_abac ; 12132 (Tue) \n\n## Maintenance Log\n* Date : 06/12/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings": {"unique_id": "analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_nl_daily_wwe_live_quarterhour_ratings", "block_contents": "## Implementation Detail\n*   Date        : 06/12/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_wwe_live_quarterhour_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Sudhakar Andugula\n*   Description : WWE Live Quarter Hour Ratings Daily Report table consist of rating details of all WWE Live - RAW, SD, NXT Programs referencing from Quarter Hour Viewership Ratings Table on daily-basis \n\n## Schedule Details\n* Frequency : Daily ; 02:00 A.M EST (Wed-Mon) & 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_quarterhour_viewership_ratings_daily_slot2_abac ; 12145 (Wed-Mon) & t_di_nielsen_fact_nl_quarterhour_viewership_ratings_abac ; 12122 (Tue)\n\n## Maintenance Log\n* Date : 06/12/2020 ; Developer: Sudhakar Andugula ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings": {"unique_id": "analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_nl_daily_wwe_program_ratings", "block_contents": "## Implementation Detail\n*   Date        : 07/21/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_wwe_program_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Ratings Daily Report View consist of rating details of all WWE Programs referencing from Program Viewership Daily fact table on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 02:00 A.M EST (Wed-Mon) & 04:00 A.M EST (Tue)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_program_viewership_ratings_daily_slot2_abac ; 12144 (Wed-Mon) & t_di_nielsen_fact_nl_program_viewership_ratings_abac ; 12121 (Tue)\n\n## Maintenance Log\n* Date : 07/21/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.rpt_nl_weekly_channel_switch": {"unique_id": "analytics_engineering_marts.rpt_nl_weekly_channel_switch", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_nl_weekly_channel_switch", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* TableName   : rpt_nl_weekly_channel_switch\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE and AEW Programs \n\n## Schedule Details\n* Frequency : Daily ; 12:00 A.M EST (Sun-Mon)\n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_weekly_live_switching_behavior_destination_dist_abac ; 12128,  t_di_nielsen_fact_nl_minxmin_ratings_aew_abac ; 12133, t_di_nielsen_fact_nl_minxmin_ratings_nxt_abac ; 12135, t_di_nielsen_fact_nl_minxmin_ratings_raw_abac ; 12136 and t_di_nielsen_fact_nl_minxmin_ratings_smackdown_abac ; 12137 (Sun-Mon)\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n* Date : 08/28/2020 ; Developer: Hima Dasan ; Change: Enhancement to remove commercial break minutes and starting and ending 5 minutes from ranking."}, "analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch": {"unique_id": "analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_nl_weekly_channel_switch", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* TableName   : vw_rpt_nl_weekly_channel_switch\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : vw_rpt_nl_weekly_channel_switch view consists of absolute stay ,absolute switch and ranking based on switch for WWE, AEW and other wrestling programs (Weekly)\n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data": {"unique_id": "analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_nl_monthly_hulu_wwe_vh_data", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_nl_monthly_hulu_wwe_vh_data\n* Schema\t  : fds_nl\n* Contributor : Hima Dasan\n* Description : vw_aggr_nl_monthly_hulu_wwe_vh_data view consist of viewing hours of WWE Programs on monthly-basis in Hulu. \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings": {"unique_id": "analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_nl_monthly_timeperiod_ratings", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_nl_monthly_timeperiod_ratings\n* Schema\t  : fds_nl\n* Contributor : Remya K Nair\n* Description :vw_aggr_nl_monthly_timeperiod_ratings View consist of rating details of all channels and programs to be rolled up from Timeperiod Viewership Ratings table on monthly-basis. \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings": {"unique_id": "analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_nl_monthly_wwe_live_program_ratings", "block_contents": "## Implementation Detail\n* Date        : 07/30/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_nl_monthly_wwe_live_program_ratings\n* Schema\t  : fds_nl\n* Contributor : Remya K Nair\n* Description :WWE Live Program Rating Monthly Aggregate View consist of rating details of all WWE Live - RAW, SD, NXT Programs to be rolled up from WWE Program Ratings Daily Report Table on monthly-basis\n\n\n## Maintenance Log\n* Date : 07/30/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart": {"unique_id": "analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_nl_weekly_overlap_chart", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_nl_weekly_overlap_chart\n* Schema\t  : fds_nl\n* Contributor : Remya K Nair\n* Description :vw_rpt_nl_weekly_overlap_chart view consists of Derived Columns for Overlap data for  WWE, AEW and other wrestling programs \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.rpt_nl_weekly_overlap_program_4_way_oob": {"unique_id": "analytics_engineering_marts.rpt_nl_weekly_overlap_program_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_nl_weekly_overlap_program_4_way_oob", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : rpt_nl_weekly_overlap_program_4_way_oob\n* Schema\t  : fds_nl\n* Contributor : Remya K Nair\n* Description :vw_rpt_nl_weekly_overlap_program_4_way_oob view consists of  Schedule (Both Staright Neilsen Run and Derived) details  and calculations for Overlap data for  WWE, AEW and other wrestling programs \n\n## Schedule Details\n* Frequency : Daily ; 10:00 P.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_nielsen_fact_nl_wkly_overlap_4_way_oob_abac ; 12126  \n\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_rpt_nl_weekly_overlap_program_4_way_oob": {"unique_id": "analytics_engineering_marts.vw_rpt_nl_weekly_overlap_program_4_way_oob", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_nl_weekly_overlap_program_4_way_oob", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_nl_weekly_overlap_program_4_way_oob\n* Schema\t  : fds_nl\n* Contributor : Remya K Nair\n* Description : vw_rpt_nl_weekly_overlap_program_4_way_oob view consists of  Schedule (Both Staright Neilsen Run and Derived) details  and calculations for Overlap data for  WWE, AEW and other wrestling programs\n \n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking": {"unique_id": "analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_nplus_ppv_week_adds_tracking", "block_contents": "## Implementation Detail\n* Date        : 06/19/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_nplus_ppv_week_adds_tracking\n* Schema\t  : fds_nplus\n* Contributor : Remya K Nair\n* Description : vw_aggr_nplus_ppv_week_adds_tracking view consists of  PPV event details with count of paid/trail/promo subscription add and forecast suscription count\n## Maintenance Log\n* Date : 06/19/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Network 2.0 Project."}, "analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis": {"unique_id": "analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_network_daily_subscription_kpis", "block_contents": "## Implementation Detail\n* Date        : 06/29/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_network_daily_subscription_kpis\n* Schema\t  : fds_nl\n* Contributor : Lakshman Murugeshan\n* Description : vw_rpt_network_daily_subscription_kpis view consists of network daily kpi information\n## Maintenance Log\n* Date : 06/29/2020 ; Developer: Lakshman Murugeshan DBT: Sudhakar ; Change: Initial Version as a part of network dashboards."}, "analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast": {"unique_id": "analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_network_ppv_actuals_estimates_forecast", "block_contents": "## Implementation Detail\n* Date        : 06/21/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_network_ppv_actuals_estimates_forecast\n* Schema\t  : fds_nl\n* Contributor : Sudhakar Andugula\n* Description : vw_rpt_network_ppv_actuals_estimates_forecast view consists of network daily kpi information\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Sudhakar Andugula DBT: Sudhakar ; Change: Initial Version as a part of network dashboards."}, "analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform": {"unique_id": "analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "aggr_cp_weekly_consumption_by_platform", "block_contents": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 2.0\n* ViewName    : aggr_cp_weekly_consumption_by_platform\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : aggr_cp_weekly_consumption_by_platform This aggregate table stores the crossplatform consumption metrics - total views and total minutes watched aggregated for each week for platforms- Youtube, facebook, Twitter, Instagram, Snapchat and dotcom/App.\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards.\n* Date : 08/24/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: As a part weekly cross platform consumption enhancements to add Youtube-UGC, \tWWE Network and TikTok platform"}, "analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform": {"unique_id": "analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_cp_weekly_consumption_by_platform", "block_contents": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_cp_weekly_consumption_by_platform\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : vw_aggr_cp_weekly_consumption_by_platform This aggregate table stores the crossplatform consumption metrics - total views and total minutes watched aggregated for each week for platforms- Youtube, facebook, Twitter, Instagram, Snapchat and dotcom/App.\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards."}, "analytics_engineering_marts.vw_rpt_weekly_network_subscriber_kpis_ir": {"unique_id": "analytics_engineering_marts.vw_rpt_weekly_network_subscriber_kpis_ir", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_weekly_network_subscriber_kpis_ir", "block_contents": "## Implementation Detail\n* Date        : 07/09/2020\n* Version     : 1.0\n* ViewName    : vw_rpt_weekly_network_subscriber_kpis_ir\n* Schema\t  : fds_cp\n* Contributor : Sandeep Battula\n* Description : vw_rpt_weekly_network_subscriber_kpis_ir Weekly Network Subscriber KPIs for IR Team\n## Maintenance Log\n* Date : 06/21/2020 ; Developer: Code: Sandeep Battula, DBT: Sudhakar ; Change: Initial Version as a part of network dashboards."}, "analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track": {"unique_id": "analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_daily_network_adds_and_loss_track", "block_contents": "## Implementation Detail\n* Date        : 07/15/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_daily_network_adds_and_loss_track\n* Schema\t  : fds_nplus\n* Contributor : Sudhakar Andugula\n* Description : vw_aggr_daily_network_adds_and_loss_track view cosists of details about total subscription losses of orders\n## Maintenance Log\n* Date : 07/15/2020 ; Developer: Sudhakar Andugula ; Change: Initial Version as a part of Network 2.0 Project."}, "analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_monthly_wwe_program_rating_schedule", "block_contents": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_monthly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_monthly_wwe_program_rating_schedule view  consist of  Monthly RAW,SD,NXT and PPVs ratings for Live & Nth runs on monthly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "block_contents": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_quarterly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_quarterly_wwe_program_rating_schedule view  consist of  quarterly RAW,SD,NXT and PPVs ratings for Live & Nth runs on quarterly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating_schedule": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating_schedule", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_yearly_wwe_program_rating_schedule", "block_contents": "## Implementation Detail\n* Date        : 07/26/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_yearly_wwe_program_rating_schedule\n* Schema\t  : fds_kntr\n* Contributor : Remya K Nair\n* Description : vw_aggr_kntr_yearly_wwe_program_rating_schedule view  consist of  yearly RAW,SD,NXT and PPVs ratings for Live & Nth runs on yearly-basis\n## Maintenance Log\n* Date : 07/26/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_weekly_wwe_program_rating", "block_contents": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_weekly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating Weekly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on weekly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_monthly_wwe_program_rating", "block_contents": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_monthly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating monthly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on monthly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_quarterly_wwe_program_rating", "block_contents": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_quarterly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating quarterly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on quaterly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_yearly_wwe_program_rating", "block_contents": "## Implementation Detail\n* Date        : 07/17/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_kntr_yearly_wwe_program_rating\n* Schema      : fds_kntr\n* Contributor : Hima Dasan\n* Description : WWE  rogram Rating yearly  Aggregate View consist of rating details of all WWE  Programs to be rolled up from wwe telecast data on yearly-basis\n## Maintenance Log\n* Date : 07/17/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings": {"unique_id": "analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "aggr_kntr_weekly_competitive_program_ratings", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   TableName   : aggr_kntr_weekly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Weekly Aggregate Table consist of rating details of competitive programs referencing from Annual Profile Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_weekly_competitive_program_ratings", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_weekly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Weekly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_monthly_competitive_program_ratings", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_monthly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Monthly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on monthly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_quarterly_competitive_program_ratings", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_quarterly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Quarterly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on quarterly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_yearly_competitive_program_ratings", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_yearly_competitive_program_ratings\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : Competitive Program Ratings Yearly Aggregate View consist of rating details of competitive programs referencing from Competitive Weekly Program Ratings Table on yearly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.rpt_kntr_schedule_vh_data": {"unique_id": "analytics_engineering_marts.rpt_kntr_schedule_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_kntr_schedule_vh_data", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   TableName   : rpt_kntr_schedule_vh_data\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Schedule Viewing Hours Report table consist of rating and other details of WWE program schedule referencing from WWE Telecast Data table on daily-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data": {"unique_id": "analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_kntr_schedule_vh_data", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_kntr_schedule_vh_data\n*   Schema\t    : fds_kntr\n*   Contributor : Rahul Chandran\n*   Description : WWE Program Schedule Viewing Hours Report View consist of rating and other details of WWE program schedule referencing from Schedule VH Data Report Table on daily-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_schedule_wca_data", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_schedule_wca_data\n*   Schema\t    : fds_kntr\n*   Contributor : Hima Dasan\n*   Description : WWE Program Schedule Weekly Cumulative Audience Aggregate View consist of rating and other details of WWE program schedule referencing from Schedule VH Data Report Table on weekly-basis\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh": {"unique_id": "analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_kntr_monthly_country_vh", "block_contents": "## Implementation Detail\n*   Date        : 07/24/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_kntr_monthly_country_vh\n*   Schema\t    : fds_kntr\n*   Contributor : Hima Dasan\n*   Description : View calculates actual viewing hour on monthly basis and calculates estimate value for last month for all WWE programs\n\n## Maintenance Log\n* Date : 07/24/2020 ; Developer: Hima Dasan ; Change: Initial Version as a part of Phase 4b Project.\n* Date : 09/22/2020 ; Developer: Rahul Chandran ; Change: Enhancement has done as requested as per Jira Request: PSTA-1153."}, "analytics_engineering_marts.aggr_monthly_network_kpis_vkm": {"unique_id": "analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "aggr_monthly_network_kpis_vkm", "block_contents": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_monthly_network_kpis_vkm\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : monthly VKM network kpis\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT : Sudhakar Change: Initial Version"}, "analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm": {"unique_id": "analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_monthly_network_kpis_vkm", "block_contents": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_monthly_network_kpis_vkm\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : monthly VKM network kpis\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT : Sudhakar Change: Initial Version"}, "analytics_engineering_marts.rpt_network_ppv_liveplusvod": {"unique_id": "analytics_engineering_marts.rpt_network_ppv_liveplusvod", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_network_ppv_liveplusvod", "block_contents": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : rpt_network_ppv_liveplusvod\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : View contains the information related to Live NXT and HOF evenet\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT & Python Automation: Sudhakar; Change: Initial Version"}, "analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod": {"unique_id": "analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_network_ppv_liveplusvod", "block_contents": "## Implementation Detail\n*   Date        : 07/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_network_ppv_liveplusvod\n*   Schema\t: fds_nplus\n*   Contributor : Lakshman Murugeshan\n*   Description : View contains the information related to Live NXT and HOF evenet\n\n## Maintenance Log\n* Date : 07/28/2020 ; Developer: Lakshman Murugeshan ; DBT & Python Automation: Sudhakar; Change: Initial Version"}, "analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform": {"unique_id": "analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_cp_monthly_global_consumption_by_platform", "block_contents": "## Implementation Detail\n*   Date        : 07/14/2020\n*   Version     : 1.0\n*   ViewName    : rpt_cp_monthly_global_consumption_by_platform\n*   Schema\t: fds_cp\n*   Contributor : Sandeep Battula\n*   Description : Monthly Cross Platform Global Content Consumption aggregate table consists of consumption metrics Views and Hours watched with country and \tregion details for all cross platforms. This script inserts last month data for platforms- Youtube, Facebook, WWE.Com and WWE App, Instagram, Snapchat and Twitter from respective source tables on monthly basis (5th of every month). Inaddition to the latest month, metrics are also calculated and inserted for previous month, year-to-date and previous year-to-date. \n\n## Maintenance Log\n* Date : 07/14/2020 ; Developer: Sandeep Battula ; DBT & Python Automation: Sudhakar; Change: Initial Version"}, "analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform": {"unique_id": "analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_cp_monthly_global_consumption_by_platform", "block_contents": "## Implementation Detail\n*   Date        : 07/14/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_cp_monthly_global_consumption_by_platform\n*   Schema\t: fds_cp\n*   Contributor : Sandeep Battula\n*   Description : Monthly Cross Platform Global Content Consumption aggregate table consists of consumption metrics Views and Hours watched with country and \tregion details for all cross platforms. This script inserts last month data for platforms- Youtube, Facebook, WWE.Com and WWE App, Instagram, Snapchat and Twitter from respective source tables on monthly basis (5th of every month). Inaddition to the latest month, metrics are also calculated and inserted for previous month, year-to-date and previous year-to-date. \n\n## Maintenance Log\n* Date : 07/14/2020 ; Developer: Sandeep Battula ; DBT & Python Automation: Sudhakar; Change: Initial Version"}, "analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs": {"unique_id": "analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_nplus_monthly_marketing_subs", "block_contents": "## Implementation Detail\n*   Date        : 08/14/2020\n*   Version     : 1.0\n*   TableName   : vw_rpt_nplus_monthly_marketing_subs\n*   Schema      : fds_nplus\n*   Contributor : Hima Dasan\n*   Description : vw_rpt_nplus_monthly_marketing_subs view consist of Actuals,forecast and Budget for adds and Disconnects For Roku,Apple and mlbam (Monthly)\n\n## Maintenance Log\n* Date : 08/14/2020 ; Developer: Hima Dasan; Change: Initial Version"}, "analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings": {"unique_id": "analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "rpt_nl_daily_minxmin_lite_log_ratings", "block_contents": "## Implementation Detail\n*   Date        : 08/17/2020\n*   Version     : 1.0\n*   TableName   : rpt_nl_daily_minxmin_lite_log_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : Minute By Minture Ratings joining with Lite Log Report table consist of ratings of segments along with its details referencing from Minute By Minute Ratings and Lite Log tables on daily-basis\n\n## Maintenance Log\n* Date : 08/17/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings": {"unique_id": "analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_rpt_nl_daily_minxmin_lite_log_ratings", "block_contents": "## Implementation Detail\n*   Date        : 08/17/2020\n*   Version     : 1.0\n*   ViewName    : vw_rpt_nl_daily_minxmin_lite_log_ratings\n*   Schema\t    : fds_nl\n*   Contributor : Rahul Chandran\n*   Description : Minute By Minture Ratings joining with Lite Log Report View consist of ratings of segments along with its details referencing from Minute By Minute Ratings joining with Lite Log daily table\n\n## Maintenance Log\n* Date : 08/17/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 4b Project."}, "analytics_engineering_marts.aggr_cpg_daily_sales": {"unique_id": "analytics_engineering_marts.aggr_cpg_daily_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "aggr_cpg_daily_sales", "block_contents": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Sales Table consist of Sales details of WWE products on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 08:00 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_cpg_fact_cpg_sales_detail_radial_abac ; 30230,            t_di_cpg_fact_cpg_sales_detail_cb_abac ; 30231, t_di_cpg_fact_cpg_sales_detail_amazon_abac ; 30232, t_di_cpg_fact_cpg_sales_detail_kit_component_radial_abac ; 30233, t_di_cpg_fact_cpg_sales_header_radial_abac ; 30234, t_di_cpg_fact_cpg_sales_header_cb_abac ; 30235 & t_di_cpg_fact_cpg_sales_header_amazon_abac ; 30236\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project."}, "analytics_engineering_marts.vw_aggr_cpg_daily_sales": {"unique_id": "analytics_engineering_marts.vw_aggr_cpg_daily_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_cpg_daily_sales", "block_contents": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Sales Table View of Sales details of WWE products on daily-basis\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project."}, "analytics_engineering_marts.aggr_cpg_daily_kit_sales": {"unique_id": "analytics_engineering_marts.aggr_cpg_daily_kit_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "aggr_cpg_daily_kit_sales", "block_contents": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_kit_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Kit Sales Table consist of Sales details of WWE Kit products on daily-basis\n\n## Schedule Details\n* Frequency : Daily ; 08:00 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_cpg_fact_cpg_sales_detail_radial_abac ; 30230,            t_di_cpg_fact_cpg_sales_detail_cb_abac ; 30231, t_di_cpg_fact_cpg_sales_detail_amazon_abac ; 30232,      t_di_cpg_fact_cpg_sales_header_radial_abac ; 30234, t_di_cpg_fact_cpg_sales_header_cb_abac ; 30235 &     t_di_cpg_fact_cpg_sales_header_amazon_abac ; 30236\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project."}, "analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales": {"unique_id": "analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_cpg_daily_kit_sales", "block_contents": "## Implementation Detail\n*   Date        : 08/28/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_kit_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Kit Sales View consist of Sales details of WWE Kit products on daily-basis\n\n## Maintenance Log\n* Date : 08/28/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project."}, "analytics_engineering_marts.aggr_cpg_daily_venue_sales": {"unique_id": "analytics_engineering_marts.aggr_cpg_daily_venue_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "aggr_cpg_daily_venue_sales", "block_contents": "## Implementation Detail\n*   Date        : 09/23/2020\n*   Version     : 1.0\n*   ViewName    : aggr_cpg_daily_venue_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Venue Sales Table consist of Sales details of WWE products on venue & event - basis\n\n## Schedule Details\n* Frequency : Daily ; 10:30 A.M EST \n* Dependent Jobs (process_name ; process_id) : t_di_5a_le_udl_to_fds_mstr_load_dim_event_le_venue_event_info ; 9301,            t_di_5a_le_udl_to_fds_mstr_load_brdg_live_event_venue ; 9303\n\n## Maintenance Log\n* Date : 09/23/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project."}, "analytics_engineering_marts.vw_aggr_cpg_daily_venue_sales": {"unique_id": "analytics_engineering_marts.vw_aggr_cpg_daily_venue_sales", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_cpg_daily_venue_sales", "block_contents": "## Implementation Detail\n*   Date        : 09/23/2020\n*   Version     : 1.0\n*   ViewName    : vw_aggr_cpg_daily_venue_sales\n*   Schema\t    : fds_cpg\n*   Contributor : Rahul Chandran\n*   Description : Aggregated CPG Daily Venue Sales View consist of Sales details of WWE products on venue & event - basis\n\n## Maintenance Log\n* Date : 09/23/2020 ; Developer: Rahul Chandran ; Change: Initial Version as a part of Phase 5b Project."}, "analytics_engineering_marts.vw_aggr_cp_monthly_social_followership": {"unique_id": "analytics_engineering_marts.vw_aggr_cp_monthly_social_followership", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "table_view_description_maintenance_log.md", "original_file_path": "models/table_view_description_maintenance_log.md", "name": "vw_aggr_cp_monthly_social_followership", "block_contents": "## Implementation Detail\n* Date        : 09/23/2020\n* Version     : 1.0\n* ViewName    : vw_aggr_cp_monthly_social_followership\n* Schema\t  : fds_cp\n* Contributor : Remya K Nair\n* Description : vw_aggr_cp_monthly_social_followership provide Subscribers gains and followers of Facebook, YouTube, Instagram at country level \n## Maintenance Log\n* Date : 09/23/2020 ; Developer: Remya K Nair ; Change: Initial Version as a part of network dashboards."}, "analytics_engineering_marts.__overview__": {"unique_id": "analytics_engineering_marts.__overview__", "package_name": "analytics_engineering_marts", "root_path": "/home/ec2-user/workspace/analytics_engineering_marts", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "# Welcome!\r\n* Welcome to the documentation of resources built-up using DBT by **Analytics Engineering Group of WWE**\r\n\r\n## Navigation\r\n* You can use the Project and Database navigation tabs on the left side of the window to explore the models in our project.\r\n\r\n## Project Tab\r\n* The Project tab mirrors the directory structure of our dbt project. In this tab, you can see all of the models defined in our dbt project, as well as models imported from dbt packages.\r\n\r\n## Database Tab\r\n* The Database tab also exposes your models, but in a format that looks more like a database explorer. This view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are not shown in this interface, as they do not exist in the database.\r\n\r\n## Graph Exploration\r\n* You can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\r\n\r\n* On model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\r\n\r\n* Once expanded, you'll be able to use the --models and --exclude model selection syntax to filter the models in the graph. For more information on model selection, check out the dbt docs.\r\n\r\n* Note that you can also right-click on models to interactively filter and explore the graph.\r\n\r\n## Contact\r\n\r\n* Please reach out to bleow associates in case of any help required with data published here..\r\n\r\n\t* Kwan, Kenneth <Kenneth.Kwan@wwecorp.com> (Onshore)\r\n\t* Shaik, Showkath <Showkath.Shaik@wwecorp.com> (Onshore)\r\n\t* Andugula, Sudhakar <Sudhakar.Andugula@wwecorp.com> (Offshore)\r\n\t* Chandran, Rahul <Rahul.Chandran@wwecorp.com> (Offshore)\r\n\t* Dasan ,  Hima <Hima.Dasan@wwecorp.com> (Offshore)\r\n\t* Remya ,K Nair  <Remya.KNair@wwecorp.com> (Offshore)"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/ec2-user/workspace/venv/local/lib/python3.6/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://slack.getdbt.com/) on Slack for live questions and support."}}, "disabled": [], "generated_at": "2020-09-30T13:42:54.009906Z", "parent_map": {"model.analytics_engineering_marts.aggr_mkt_monthly_paid_media_execution": [], "model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution": ["source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_post", "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_post", "source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings", "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post", "source.analytics_engineering_marts.fds_yt.youtube_annotations", "source.analytics_engineering_marts.fds_yt.youtube_end_screens", "source.analytics_engineering_marts.udl_nplus.raw_lite_log"], "model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings": ["model.analytics_engineering_marts.intm_nl_lite_log_est", "source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings"], "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.fact_nl_commercial_viewership_ratings"], "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.fact_nl_quaterhour_viewership_ratings"], "model.analytics_engineering_marts.rpt_nl_weekly_channel_switch": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "model.analytics_engineering_marts.intermediate_nl_ranking"], "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "source.analytics_engineering_marts.fds_nl.dim_nl_series", "source.analytics_engineering_marts.fds_nl.dim_nl_series", "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings", "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings", "source.analytics_engineering_marts.udl_nl.nielsen_finance_yearly_calendar"], "model.analytics_engineering_marts.rpt_nl_weekly_overlap_derived_4_way_oob": [], "model.analytics_engineering_marts.intermediate_nl_ranking": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail"], "model.analytics_engineering_marts.intm_nl_est_time_diff": ["source.analytics_engineering_marts.udl_emm.emm_weekly_log_reference", "source.analytics_engineering_marts.udl_nplus.raw_lite_log", "source.analytics_engineering_marts.udl_nplus.raw_lite_log"], "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"], "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings": ["source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings"], "model.analytics_engineering_marts.intm_nl_lite_log_est": ["model.analytics_engineering_marts.intm_nl_est_time_diff", "source.analytics_engineering_marts.udl_nplus.raw_lite_log"], "model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail": ["model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num", "model.analytics_engineering_marts.intm_nl_lite_log_est"], "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"], "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"], "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num": ["model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_live_switching_behavior_destination_dist"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_hulu_data"], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_commercial_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_program_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_commercial_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "model.analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch": ["model.analytics_engineering_marts.rpt_nl_weekly_channel_switch"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_fin_wwe_live_program_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "model.analytics_engineering_marts.vw_rpt_nl_daily_wwe_program_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_yearly_fin_wwe_live_program_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_commercial_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_program_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart": ["source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart", "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart"], "model.analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_derived_4_way_oob": ["source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob"], "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_fin_wwe_live_program_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings"], "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network", "source.analytics_engineering_marts.fds_nl.dim_nl_daypart", "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings"], "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi": [], "model.analytics_engineering_marts.aggr_cpg_daily_sales": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.aggr_cpg_daily_venue_sales": [], "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.intm_cpg_sales_others": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.intm_cpg_sales_gratis": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.intm_cpg_kit_sales_regular": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.intm_cpg_sales": ["model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_regular"], "model.analytics_engineering_marts.intm_cpg_kit_sales": ["model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular"], "model.analytics_engineering_marts.intm_cpg_sales_regular": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.intm_cpg_kit_sales_free": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.intm_cpg_sales_free": ["source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header", "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header"], "model.analytics_engineering_marts.vw_aggr_cpg_daily_venue_sales": ["model.analytics_engineering_marts.aggr_cpg_daily_venue_sales"], "model.analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales"], "model.analytics_engineering_marts.vw_aggr_cpg_daily_sales": ["model.analytics_engineering_marts.aggr_cpg_daily_sales"], "model.analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast": ["model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast"], "model.analytics_engineering_marts.vw_rpt_weekly_network_subscriber_kpis_ir": [], "model.analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm"], "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs": ["source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription"], "model.analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis": ["source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription"], "model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.cdm.dim_event", "source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output"], "model.analytics_engineering_marts.vw_aggr_monthly_network_perf_renewal_payment_track": ["source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status"], "model.analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod": ["model.analytics_engineering_marts.rpt_network_ppv_liveplusvod"], "model.analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track": ["source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_status_plus"], "model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast": [], "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm": ["source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription", "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription"], "model.analytics_engineering_marts.rpt_ppv_final_table": [], "model.analytics_engineering_marts.rpt_network_ppv_liveplusvod": [], "model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform": [], "model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi": [], "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform": ["source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_parent_video", "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_story", "source.analytics_engineering_marts.fds_nplus.fact_daily_content_viewership", "source.analytics_engineering_marts.fds_nplus.vw_fact_daily_dotcom_viewership", "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story", "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame", "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame", "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post", "source.analytics_engineering_marts.fds_yt.rpt_yt_ugc_engagement_daily", "source.analytics_engineering_marts.fds_yt.rpt_yt_wwe_engagement_daily", "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption", "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption"], "model.analytics_engineering_marts.intm_cp_yt_followers_gain": [], "model.analytics_engineering_marts.intm_cp_fb_followers_gain": [], "model.analytics_engineering_marts.intm_cp_country_population": [], "model.analytics_engineering_marts.intm_cp_ig_followers_gain": [], "model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership": ["model.analytics_engineering_marts.intm_cp_country_population", "model.analytics_engineering_marts.intm_cp_fb_followers_gain", "model.analytics_engineering_marts.intm_cp_ig_followers_gain", "model.analytics_engineering_marts.intm_cp_yt_followers_gain"], "model.analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform": ["model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform"], "model.analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "model.analytics_engineering_marts.vw_rpt_cp_weekly_consolidated_kpi": ["model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi", "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi"], "model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings": ["source.analytics_engineering_marts.cdm.dim_date", "source.analytics_engineering_marts.fds_kntr.fact_kntr_annual_profile"], "model.analytics_engineering_marts.rpt_kntr_schedule_vh_data": ["model.analytics_engineering_marts.intm_kntr_region_vh", "model.analytics_engineering_marts.intm_kntr_schedule_vh_data"], "model.analytics_engineering_marts.intm_kntr_country_channel_vh": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"], "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"], "model.analytics_engineering_marts.intm_kntr_monthly_country_vh": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data", "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag"], "model.analytics_engineering_marts.intm_kntr_schedule_vh_data": ["model.analytics_engineering_marts.intm_kntr_channel_1", "model.analytics_engineering_marts.intm_kntr_germany_high_income", "source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data", "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag"], "model.analytics_engineering_marts.intm_kntr_channel_1": ["model.analytics_engineering_marts.intm_kntr_country_channel_vh", "model.analytics_engineering_marts.intm_kntr_country_vh"], "model.analytics_engineering_marts.intm_kntr_region_vh": ["model.analytics_engineering_marts.intm_kntr_schedule_vh_data"], "model.analytics_engineering_marts.intm_kntr_country_vh": ["model.analytics_engineering_marts.intm_kntr_country_channel_vh", "source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"], "model.analytics_engineering_marts.intm_kntr_wwe_program_rating": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"], "model.analytics_engineering_marts.intm_kntr_germany_high_income": ["source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data"], "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh": ["model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "model.analytics_engineering_marts.intm_kntr_monthly_country_vh"], "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating_schedule": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"], "model.analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"], "model.analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"], "model.analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "model.analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"], "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"], "model.analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating": ["model.analytics_engineering_marts.intm_kntr_wwe_program_rating"], "test.analytics_engineering_marts.monetize_summary_test_cases": [], "test.analytics_engineering_marts.ppv_hourly_test_post_load": [], "test.analytics_engineering_marts.ppv_hourly_test_pre_load": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_src_program_id": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_title": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration": ["model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_month": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_quarter": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_year": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_dim_date_id": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"], "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_broadcast_date": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"], "source.analytics_engineering_marts.fds_nl.fact_nl_quaterhour_viewership_ratings": [], "source.analytics_engineering_marts.fds_nl.fact_nl_commercial_viewership_ratings": [], "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings": [], "source.analytics_engineering_marts.fds_nl.dim_nl_series": [], "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network": [], "source.analytics_engineering_marts.fds_nl.dim_nl_daypart": [], "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings": [], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart": [], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_hulu_data": [], "source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings": [], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_live_switching_behavior_destination_dist": [], "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_channel_switch": [], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_4_way_oob": [], "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob": [], "source.analytics_engineering_marts.cdm.dim_date": [], "source.analytics_engineering_marts.cdm.dim_region_country": [], "source.analytics_engineering_marts.cdm.dim_event": [], "source.analytics_engineering_marts.cdm.dim_country_population": [], "source.analytics_engineering_marts.fds_yt.rpt_yt_wwe_engagement_daily": [], "source.analytics_engineering_marts.fds_yt.rpt_yt_revenue_daily": [], "source.analytics_engineering_marts.fds_yt.youtube_video_metadata_direct": [], "source.analytics_engineering_marts.fds_yt.rpt_yt_demographics_views_daily": [], "source.analytics_engineering_marts.fds_yt.rpt_yt_ugc_engagement_daily": [], "source.analytics_engineering_marts.fds_yt.agg_yt_monetization_summary": [], "source.analytics_engineering_marts.fds_yt.youtube_annotations": [], "source.analytics_engineering_marts.fds_yt.youtube_end_screens": [], "source.analytics_engineering_marts.public.yt_amg_content_groups": [], "source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription": [], "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output": [], "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status": [], "source.analytics_engineering_marts.fds_nplus.vw_fact_daily_dotcom_viewership": [], "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription": [], "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist_prod": [], "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_status_plus": [], "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output": [], "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist": [], "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership": [], "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership": [], "source.analytics_engineering_marts.fds_nplus.fact_daily_content_viewership": [], "source.analytics_engineering_marts.dwh_read_write.raw_da_weekly_ppv_hourly_comps": [], "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_parent_video": [], "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_post": [], "source.analytics_engineering_marts.fds_fbk.fact_fb_smfollowership_audience_bycountry": [], "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post": [], "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_post": [], "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_story": [], "source.analytics_engineering_marts.fds_igm.fact_ig_smfollowership_audience_bycountry": [], "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story": [], "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame": [], "source.analytics_engineering_marts.udl_nplus.drvd_intra_hour_quarter_hour_adds": [], "source.analytics_engineering_marts.udl_nplus.raw_da_weekly_ppv_hourly_comps": [], "source.analytics_engineering_marts.udl_nplus.raw_lite_log": [], "source.analytics_engineering_marts.udl_nl.nielsen_finance_yearly_calendar": [], "source.analytics_engineering_marts.fds_cp.agg_cp_weekly_consumption_by_platform": [], "source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data": [], "source.analytics_engineering_marts.fds_kntr.fact_kntr_annual_profile": [], "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag": [], "source.analytics_engineering_marts.udl_emm.emm_weekly_log_reference": [], "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption": [], "source.analytics_engineering_marts.fds_cpg.dim_cpg_item": [], "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item": [], "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method": [], "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail": [], "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component": [], "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header": [], "source.analytics_engineering_marts.dt_stage.prestg_cpg_currency_exchange_rate": [], "source.analytics_engineering_marts.fds_le.brdg_live_event_venue": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_user_defined_codes_f0005": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_business_unit_master_f0006": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_item_master_f4101": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_item_cost_f4105": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_sales_order_history_f42119": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_header_f55m001": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_detail_f55m002": [], "source.analytics_engineering_marts.hive_udl_pii.restricted_jde_daily_address_by_date_f0116": []}, "child_map": {"model.analytics_engineering_marts.aggr_mkt_monthly_paid_media_execution": [], "model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution": [], "model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings": ["model.analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid", "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_title"], "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings": ["model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_commercial_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_commercial_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_commercial_ratings", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id"], "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings": ["model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id"], "model.analytics_engineering_marts.rpt_nl_weekly_channel_switch": ["model.analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch"], "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings": ["model.analytics_engineering_marts.vw_aggr_nl_monthly_fin_wwe_live_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_fin_wwe_live_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_fin_wwe_live_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_program_ratings", "model.analytics_engineering_marts.vw_rpt_nl_daily_wwe_program_ratings", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id", "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_src_program_id"], "model.analytics_engineering_marts.rpt_nl_weekly_overlap_derived_4_way_oob": [], "model.analytics_engineering_marts.intermediate_nl_ranking": ["model.analytics_engineering_marts.rpt_nl_weekly_channel_switch"], "model.analytics_engineering_marts.intm_nl_est_time_diff": ["model.analytics_engineering_marts.intm_nl_lite_log_est"], "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail"], "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"], "model.analytics_engineering_marts.intm_nl_lite_log_est": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail", "model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail": ["model.analytics_engineering_marts.intermediate_nl_ranking", "model.analytics_engineering_marts.rpt_nl_weekly_channel_switch"], "model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail"], "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num": ["model.analytics_engineering_marts.intermediate_nl_absolute_switch_stay_detail"], "model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num": ["model.analytics_engineering_marts.intermediate_nl_absolute_network_total_num", "model.analytics_engineering_marts.intermediate_nl_absolute_usa_fox_tnt_stay", "model.analytics_engineering_marts.intermediate_nl_set_off_air_absolute_network_num"], "model.analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data": [], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_commercial_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_quarterhour_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_monthly_wwe_live_commercial_ratings": [], "model.analytics_engineering_marts.vw_rpt_nl_weekly_channel_switch": [], "model.analytics_engineering_marts.vw_aggr_nl_monthly_fin_wwe_live_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_quarterhour_ratings": [], "model.analytics_engineering_marts.vw_rpt_nl_daily_wwe_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_yearly_fin_wwe_live_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_commercial_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_wwe_live_program_ratings": [], "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart": [], "model.analytics_engineering_marts.vw_rpt_nl_daily_minxmin_lite_log_ratings": [], "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_derived_4_way_oob": [], "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_quarterly_fin_wwe_live_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_yearly_wwe_live_quarterhour_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings": [], "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings": [], "model.analytics_engineering_marts.rpt_le_weekly_consolidated_kpi": ["model.analytics_engineering_marts.vw_rpt_cp_weekly_consolidated_kpi"], "model.analytics_engineering_marts.aggr_cpg_daily_sales": ["model.analytics_engineering_marts.vw_aggr_cpg_daily_sales"], "model.analytics_engineering_marts.aggr_cpg_daily_venue_sales": ["model.analytics_engineering_marts.vw_aggr_cpg_daily_venue_sales"], "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales": ["model.analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales"], "model.analytics_engineering_marts.intm_cpg_sales_others": ["model.analytics_engineering_marts.intm_cpg_sales"], "model.analytics_engineering_marts.intm_cpg_sales_gratis": ["model.analytics_engineering_marts.intm_cpg_sales"], "model.analytics_engineering_marts.intm_cpg_kit_sales_regular": ["model.analytics_engineering_marts.intm_cpg_kit_sales"], "model.analytics_engineering_marts.intm_cpg_sales": [], "model.analytics_engineering_marts.intm_cpg_kit_sales": [], "model.analytics_engineering_marts.intm_cpg_sales_regular": ["model.analytics_engineering_marts.intm_cpg_sales"], "model.analytics_engineering_marts.intm_cpg_kit_sales_free": ["model.analytics_engineering_marts.intm_cpg_kit_sales"], "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis": ["model.analytics_engineering_marts.intm_cpg_kit_sales"], "model.analytics_engineering_marts.intm_cpg_sales_free": ["model.analytics_engineering_marts.intm_cpg_sales"], "model.analytics_engineering_marts.vw_aggr_cpg_daily_venue_sales": [], "model.analytics_engineering_marts.vw_aggr_cpg_daily_kit_sales": [], "model.analytics_engineering_marts.vw_aggr_cpg_daily_sales": [], "model.analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast": [], "model.analytics_engineering_marts.vw_rpt_weekly_network_subscriber_kpis_ir": [], "model.analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm": [], "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs": [], "model.analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis": [], "model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking": [], "model.analytics_engineering_marts.vw_aggr_monthly_network_perf_renewal_payment_track": [], "model.analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod": [], "model.analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track": [], "model.analytics_engineering_marts.rpt_network_ppv_actuals_estimates_forecast": ["model.analytics_engineering_marts.vw_rpt_network_ppv_actuals_estimates_forecast"], "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm": ["model.analytics_engineering_marts.vw_aggr_monthly_network_kpis_vkm"], "model.analytics_engineering_marts.rpt_ppv_final_table": [], "model.analytics_engineering_marts.rpt_network_ppv_liveplusvod": ["model.analytics_engineering_marts.vw_rpt_network_ppv_liveplusvod"], "model.analytics_engineering_marts.rpt_cp_monthly_global_consumption_by_platform": ["model.analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform"], "model.analytics_engineering_marts.rpt_cp_weekly_consolidated_kpi": ["model.analytics_engineering_marts.vw_rpt_cp_weekly_consolidated_kpi"], "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform": ["model.analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform"], "model.analytics_engineering_marts.intm_cp_yt_followers_gain": ["model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership"], "model.analytics_engineering_marts.intm_cp_fb_followers_gain": ["model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership"], "model.analytics_engineering_marts.intm_cp_country_population": ["model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership"], "model.analytics_engineering_marts.intm_cp_ig_followers_gain": ["model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership"], "model.analytics_engineering_marts.vw_aggr_cp_monthly_social_followership": [], "model.analytics_engineering_marts.vw_rpt_cp_monthly_global_consumption_by_platform": [], "model.analytics_engineering_marts.vw_aggr_cp_weekly_consumption_by_platform": [], "model.analytics_engineering_marts.vw_rpt_cp_weekly_consolidated_kpi": [], "model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings": ["model.analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings", "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings", "model.analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings", "model.analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings", "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_month", "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_quarter", "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date", "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_year"], "model.analytics_engineering_marts.rpt_kntr_schedule_vh_data": ["model.analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data", "model.analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data", "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_broadcast_date", "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_dim_date_id"], "model.analytics_engineering_marts.intm_kntr_country_channel_vh": ["model.analytics_engineering_marts.intm_kntr_channel_1", "model.analytics_engineering_marts.intm_kntr_country_vh"], "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule": ["model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule", "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule", "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating_schedule"], "model.analytics_engineering_marts.intm_kntr_monthly_country_vh": ["model.analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh", "model.analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh"], "model.analytics_engineering_marts.intm_kntr_schedule_vh_data": ["model.analytics_engineering_marts.intm_kntr_region_vh", "model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"], "model.analytics_engineering_marts.intm_kntr_channel_1": ["model.analytics_engineering_marts.intm_kntr_schedule_vh_data"], "model.analytics_engineering_marts.intm_kntr_region_vh": ["model.analytics_engineering_marts.rpt_kntr_schedule_vh_data"], "model.analytics_engineering_marts.intm_kntr_country_vh": ["model.analytics_engineering_marts.intm_kntr_channel_1"], "model.analytics_engineering_marts.intm_kntr_wwe_program_rating": ["model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating", "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating", "model.analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating", "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating"], "model.analytics_engineering_marts.intm_kntr_germany_high_income": ["model.analytics_engineering_marts.intm_kntr_schedule_vh_data"], "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_competitive_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_country_vh": [], "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating": [], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating": [], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_wwe_program_rating_schedule": [], "model.analytics_engineering_marts.vw_aggr_kntr_monthly_competitive_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating_schedule": [], "model.analytics_engineering_marts.vw_rpt_kntr_schedule_vh_data": [], "model.analytics_engineering_marts.vw_aggr_kntr_schedule_wca_data": [], "model.analytics_engineering_marts.vw_aggr_kntr_yearly_competitive_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_kntr_weekly_competitive_program_ratings": [], "model.analytics_engineering_marts.vw_aggr_kntr_yearly_wwe_program_rating": [], "model.analytics_engineering_marts.vw_aggr_kntr_quarterly_wwe_program_rating_schedule": [], "model.analytics_engineering_marts.vw_aggr_kntr_weekly_wwe_program_rating": [], "test.analytics_engineering_marts.monetize_summary_test_cases": [], "test.analytics_engineering_marts.ppv_hourly_test_post_load": [], "test.analytics_engineering_marts.ppv_hourly_test_pre_load": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date_id": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_date": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_num": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_broadcast_month_nm": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_commercial_ratings_src_broadcast_network_id": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date_id": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_date": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_broadcast_month_num": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_live_quarterhour_ratings_src_program_id": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date_id": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_date": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_begin_date": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_end_date": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_week_num": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_num": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_broadcast_cal_month_nm": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_wwe_program_ratings_src_program_id": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_broadcast_date": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_mxm_source": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_program_telecast_rpt_starttime": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_min_of_pgm_value": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_showdbid": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_title": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_airdate": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_inpoint_24hr_est": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_inpoint": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_modified_outpoint": [], "test.analytics_engineering_marts.not_null_rpt_nl_daily_minxmin_lite_log_ratings_duration": [], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_week_start_date": [], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_month": [], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_quarter": [], "test.analytics_engineering_marts.not_null_aggr_kntr_weekly_competitive_program_ratings_year": [], "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_dim_date_id": [], "test.analytics_engineering_marts.not_null_rpt_kntr_schedule_vh_data_broadcast_date": [], "source.analytics_engineering_marts.fds_nl.fact_nl_quaterhour_viewership_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings"], "source.analytics_engineering_marts.fds_nl.fact_nl_commercial_viewership_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings"], "source.analytics_engineering_marts.fds_nl.fact_nl_program_viewership_ratings": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "source.analytics_engineering_marts.fds_nl.dim_nl_series": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "source.analytics_engineering_marts.fds_nl.dim_nl_broadcast_network": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings"], "source.analytics_engineering_marts.fds_nl.dim_nl_daypart": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings"], "source.analytics_engineering_marts.fds_nl.fact_nl_timeperiod_viewership_ratings": ["model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings"], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_chart": ["model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart", "model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_chart"], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_hulu_data": ["model.analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data"], "source.analytics_engineering_marts.fds_nl.fact_nl_minxmin_ratings": ["model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution", "model.analytics_engineering_marts.intermediate_nl_minxmin_ratings", "model.analytics_engineering_marts.rpt_nl_daily_minxmin_lite_log_ratings"], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_live_switching_behavior_destination_dist": ["model.analytics_engineering_marts.intermediate_nl_switching_absolute_network_num"], "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_channel_switch": [], "source.analytics_engineering_marts.fds_nl.fact_nl_weekly_overlap_4_way_oob": [], "source.analytics_engineering_marts.fds_nl.rpt_nl_weekly_overlap_derived_4_way_oob": ["model.analytics_engineering_marts.vw_rpt_nl_weekly_overlap_derived_4_way_oob"], "source.analytics_engineering_marts.cdm.dim_date": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings", "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_commercial_ratings", "model.analytics_engineering_marts.rpt_nl_daily_wwe_live_quarterhour_ratings", "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_hulu_wwe_vh_data", "model.analytics_engineering_marts.vw_aggr_nl_monthly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_monthly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_quarterly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_primetime_ratings", "model.analytics_engineering_marts.vw_aggr_nl_yearly_timeperiod_ratings", "model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking"], "source.analytics_engineering_marts.cdm.dim_region_country": [], "source.analytics_engineering_marts.cdm.dim_event": ["model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking"], "source.analytics_engineering_marts.cdm.dim_country_population": [], "source.analytics_engineering_marts.fds_yt.rpt_yt_wwe_engagement_daily": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.fds_yt.rpt_yt_revenue_daily": [], "source.analytics_engineering_marts.fds_yt.youtube_video_metadata_direct": [], "source.analytics_engineering_marts.fds_yt.rpt_yt_demographics_views_daily": [], "source.analytics_engineering_marts.fds_yt.rpt_yt_ugc_engagement_daily": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.fds_yt.agg_yt_monetization_summary": [], "source.analytics_engineering_marts.fds_yt.youtube_annotations": ["model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution"], "source.analytics_engineering_marts.fds_yt.youtube_end_screens": ["model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution"], "source.analytics_engineering_marts.public.yt_amg_content_groups": [], "source.analytics_engineering_marts.fds_nplus.aggr_daily_subscription": ["model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking", "model.analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis"], "source.analytics_engineering_marts.fds_nplus.aggr_nplus_daily_forcast_output": ["model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking", "model.analytics_engineering_marts.vw_aggr_nplus_ppv_week_adds_tracking"], "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_order_status": ["model.analytics_engineering_marts.vw_aggr_monthly_network_perf_renewal_payment_track"], "source.analytics_engineering_marts.fds_nplus.vw_fact_daily_dotcom_viewership": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.fds_nplus.aggr_total_subscription": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.vw_rpt_network_daily_subscription_kpis", "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs"], "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist_prod": [], "source.analytics_engineering_marts.fds_nplus.fact_daily_subscription_status_plus": ["model.analytics_engineering_marts.vw_aggr_daily_network_adds_and_loss_track"], "source.analytics_engineering_marts.fds_nplus.aggr_nplus_monthly_forcast_output": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs", "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs", "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs", "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs", "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs"], "source.analytics_engineering_marts.fds_nplus.aggr_kpi_hist": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.vw_rpt_nplus_monthly_marketing_subs"], "source.analytics_engineering_marts.fds_nplus.aggr_monthly_program_type_viewership": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm"], "source.analytics_engineering_marts.fds_nplus.aggr_monthly_subs_cohort_viewership": ["model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm", "model.analytics_engineering_marts.aggr_monthly_network_kpis_vkm"], "source.analytics_engineering_marts.fds_nplus.fact_daily_content_viewership": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.dwh_read_write.raw_da_weekly_ppv_hourly_comps": [], "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_parent_video": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.fds_fbk.fact_fb_consumption_post": ["model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution"], "source.analytics_engineering_marts.fds_fbk.fact_fb_smfollowership_audience_bycountry": [], "source.analytics_engineering_marts.fds_tw.fact_tw_consumption_post": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform", "model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution"], "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_post": ["model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution"], "source.analytics_engineering_marts.fds_igm.fact_ig_consumption_story": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.fds_igm.fact_ig_smfollowership_audience_bycountry": [], "source.analytics_engineering_marts.fds_sc.fact_sc_consumption_story": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform", "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.fds_sc.fact_scd_consumption_frame": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform", "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.udl_nplus.drvd_intra_hour_quarter_hour_adds": [], "source.analytics_engineering_marts.udl_nplus.raw_da_weekly_ppv_hourly_comps": [], "source.analytics_engineering_marts.udl_nplus.raw_lite_log": ["model.analytics_engineering_marts.aggr_mkt_monthly_owned_media_execution", "model.analytics_engineering_marts.intm_nl_est_time_diff", "model.analytics_engineering_marts.intm_nl_est_time_diff", "model.analytics_engineering_marts.intm_nl_lite_log_est"], "source.analytics_engineering_marts.udl_nl.nielsen_finance_yearly_calendar": ["model.analytics_engineering_marts.rpt_nl_daily_wwe_program_ratings"], "source.analytics_engineering_marts.fds_cp.agg_cp_weekly_consumption_by_platform": [], "source.analytics_engineering_marts.fds_kntr.fact_kntr_wwe_telecast_data": ["model.analytics_engineering_marts.intm_kntr_country_channel_vh", "model.analytics_engineering_marts.intm_kntr_country_vh", "model.analytics_engineering_marts.intm_kntr_germany_high_income", "model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "model.analytics_engineering_marts.intm_kntr_schedule_vh_data", "model.analytics_engineering_marts.intm_kntr_wwe_program_rating", "model.analytics_engineering_marts.intm_kntr_wwe_program_rating_schedule"], "source.analytics_engineering_marts.fds_kntr.fact_kntr_annual_profile": ["model.analytics_engineering_marts.aggr_kntr_weekly_competitive_program_ratings"], "source.analytics_engineering_marts.fds_kntr.kantar_static_country_region_tag": ["model.analytics_engineering_marts.intm_kntr_monthly_country_vh", "model.analytics_engineering_marts.intm_kntr_schedule_vh_data"], "source.analytics_engineering_marts.udl_emm.emm_weekly_log_reference": ["model.analytics_engineering_marts.intm_nl_est_time_diff"], "source.analytics_engineering_marts.udl_tkt.tiktok_weekly_country_consumption": ["model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform", "model.analytics_engineering_marts.aggr_cp_weekly_consumption_by_platform"], "source.analytics_engineering_marts.fds_cpg.dim_cpg_item": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular"], "source.analytics_engineering_marts.fds_cpg.dim_cpg_kit_item": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular"], "source.analytics_engineering_marts.fds_cpg.dim_cpg_order_method": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular"], "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular"], "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_detail_kit_component": ["model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular"], "source.analytics_engineering_marts.fds_cpg.fact_cpg_sales_header": ["model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_kit_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.aggr_cpg_daily_sales", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_free", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_gratis", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_kit_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_free", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_gratis", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_others", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular", "model.analytics_engineering_marts.intm_cpg_sales_regular"], "source.analytics_engineering_marts.dt_stage.prestg_cpg_currency_exchange_rate": [], "source.analytics_engineering_marts.fds_le.brdg_live_event_venue": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_user_defined_codes_f0005": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_business_unit_master_f0006": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_item_master_f4101": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_item_cost_f4105": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_sales_order_history_f42119": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_header_f55m001": [], "source.analytics_engineering_marts.udl_cpg.jde_daily_merch_settlement_detail_f55m002": [], "source.analytics_engineering_marts.hive_udl_pii.restricted_jde_daily_address_by_date_f0116": []}, "metadata": {"project_id": "14f1e7392b04a2593d8c6574c1657d30", "user_id": "8696b062-f049-44ff-b323-13e682754529", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}}